<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>AJAX   用户登录，xml</title>
    <url>/2018/07/07/AJAX%20%20%20%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%EF%BC%8Cxml/</url>
    <content><![CDATA[<h3 id="1-用户登录-AJAX"><a href="#1-用户登录-AJAX" class="headerlink" title="1.用户登录 AJAX"></a><strong>1.用户登录 AJAX</strong></h3><h4 id="login-html-登录表单"><a href="#login-html-登录表单" class="headerlink" title="login.html    登录表单"></a>login.html    登录表单</h4><h6 id="1：填写用户名密码"><a href="#1：填写用户名密码" class="headerlink" title="1：填写用户名密码"></a><strong>1：填写用户名密码</strong></h6><h6 id="2：点击提交按钮—-gt-发送ajax请求，并且接收返回值"><a href="#2：点击提交按钮—-gt-发送ajax请求，并且接收返回值" class="headerlink" title="2：点击提交按钮—&gt;发送ajax请求，并且接收返回值"></a><strong>2：点击提交按钮—&gt;发送ajax请求，并且接收返回值</strong></h6><h3 id="success"><a href="#success" class="headerlink" title="success"></a><strong>success</strong></h3><h6 id="1：提示：alert"><a href="#1：提示：alert" class="headerlink" title="1：提示：alert();"></a><strong>1：提示：alert();</strong></h6><h6 id="2：自动跳转主程序-main-php"><a href="#2：自动跳转主程序-main-php" class="headerlink" title="2：自动跳转主程序 main.php"></a><strong>2：自动跳转主程序 main.php</strong></h6><h3 id="error-提示：alert"><a href="#error-提示：alert" class="headerlink" title="error  提示：alert();"></a><strong>error  提示：alert();</strong></h3><h3 id="login-do-php-处理表单程序"><a href="#login-do-php-处理表单程序" class="headerlink" title="login_do.php      处理表单程序"></a><strong>login_do.php      处理表单程序</strong></h3><h6 id="1：获取表单数据-uname-upwd"><a href="#1：获取表单数据-uname-upwd" class="headerlink" title="1：获取表单数据 uname upwd"></a>1：获取表单数据 uname upwd</h6><h6 id="2：查询数据库"><a href="#2：查询数据库" class="headerlink" title="2：查询数据库"></a>2：查询数据库</h6><h6 id="3：判断"><a href="#3：判断" class="headerlink" title="3：判断"></a>3：判断</h6><h6 id="4：输出-success——登录成功-error——登录失败"><a href="#4：输出-success——登录成功-error——登录失败" class="headerlink" title="4：输出     success——登录成功        error——登录失败"></a>4：输出     success——登录成功        error——登录失败</h6><p><img src="http://imagehosting.biz/images/2018/04/12/_20180413111142.jpg" alt="我是图片"></p>
<hr>
<h3 id="2、使用xhr接收响应信息（不同类型）"><a href="#2、使用xhr接收响应信息（不同类型）" class="headerlink" title="2、使用xhr接收响应信息（不同类型）"></a><strong>2、使用xhr接收响应信息（不同类型）</strong></h3><h5 id="a：text-plain（纯文本：字母、数字、汉字）"><a href="#a：text-plain（纯文本：字母、数字、汉字）" class="headerlink" title="a：text/plain（纯文本：字母、数字、汉字）"></a><strong>a：text/plain（纯文本：字母、数字、汉字）</strong></h5><h5 id="服务器：header-“content-type-text-plain-charset-utf-8”-通常放在php的最后两行"><a href="#服务器：header-“content-type-text-plain-charset-utf-8”-通常放在php的最后两行" class="headerlink" title="服务器：header(“content-type:text/plain;charset=utf-8”) #通常放在php的最后两行"></a>服务器：header(“content-type:text/plain;charset=utf-8”) #通常放在php的最后两行</h5><h5 id="echo“euccess”"><a href="#echo“euccess”" class="headerlink" title="echo“euccess”;"></a>echo“euccess”;</h5><h5 id="客户端：xhr-responseText"><a href="#客户端：xhr-responseText" class="headerlink" title="客户端：xhr.responseText;"></a>客户端：xhr.responseText;</h5><h5 id="b：text-html（html片段，不是完整DOM树）"><a href="#b：text-html（html片段，不是完整DOM树）" class="headerlink" title="b：text/html（html片段，不是完整DOM树）"></a><strong>b：text/html（html片段，不是完整DOM树）</strong></h5><h5 id="服务器：-header-“content-type-text-html-charset-utf-8”-通常放在php的最后几行"><a href="#服务器：-header-“content-type-text-html-charset-utf-8”-通常放在php的最后几行" class="headerlink" title="服务器： header(“content-type:text/html;charset=utf-8”) #通常放在php的最后几行"></a>服务器： header(“content-type:text/html;charset=utf-8”) #通常放在php的最后几行</h5><h5 id="echo“指南大全”"><a href="#echo“指南大全”" class="headerlink" title="echo“指南大全”;"></a>echo“<li>指南</li><li>大全</li>”;</h5><h5 id="客户端：xhr-responseText-1"><a href="#客户端：xhr-responseText-1" class="headerlink" title="客户端：xhr.responseText"></a>客户端：xhr.responseText</h5><h5 id="示例-搜索建议"><a href="#示例-搜索建议" class="headerlink" title="示例:搜索建议"></a><strong>示例:搜索建议</strong></h5><h4 id="1-编写sql-库-dangdang-t-book"><a href="#1-编写sql-库-dangdang-t-book" class="headerlink" title="1:编写sql 库 dangdang/t_book"></a>1:编写sql 库 dangdang/t_book</h4><h4 id="2-添加20行"><a href="#2-添加20行" class="headerlink" title="2:添加20行"></a>2:添加20行</h4><h4 id="3-book-search-html"><a href="#3-book-search-html" class="headerlink" title="3:book_search.html"></a>3:book_search.html</h4><h6 id="输入框中只要有一个输入"><a href="#输入框中只要有一个输入" class="headerlink" title="输入框中只要有一个输入,"></a>输入框中只要有一个输入,</h6><h6 id="onkeyup——按完按键之后（keydown：只有在按着键盘的时候才会执行）"><a href="#onkeyup——按完按键之后（keydown：只有在按着键盘的时候才会执行）" class="headerlink" title="onkeyup——按完按键之后（keydown：只有在按着键盘的时候才会执行）"></a>onkeyup——按完按键之后（keydown：只有在按着键盘的时候才会执行）</h6><h6 id="则发起一个GET异步请求"><a href="#则发起一个GET异步请求" class="headerlink" title="则发起一个GET异步请求,"></a>则发起一个GET异步请求,</h6><h6 id="获取包含当前关键字书名列表"><a href="#获取包含当前关键字书名列表" class="headerlink" title="获取包含当前关键字书名列表"></a>获取包含当前关键字书名列表</h6><h4 id="4-book-search-do-php"><a href="#4-book-search-do-php" class="headerlink" title="4:book_search_do.php"></a>4:book_search_do.php</h4><h6 id="a-获取用户输入关键字-css"><a href="#a-获取用户输入关键字-css" class="headerlink" title="a:获取用户输入关键字 css"></a>a:获取用户输入关键字 css</h6><h6 id="b-查询数据库中所有包含css书名图书"><a href="#b-查询数据库中所有包含css书名图书" class="headerlink" title="b:查询数据库中所有包含css书名图书"></a>b:查询数据库中所有包含css书名图书</h6><h6 id="c-拼一个html片段"><a href="#c-拼一个html片段" class="headerlink" title="c:拼一个html片段"></a>c:拼一个html片段</h6><h6 id="css指南"><a href="#css指南" class="headerlink" title="css指南"></a><li>css指南<li></h6><h6 id="css大全"><a href="#css大全" class="headerlink" title="css大全"></a><li>css大全</li></h6><p><strong>SELECT titleFROM t_book WHERE title like ‘%j%’;</strong><br><strong>%$kw——以kw为结尾；$kw%——以kw为开头；%$kw%——包含kw</strong><br><strong>采用post方法发送请求</strong></p>
<h5 id="改二行加一行"><a href="#改二行加一行" class="headerlink" title="#改二行加一行"></a><strong>#改二行加一行</strong></h5><p><strong>xhr.open(‘POST’,’book_search_do.php’,true);</strong><br><strong>xhr.setRequestHeader(‘Content-Type’,’application/x-www-form-urlencoded’);</strong><br><strong>xhr.send(‘k=v&amp;k1=v1&amp;k2=v2’);</strong><br><img src="http://imagehosting.biz/images/2018/04/12/_20180413111148.jpg" alt="我是图片"><br><img src="http://imagehosting.biz/images/2018/04/12/_20180413111209.jpg" alt="我是图片"></p>
<h3 id="c：application-javascript-js-—不同人群看到的网页内容不同"><a href="#c：application-javascript-js-—不同人群看到的网页内容不同" class="headerlink" title="c：application/javascript(js)—不同人群看到的网页内容不同"></a><strong>c：application/javascript(js)—不同人群看到的网页内容不同</strong></h3><h5 id="一般的js书写在js文件中，使用script标签请求（静态的js）；任何人任何时间访问js都一样。"><a href="#一般的js书写在js文件中，使用script标签请求（静态的js）；任何人任何时间访问js都一样。" class="headerlink" title="一般的js书写在js文件中，使用script标签请求（静态的js）；任何人任何时间访问js都一样。"></a>一般的js书写在js文件中，使用script标签请求（静态的js）；任何人任何时间访问js都一样。</h5><h5 id="在些情况下-需要服务器返回”动态js”——根据客户端不同或访问时间不同；js不同"><a href="#在些情况下-需要服务器返回”动态js”——根据客户端不同或访问时间不同；js不同" class="headerlink" title="在些情况下,需要服务器返回”动态js”——根据客户端不同或访问时间不同；js不同"></a>在些情况下,需要服务器返回”动态js”——根据客户端不同或访问时间不同；js不同</h5><h6 id="服务器：修改服务器响应的主体类型"><a href="#服务器：修改服务器响应的主体类型" class="headerlink" title="服务器：修改服务器响应的主体类型"></a><strong>服务器</strong>：修改服务器响应的主体类型</h6><h5 id="header-‘content-type-application-javascript’"><a href="#header-‘content-type-application-javascript’" class="headerlink" title="header(‘content-type:application/javascript’);"></a>header(‘content-type:application/javascript’);</h5><h5 id="echo-“var-msg-10-alert-msg-”"><a href="#echo-“var-msg-10-alert-msg-”" class="headerlink" title="echo “var msg =10;alert(msg);”;"></a>echo “var msg =10;alert(msg);”;</h5><h6 id="客户端：eval-函数执行字符串格式js程序"><a href="#客户端：eval-函数执行字符串格式js程序" class="headerlink" title="客户端：eval();函数执行字符串格式js程序"></a><strong>客户端</strong>：eval();函数执行字符串格式js程序</h6><h3 id="eval-xhr-responseText-把js解析出来"><a href="#eval-xhr-responseText-把js解析出来" class="headerlink" title="eval(xhr.responseText);把js解析出来"></a>eval(xhr.responseText);把js解析出来</h3><h6 id="实现i18n国际化-internationalization"><a href="#实现i18n国际化-internationalization" class="headerlink" title="实现i18n国际化(internationalization)"></a><strong>实现i18n国际化</strong>(internationalization)</h6><h6 id="页面加载完成-onload"><a href="#页面加载完成-onload" class="headerlink" title="页面加载完成 onload"></a><strong>页面加载完成</strong> onload</h6><h6 id="1-编写php-读取客户端请求头部"><a href="#1-编写php-读取客户端请求头部" class="headerlink" title="1:编写php 读取客户端请求头部"></a><strong>1:编写php 读取客户端请求头部</strong></h6><h6 id="Accept-Language-截取前两个字母-zh-ja-en"><a href="#Accept-Language-截取前两个字母-zh-ja-en" class="headerlink" title="(Accept-Language)截取前两个字母,zh/ja/en"></a>(Accept-Language)截取前两个字母,zh/ja/en</h6><h6 id="读取客户请求所有头部-list-getallheaders"><a href="#读取客户请求所有头部-list-getallheaders" class="headerlink" title="读取客户请求所有头部$list=  getallheaders();"></a>读取客户请求所有头部$list=  getallheaders();</h6><h6 id="从0位开始截取2个字母substr-lang-0-2"><a href="#从0位开始截取2个字母substr-lang-0-2" class="headerlink" title="从0位开始截取2个字母substr($lang,0,2);"></a>从0位开始截取2个字母substr($lang,0,2);</h6><h6 id="客户端的首选语言，据此返回不同语言"><a href="#客户端的首选语言，据此返回不同语言" class="headerlink" title="客户端的首选语言，据此返回不同语言."></a>客户端的首选语言，据此返回不同语言.</h6><h6 id="2-编写html"><a href="#2-编写html" class="headerlink" title="2:编写html"></a><strong>2:编写html</strong></h6><h6 id="待页面加载完成，发起异步请求-GET"><a href="#待页面加载完成，发起异步请求-GET" class="headerlink" title="待页面加载完成，发起异步请求,GET"></a>待页面加载完成，发起异步请求,GET</h6><p><img src="http://imagehosting.biz/images/2018/04/12/_20180413111201.jpg" alt="我是图片"><br><img src="http://imagehosting.biz/images/2018/04/12/_20180413111203.jpg" alt="我是图片"></p>
<h3 id="d：XML"><a href="#d：XML" class="headerlink" title="d：XML"></a><strong>d：XML</strong></h3><h6 id="服务器向客户端发送一个批量的复合数据"><a href="#服务器向客户端发送一个批量的复合数据" class="headerlink" title="服务器向客户端发送一个批量的复合数据"></a>服务器向客户端发送一个批量的复合数据</h6><h6 id="批量复合数据：一个数组，包含多个数组"><a href="#批量复合数据：一个数组，包含多个数组" class="headerlink" title="批量复合数据：一个数组，包含多个数组"></a>批量复合数据：一个数组，包含多个数组</h6><h6 id=""><a href="#" class="headerlink" title="["></a>[</h6><h6 id="id-gt-1-name-gt-’tom1’"><a href="#id-gt-1-name-gt-’tom1’" class="headerlink" title="[id=&gt;1,name=&gt;’tom1’],"></a>[id=&gt;1,name=&gt;’tom1’],</h6><h6 id="id-gt-2-name-gt-’tom2’"><a href="#id-gt-2-name-gt-’tom2’" class="headerlink" title="[id=&gt;2,name=&gt;’tom2’],"></a>[id=&gt;2,name=&gt;’tom2’],</h6><h6 id="-1"><a href="#-1" class="headerlink" title="]"></a>]</h6><h6 id="1：text-html"><a href="#1：text-html" class="headerlink" title="1：text/html"></a>1：text/html</h6><h6 id="1tom1"><a href="#1tom1" class="headerlink" title="1tom1"></a><tr><td>1</td><td>tom1</td></tr></h6><h6 id="2tom2"><a href="#2tom2" class="headerlink" title="2tom2"></a><tr><td>2</td><td>tom2</td></tr></h6><h6 id="2：application-xml"><a href="#2：application-xml" class="headerlink" title="2：application/xml"></a>2：application/xml</h6><h6 id="xml：通用性少"><a href="#xml：通用性少" class="headerlink" title="xml：通用性少"></a>xml：通用性少</h6><h6 id="html：超文本标记语言，所有标签预定义号，用于描述一个网页"><a href="#html：超文本标记语言，所有标签预定义号，用于描述一个网页" class="headerlink" title="html：超文本标记语言，所有标签预定义号，用于描述一个网页"></a>html：超文本标记语言，所有标签预定义号，用于描述一个网页<h1></h1><h6></h6></h6><h6 id="xml：可扩展的标签语言，所有标签自定义"><a href="#xml：可扩展的标签语言，所有标签自定义" class="headerlink" title="xml：可扩展的标签语言，所有标签自定义"></a>xml：可扩展的标签语言，所有标签自定义</h6><h6 id="xml语法要求"><a href="#xml语法要求" class="headerlink" title="xml语法要求"></a>xml语法要求</h6><h6 id="1：xml文档声明（第一行）"><a href="#1：xml文档声明（第一行）" class="headerlink" title="1：xml文档声明（第一行）"></a>1：xml文档声明（第一行）</h6><h6 id="-2"><a href="#-2" class="headerlink" title=""></a><?xml version=”1.0” encoding=”utf-8”?></h6><h6 id="2：整篇xml字符串有且只能有一个根元素"><a href="#2：整篇xml字符串有且只能有一个根元素" class="headerlink" title="2：整篇xml字符串有且只能有一个根元素"></a>2：整篇xml字符串有且只能有一个根元素</h6><h6 id="3：标签又开始就必须要有结束，开始结束标签必须完全相同"><a href="#3：标签又开始就必须要有结束，开始结束标签必须完全相同" class="headerlink" title="3：标签又开始就必须要有结束，开始结束标签必须完全相同"></a>3：标签又开始就必须要有结束，开始结束标签必须完全相同<book></book></h6><h6 id="4：标签可以嵌套，但不能交叉"><a href="#4：标签可以嵌套，但不能交叉" class="headerlink" title="4：标签可以嵌套，但不能交叉"></a>4：标签可以嵌套，但不能交叉</h6><h6 id="5：标签可以有任意属性，属性值必须用双引号括起来"><a href="#5：标签可以有任意属性，属性值必须用双引号括起来" class="headerlink" title="5：标签可以有任意属性，属性值必须用双引号括起来"></a>5：标签可以有任意属性，属性值必须用双引号括起来</h6><p><img src="http://imagehosting.biz/images/2018/04/12/_20180413111206.jpg" alt="我是图片"><br><img src="http://imagehosting.biz/images/2018/04/12/_20180413111209.jpg" alt="我是图片"><br><img src="http://imagehosting.biz/images/2018/04/12/_20180413111212.jpg" alt="我是图片"></p>
]]></content>
      <categories>
        <category>AJAX</category>
      </categories>
  </entry>
  <entry>
    <title>AJAX jquery简化ajax（工作重点）</title>
    <url>/2018/07/07/AJAX%20%20jquery%E7%AE%80%E5%8C%96ajax%EF%BC%88%E5%B7%A5%E4%BD%9C%E9%87%8D%E7%82%B9%EF%BC%89/</url>
    <content><![CDATA[<h3 id="简洁方式完成ajax任务——jquery"><a href="#简洁方式完成ajax任务——jquery" class="headerlink" title="简洁方式完成ajax任务——jquery"></a><strong>简洁方式完成ajax任务——jquery</strong></h3><h5 id="jquery方法：功能：发送一个ajax请求（php与html不需要修改响应头）"><a href="#jquery方法：功能：发送一个ajax请求（php与html不需要修改响应头）" class="headerlink" title="#jquery方法：功能：发送一个ajax请求（php与html不需要修改响应头）"></a><strong>#jquery方法：功能：发送一个ajax请求（php与html不需要修改响应头）</strong></h5><h5 id="url-请求地址"><a href="#url-请求地址" class="headerlink" title="#url 请求地址"></a><strong>#url 请求地址</strong></h5><h5 id="function-data-回调函数–-gt-当请求结束后自动调用函数"><a href="#function-data-回调函数–-gt-当请求结束后自动调用函数" class="headerlink" title="#function(data){} 回调函数–&gt;当请求结束后自动调用函数"></a><strong>#function(data){} 回调函数–&gt;当请求结束后自动调用函数</strong></h5><h5 id="data-服务器端的响应主体"><a href="#data-服务器端的响应主体" class="headerlink" title="#data 服务器端的响应主体"></a><strong>#data 服务器端的响应主体</strong></h5><h2 id="get-url-function-data"><a href="#get-url-function-data" class="headerlink" title="$.get(url,function(data){});"></a><strong>$.get(url,function(data){});</strong></h2><p><img src="http://imagehosting.biz/images/2018/04/13/_20180413135516.jpg" alt="我是图片"></p>
<h5 id="总结："><a href="#总结：" class="headerlink" title="总结："></a><strong>总结</strong>：</h5><h5 id="1：创建库"><a href="#1：创建库" class="headerlink" title="1：创建库"></a><strong>1：创建库</strong></h5><h5 id="2：创建php"><a href="#2：创建php" class="headerlink" title="2：创建php{}"></a><strong>2：创建php{}</strong></h5><h5 id="3：执行php-地址栏输入回车"><a href="#3：执行php-地址栏输入回车" class="headerlink" title="3：执行php{地址栏输入回车}"></a><strong>3：执行php{地址栏输入回车}</strong></h5><h5 id="4：书写html-get"><a href="#4：书写html-get" class="headerlink" title="4：书写html $.get"></a><strong>4：书写html $.get</strong></h5><hr>
<h3 id="2、理论"><a href="#2、理论" class="headerlink" title="2、理论"></a><strong>2、理论</strong></h3><h5 id="get发送的数据，中文有可能会出现乱码，但是最新版本的浏览器可以直接编译"><a href="#get发送的数据，中文有可能会出现乱码，但是最新版本的浏览器可以直接编译" class="headerlink" title="get发送的数据，中文有可能会出现乱码，但是最新版本的浏览器可以直接编译"></a><strong>get发送的数据，中文有可能会出现乱码，但是最新版本的浏览器可以直接编译</strong></h5><h5 id="jquery解决方案"><a href="#jquery解决方案" class="headerlink" title="jquery解决方案"></a><strong>jquery解决方案</strong></h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">$.get();         $.post();        $.ajax();        $(选择器).load();    $.getScript();              $.getJSON();</span><br></pre></td></tr></table></figure>
<h5 id="post-含义：发送一个ajax-post请求，并在请求主体中提交请求数据，如果服务器返回数据"><a href="#post-含义：发送一个ajax-post请求，并在请求主体中提交请求数据，如果服务器返回数据" class="headerlink" title="$.post();含义：发送一个ajax post请求，并在请求主体中提交请求数据，如果服务器返回数据"></a><strong>$.post();含义：发送一个ajax post请求，并在请求主体中提交请求数据，如果服务器返回数据</strong></h5><h5 id="在回调函数中接收"><a href="#在回调函数中接收" class="headerlink" title="在回调函数中接收"></a><strong>在回调函数中接收</strong></h5><h5 id="语法：-post-url-data-fn"><a href="#语法：-post-url-data-fn" class="headerlink" title="语法：$.post(url,data,fn);"></a><strong>语法：$.post(url,data,fn);</strong></h5><h5 id="post-‘3-php’-’age-19-amp-id-3’-fn"><a href="#post-‘3-php’-’age-19-amp-id-3’-fn" class="headerlink" title="$.post(‘3.php’,’age=19&amp;id=3’,fn);"></a><strong>$.post(‘3.php’,’age=19&amp;id=3’,fn);</strong></h5><h5 id="post-‘3-php’-age-19-id-3-fn"><a href="#post-‘3-php’-age-19-id-3-fn" class="headerlink" title="$.post(‘3.php’,{age:19,id:3},fn);"></a><strong>$.post(‘3.php’,{age:19,id:3},fn);</strong></h5><p><img src="http://imagehosting.biz/images/2018/04/13/_20180413135507.jpg" alt="我是图片"><br><img src="http://imagehosting.biz/images/2018/04/13/_20180413140646.jpg" alt="我是图片"></p>
<h2 id="ajax-（重点）"><a href="#ajax-（重点）" class="headerlink" title="$.ajax(); （重点）"></a><strong>$.ajax(); （重点）</strong></h2><h4 id="万能的ajax函数，提供非常多的可选项，可以处理各种情况-前面函数都是-ajax-简化版本"><a href="#万能的ajax函数，提供非常多的可选项，可以处理各种情况-前面函数都是-ajax-简化版本" class="headerlink" title="万能的ajax函数，提供非常多的可选项，可以处理各种情况 . 前面函数都是$.ajax()简化版本"></a><strong>万能的ajax函数，提供非常多的可选项，可以处理各种情况 . 前面函数都是$.ajax()简化版本</strong></h4><h4 id="标准语法"><a href="#标准语法" class="headerlink" title="标准语法"></a><strong>标准语法</strong></h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    type:&#39;GET&#39;,   &#x2F;POST&#x2F;PUT&#x2F;DELETE&#x2F;HEAD</span><br><span class="line">    url:&#39;x.php&#39;,</span><br><span class="line">    data:&#39;k&#x3D;v&amp;k&#x3D;v&#39;, &#x2F;&#x2F;提交服务器的请求数据</span><br><span class="line">    beforeSend:fn,  &#x2F;&#x2F;请求消息发送之前回调函数</span><br><span class="line">    success:fn,     &#x2F;&#x2F;响应完成且成功回调</span><br><span class="line">    error:fn,       &#x2F;&#x2F;响应完成但有问题回调</span><br><span class="line">    complete:fn     &#x2F;&#x2F;响应完成后回调</span><br><span class="line">    &#x2F;&#x2F;(无论成功失败都调用)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><img src="http://imagehosting.biz/images/2018/04/13/_20180413135519.jpg" alt="我是图片"></p>
]]></content>
      <categories>
        <category>AJAX</category>
      </categories>
  </entry>
  <entry>
    <title>AJAX HTTP协议响应、AJAX核心对象.</title>
    <url>/2018/07/06/AJAX%20HTTP%E5%8D%8F%E8%AE%AE%E5%93%8D%E5%BA%94%E3%80%81AJAX%E6%A0%B8%E5%BF%83%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<h3 id="八种请求方法有哪些"><a href="#八种请求方法有哪些" class="headerlink" title="八种请求方法有哪些?"></a>八种请求方法有哪些?</h3><p><img src="http://imagehosting.biz/images/2018/04/12/_20180413103354.jpg" alt="我是图片"></p>
<h4 id="GET请求与POST请求区别？"><a href="#GET请求与POST请求区别？" class="headerlink" title="GET请求与POST请求区别？"></a><strong>GET请求与POST请求区别？</strong></h4><h4 id="1、语义"><a href="#1、语义" class="headerlink" title="1、语义"></a><strong>1、语义</strong></h4><h6 id="GET客户端想获取服务器指定资源"><a href="#GET客户端想获取服务器指定资源" class="headerlink" title="GET客户端想获取服务器指定资源"></a><strong>GET客户端想获取服务器指定资源</strong></h6><h6 id="POST客户端向传递数据给服务器"><a href="#POST客户端向传递数据给服务器" class="headerlink" title="POST客户端向传递数据给服务器"></a><strong>POST客户端向传递数据给服务器</strong></h6><h4 id="2、安全级别-解决：加密"><a href="#2、安全级别-解决：加密" class="headerlink" title="2、安全级别         解决：加密"></a><strong>2、安全级别         解决：加密</strong></h4><h6 id="GET与POST都不安全"><a href="#GET与POST都不安全" class="headerlink" title="GET与POST都不安全"></a><strong>GET与POST都不安全</strong></h6><h4 id="3、数据长度"><a href="#3、数据长度" class="headerlink" title="3、数据长度"></a><strong>3、数据长度</strong></h4><h6 id="GET：1KB-请求在请求起始行后添加-id-1-amp-aget-19"><a href="#GET：1KB-请求在请求起始行后添加-id-1-amp-aget-19" class="headerlink" title="GET：1KB     请求在请求起始行后添加 ?id=1&amp;aget=19"></a><strong>GET：1KB     请求在请求起始行后添加 ?id=1&amp;aget=19</strong></h6><h6 id="POST：没限制-请求在请求主体中-data"><a href="#POST：没限制-请求在请求主体中-data" class="headerlink" title="POST：没限制     请求在请求主体中 data"></a><strong>POST：没限制     请求在请求主体中 data</strong></h6><h4 id="4、是否需要编码"><a href="#4、是否需要编码" class="headerlink" title="4、是否需要编码"></a><strong>4、是否需要编码</strong></h4><h6 id="GET没有编码——中文乱码"><a href="#GET没有编码——中文乱码" class="headerlink" title="GET没有编码——中文乱码"></a><strong>GET没有编码——中文乱码</strong></h6><h6 id="POST自动编码——不容易出现中文乱码"><a href="#POST自动编码——不容易出现中文乱码" class="headerlink" title="POST自动编码——不容易出现中文乱码"></a><strong>POST自动编码——不容易出现中文乱码</strong></h6><h4 id="5、如何发起"><a href="#5、如何发起" class="headerlink" title="5、如何发起"></a><strong>5、如何发起</strong></h4><p><strong>GET</strong><br>    <strong>1：浏览器地址输入一个URL 回车</strong><br>    <strong>2：标签 a href /img src 都会有请求</strong><br>    <strong>3：表单 GET</strong><br>    <strong>4：JS  location.href=”1.html”;</strong><br>    <strong>5：AJAX GET</strong><br><strong>POST</strong><br>    <strong>1：表单 POST</strong><br>    <strong>2：AJAX POST</strong></p>
<h4 id="如何使用http协议相关知识进行网页访问优化"><a href="#如何使用http协议相关知识进行网页访问优化" class="headerlink" title="如何使用http协议相关知识进行网页访问优化"></a><strong>如何使用http协议相关知识进行网页访问优化</strong></h4><h4 id="提示：web访问优化可以从很多方面考虑"><a href="#提示：web访问优化可以从很多方面考虑" class="headerlink" title="提示：web访问优化可以从很多方面考虑"></a><strong>提示：web访问优化可以从很多方面考虑</strong></h4><h4 id="如：数据库-php-web服务器-网速-传输数据-浏览器解析速（html-css-js…）"><a href="#如：数据库-php-web服务器-网速-传输数据-浏览器解析速（html-css-js…）" class="headerlink" title="如：数据库/php/web服务器/网速/传输数据/浏览器解析速（html/css/js…）"></a><strong>如：数据库/php/web服务器/网速/传输数据/浏览器解析速（html/css/js…）</strong></h4><h4 id="从http请求和响应角度考虑："><a href="#从http请求和响应角度考虑：" class="headerlink" title="从http请求和响应角度考虑："></a><strong>从http请求和响应角度考虑：</strong></h4><h5 id="1：域名解析（DNS）-——减少引用外部网站资源"><a href="#1：域名解析（DNS）-——减少引用外部网站资源" class="headerlink" title="1：域名解析（DNS） ——减少引用外部网站资源"></a><strong>1：域名解析（DNS） ——减少引用外部网站资源</strong></h5><h6 id="尽可能减少域名的解析次数——减少跨站外部资源的引用。"><a href="#尽可能减少域名的解析次数——减少跨站外部资源的引用。" class="headerlink" title="尽可能减少域名的解析次数——减少跨站外部资源的引用。"></a><strong>尽可能减少域名的解析次数——减少跨站外部资源的引用。</strong></h6><h6 id="www-baidu-com-191-10-1-1"><a href="#www-baidu-com-191-10-1-1" class="headerlink" title="www.baidu.com 191.10.1.1"></a><strong><a href="http://www.baidu.com/">www.baidu.com</a> 191.10.1.1</strong></h6><h6 id="减少引用外部网站的次数"><a href="#减少引用外部网站的次数" class="headerlink" title="减少引用外部网站的次数"></a><strong>减少引用外部网站的次数</strong></h6><p><img src="http://imagehosting.biz/images/2018/04/12/_20180413103358.jpg" alt="我是图片"></p>
<h5 id="2：创建连接——持久连接"><a href="#2：创建连接——持久连接" class="headerlink" title="2：创建连接——持久连接"></a><strong>2：创建连接——持久连接</strong></h5><h6 id="努力减少连接创建次数-使用："><a href="#努力减少连接创建次数-使用：" class="headerlink" title="努力减少连接创建次数-使用："></a><strong>努力减少连接创建次数-使用：</strong></h6><h6 id="Connection-keep-alive启动持久连接"><a href="#Connection-keep-alive启动持久连接" class="headerlink" title="Connection:keep-alive启动持久连接"></a><strong>Connection:keep-alive启动持久连接</strong></h6><h5 id="3：发送请求——CSS精灵图"><a href="#3：发送请求——CSS精灵图" class="headerlink" title="3：发送请求——CSS精灵图"></a><strong>3：发送请求——CSS精灵图</strong></h5><h6 id="尽量减少请求次数，合理进行资源合并，合理使用缓存——使用css精灵图，减少多张图片"><a href="#尽量减少请求次数，合理进行资源合并，合理使用缓存——使用css精灵图，减少多张图片" class="headerlink" title="尽量减少请求次数，合理进行资源合并，合理使用缓存——使用css精灵图，减少多张图片"></a><strong>尽量减少请求次数，合理进行资源合并，合理使用缓存——使用css精灵图，减少多张图片</strong></h6><h5 id="4：等待响应——更换服务器"><a href="#4：等待响应——更换服务器" class="headerlink" title="4：等待响应——更换服务器"></a><strong>4：等待响应——更换服务器</strong></h5><h6 id="提高服务器运行速度——提高数据的运算及查询速度"><a href="#提高服务器运行速度——提高数据的运算及查询速度" class="headerlink" title="提高服务器运行速度——提高数据的运算及查询速度"></a><strong>提高服务器运行速度——提高数据的运算及查询速度</strong></h6><h5 id="5：接收响应——压缩代码"><a href="#5：接收响应——压缩代码" class="headerlink" title="5：接收响应——压缩代码"></a><strong>5：接收响应——压缩代码</strong></h5><h6 id="尽可能减少响应数据长度——删除空白字符，启用压缩"><a href="#尽可能减少响应数据长度——删除空白字符，启用压缩" class="headerlink" title="尽可能减少响应数据长度——删除空白字符，启用压缩"></a><strong>尽可能减少响应数据长度——删除空白字符，启用压缩</strong></h6><h6 id="在线压缩http-tool-oschina-net-jscompress"><a href="#在线压缩http-tool-oschina-net-jscompress" class="headerlink" title="#在线压缩http://tool.oschina.net/jscompress/"></a><strong>#在线压缩<a href="http://tool.oschina.net/jscompress/">http://tool.oschina.net/jscompress/</a></strong></h6><h6 id="大批量js压缩YUI-Compressor-java"><a href="#大批量js压缩YUI-Compressor-java" class="headerlink" title="#大批量js压缩YUI Compressor(java)"></a><strong>#大批量js压缩YUI Compressor(java)</strong></h6><hr>
<h4 id="1、如何修改http消息头部"><a href="#1、如何修改http消息头部" class="headerlink" title="1、如何修改http消息头部"></a><strong>1、如何修改http消息头部</strong></h4><h4 id="1：修改web服务器配置文件"><a href="#1：修改web服务器配置文件" class="headerlink" title="1：修改web服务器配置文件"></a><strong>1：修改web服务器配置文件</strong></h4><h4 id="2：在html中文件-meta"><a href="#2：在html中文件-meta" class="headerlink" title="2：在html中文件 meta"></a><strong>2：在html中文件 meta</strong></h4><h5 id="lt-meta-http-equiv-”content-type”-content-”text-html-charset-utf-8”-gt"><a href="#lt-meta-http-equiv-”content-type”-content-”text-html-charset-utf-8”-gt" class="headerlink" title="&lt;meta http-equiv=”content-type” content=”text/html;charset=utf-8”&gt;"></a>&lt;meta http-equiv=”content-type” content=”text/html;charset=utf-8”&gt;</h5><h5 id="3：使用服务器端语言设置响应消息"><a href="#3：使用服务器端语言设置响应消息" class="headerlink" title="3：使用服务器端语言设置响应消息"></a><strong>3：使用服务器端语言设置响应消息</strong></h5><h5 id="php的一个函数-header-“content-type-text-html-charset-utf-8”"><a href="#php的一个函数-header-“content-type-text-html-charset-utf-8”" class="headerlink" title="php的一个函数 header(“content-type:text/html;charset=utf-8”);"></a>php的一个函数 header(“content-type:text/html;charset=utf-8”);</h5><h5 id="2、AJAX"><a href="#2、AJAX" class="headerlink" title="2、AJAX"></a><strong>2、AJAX</strong></h5><h5 id="用户注册功能："><a href="#用户注册功能：" class="headerlink" title="用户注册功能："></a><strong>用户注册功能：</strong></h5><h6 id="user-reg-html-表单-用户名-密码-提交"><a href="#user-reg-html-表单-用户名-密码-提交" class="headerlink" title="user_reg.html{表单:用户名/密码/提交}"></a><strong>user_reg.html{表单:用户名/密码/提交}</strong></h6><h6 id="user-reg-do-php-获取参数-添加数据库"><a href="#user-reg-do-php-获取参数-添加数据库" class="headerlink" title="user_reg.do.php{获取参数/添加数据库}"></a><strong>user_reg.do.php{获取参数/添加数据库}</strong></h6><h5 id="2-1-AJAX：异步javascript-and-xml"><a href="#2-1-AJAX：异步javascript-and-xml" class="headerlink" title="2.1 AJAX：异步javascript and xml"></a><strong>2.1 AJAX：异步javascript and xml</strong></h5><h6 id="异步：服务器和客户端做自己的事（不需要相互等待）"><a href="#异步：服务器和客户端做自己的事（不需要相互等待）" class="headerlink" title="异步：服务器和客户端做自己的事（不需要相互等待）"></a><strong>异步：服务器和客户端做自己的事（不需要相互等待）</strong></h6><h6 id="同步：服务器和客户端做同一件事儿（相互需要等待）"><a href="#同步：服务器和客户端做同一件事儿（相互需要等待）" class="headerlink" title="同步：服务器和客户端做同一件事儿（相互需要等待）"></a><strong>同步：服务器和客户端做同一件事儿（相互需要等待）</strong></h6><h3 id="2002年左右-由Google在搜索引擎中"><a href="#2002年左右-由Google在搜索引擎中" class="headerlink" title="2002年左右,由Google在搜索引擎中,"></a>2002年左右,由Google在搜索引擎中,</h3><h3 id="提出GoogleSuggest效果-提出AJAX"><a href="#提出GoogleSuggest效果-提出AJAX" class="headerlink" title="提出GoogleSuggest效果,提出AJAX"></a><strong>提出GoogleSuggest效果,提出AJAX</strong></h3><h4 id="AJAX-html-css-js-dom-xml-XMLHttpRequest"><a href="#AJAX-html-css-js-dom-xml-XMLHttpRequest" class="headerlink" title="AJAX=(html+css+js+dom+xml+XMLHttpRequest)"></a><strong>AJAX=(html+css+js+dom+xml+XMLHttpRequest)</strong></h4><h4 id="ajax作用：实现在无刷新无提交的情况下页面内容布局更新"><a href="#ajax作用：实现在无刷新无提交的情况下页面内容布局更新" class="headerlink" title="ajax作用：实现在无刷新无提交的情况下页面内容布局更新"></a><strong>ajax作用：实现在无刷新无提交的情况下页面内容布局更新</strong></h4><h4 id="常见应用场合：聊天室，在线走势，搜索建议，移动应用"><a href="#常见应用场合：聊天室，在线走势，搜索建议，移动应用" class="headerlink" title="常见应用场合：聊天室，在线走势，搜索建议，移动应用"></a><strong>常见应用场合：聊天室，在线走势，搜索建议，移动应用</strong></h4><h5 id="AJAX-核心对象-（XMLHttpRequest）"><a href="#AJAX-核心对象-（XMLHttpRequest）" class="headerlink" title="AJAX 核心对象 （XMLHttpRequest）"></a><strong>AJAX 核心对象 （XMLHttpRequest）</strong></h5><h5 id="XHR-对象作用：向web服务器发送异步请求，并接受返回的响应消息"><a href="#XHR-对象作用：向web服务器发送异步请求，并接受返回的响应消息" class="headerlink" title="XHR 对象作用：向web服务器发送异步请求，并接受返回的响应消息"></a><strong>XHR 对象作用：向web服务器发送异步请求，并接受返回的响应消息</strong></h5><h3 id="构建XHR对象——（可以直接使用：chrome-firefox-safari-IE9-）"><a href="#构建XHR对象——（可以直接使用：chrome-firefox-safari-IE9-）" class="headerlink" title="构建XHR对象——（可以直接使用：chrome/firefox/safari/IE9+）"></a><strong>构建XHR对象——（可以直接使用：chrome/firefox/safari/IE9+）</strong></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(window.XMLHttpRequest)&#123;</span><br><span class="line">       varxhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;<span class="comment">//IE8-</span></span><br><span class="line">       varxhr = <span class="keyword">new</span> ActiveXObject(“Microsoft.XMLHTTP”);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="由于IE8市场份额比较低，所以可以不用考虑"><a href="#由于IE8市场份额比较低，所以可以不用考虑" class="headerlink" title="由于IE8市场份额比较低，所以可以不用考虑"></a>由于IE8市场份额比较低，所以可以不用考虑</h5><h5 id="XHR对象常用成员"><a href="#XHR对象常用成员" class="headerlink" title="XHR对象常用成员"></a>XHR对象常用成员</h5><hr>
<h3 id="第一个属性"><a href="#第一个属性" class="headerlink" title="第一个属性"></a><strong>第一个属性</strong></h3><h4 id="readState：表示XHR对象当前状态，不能手工赋值，其值会随着请求和响应的过程进行自动的改变，可获取值；"><a href="#readState：表示XHR对象当前状态，不能手工赋值，其值会随着请求和响应的过程进行自动的改变，可获取值；" class="headerlink" title="readState：表示XHR对象当前状态，不能手工赋值，其值会随着请求和响应的过程进行自动的改变，可获取值；"></a><strong>readState：表示XHR对象当前状态，不能手工赋值，其值会随着请求和响应的过程进行自动的改变，可获取值；</strong></h4><h4 id="取值范围："><a href="#取值范围：" class="headerlink" title="取值范围："></a><strong>取值范围：</strong></h4><p><strong>0 ：UNSENT 请求信息尚未发送</strong><br><strong>1 ：OPENED XHR已经打开到web服务器连接</strong><br><strong>2 ：HEADERS_RECEIVED XHR已接收响应信息头部</strong><br><strong>3 ：LOADING XHR正在加载响应信息主体</strong><br><strong>4：DONE XHR接收完成响应消息</strong><br><img src="http://imagehosting.biz/images/2018/04/12/_20180413103415.jpg" alt="我是图片"></p>
<h3 id="第二个属性"><a href="#第二个属性" class="headerlink" title="第二个属性"></a><strong>第二个属性</strong></h3><h6 id="status：状态码，服务器响应消息状态码（200-304，404-500）"><a href="#status：状态码，服务器响应消息状态码（200-304，404-500）" class="headerlink" title="status：状态码，服务器响应消息状态码（200,304，404,500）"></a><strong>status：状态码，服务器响应消息状态码（200,304，404,500）</strong></h6><h3 id="第三个属性"><a href="#第三个属性" class="headerlink" title="第三个属性"></a><strong>第三个属性</strong></h3><h6 id="responseText：保存着服务器响应消息主体（text文本）"><a href="#responseText：保存着服务器响应消息主体（text文本）" class="headerlink" title="responseText：保存着服务器响应消息主体（text文本）"></a><strong>responseText：保存着服务器响应消息主体（text文本）</strong></h6><h6 id="消息主体为php文件中-echo的部分"><a href="#消息主体为php文件中-echo的部分" class="headerlink" title="消息主体为php文件中 echo的部分"></a><strong>消息主体为php文件中 echo的部分</strong></h6><p><img src="http://imagehosting.biz/images/2018/04/12/_20180413103418.jpg" alt="我是图片"></p>
<h3 id="第四个属性"><a href="#第四个属性" class="headerlink" title="第四个属性"></a><strong>第四个属性</strong></h3><h6 id="responseXML：保存服务器响应消息主体（xml）"><a href="#responseXML：保存服务器响应消息主体（xml）" class="headerlink" title="responseXML：保存服务器响应消息主体（xml）"></a><strong>responseXML：保存服务器响应消息主体（xml）</strong></h6><hr>
<h3 id="成员方法"><a href="#成员方法" class="headerlink" title="成员方法"></a><strong>成员方法</strong></h3><h5 id="open-method，url，isAsyn-打开服务器的链接"><a href="#open-method，url，isAsyn-打开服务器的链接" class="headerlink" title="open(method，url，isAsyn)打开服务器的链接"></a><strong>open(method，url，isAsyn)打开服务器的链接</strong></h5><h6 id="method：请求方法-GET-POST"><a href="#method：请求方法-GET-POST" class="headerlink" title="method：请求方法 GET POST"></a><strong>method：请求方法 GET POST</strong></h6><h6 id="url：-请求地址"><a href="#url：-请求地址" class="headerlink" title="url： 请求地址"></a><strong>url： 请求地址</strong></h6><h6 id="isAsyn：true-异步请求（默认）-false-同步请求"><a href="#isAsyn：true-异步请求（默认）-false-同步请求" class="headerlink" title="isAsyn：true 异步请求（默认）   false 同步请求"></a><strong>isAsyn：true 异步请求（默认）   false 同步请求</strong></h6><h4 id="send-body-把请求消息发送给web服务器，默认填写send-null"><a href="#send-body-把请求消息发送给web服务器，默认填写send-null" class="headerlink" title="send(body)把请求消息发送给web服务器，默认填写send(null)"></a><strong>send(body)把请求消息发送给web服务器，默认填写send(null)</strong></h4><h3 id="成员事件"><a href="#成员事件" class="headerlink" title="成员事件"></a><strong>成员事件</strong></h3><h5 id="onreadystatechange：当readyState值每次改变时都会触发该事件"><a href="#onreadystatechange：当readyState值每次改变时都会触发该事件" class="headerlink" title="onreadystatechange：当readyState值每次改变时都会触发该事件"></a><strong>onreadystatechange：当readyState值每次改变时都会触发该事件</strong></h5><h2 id="使用XHR发送异步请求步骤："><a href="#使用XHR发送异步请求步骤：" class="headerlink" title="使用XHR发送异步请求步骤："></a>使用XHR发送异步请求步骤：</h2><h3 id="1：创建XHR对象"><a href="#1：创建XHR对象" class="headerlink" title="1：创建XHR对象"></a><strong>1：创建XHR对象</strong></h3><h5 id="var-xhr-new-XMLHttpRequest"><a href="#var-xhr-new-XMLHttpRequest" class="headerlink" title="var xhr = new XMLHttpRequest();"></a><strong>var xhr = new XMLHttpRequest();</strong></h5><h3 id="2：监听XHR的状态改变；如果状态码200-如果接收完成，获取数据"><a href="#2：监听XHR的状态改变；如果状态码200-如果接收完成，获取数据" class="headerlink" title="2：监听XHR的状态改变；如果状态码200 如果接收完成，获取数据"></a><strong>2：监听XHR的状态改变；如果状态码200 如果接收完成，获取数据</strong></h3><h5 id="xhr-onreadystatechange-function"><a href="#xhr-onreadystatechange-function" class="headerlink" title="xhr.onreadystatechange= function(){}"></a><strong>xhr.onreadystatechange= function(){}</strong></h5><h3 id="3：连接web服务器"><a href="#3：连接web服务器" class="headerlink" title="3：连接web服务器"></a><strong>3：连接web服务器</strong></h3><h5 id="xhr-open"><a href="#xhr-open" class="headerlink" title="xhr.open();"></a><strong>xhr.open();</strong></h5><h3 id="4：发送请求服务器"><a href="#4：发送请求服务器" class="headerlink" title="4：发送请求服务器"></a><strong>4：发送请求服务器</strong></h3><h5 id="xhr-send"><a href="#xhr-send" class="headerlink" title="xhr.send();"></a><strong>xhr.send();</strong></h5><p><img src="http://imagehosting.biz/images/2018/04/12/_20180413103422.jpg" alt="我是图片"></p>
]]></content>
      <categories>
        <category>AJAX</category>
      </categories>
  </entry>
  <entry>
    <title>AJAX 服务器、mysql语句增删改查</title>
    <url>/2018/07/04/AJAX%20%20%E6%9C%8D%E5%8A%A1%E5%99%A8%E3%80%81mysql%E8%AF%AD%E5%8F%A5%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/</url>
    <content><![CDATA[<h2 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h2><h3 id="服务器-能够在网络系统中提供各种服务的软件与硬件集合。-网页传送-收发邮件-视频，语音"><a href="#服务器-能够在网络系统中提供各种服务的软件与硬件集合。-网页传送-收发邮件-视频，语音" class="headerlink" title="服务器:能够在网络系统中提供各种服务的软件与硬件集合。 (网页传送,收发邮件,视频，语音)"></a><strong>服务器</strong>:能够在网络系统中提供各种服务的软件与硬件集合。 (网页传送,收发邮件,视频，语音)</h3><h3 id="硬件服务器：高性能硬件（小型机、中型机、大型机、PC…）"><a href="#硬件服务器：高性能硬件（小型机、中型机、大型机、PC…）" class="headerlink" title="硬件服务器：高性能硬件（小型机、中型机、大型机、PC…）"></a><strong>硬件服务器</strong>：高性能硬件（小型机、中型机、大型机、PC…）</h3><h3 id="软件服务器：稳定高效服务-web-ftp-email-db"><a href="#软件服务器：稳定高效服务-web-ftp-email-db" class="headerlink" title="软件服务器：稳定高效服务(web/ftp/email/db..)"></a><strong>软件服务器</strong>：稳定高效服务(web/ftp/email/db..)</h3><h3 id="协议-域名或IP-端口号"><a href="#协议-域名或IP-端口号" class="headerlink" title="协议://域名或IP:端口号"></a><strong>协议://域名或IP</strong>:端口号</h3><p><img src="http://imagehosting.biz/images/2018/04/10/6597976863751619020.jpg" alt="我是图片"></p>
<h2 id="数据库服务器-软件"><a href="#数据库服务器-软件" class="headerlink" title="数据库服务器(软件)"></a><strong>数据库服务器(软件)</strong></h2><h3 id="作用-存储和管理数据软件产品"><a href="#作用-存储和管理数据软件产品" class="headerlink" title="作用:存储和管理数据软件产品"></a><strong>作用</strong>:存储和管理数据软件产品</h3><h3 id="数据库可以解决其它软件不能解决的二个问题"><a href="#数据库可以解决其它软件不能解决的二个问题" class="headerlink" title="数据库可以解决其它软件不能解决的二个问题"></a><strong>数据库可以解决其它软件不能解决的二个问题</strong></h3><h6 id="a-海量-永久-数据存储"><a href="#a-海量-永久-数据存储" class="headerlink" title="a:海量(永久)数据存储"></a><strong>a:海量(永久)数据存储</strong></h6><h6 id="b-高速查询-（114）"><a href="#b-高速查询-（114）" class="headerlink" title="b:高速查询 （114）"></a><strong>b:高速查询 （114）</strong></h6><h2 id="数据服务服务器分类"><a href="#数据服务服务器分类" class="headerlink" title="数据服务服务器分类"></a><strong>数据服务服务器分类</strong></h2><h2 id="DatabaseServer：用于永久存储项目中的数据"><a href="#DatabaseServer：用于永久存储项目中的数据" class="headerlink" title="DatabaseServer：用于永久存储项目中的数据"></a>DatabaseServer：用于永久存储项目中的数据</h2><h6 id="网状数据库"><a href="#网状数据库" class="headerlink" title="-网状数据库"></a><strong>-网状数据库</strong></h6><h6 id="树型数据库"><a href="#树型数据库" class="headerlink" title="-树型数据库"></a><strong>-树型数据库</strong></h6><h6 id="关系数据库—-数据和数据之间都是有关系的-Mysql-Oracle-SqlServer-DB2"><a href="#关系数据库—-数据和数据之间都是有关系的-Mysql-Oracle-SqlServer-DB2" class="headerlink" title="-关系数据库—-数据和数据之间都是有关系的(Mysql/Oracle/SqlServer/DB2)"></a><strong>-关系数据库—-数据和数据之间都是有关系的(Mysql/Oracle/SqlServer/DB2)</strong></h6><h6 id="对象型数据库"><a href="#对象型数据库" class="headerlink" title="-对象型数据库"></a><strong>-对象型数据库</strong></h6><h6 id="mysql-互联网软件系统标配-免费-入门简单-功能强"><a href="#mysql-互联网软件系统标配-免费-入门简单-功能强" class="headerlink" title="mysql 互联网软件系统标配(免费/入门简单/功能强)"></a><strong>mysql 互联网软件系统标配(免费/入门简单/功能强)</strong></h6><h6 id="NOSQLRedis-内存储数据库查询极快"><a href="#NOSQLRedis-内存储数据库查询极快" class="headerlink" title="NOSQLRedis(内存储数据库查询极快)"></a><strong>NOSQLRedis(内存储数据库查询极快)</strong></h6><h2 id="什么是关系型数据库"><a href="#什么是关系型数据库" class="headerlink" title="什么是关系型数据库"></a><strong>什么是关系型数据库</strong></h2><h2 id="以横行竖列的方式保存数据的数据库称为"><a href="#以横行竖列的方式保存数据的数据库称为" class="headerlink" title="以横行竖列的方式保存数据的数据库称为"></a><strong>以横行竖列的方式保存数据的数据库称为</strong></h2><h4 id="关系型数据库"><a href="#关系型数据库" class="headerlink" title="关系型数据库"></a>关系型数据库</h4><h2 id="用户数据"><a href="#用户数据" class="headerlink" title="用户数据"></a><strong>用户数据</strong></h2><table>
<thead>
<tr>
<th align="center">编号</th>
<th align="center">用户名</th>
<th align="center">密码</th>
<th align="center">年龄(字段列)</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">tom</td>
<td align="center">123a</td>
<td align="center">19  (记录 行)</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">jerry</td>
<td align="center">456</td>
<td align="center">20</td>
</tr>
</tbody></table>
<pre><code>|3   |  james | 789   | 21|</code></pre>
<p>  |  4   |  dong  | 123   | 25|<br>   | 5  |   daxu  | 567   |  21|</p>
<h2 id="关系型数据库层次"><a href="#关系型数据库层次" class="headerlink" title="关系型数据库层次"></a><strong>关系型数据库层次</strong></h2><h4 id="mysql数据库软件–-gt-库-Database-gt-表-Table-gt-行-Row-–-gt-列-column"><a href="#mysql数据库软件–-gt-库-Database-gt-表-Table-gt-行-Row-–-gt-列-column" class="headerlink" title="mysql数据库软件–&gt;库(Database)-&gt;表(Table)-&gt;行(Row)–&gt;列(column)"></a><strong>mysql数据库软件–&gt;库(Database)-&gt;表(Table)-&gt;行(Row)–&gt;列(column)</strong></h4><h2 id="mysql安装使用"><a href="#mysql安装使用" class="headerlink" title="mysql安装使用"></a><strong>mysql安装使用</strong></h2><h4 id="1-在官网下载mysql安装包-国内镜像站"><a href="#1-在官网下载mysql安装包-国内镜像站" class="headerlink" title="1:在官网下载mysql安装包(国内镜像站)"></a><strong>1</strong>:<strong>在官网下载mysql安装包(国内镜像站)</strong></h4><h4 id="官网：http-www-oracle-com-cn-index-html"><a href="#官网：http-www-oracle-com-cn-index-html" class="headerlink" title="官网：http://www.oracle.com/cn/index.html"></a><strong>官网</strong>：<a href="http://www.oracle.com/cn/index.html">http://www.oracle.com/cn/index.html</a></h4><h4 id="搜狐镜像：http-mirrors-sohu-com-下载版本（window5-6-64位）"><a href="#搜狐镜像：http-mirrors-sohu-com-下载版本（window5-6-64位）" class="headerlink" title="搜狐镜像：http://mirrors.sohu.com       下载版本（window5.6 64位）"></a><strong>搜狐镜像</strong>：<a href="http://mirrors.sohu.com/">http://mirrors.sohu.com</a>       下载版本（window5.6 64位）</h4><h4 id="2-xampp-软件工具包-apache-php-mysql"><a href="#2-xampp-软件工具包-apache-php-mysql" class="headerlink" title="2:xampp 软件工具包(apache/php/mysql)"></a><strong>2</strong>:<strong>xampp 软件工具包(apache/php/mysql)</strong></h4><h4 id="https-apachefriends-org"><a href="#https-apachefriends-org" class="headerlink" title="https://apachefriends.org"></a><a href="https://apachefriends.org/">https://apachefriends.org</a></h4><h4 id="3-服务器端-用于存储数据-先启动服务器"><a href="#3-服务器端-用于存储数据-先启动服务器" class="headerlink" title="3:服务器端:用于存储数据(先启动服务器)"></a><strong>3</strong>:<strong>服务器端:用于存储数据(先启动服务器)</strong></h4><h4 id="a-xampp控制面板-gt-启动按钮-start"><a href="#a-xampp控制面板-gt-启动按钮-start" class="headerlink" title="a:xampp控制面板-&gt;启动按钮{start}"></a>a:xampp控制面板-&gt;启动按钮{start}</h4><h4 id="启动程序-c-xampp-mysql-bin-mysqld-exe"><a href="#启动程序-c-xampp-mysql-bin-mysqld-exe" class="headerlink" title="启动程序:c:/xampp/mysql/bin/mysqld.exe"></a><strong>启动程序</strong>:c:/xampp/mysql/bin/mysqld.exe</h4><h4 id="注意-数据库服务通常不停止"><a href="#注意-数据库服务通常不停止" class="headerlink" title="注意:数据库服务通常不停止"></a><strong>注意</strong>:数据库服务通常不停止</h4><h4 id="4-客户端-下载并安装一款mysql客户端软件"><a href="#4-客户端-下载并安装一款mysql客户端软件" class="headerlink" title="4:客户端:下载并安装一款mysql客户端软件"></a><strong>4</strong>:<strong>客户端:下载并安装一款mysql客户端软件</strong></h4><h4 id="–用于向服务器发出增删改查指令的"><a href="#–用于向服务器发出增删改查指令的" class="headerlink" title="–用于向服务器发出增删改查指令的"></a>–用于向服务器发出增删改查指令的</h4><h4 id="c-xampp-mysql-bin-mysql-exe"><a href="#c-xampp-mysql-bin-mysql-exe" class="headerlink" title="c:/xampp/mysql/bin/mysql.exe"></a>c:/xampp/mysql/bin/mysql.exe</h4><h4 id="mysql-exe-uroot-–p-不是操作命令，不能加分号！！"><a href="#mysql-exe-uroot-–p-不是操作命令，不能加分号！！" class="headerlink" title="mysql.exe-uroot –p       不是操作命令，不能加分号！！"></a>mysql.exe-uroot –p       不是操作命令，不能加分号！！</h4><h4 id="可通过如下设置，修改环境变量来实现在cmd中直接执行mysql"><a href="#可通过如下设置，修改环境变量来实现在cmd中直接执行mysql" class="headerlink" title="可通过如下设置，修改环境变量来实现在cmd中直接执行mysql"></a>可通过如下设置，修改环境变量来实现在cmd中直接执行mysql</h4><h4 id="C-xampp-mysql-bin-C-ProgramData-Oracle-Java-javapath-SystemRoot-system32-SystemRoot-SystemRoot-System32-Wbem-说-SYSTEMROOT-System32-WindowsPowerShell-v1-0-C-ProgramFiles-Intel-WiFi-bin-C-Program-Files-CommonFiles-Intel-WirelessCommon-D-node-D-svn-bin"><a href="#C-xampp-mysql-bin-C-ProgramData-Oracle-Java-javapath-SystemRoot-system32-SystemRoot-SystemRoot-System32-Wbem-说-SYSTEMROOT-System32-WindowsPowerShell-v1-0-C-ProgramFiles-Intel-WiFi-bin-C-Program-Files-CommonFiles-Intel-WirelessCommon-D-node-D-svn-bin" class="headerlink" title="C:\xampp\mysql\bin;C:\ProgramData\Oracle\Java\javapath;%SystemRoot%\system32;%SystemRoot%;%SystemRoot%\System32\Wbem;说%SYSTEMROOT%\System32\WindowsPowerShell\v1.0;C:\ProgramFiles\Intel\WiFi\bin;C:\Program Files\CommonFiles\Intel\WirelessCommon;D:\node;D:\svn\bin"></a>C:\xampp\mysql\bin;C:\ProgramData\Oracle\Java\javapath;%SystemRoot%\system32;%SystemRoot%;%SystemRoot%\System32\Wbem;说%SYSTEMROOT%\System32\WindowsPowerShell\v1.0;C:\ProgramFiles\Intel\WiFi\bin;C:\Program Files\CommonFiles\Intel\WirelessCommon;D:\node;D:\svn\bin</h4><p><img src="http://imagehosting.biz/images/2018/04/10/6597787747751649447.jpg"><br><img src="https://s2.ax1x.com/2019/07/17/ZLFIn1.jpg"></p>
<h5 id="查询当前mysql中有多少个库可用show-databases"><a href="#查询当前mysql中有多少个库可用show-databases" class="headerlink" title="查询当前mysql中有多少个库可用show databases;"></a>查询当前mysql中有多少个库可用show databases;</h5><h5 id="查询当前mysql编码方式status"><a href="#查询当前mysql编码方式status" class="headerlink" title="查询当前mysql编码方式status;"></a>查询当前mysql编码方式status;</h5><h5 id="退出sql执行状态-exit"><a href="#退出sql执行状态-exit" class="headerlink" title="退出sql执行状态 exit;"></a>退出sql执行状态 exit;</h5><p><img src="https://s2.ax1x.com/2019/07/17/ZLF4XR.jpg"><br><img src="https://s2.ax1x.com/2019/07/17/ZLFo0x.jpg"></p>
]]></content>
      <categories>
        <category>AJAX</category>
      </categories>
  </entry>
  <entry>
    <title>AJAX   JSON类型、跨域</title>
    <url>/2018/07/09/AJAX%20JSON%E7%B1%BB%E5%9E%8B%E3%80%81%E8%B7%A8%E5%9F%9F/</url>
    <content><![CDATA[<h3 id="1-1-JSON-格式数据类型"><a href="#1-1-JSON-格式数据类型" class="headerlink" title="1.1 JSON 格式数据类型"></a><strong>1.1 JSON 格式数据类型</strong></h3><h4 id="a：纯文本"><a href="#a：纯文本" class="headerlink" title="a：纯文本"></a>a：纯文本</h4><h4 id="b：文本网页（默认）"><a href="#b：文本网页（默认）" class="headerlink" title="b：文本网页（默认）"></a>b：文本网页（默认）</h4><h4 id="c：xml（旧行业标准）"><a href="#c：xml（旧行业标准）" class="headerlink" title="c：xml（旧行业标准）"></a>c：xml（旧行业标准）</h4><h4 id="d：javascript"><a href="#d：javascript" class="headerlink" title="d：javascript"></a>d：javascript</h4><h4 id="e：json（新行业标准）"><a href="#e：json（新行业标准）" class="headerlink" title="e：json（新行业标准）"></a>e：json（新行业标准）</h4><h4 id="json（工业标准：所有后台交互都是用json）：-ajax发送数据-格式-；json字符串数据格式，用于描述数据，简洁；（轻量级数据格式）"><a href="#json（工业标准：所有后台交互都是用json）：-ajax发送数据-格式-；json字符串数据格式，用于描述数据，简洁；（轻量级数据格式）" class="headerlink" title="json（工业标准：所有后台交互都是用json）：**ajax发送数据[格式]**；json字符串数据格式，用于描述数据，简洁；（轻量级数据格式）"></a><strong>json</strong>（工业标准：所有后台交互都是用json）：**ajax发送数据[格式]**；json字符串数据格式，用于描述数据，简洁；（轻量级数据格式）</h4><h4 id="xml重量级"><a href="#xml重量级" class="headerlink" title="xml重量级"></a><strong>xml重量级</strong></h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?xml version=&quot;1.0&quot;encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">books</span>&gt;</span><span class="tag">&lt;<span class="name">book</span>&gt;</span><span class="tag">&lt;<span class="name">id</span>&gt;</span>101<span class="tag">&lt;/<span class="name">id</span>&gt;</span><span class="tag">&lt;/<span class="name">book</span>&gt;</span><span class="tag">&lt;/<span class="name">books</span>&gt;</span></span><br></pre></td></tr></table></figure>
<hr>
<h4 id="json轻量级-“name”-”tom”"><a href="#json轻量级-“name”-”tom”" class="headerlink" title="json轻量级 {“name”:”tom”}"></a><strong>json轻量级 {“name”:”tom”}</strong></h4><h4 id="概念：易于阅读和编写，行业内支持很普遍；"><a href="#概念：易于阅读和编写，行业内支持很普遍；" class="headerlink" title="概念：易于阅读和编写，行业内支持很普遍；"></a><strong>概念：易于阅读和编写，行业内支持很普遍；</strong></h4><h4 id="语法：基于js语言，但是目前被各种语言支持；"><a href="#语法：基于js语言，但是目前被各种语言支持；" class="headerlink" title="语法：基于js语言，但是目前被各种语言支持；"></a><strong>语法：基于js语言，但是目前被各种语言支持；</strong></h4><h4 id="成为一种“异构系统交互数据的标准格式”（可以跨平台使用）；"><a href="#成为一种“异构系统交互数据的标准格式”（可以跨平台使用）；" class="headerlink" title="成为一种“异构系统交互数据的标准格式”（可以跨平台使用）；"></a><strong>成为一种“异构系统交互数据的标准格式”（可以跨平台使用）；</strong></h4><p><strong>php&lt;– json –&gt;java</strong><br><strong>java&lt;– json –&gt;网银</strong></p>
<hr>
<h4 id="1-2-json-字符串-语法要求"><a href="#1-2-json-字符串-语法要求" class="headerlink" title="1.2 json{字符串}语法要求"></a><strong>1.2 json{字符串}语法要求</strong></h4><h5 id="1：一个json字符串有且只有一个根，可以是-；也可以是-对象"><a href="#1：一个json字符串有且只有一个根，可以是-；也可以是-对象" class="headerlink" title="1：一个json字符串有且只有一个根，可以是 ；也可以是{ }(对象)"></a><strong>1：一个json字符串有且只有一个根，可以是<a href="%E6%95%B0%E7%BB%84"> </a>；也可以是{ }(对象)</strong></h5><h5 id="2：json可以表示number，bool，null，字符串；字符串必须用双引号"><a href="#2：json可以表示number，bool，null，字符串；字符串必须用双引号" class="headerlink" title="2：json可以表示number，bool，null，字符串；字符串必须用双引号"></a><strong>2：json可以表示number，bool，null，字符串；字符串必须用双引号</strong></h5><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;“name”:”tom”,”age”:10,”set”:true&#125;</span><br></pre></td></tr></table></figure>
<h5 id="3：数组中可以包含多个值，使用逗号分隔，-10-20-304-1"><a href="#3：数组中可以包含多个值，使用逗号分隔，-10-20-304-1" class="headerlink" title="3：数组中可以包含多个值，使用逗号分隔，[10,20,304,1]"></a><strong>3：数组中可以包含多个值，使用逗号分隔，[10,20,304,1]</strong></h5><h5 id="4：对象中可以包含多个键值对，使用逗号分隔，键和值之间用冒号分隔，键必须是双引号"><a href="#4：对象中可以包含多个键值对，使用逗号分隔，键和值之间用冒号分隔，键必须是双引号" class="headerlink" title="4：对象中可以包含多个键值对，使用逗号分隔，键和值之间用冒号分隔，键必须是双引号"></a><strong>4：对象中可以包含多个键值对，使用逗号分隔，键和值之间用冒号分隔，键必须是双引号</strong></h5><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;“name”:”tom”,”age”:10&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="1-3-服务器端php中如何将数据转json字符串"><a href="#1-3-服务器端php中如何将数据转json字符串" class="headerlink" title="1.3 服务器端php中如何将数据转json字符串"></a><strong>1.3 服务器端php中如何将数据转json字符串</strong></h4><h4 id="php-array–-gt-json-string"><a href="#php-array–-gt-json-string" class="headerlink" title="php {array–&gt;json string}"></a><strong>php {array–&gt;json string}</strong></h4><h4 id="php函数：json-encode-索引数组、关联数组都能转换"><a href="#php函数：json-encode-索引数组、关联数组都能转换" class="headerlink" title="php函数：json_encode( );      索引数组、关联数组都能转换"></a><strong>php函数：json_encode( );      索引数组、关联数组都能转换</strong></h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$str =json_encode($arr);</span><br><span class="line">  echo $str;    由于发送json格式字符串，需要指定输出格式</span><br><span class="line"> header(“content-type:application/json;charset=utf<span class="number">-8</span>”);    </span><br></pre></td></tr></table></figure>
<p><img src="http://imagehosting.biz/images/2018/04/13/_20180413205218.jpg" alt="我是图片"></p>
<hr>
<h4 id="1-4-客户端将json字符串解析js对象"><a href="#1-4-客户端将json字符串解析js对象" class="headerlink" title="1.4 客户端将json字符串解析js对象"></a><strong>1.4 客户端将json字符串解析js对象</strong></h4><p><strong>html(json string–&gt;js object)</strong><br><strong>客户端浏览器 JSON.parse();</strong><br><strong>var result = JSON.parse(str);</strong><br><strong>result 已经是js对象[ ] / { }</strong></p>
<h4 id="简洁解决方式"><a href="#简洁解决方式" class="headerlink" title="简洁解决方式"></a><strong>简洁解决方式</strong></h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$.get();   自动json.parse( );</span><br><span class="line">$getJSON();        自动json.parse( );</span><br></pre></td></tr></table></figure>
<p><img src="http://imagehosting.biz/images/2018/04/13/_20180413205231.jpg" alt="我是图片"></p>
<p><strong>a：从数据库中一次性抓取全部表转二维数组</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$ json = mysqli_fetch_all($result,MYSQLI_ASSOC)</span><br></pre></td></tr></table></figure>
<p><strong>b：jquery 循环函数   html += <code>;   </code> 来做循环</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$.echo(data,function(i,obj)&#123; &#125;)</span><br></pre></td></tr></table></figure>
<p><img src="http://imagehosting.biz/images/2018/04/13/_20180413205237.jpg" alt="我是图片"><br><img src="http://imagehosting.biz/images/2018/04/13/_20180413205247.jpg" alt="我是图片"></p>
<h3 id="html-html代码段-可以在中间直接写代码段"><a href="#html-html代码段-可以在中间直接写代码段" class="headerlink" title="html +=html代码段;可以在中间直接写代码段"></a><strong>html +=<code>html代码段</code>;可以在中间直接写代码段</strong></h3><h4 id="2、跨域-CRoss-DominRquqest"><a href="#2、跨域-CRoss-DominRquqest" class="headerlink" title="2、跨域 CRoss DominRquqest"></a><strong>2、跨域 CRoss DominRquqest</strong></h4><h4 id="从一个域名下的某个资源访问另一个域名下的某个资源。"><a href="#从一个域名下的某个资源访问另一个域名下的某个资源。" class="headerlink" title="从一个域名下的某个资源访问另一个域名下的某个资源。"></a>从一个域名下的某个资源访问另一个域名下的某个资源。</h4><h4 id="示例：http-tmooc-cn-1-html"><a href="#示例：http-tmooc-cn-1-html" class="headerlink" title="示例：http://tmooc.cn/1.html"></a>示例：<a href="http://tmooc.cn/1.html">http://tmooc.cn/1.html</a></h4><h4 id="a-img-script-css-ajax-想访问百度的2-php"><a href="#a-img-script-css-ajax-想访问百度的2-php" class="headerlink" title="a img script css ajax 想访问百度的2.php"></a>a img script css ajax 想访问百度的2.php</h4><h4 id="访问：http-www-baidu-com-2-php"><a href="#访问：http-www-baidu-com-2-php" class="headerlink" title="访问：http://www.baidu.com/2.php"></a>访问：<a href="http://www.baidu.com/2.php">http://www.baidu.com/2.php</a></h4><h4 id="2-1跨域的种类-4种"><a href="#2-1跨域的种类-4种" class="headerlink" title="2.1跨域的种类 4种"></a><strong>2.1跨域的种类 4种</strong></h4><h4 id="1：两个域名不同"><a href="#1：两个域名不同" class="headerlink" title="1：两个域名不同"></a>1：两个域名不同</h4><h4 id="2：协议名不同-https-http"><a href="#2：协议名不同-https-http" class="headerlink" title="2：协议名不同     https  http"></a>2：协议名不同     https  http</h4><h4 id="3：主机名-ip不同"><a href="#3：主机名-ip不同" class="headerlink" title="3：主机名/ip不同"></a>3：主机名/ip不同</h4><h4 id="4：端口号不同"><a href="#4：端口号不同" class="headerlink" title="4：端口号不同"></a>4：端口号不同</h4><p><strong>报错提示：</strong><br><img src="http://imagehosting.biz/images/2018/04/13/_20180413210739.jpg" alt="我是图片"></p>
<h3 id="2-2浏览器允许跨域请求情形"><a href="#2-2浏览器允许跨域请求情形" class="headerlink" title="2.2浏览器允许跨域请求情形"></a><strong>2.2浏览器允许跨域请求情形</strong></h3><pre><code>**img/link/script/iframe ……**</code></pre>
<h3 id="2-3浏览器禁止跨域请求情形"><a href="#2-3浏览器禁止跨域请求情形" class="headerlink" title="2.3浏览器禁止跨域请求情形"></a><strong>2.3浏览器禁止跨域请求情形</strong></h3><p><strong>浏览器默认禁止XHR跨域请求，跨域访问可能导致外来的数据，对当前页面造成安全风险。</strong><br><strong>$.get(“<a href="http://www.baidu.com/1.php%E2%80%9D">www.baidu.com/1.php”</a>,);    从百度拿来的ajax数据可能对当前页面造成安全风险</strong></p>
<h3 id="2-4解决方案JSONP"><a href="#2-4解决方案JSONP" class="headerlink" title="2.4解决方案JSONP{ }"></a><strong>2.4解决方案JSONP{ }</strong></h3><h3 id="JSON-与-JSONP区别："><a href="#JSON-与-JSONP区别：" class="headerlink" title="JSON 与 JSONP区别："></a><strong>JSON 与 JSONP区别：</strong></h3><p><strong>JSON：是一种字符串数据格式，用于描述批量数据。</strong><br><strong>JSONP：JSON withPadding 填充式JSON：是一种使用JSON数据的方法，用于解决浏览器XHR跨域请求的限制。</strong></p>
<h3 id="JSONP解决思路："><a href="#JSONP解决思路：" class="headerlink" title="JSONP解决思路："></a><strong>JSONP解决思路：</strong></h3><h6 id="1：发起异步请求，不使用（XHR），使用一个动态创建的script标签，来替换XHR"><a href="#1：发起异步请求，不使用（XHR），使用一个动态创建的script标签，来替换XHR" class="headerlink" title="1：发起异步请求，不使用（XHR），使用一个动态创建的script标签，来替换XHR"></a><strong>1：发起异步请求，不使用（XHR），使用一个动态创建的script标签，来替换XHR</strong></h6><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;script src=”跨域地址/.php”&gt;&lt;/script&gt; </span><br></pre></td></tr></table></figure>
<h6 id="2：要求服务器必须返回一段js片段"><a href="#2：要求服务器必须返回一段js片段" class="headerlink" title="2：要求服务器必须返回一段js片段"></a><strong>2：要求服务器必须返回一段js片段</strong></h6><p>   <strong>doResponse({“name”:”tom”,”age”:20});</strong></p>
<h6 id="3：客户端特意提供一个函数"><a href="#3：客户端特意提供一个函数" class="headerlink" title="3：客户端特意提供一个函数"></a><strong>3：客户端特意提供一个函数</strong></h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">function <span class="title">doResponse</span><span class="params">(data)</span></span>;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>AJAX</category>
      </categories>
  </entry>
  <entry>
    <title>AJAX 网络连接断开，HTTP协议请求</title>
    <url>/2018/07/05/AJAX%20%E7%BD%91%E7%BB%9C%E8%BF%9E%E6%8E%A5%E6%96%AD%E5%BC%80%EF%BC%8CHTTP%E5%8D%8F%E8%AE%AE%E8%AF%B7%E6%B1%82/</url>
    <content><![CDATA[<h3 id="HTTP（请求）（响应）的内容"><a href="#HTTP（请求）（响应）的内容" class="headerlink" title="HTTP（请求）（响应）的内容"></a>HTTP（请求）（响应）的内容</h3><h4 id="请求（request）消息——客户端浏览器发送给web服务器"><a href="#请求（request）消息——客户端浏览器发送给web服务器" class="headerlink" title="请求（request）消息——客户端浏览器发送给web服务器"></a><strong>请求（request）消息——客户端浏览器发送给web服务器</strong></h4><h4 id="响应（response）消息——web服务器发送给客户端浏览器"><a href="#响应（response）消息——web服务器发送给客户端浏览器" class="headerlink" title="响应（response）消息——web服务器发送给客户端浏览器"></a><strong>响应（response）消息——web服务器发送给客户端浏览器</strong></h4><h5 id="请求头信息"><a href="#请求头信息" class="headerlink" title="请求头信息"></a><strong>请求头信息</strong></h5><h5 id="请求起始行：GET-web-index-new-html-HTTP-1-1"><a href="#请求起始行：GET-web-index-new-html-HTTP-1-1" class="headerlink" title="请求起始行：GET/web/index_new.html HTTP/1.1"></a><strong>请求起始行：GET/web/index_new.html HTTP/1.1</strong></h5><p><img src="http://imagehosting.biz/images/2018/04/12/_20180413101557.jpg" alt="我是图片"></p>
<h3 id="响应头信息"><a href="#响应头信息" class="headerlink" title="响应头信息"></a>响应头信息</h3><p><img src="http://imagehosting.biz/images/2018/04/12/_20180413101607.jpg" alt="我是图片"></p>
<h5 id="在提交表单后，会有一串URL编码"><a href="#在提交表单后，会有一串URL编码" class="headerlink" title="在提交表单后，会有一串URL编码"></a><strong>在提交表单后，会有一串URL编码</strong></h5><p><strong>Content-Length:68</strong><br><img src="http://imagehosting.biz/images/2018/04/12/_20180413101610.jpg" alt="我是图片"><br><strong>u=%E4%B8%9C%E4%B8%9C%E6%9C%89%E5%AE%B6%E5%B0%8F%E9%A3%9E%E6%9C%BA&amp;p=</strong></p>
<h4 id="注册、登录、商品列表、分页"><a href="#注册、登录、商品列表、分页" class="headerlink" title="注册、登录、商品列表、分页"></a><strong>注册、登录、商品列表、分页</strong></h4><p><img src="http://imagehosting.biz/images/2018/04/12/_20180413101623.jpg" alt="我是图片"><br><img src="http://imagehosting.biz/images/2018/04/12/_20180413101626.jpg" alt="我是图片"></p>
<h4 id="抓取数据显示-图片"><a href="#抓取数据显示-图片" class="headerlink" title="抓取数据显示{图片}"></a><strong>抓取数据显示{图片}</strong></h4><h4 id="lt-imgsrc-’1-jpg’-gt"><a href="#lt-imgsrc-’1-jpg’-gt" class="headerlink" title="&lt;imgsrc=’1.jpg’ /&gt;"></a><strong><td>&lt;imgsrc=’1.jpg’ /&gt;</td></strong></h4><h4 id="分页"><a href="#分页" class="headerlink" title="分页"></a><strong>分页</strong></h4><h4 id="SELEECTFROM-t-productlimit-p-3"><a href="#SELEECTFROM-t-productlimit-p-3" class="headerlink" title="*SELEECTFROM t_productlimit $p,3;**"></a>*<em>SELEECT</em>FROM t_productlimit $p,3;**</h4><h4 id="if-empty-REQUEST-‘p’-false-empty如果为空则输出true，不为空输出false"><a href="#if-empty-REQUEST-‘p’-false-empty如果为空则输出true，不为空输出false" class="headerlink" title="if(empty($_REQUEST[‘p’])===false){//empty如果为空则输出true，不为空输出false"></a><strong>if(empty($_REQUEST[‘p’])===false){//empty如果为空则输出true，不为空输出false</strong></h4><h4 id="p-REQUEST-‘p’"><a href="#p-REQUEST-‘p’" class="headerlink" title="$p=$_REQUEST[‘p’];"></a><strong>$p=$_REQUEST[‘p’];</strong></h4><h4 id=""><a href="#" class="headerlink" title="}"></a><strong>}</strong></h4><p><img src="http://imagehosting.biz/images/2018/04/12/_20180413101630.jpg" alt="我是图片"></p>
]]></content>
      <categories>
        <category>AJAX</category>
      </categories>
  </entry>
  <entry>
    <title>CSS3动画、2D、3D转换</title>
    <url>/2018/03/25/CSS3%E5%8A%A8%E7%94%BB%E3%80%812D%E3%80%813D%E8%BD%AC%E6%8D%A2/</url>
    <content><![CDATA[<h1 id="CSS3动画、2D、3D转换"><a href="#CSS3动画、2D、3D转换" class="headerlink" title="CSS3动画、2D、3D转换"></a>CSS3动画、2D、3D转换</h1><p><img src="https://s2.ax1x.com/2019/07/17/ZLV4PK.jpg" alt="我是图片"></p>
<h1 id="CSS3过渡效果"><a href="#CSS3过渡效果" class="headerlink" title="CSS3过渡效果"></a>CSS3过渡效果</h1><blockquote>
<p>CSS3的过渡效果就是一个元素的样式改变时增加的一个动画过程。</p>
</blockquote>
<h2 id="transition属性"><a href="#transition属性" class="headerlink" title="transition属性"></a>transition属性</h2><table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">transition-property</td>
<td align="center">设置过渡的CSS属性</td>
</tr>
<tr>
<td align="center">transition-duration</td>
<td align="center">设置过渡的时间</td>
</tr>
<tr>
<td align="center">transition-duration</td>
<td align="center">设置过渡的时间</td>
</tr>
<tr>
<td align="center">transition-timing-function</td>
<td align="center">过渡效果的速度曲线</td>
</tr>
<tr>
<td align="center">transition-delay</td>
<td align="center">过渡的延迟时间</td>
</tr>
</tbody></table>
<h2 id="transition-timing-function属性值"><a href="#transition-timing-function属性值" class="headerlink" title="transition-timing-function属性值"></a>transition-timing-function属性值</h2><table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">linear</td>
<td align="center">匀速运动</td>
</tr>
<tr>
<td align="center">ease</td>
<td align="center">逐渐变慢（默认）</td>
</tr>
<tr>
<td align="center">ease-in</td>
<td align="center">先慢后快</td>
</tr>
<tr>
<td align="center">ease-out</td>
<td align="center">先快后慢</td>
</tr>
<tr>
<td align="center">ease-in-out</td>
<td align="center">先慢后快再慢</td>
</tr>
</tbody></table>
<h1 id="cubic-Bezier-n-n-n-n-贝塞尔曲线"><a href="#cubic-Bezier-n-n-n-n-贝塞尔曲线" class="headerlink" title="cubic-Bezier (n,n,n,n)    贝塞尔曲线"></a>cubic-Bezier (n,n,n,n)    贝塞尔曲线</h1><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">	<span class="attribute">background</span>: red;</span><br><span class="line">	<span class="attribute">transition-property</span>: width,height,background;</span><br><span class="line">	<span class="attribute">transition-duration</span>: <span class="number">1s</span>,<span class="number">1s</span>,<span class="number">1s</span>;</span><br><span class="line">	<span class="attribute">transition-delay</span>: <span class="number">0s</span>,<span class="number">1s</span>,<span class="number">2s</span>;</span><br><span class="line">	<span class="attribute">transition-timing-function</span>: <span class="built_in">cubic-bezier</span>(.<span class="number">49</span>,-<span class="number">0.21</span>,.<span class="number">54</span>,<span class="number">1.22</span>);</span><br><span class="line">	<span class="comment">/*简写*/</span></span><br><span class="line">	<span class="attribute">transition</span>:width <span class="number">1s</span> <span class="built_in">cubic-bezier</span>(.<span class="number">49</span>,-<span class="number">0.21</span>,.<span class="number">54</span>,<span class="number">1.22</span>),</span><br><span class="line">	height <span class="number">1s</span> <span class="number">1s</span>,</span><br><span class="line">	background <span class="number">1s</span> <span class="number">2s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">	<span class="attribute">background</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<hr>
<h1 id="CSS3动画效果"><a href="#CSS3动画效果" class="headerlink" title="CSS3动画效果"></a>CSS3动画效果</h1><h2 id="创建动画"><a href="#创建动画" class="headerlink" title="创建动画"></a>创建动画</h2><blockquote>
<p>使用@keyframes创建动画,通过from..to或百分比设置动画关键帧。</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> move</span><br><span class="line">&#123;</span><br><span class="line"><span class="selector-tag">from</span> &#123;<span class="attribute">top</span>:<span class="number">0px</span>;&#125;</span><br><span class="line"><span class="selector-tag">to</span> &#123;<span class="attribute">top</span>:<span class="number">100px</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@keyframes</span> move</span><br><span class="line">&#123;</span><br><span class="line">0%   &#123;<span class="attribute">top</span>:<span class="number">0px</span>;&#125;</span><br><span class="line">50%  &#123;<span class="attribute">top</span>:<span class="number">50px</span>;&#125;</span><br><span class="line">100% &#123;<span class="attribute">top</span>:<span class="number">100px</span>;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="animation属性"><a href="#animation属性" class="headerlink" title="animation属性"></a>animation属性</h3><table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">animation-name</td>
<td align="center">动画属性名</td>
</tr>
<tr>
<td align="center">animation-duration</td>
<td align="center">设置动画的时间</td>
</tr>
<tr>
<td align="center">animation-timing-function</td>
<td align="center">动画的速度曲线</td>
</tr>
<tr>
<td align="center">animation-delay</td>
<td align="center">动画的延迟时间</td>
</tr>
<tr>
<td align="center">animation-iteration-count</td>
<td align="center">动画执行次数，infinite为无限</td>
</tr>
<tr>
<td align="center">animation-direction</td>
<td align="center">alternate逆向执行动画</td>
</tr>
<tr>
<td align="center">animation-play-state</td>
<td align="center">设置动画运行(running)或暂停(paused)</td>
</tr>
<tr>
<td align="center">animation-fill-mode</td>
<td align="center">动画时间之外的状态</td>
</tr>
</tbody></table>
<h1 id="animation-fill-mode属性值"><a href="#animation-fill-mode属性值" class="headerlink" title="animation-fill-mode属性值"></a>animation-fill-mode属性值</h1><table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">none</td>
<td align="center">默认行为</td>
</tr>
<tr>
<td align="center">forwards</td>
<td align="center">当动画完成后，保持最后一个属性值。</td>
</tr>
<tr>
<td align="center">backwards</td>
<td align="center">在延迟时间时，应用动画第一个属性值。</td>
</tr>
<tr>
<td align="center">both</td>
<td align="center">forwards、backwards。</td>
</tr>
</tbody></table>
<h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.wrap</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">	<span class="attribute">border</span>: <span class="number">5px</span> solid black;</span><br><span class="line">	<span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wrap</span> <span class="selector-tag">div</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">	<span class="attribute">background</span>: red;</span><br><span class="line">	<span class="attribute">position</span>: absolute;</span><br><span class="line">	<span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">	<span class="comment">/*transition: 1s;*/</span></span><br><span class="line">	<span class="attribute">animation</span>: move <span class="number">2s</span> linear <span class="number">0s</span>;</span><br><span class="line">	<span class="attribute">animation-iteration-count</span>: <span class="number">2</span>;</span><br><span class="line">	<span class="attribute">animation-direction</span>: alternate;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wrap</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">div</span>&#123;</span><br><span class="line">	<span class="attribute">animation-play-state</span>: paused;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@keyframes</span> move&#123;</span><br><span class="line">	0%&#123;</span><br><span class="line">		<span class="attribute">left</span>: <span class="number">0</span>;<span class="attribute">top</span>:<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	25%&#123;</span><br><span class="line">		<span class="attribute">left</span>:<span class="number">300px</span>;<span class="attribute">top</span>: <span class="number">0px</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	50%&#123;</span><br><span class="line">		<span class="attribute">left</span>:<span class="number">300px</span>;<span class="attribute">top</span>: <span class="number">300px</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	75%&#123;</span><br><span class="line">		<span class="attribute">left</span>:<span class="number">0px</span>;<span class="attribute">top</span>: <span class="number">300px</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	100%&#123;</span><br><span class="line">		<span class="attribute">left</span>: <span class="number">0px</span>;<span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="CSS3-2D-3D转换"><a href="#CSS3-2D-3D转换" class="headerlink" title="CSS3-2D/3D转换"></a>CSS3-2D/3D转换</h1><h3 id="2D-3D-转换属性"><a href="#2D-3D-转换属性" class="headerlink" title="2D/3D 转换属性"></a>2D/3D 转换属性</h3><table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">transform</td>
<td align="center">元素的 2D 或 3D 转换</td>
</tr>
<tr>
<td align="center">transform-origin</td>
<td align="center">改变被转换元素的位置</td>
</tr>
<tr>
<td align="center">transform-style</td>
<td align="center">可设置元素在 3D 空间中显示。</td>
</tr>
<tr>
<td align="center">perspective</td>
<td align="center">设置元素的3D效果。</td>
</tr>
<tr>
<td align="center">perspective-origin</td>
<td align="center">3D元素的位置。</td>
</tr>
<tr>
<td align="center">backface-visibility</td>
<td align="center">设置元素背面是否可见。</td>
</tr>
</tbody></table>
<h2 id="2D转换方法"><a href="#2D转换方法" class="headerlink" title="2D转换方法"></a>2D转换方法</h2><table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">translate(x,y)</td>
<td align="center">元素位置移动</td>
</tr>
<tr>
<td align="center">rotate(deg)</td>
<td align="center">元素旋转</td>
</tr>
<tr>
<td align="center">scale(x,y)</td>
<td align="center">元素放大缩小</td>
</tr>
<tr>
<td align="center">skew(x,y)</td>
<td align="center">元素倾斜</td>
</tr>
<tr>
<td align="center">matrix(n,n,n,n,n,n)</td>
<td align="center">把所有转换方法组合在一起</td>
</tr>
</tbody></table>
<h1 id="3D转换方法"><a href="#3D转换方法" class="headerlink" title="3D转换方法"></a>3D转换方法</h1><table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">translate3d(x,y,z)</td>
<td align="center">元素位置移动</td>
</tr>
<tr>
<td align="center">rotate3d(x,y,z,deg)</td>
<td align="center">元素旋转</td>
</tr>
<tr>
<td align="center">scale3d(x,y,z)</td>
<td align="center">元素放大缩小</td>
</tr>
</tbody></table>
<p>###例子</p>
<h1 id="translate方法"><a href="#translate方法" class="headerlink" title="translate方法"></a>translate方法</h1><h3 id="结构-1"><a href="#结构-1" class="headerlink" title="结构"></a>结构</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="样式-1"><a href="#样式-1" class="headerlink" title="样式"></a>样式</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.wrap</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">	<span class="attribute">border</span>:<span class="number">5px</span> dashed black;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wrap</span> <span class="selector-tag">div</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">	<span class="attribute">background</span>: red;</span><br><span class="line">	<span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">105px</span>,<span class="number">50px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="https://s2.ax1x.com/2019/07/17/ZLVf56.jpg" alt="我是图片"></p>
<h1 id="scale方法"><a href="#scale方法" class="headerlink" title="scale方法"></a>scale方法</h1><h3 id="结构-2"><a href="#结构-2" class="headerlink" title="结构"></a>结构</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="样式-2"><a href="#样式-2" class="headerlink" title="样式"></a>样式</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.wrap</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">	<span class="attribute">border</span>:<span class="number">5px</span> dashed black;</span><br><span class="line">	<span class="attribute">margin</span>: <span class="number">50px</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wrap</span> <span class="selector-tag">div</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">	<span class="attribute">background</span>: red;</span><br><span class="line">	<span class="attribute">opacity</span>: <span class="number">0.5</span>;</span><br><span class="line">	<span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1.5</span>,<span class="number">1.5</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="效果-1"><a href="#效果-1" class="headerlink" title="效果"></a>效果</h3><p><img src="https://s2.ax1x.com/2019/07/17/ZLVRV1.jpg" alt="我是图片"></p>
<h1 id="rotate方法"><a href="#rotate方法" class="headerlink" title="rotate方法"></a>rotate方法</h1><h3 id="结构-3"><a href="#结构-3" class="headerlink" title="结构"></a>结构</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;d1&quot;</span>&gt;</span>rotateX<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;d2&quot;</span>&gt;</span>rotateY<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;d3&quot;</span>&gt;</span>rotateZ<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="样式-3"><a href="#样式-3" class="headerlink" title="样式"></a>样式</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.wrap</span>&#123;</span><br><span class="line">	<span class="comment">/*设置3d视角距离*/</span></span><br><span class="line">	<span class="attribute">perspective</span>:<span class="number">1000px</span>;</span><br><span class="line">	<span class="comment">/*设置为3d模式*/</span></span><br><span class="line">	<span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">	<span class="attribute">margin</span>: <span class="number">50px</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wrap</span> <span class="selector-tag">div</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">	<span class="attribute">background</span>: red;</span><br><span class="line">	<span class="attribute">float</span>: left;</span><br><span class="line">	<span class="attribute">margin</span>: <span class="number">0</span> <span class="number">10px</span>;</span><br><span class="line">	<span class="attribute">transition</span>: <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.d1</span>&#123;<span class="attribute">transform</span>: <span class="built_in">rotateX</span>(<span class="number">45deg</span>);&#125;</span><br><span class="line"><span class="selector-class">.d2</span>&#123;<span class="attribute">transform</span>: <span class="built_in">rotateY</span>(<span class="number">45deg</span>);&#125;</span><br><span class="line"><span class="selector-class">.d3</span>&#123;<span class="attribute">transform</span>: <span class="built_in">rotateZ</span>(<span class="number">45deg</span>);&#125;</span><br><span class="line"><span class="selector-class">.d1</span><span class="selector-pseudo">:hover</span>&#123;<span class="attribute">transform</span>: <span class="built_in">rotateX</span>(<span class="number">90deg</span>);&#125;</span><br><span class="line"><span class="selector-class">.d2</span><span class="selector-pseudo">:hover</span>&#123;<span class="attribute">transform</span>: <span class="built_in">rotateY</span>(<span class="number">90deg</span>);&#125;</span><br><span class="line"><span class="selector-class">.d3</span><span class="selector-pseudo">:hover</span>&#123;<span class="attribute">transform</span>: <span class="built_in">rotateZ</span>(<span class="number">90deg</span>);&#125;</span><br></pre></td></tr></table></figure>
<h3 id="效果-2"><a href="#效果-2" class="headerlink" title="效果"></a>效果</h3><p><img src="https://s2.ax1x.com/2019/07/17/ZLVWUx.gif" alt="我是图片"></p>
<h1 id="skew方法"><a href="#skew方法" class="headerlink" title="skew方法"></a>skew方法</h1><h3 id="结构-4"><a href="#结构-4" class="headerlink" title="结构"></a>结构</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;d1&quot;</span>&gt;</span>skewX<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;d2&quot;</span>&gt;</span>skewY<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="样式-4"><a href="#样式-4" class="headerlink" title="样式"></a>样式</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">	<span class="attribute">background</span>: red;</span><br><span class="line">	<span class="attribute">float</span>: left;</span><br><span class="line">	<span class="attribute">margin</span>: <span class="number">50px</span> <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.d1</span>&#123;<span class="attribute">transform</span>: <span class="built_in">skewX</span>(<span class="number">30deg</span>);&#125;</span><br><span class="line"><span class="selector-class">.d2</span>&#123;<span class="attribute">transform</span>: <span class="built_in">skewY</span>(<span class="number">30deg</span>);&#125;</span><br></pre></td></tr></table></figure>

<h3 id="效果-3"><a href="#效果-3" class="headerlink" title="效果"></a>效果</h3><p><img src="https://s2.ax1x.com/2019/07/17/ZLVcr9.jpg" alt="我是图片"></p>
<h1 id="3D动画"><a href="#3D动画" class="headerlink" title="3D动画"></a>3D动画</h1><h3 id="结构-5"><a href="#结构-5" class="headerlink" title="结构"></a>结构</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> &gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="样式-5"><a href="#样式-5" class="headerlink" title="样式"></a>样式</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.wrap</span>&#123;</span><br><span class="line">	<span class="comment">/*设置3d视角距离*/</span></span><br><span class="line">	<span class="attribute">perspective</span>:<span class="number">1000px</span>;</span><br><span class="line">	<span class="comment">/*设置为3d模式*/</span></span><br><span class="line">	<span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">	<span class="attribute">border</span>: <span class="number">5px</span> solid black;</span><br><span class="line">	<span class="attribute">margin</span>: <span class="number">50px</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wrap</span> <span class="selector-tag">div</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">	<span class="attribute">background</span>: red;</span><br><span class="line">	<span class="attribute">transform</span>: <span class="built_in">translate3d</span>(<span class="number">0px</span>,<span class="number">0px</span>,<span class="number">200px</span>);</span><br><span class="line">	<span class="attribute">animation</span>: move2 <span class="number">10s</span> linear infinite;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@keyframes</span> move&#123;</span><br><span class="line">	<span class="selector-tag">from</span>&#123;<span class="attribute">transform</span>: <span class="built_in">rotateY</span>(<span class="number">0deg</span>) <span class="built_in">translate3d</span>(<span class="number">0px</span>,<span class="number">0px</span>,<span class="number">200px</span>)&#125;</span><br><span class="line">	<span class="selector-tag">to</span>&#123;<span class="attribute">transform</span>: <span class="built_in">rotateY</span>(<span class="number">360deg</span>) <span class="built_in">translate3d</span>(<span class="number">0px</span>,<span class="number">0px</span>,<span class="number">200px</span>)&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="效果-4"><a href="#效果-4" class="headerlink" title="效果"></a>效果</h3><p><img src="https://s2.ax1x.com/2019/07/17/ZLV58O.gif" alt="我是图片"></p>
]]></content>
      <categories>
        <category>CSS3</category>
      </categories>
  </entry>
  <entry>
    <title>CSS3布局排版</title>
    <url>/2018/03/24/CSS3%E5%B8%83%E5%B1%80%E6%8E%92%E7%89%88/</url>
    <content><![CDATA[<h1 id="CSS3布局排版"><a href="#CSS3布局排版" class="headerlink" title="CSS3布局排版"></a>CSS3布局排版</h1><p><img src="https://s2.ax1x.com/2019/07/17/ZLVk9O.jpg"></p>
<h1 id="分栏布局"><a href="#分栏布局" class="headerlink" title="分栏布局"></a>分栏布局</h1><table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">column-width</td>
<td align="center">栏目宽度</td>
</tr>
<tr>
<td align="center">column-count</td>
<td align="center">栏目列数</td>
</tr>
<tr>
<td align="center">column-gap</td>
<td align="center">栏目距离</td>
</tr>
<tr>
<td align="center">column-rule</td>
<td align="center">栏目间隔线</td>
</tr>
<tr>
<td align="center">column-span</td>
<td align="center">是否跨栏显示</td>
</tr>
</tbody></table>
<h1 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h1><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.wrap</span>&#123;</span><br><span class="line">	<span class="attribute">column-width</span>:<span class="number">300px</span>;</span><br><span class="line">	<span class="attribute">column-count</span>:<span class="number">3</span>;</span><br><span class="line">	<span class="attribute">column-gap</span>:<span class="number">50px</span>;</span><br><span class="line">	<span class="attribute">column-rule</span>:<span class="number">3px</span> dashed blue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h1</span>&#123;</span><br><span class="line">	<span class="attribute">column-span</span>:all;</span><br><span class="line">	<span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h1</span>&gt;</span>标题标题标题标题标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>一内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>二内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="viewport视口"><a href="#viewport视口" class="headerlink" title="viewport视口"></a>viewport视口</h1><meta name="viewport" content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">

<table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">device-width</td>
<td align="center">设备宽度</td>
</tr>
<tr>
<td align="center">user-scalable</td>
<td align="center">是否允许用户手动缩放页面</td>
</tr>
<tr>
<td align="center">initial-scale</td>
<td align="center">初始缩放值</td>
</tr>
<tr>
<td align="center">maximum-scale</td>
<td align="center">放大最大比例</td>
</tr>
<tr>
<td align="center">minimum-scale</td>
<td align="center">缩小最小比例</td>
</tr>
</tbody></table>
<h1 id="media媒体查询"><a href="#media媒体查询" class="headerlink" title="media媒体查询"></a>media媒体查询</h1><table>
<thead>
<tr>
<th align="center">属性值</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">screen</td>
<td align="center">用于电脑屏幕，平板电脑，智能手机等。</td>
</tr>
<tr>
<td align="center">speech</td>
<td align="center">应用于屏幕阅读器等发声设备</td>
</tr>
<tr>
<td align="center">min-width</td>
<td align="center">页面最小可见区域宽度</td>
</tr>
<tr>
<td align="center">max-width</td>
<td align="center">页面最大可见区域宽度</td>
</tr>
<tr>
<td align="center">min-height</td>
<td align="center">页面最小可见区域高度</td>
</tr>
<tr>
<td align="center">max-height</td>
<td align="center">页面最大可见区域高度</td>
</tr>
<tr>
<td align="center">orientation</td>
<td align="center">横屏-landscape、竖屏-portrait</td>
</tr>
</tbody></table>
<h1 id="样式-1"><a href="#样式-1" class="headerlink" title="样式"></a>样式</h1><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">*&#123;<span class="attribute">box-sizing</span>: border-box;&#125;</span><br><span class="line"><span class="selector-class">.wrap</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">	<span class="attribute">max-height</span>: <span class="number">1200px</span>;	</span><br><span class="line">	<span class="attribute">border</span>: <span class="number">5px</span> solid black;</span><br><span class="line">	<span class="attribute">overflow</span>: hidden;</span><br><span class="line">	<span class="attribute">margin</span>: <span class="number">0</span> -<span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wrap</span> <span class="selector-tag">div</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">24%</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">	<span class="attribute">background</span>: blue;</span><br><span class="line">	<span class="attribute">color</span>: white;</span><br><span class="line">	<span class="attribute">text-align</span>: center;</span><br><span class="line">	<span class="attribute">font-size</span>: <span class="number">30px</span>;</span><br><span class="line">	<span class="attribute">float</span>: left;</span><br><span class="line">	<span class="attribute">margin</span>:<span class="number">0</span> .<span class="number">5%</span> <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width:</span> <span class="number">1200px</span>)&#123;</span><br><span class="line">	<span class="selector-class">.wrap</span> <span class="selector-tag">div</span>&#123;</span><br><span class="line">		<span class="attribute">width</span>: <span class="number">32%</span>;</span><br><span class="line">		<span class="attribute">margin</span>:<span class="number">0</span> .<span class="number">5%</span> <span class="number">10px</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width:</span> <span class="number">960px</span>)&#123;</span><br><span class="line">	<span class="selector-class">.wrap</span> <span class="selector-tag">div</span>&#123;</span><br><span class="line">		<span class="attribute">width</span>: <span class="number">49%</span>;</span><br><span class="line">		<span class="attribute">margin</span>:<span class="number">0</span> .<span class="number">5%</span> <span class="number">10px</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width:</span> <span class="number">640px</span>)&#123;</span><br><span class="line">	<span class="selector-class">.wrap</span> <span class="selector-tag">div</span>&#123;</span><br><span class="line">		<span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">		<span class="attribute">margin</span>:<span class="number">0</span> <span class="number">0%</span> <span class="number">10px</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="结构-1"><a href="#结构-1" class="headerlink" title="结构"></a>结构</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span>6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span>7<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span>8<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span>9<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="Flex布局"><a href="#Flex布局" class="headerlink" title="Flex布局"></a>Flex布局</h1><blockquote>
<p>flex-弹性布局:任何一个元素都可以设置为 Flex 布局</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line"><span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">span</span>&#123;</span><br><span class="line"><span class="attribute">display</span>: inline-flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="flex元素属性"><a href="#flex元素属性" class="headerlink" title="flex元素属性"></a>flex元素属性</h1><blockquote>
<p>flex-direction 排列方向</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">属性值</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">row</td>
<td align="center">（默认）水平排列,从左往右</td>
</tr>
<tr>
<td align="center">row-reverse</td>
<td align="center">水平方向,从右往左</td>
</tr>
<tr>
<td align="center">column</td>
<td align="center">垂直排列，从上往下</td>
</tr>
<tr>
<td align="center">column-reverse</td>
<td align="center">垂直排列，从下往上</td>
</tr>
</tbody></table>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.wrap</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">	<span class="attribute">border</span>: <span class="number">5px</span> solid black;</span><br><span class="line">	<span class="attribute">display</span>: flex;</span><br><span class="line">	<span class="comment">/*flex-direction:row | row-reverse | column | column-reverse*/</span></span><br><span class="line">	<span class="attribute">flex-direction</span>: row;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wrap</span> <span class="selector-tag">div</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">	<span class="attribute">background</span>: red;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="flex-wrap-单行多行"><a href="#flex-wrap-单行多行" class="headerlink" title="flex-wrap 单行多行"></a>flex-wrap 单行多行</h1><table>
<thead>
<tr>
<th align="center">属性值</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">nowrap</td>
<td align="center">（默认）不换行</td>
</tr>
<tr>
<td align="center">wrap</td>
<td align="center">往下换行</td>
</tr>
<tr>
<td align="center">wrap-reverse</td>
<td align="center">往上换行</td>
</tr>
</tbody></table>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.wrap</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">	<span class="attribute">border</span>: <span class="number">5px</span> solid black;</span><br><span class="line">	<span class="attribute">display</span>: flex;</span><br><span class="line">	<span class="attribute">flex-direction</span>: row;</span><br><span class="line">	<span class="comment">/*flex-wrap flex-wrap: nowrap | wrap | wrap-reverse;*/</span></span><br><span class="line">	<span class="attribute">flex-wrap</span>:wrap-reverse;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wrap</span> <span class="selector-tag">div</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">	<span class="attribute">background</span>: red;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span>6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="flex-flow简写"><a href="#flex-flow简写" class="headerlink" title="flex-flow简写"></a>flex-flow简写</h1><blockquote>
<p>flex-direction和flex-wrap简写</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*flex-flow: flex-direction flex-wrap;*/</span></span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">flex-flow</span>:row wrap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="justify-content-水平对齐"><a href="#justify-content-水平对齐" class="headerlink" title="justify-content 水平对齐"></a>justify-content 水平对齐</h1><table>
<thead>
<tr>
<th align="center">属性值</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">flex-start</td>
<td align="center">（默认）左对齐</td>
</tr>
<tr>
<td align="center">flex-end</td>
<td align="center">右对齐</td>
</tr>
<tr>
<td align="center">center</td>
<td align="center">居中</td>
</tr>
<tr>
<td align="center">space-between</td>
<td align="center">两端对齐，元素之间间隔</td>
</tr>
<tr>
<td align="center">space-around</td>
<td align="center">两端和元素之间间隔</td>
</tr>
</tbody></table>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.wrap</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">	<span class="attribute">border</span>: <span class="number">5px</span> solid black;</span><br><span class="line">	<span class="attribute">display</span>: flex;</span><br><span class="line"><span class="comment">/*justify-content: flex-start | flex-end | center | space-between | space-around;*/</span></span><br><span class="line">	<span class="attribute">justify-content</span>:space-around;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wrap</span> <span class="selector-tag">div</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">	<span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="align-items-垂直对齐"><a href="#align-items-垂直对齐" class="headerlink" title="align-items 垂直对齐"></a>align-items 垂直对齐</h1><table>
<thead>
<tr>
<th align="center">属性值</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">stretch</td>
<td align="center">（默认）元素没设高度时，与父级相等</td>
</tr>
<tr>
<td align="center">flex-start</td>
<td align="center">上对齐</td>
</tr>
<tr>
<td align="center">flex-end</td>
<td align="center">下对齐</td>
</tr>
<tr>
<td align="center">center</td>
<td align="center">居中</td>
</tr>
<tr>
<td align="center">baseline</td>
<td align="center">文字的基线对齐</td>
</tr>
</tbody></table>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.wrap</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">	<span class="attribute">border</span>: <span class="number">5px</span> solid black;</span><br><span class="line">	<span class="attribute">display</span>: flex;</span><br><span class="line">	<span class="comment">/*align-items: flex-start | flex-end | center | baseline | stretch;*/</span></span><br><span class="line">	<span class="attribute">align-items</span>:center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wrap</span> <span class="selector-tag">div</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">	<span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wrap</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(1)</span>&#123;</span><br><span class="line">	<span class="attribute">font-size</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wrap</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(2)</span>&#123;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wrap</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(3)</span>&#123;</span><br><span class="line">	<span class="attribute">font-size</span>: <span class="number">60px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="align-content-多行垂直对齐"><a href="#align-content-多行垂直对齐" class="headerlink" title="align-content 多行垂直对齐"></a>align-content 多行垂直对齐</h1><table>
<thead>
<tr>
<th align="center">属性值</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">stretch</td>
<td align="center">（默认）元素没设高度时，占满父级</td>
</tr>
<tr>
<td align="center">flex-start</td>
<td align="center">上对齐</td>
</tr>
<tr>
<td align="center">flex-end</td>
<td align="center">下对齐</td>
</tr>
<tr>
<td align="center">center</td>
<td align="center">居中</td>
</tr>
<tr>
<td align="center">space-between</td>
<td align="center">两端对齐，元素之间间隔</td>
</tr>
<tr>
<td align="center">space-around</td>
<td align="center">两端和元素之间间隔</td>
</tr>
</tbody></table>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.wrap</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">	<span class="attribute">border</span>: <span class="number">5px</span> solid black;</span><br><span class="line">	<span class="attribute">display</span>: flex;</span><br><span class="line">	<span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">	<span class="comment">/*align-content: flex-start | flex-end | center | space-between | space-around | stretch;*/</span></span><br><span class="line">	<span class="attribute">align-content</span>:center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wrap</span> <span class="selector-tag">div</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">	<span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;div class=&quot;wrap&quot;&gt;</span><br><span class="line">	&lt;div&gt;1&lt;/div&gt;</span><br><span class="line">	&lt;div&gt;2&lt;/div&gt;</span><br><span class="line">	&lt;div&gt;3&lt;/div&gt;</span><br><span class="line">	&lt;div&gt;4&lt;/div&gt;</span><br><span class="line">	&lt;div&gt;5&lt;/div&gt;</span><br><span class="line">	&lt;div&gt;6&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<h1 id="flex子元素属性"><a href="#flex子元素属性" class="headerlink" title="flex子元素属性"></a>flex子元素属性</h1><h2 id="order排列顺序"><a href="#order排列顺序" class="headerlink" title="order排列顺序"></a>order排列顺序</h2><blockquote>
<p>order数值越小，排列越靠前，默认为0</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.wrap</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">	<span class="attribute">border</span>: <span class="number">5px</span> solid black;</span><br><span class="line">	<span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wrap</span> <span class="selector-tag">div</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">	<span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wrap</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(2)</span>&#123;</span><br><span class="line">	<span class="attribute">order</span>:-<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="flex-grow等分剩余空间"><a href="#flex-grow等分剩余空间" class="headerlink" title="flex-grow等分剩余空间"></a>flex-grow等分剩余空间</h1><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.wrap</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">	<span class="attribute">border</span>: <span class="number">5px</span> solid black;</span><br><span class="line">	<span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wrap</span> <span class="selector-tag">div</span>&#123;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">	<span class="attribute">background</span>: red;</span><br><span class="line">	<span class="attribute">margin</span>: <span class="number">0</span> <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wrap</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(1)</span>&#123;</span><br><span class="line">	<span class="attribute">flex-grow</span>:<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wrap</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(2)</span>&#123;</span><br><span class="line">	<span class="attribute">flex-grow</span>:<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wrap</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(3)</span>&#123;</span><br><span class="line">	<span class="attribute">flex-grow</span>:<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="flex-shrink缩小比例"><a href="#flex-shrink缩小比例" class="headerlink" title="flex-shrink缩小比例"></a>flex-shrink缩小比例</h1><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.wrap</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">	<span class="attribute">border</span>: <span class="number">5px</span> solid black;</span><br><span class="line">	<span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wrap</span> <span class="selector-tag">div</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">	<span class="attribute">background</span>: red;</span><br><span class="line">	<span class="attribute">margin</span>: <span class="number">0</span> <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wrap</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(1)</span>&#123;</span><br><span class="line">	<span class="attribute">flex-shrink</span>:<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wrap</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(2)</span>&#123;</span><br><span class="line">	<span class="attribute">flex-shrink</span>:<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wrap</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(3)</span>&#123;</span><br><span class="line">	<span class="attribute">flex-shrink</span>:<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="flex-basis-设置大小"><a href="#flex-basis-设置大小" class="headerlink" title="flex-basis 设置大小"></a>flex-basis 设置大小</h1><blockquote>
<p>在元素分配多余空间之前设置固定大小和设置width/height一样</p>
</blockquote>
<h1 id="flex-简写"><a href="#flex-简写" class="headerlink" title="flex 简写"></a>flex 简写</h1><blockquote>
<p>flex属性是flex-grow, flex-shrink 和 flex-basis的简写 默认值为0 1 auto。</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line"><span class="attribute">flex</span>: flex-grow flex-shrink flex-basis;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="align-self-单元素设置对齐"><a href="#align-self-单元素设置对齐" class="headerlink" title="align-self 单元素设置对齐"></a>align-self 单元素设置对齐</h1><table>
<thead>
<tr>
<th align="center">属性值</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">stretch</td>
<td align="center">（默认）元素没设高度时，与父级相等</td>
</tr>
<tr>
<td align="center">flex-start</td>
<td align="center">上对齐</td>
</tr>
<tr>
<td align="center">flex-end</td>
<td align="center">下对齐</td>
</tr>
<tr>
<td align="center">center</td>
<td align="center">居中</td>
</tr>
<tr>
<td align="center">baseline</td>
<td align="center">文字的基线对齐</td>
</tr>
</tbody></table>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.wrap</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">	<span class="attribute">border</span>: <span class="number">5px</span> solid black;</span><br><span class="line">	<span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wrap</span> <span class="selector-tag">div</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">	<span class="attribute">background</span>: red;</span><br><span class="line">	<span class="attribute">margin</span>: <span class="number">0</span> <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wrap</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(3)</span>&#123;</span><br><span class="line">	<span class="attribute">align-self</span>: flex-end;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CSS3</category>
      </categories>
  </entry>
  <entry>
    <title>CSS3选择器</title>
    <url>/2018/03/21/CSS3%E9%80%89%E6%8B%A9%E5%99%A8/</url>
    <content><![CDATA[<h1 id="CSS3选择器"><a href="#CSS3选择器" class="headerlink" title="CSS3选择器"></a>CSS3选择器</h1><h2 id="选择器事例结构"><a href="#选择器事例结构" class="headerlink" title="选择器事例结构"></a>选择器事例结构</h2><p><img src="https://s2.ax1x.com/2019/07/17/ZLmD8f.jpg" alt="我是图片"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-class">.wrap</span>&#123;		</span></span><br><span class="line">    font-size: 30px;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">li&#123;		</span><br><span class="line">    width: 100px;		</span><br><span class="line">    height: 100px;		</span><br><span class="line">    text-align: center;		</span><br><span class="line">    font-size: 50px;		</span><br><span class="line">    line-height: 100px;		</span><br><span class="line">    color: white;		</span><br><span class="line">    background: black;		</span><br><span class="line">    border-radius: 50%;		</span><br><span class="line">    list-style: none;		 </span><br><span class="line">    float: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.ul1</span>,<span class="selector-class">.ul2</span>&#123;<span class="attribute">overflow</span>: hidden;&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.wrap</span> <span class="selector-class">.other</span>&#123;<span class="attribute">width</span>: <span class="number">100%</span>;<span class="attribute">border-radius</span>: <span class="number">0</span>;<span class="attribute">background</span>: transparent;&#125;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span>        </span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;ul2&quot;</span>&gt;</span>            </span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;one&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;two&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span>            </span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;three&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span>           </span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;four&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span>            </span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;five&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">li</span>&gt;</span>            </span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;six&quot;</span>&gt;</span>6<span class="tag">&lt;/<span class="name">li</span>&gt;</span>            </span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;seven&quot;</span>&gt;</span>7<span class="tag">&lt;/<span class="name">li</span>&gt;</span>            </span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;eight&quot;</span>&gt;</span>8<span class="tag">&lt;/<span class="name">li</span>&gt;</span>            </span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;nine&quot;</span>&gt;</span>9<span class="tag">&lt;/<span class="name">li</span>&gt;</span>            </span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;ten&quot;</span>&gt;</span>10<span class="tag">&lt;/<span class="name">li</span>&gt;</span>            </span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;other&quot;</span>&gt;</span>                </span><br><span class="line">                <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;ul2&quot;</span>&gt;</span>                    </span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>11<span class="tag">&lt;/<span class="name">li</span>&gt;</span>                    </span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>12<span class="tag">&lt;/<span class="name">li</span>&gt;</span>                </span><br><span class="line">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span>            </span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span>        </span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span>	</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<hr>
<h3 id="E-F通用选择器"><a href="#E-F通用选择器" class="headerlink" title="E~F通用选择器"></a>E~F通用选择器</h3><p><img src="https://s2.ax1x.com/2019/07/17/ZLmsxS.jpg" alt="我是图片"></p>
<blockquote>
<p>E~F:选择在E元素之后的同级F元素</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">.three ~ li&#123;	</span><br><span class="line">    background: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h3><p><img src="https://s2.ax1x.com/2019/07/17/ZLmw5t.jpg" alt="我是图片"></p>
<blockquote>
<p>E[attr^=”val”]:选择属性attr的值以”val”开头的元素</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">li[class^=t]&#123;	</span><br><span class="line">    background: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.ax1x.com/2019/07/17/ZLmBPP.jpg" alt="我是图片"></p>
<blockquote>
<p>E[attr$=”val”]:选择属性attr的值以”val”结尾的元素</p>
</blockquote>
<p><img src="https://s2.ax1x.com/2019/07/17/ZLmdUI.jpg" alt="我是图片"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">li[class$=e]&#123;	</span><br><span class="line">    background: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<blockquote>
<p>E[attr*=”val”]:选择属性att的值包含”val”字符串的元素</p>
</blockquote>
<p><img src="https://s2.ax1x.com/2019/07/17/ZLmRVs.jpg" alt="我是图片"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">li[class*=o]&#123;	</span><br><span class="line">    background: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="结构伪类选择器"><a href="#结构伪类选择器" class="headerlink" title="结构伪类选择器"></a>结构伪类选择器</h2><table>
<thead>
<tr>
<th align="center">选择器</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">E:root</td>
<td align="center">选择匹配元素E所在文档的根元素</td>
</tr>
<tr>
<td align="center">E:nth-child(n)</td>
<td align="center">选择E元素的父元素的第n个子元素</td>
</tr>
<tr>
<td align="center">E:nth-last-child(n)</td>
<td align="center">选择E元素的父元素的倒数第n个子元素</td>
</tr>
<tr>
<td align="center">E:fisrt-child</td>
<td align="center">选择E元素的父元素的第一个子元素的元素。与E:nth-child(1)等同</td>
</tr>
<tr>
<td align="center">E:last-child</td>
<td align="center">选择E元素的父元素的最后一个子元素的元素。与E:nth-last-child(1)等同</td>
</tr>
<tr>
<td align="center">E:nth-of-type(n)</td>
<td align="center">选择E元素的父元素内与E同类型的第n个元素</td>
</tr>
<tr>
<td align="center">E:nth-last-of-type(n)</td>
<td align="center">选择E元素的父元素内与F同类型的倒数第n个元素</td>
</tr>
<tr>
<td align="center">E:first-of-type</td>
<td align="center">选择E元素的父元素内与E同类型的第一个元素，与E:nth-of-type(1)等同</td>
</tr>
<tr>
<td align="center">E:last-of-tye</td>
<td align="center">选择E元素的父元素内与E同类型的最后一个元素，与E:nth-last-of-type(1)等同</td>
</tr>
<tr>
<td align="center">E: only-child</td>
<td align="center">如果E元素是唯一个子元素则选中</td>
</tr>
<tr>
<td align="center">E: only-of-type</td>
<td align="center">如果E元素是唯一个是E类型的子元素则选中</td>
</tr>
<tr>
<td align="center">E:empty</td>
<td align="center">选择没有子元素的元素，而且该元素也不包含任何文本节点</td>
</tr>
</tbody></table>
<h2 id="fisrt-child"><a href="#fisrt-child" class="headerlink" title=":fisrt-child"></a>:fisrt-child</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">li:nth-child(1)&#123;	</span><br><span class="line">    background: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://s2.ax1x.com/2019/07/17/ZLmr28.jpg" alt="我是图片"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">li:nth-child(2n+1)&#123;	</span><br><span class="line">    background: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://s2.ax1x.com/2019/07/17/ZLmcrQ.jpg" alt="我是图片"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">li:nth-child(3n+2)&#123;	</span><br><span class="line">    background: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://s2.ax1x.com/2019/07/17/ZLm6Kg.jpg" alt="我是图片"></p>
<h3 id="其他伪类选择器"><a href="#其他伪类选择器" class="headerlink" title="其他伪类选择器"></a>其他伪类选择器</h3><table>
<thead>
<tr>
<th align="center">选择器</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">E:not(F)</td>
<td align="center">匹配所有除元素F外的E元素</td>
</tr>
<tr>
<td align="center">E:target</td>
<td align="center">匹配E的所有元素，且匹配元素被相关URL指向</td>
</tr>
<tr>
<td align="center">E:checked</td>
<td align="center">匹配选中的复选按钮或者单选按钮表单元素</td>
</tr>
<tr>
<td align="center">E:enabled</td>
<td align="center">匹配所有启用的表单元素</td>
</tr>
<tr>
<td align="center">E:disabled</td>
<td align="center">匹配所有禁用的表单元素</td>
</tr>
<tr>
<td align="center">E:: selection</td>
<td align="center">选择被用户选取的元素部分。</td>
</tr>
</tbody></table>
<h3 id="not-F-例子"><a href="#not-F-例子" class="headerlink" title="not(F) 例子"></a>not(F) 例子</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">li:not(.six)&#123;	</span><br><span class="line">    background: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://s2.ax1x.com/2019/07/17/ZLmgbj.jpg" alt="我是图片"></p>
<h3 id="E-target-例子"><a href="#E-target-例子" class="headerlink" title="E:target 例子"></a>E:target 例子</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line">div&#123;		</span><br><span class="line">    width: 100px;		</span><br><span class="line">    height: 100px;		</span><br><span class="line">    font-size: 30px;		</span><br><span class="line"><span class="css">    <span class="selector-tag">color</span><span class="selector-pseudo">:white</span>;		</span></span><br><span class="line">    background: red;		</span><br><span class="line">    display: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-tag">div</span><span class="selector-pseudo">:target</span>&#123;		</span></span><br><span class="line">    display: block;		</span><br><span class="line">    background: blue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#a1&quot;</span>&gt;</span>显示一<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#a2&quot;</span>&gt;</span>显示二<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#a3&quot;</span>&gt;</span>显示三<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;a1&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;a2&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;a3&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CSS3</category>
      </categories>
  </entry>
  <entry>
    <title>CANVAS</title>
    <url>/2018/06/24/CANVAS/</url>
    <content><![CDATA[<h2 id="什么是canvas"><a href="#什么是canvas" class="headerlink" title="什么是canvas"></a>什么是canvas</h2><h5 id="canvas-元素用于在网页上绘制图形。HTML5-的-canvas-元素使用-JavaScript-在网页上绘制2D图像。在矩形区域的画布上，控制其每一像素，JavaScript-来绘制-2D或3D图形，逐像素进行渲染。可以通过多种方法使用canvas-元素绘制路径、矩形、圆形、字符以及添加图像。"><a href="#canvas-元素用于在网页上绘制图形。HTML5-的-canvas-元素使用-JavaScript-在网页上绘制2D图像。在矩形区域的画布上，控制其每一像素，JavaScript-来绘制-2D或3D图形，逐像素进行渲染。可以通过多种方法使用canvas-元素绘制路径、矩形、圆形、字符以及添加图像。" class="headerlink" title="canvas 元素用于在网页上绘制图形。HTML5 的 canvas 元素使用 JavaScript 在网页上绘制2D图像。在矩形区域的画布上，控制其每一像素，JavaScript 来绘制 2D或3D图形，逐像素进行渲染。可以通过多种方法使用canvas 元素绘制路径、矩形、圆形、字符以及添加图像。"></a>canvas 元素用于在网页上绘制图形。HTML5 的 canvas 元素使用 JavaScript 在网页上绘制2D图像。在矩形区域的画布上，控制其每一像素，JavaScript 来绘制 2D或3D图形，逐像素进行渲染。可以通过多种方法使用canvas 元素绘制路径、矩形、圆形、字符以及添加图像。</h5><h6 id="IE9-0以前的版本不支持"><a href="#IE9-0以前的版本不支持" class="headerlink" title="IE9.0以前的版本不支持"></a>IE9.0以前的版本不支持</h6><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">width</span>=<span class="string">800</span> <span class="attr">height</span>=<span class="string">800</span>&gt;</span>你的浏览器版本太低，请升级最新的浏览器！<span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="获取画布对象"><a href="#获取画布对象" class="headerlink" title="获取画布对象"></a>获取画布对象</h2><blockquote>
<p>getContext方法可返回一个对象，该对象提供了用于在画布上绘图的方法和属性。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.querySelector(<span class="string">&quot;canvas&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> ctx = canvas.getContext(<span class="string">&quot;2d&quot;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="绘制线条"><a href="#绘制线条" class="headerlink" title="绘制线条"></a>绘制线条</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ctx.beginPath();<span class="comment">//开始一个绘制路径</span></span><br><span class="line">ctx.moveTo(<span class="number">200</span>,<span class="number">0</span>)<span class="comment">//移动绘制的开始点</span></span><br><span class="line">ctx.lineWidth = <span class="number">5</span>;<span class="comment">//线条的宽度</span></span><br><span class="line">ctx.lineTo(<span class="number">200</span>,<span class="number">400</span>)<span class="comment">//从当前绘制点到设置的200，400坐标位置画一条直线</span></span><br><span class="line">ctx.strokeStyle = <span class="string">&quot;red&quot;</span><span class="comment">//设置描边颜色</span></span><br><span class="line">ctx.stroke();<span class="comment">//描边</span></span><br><span class="line">ctx.closePath();<span class="comment">//结束当前绘制路径</span></span><br></pre></td></tr></table></figure>

<h2 id="绘制文字、阴影"><a href="#绘制文字、阴影" class="headerlink" title="绘制文字、阴影"></a>绘制文字、阴影</h2><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><h6 id="font：设置或返回文本内容的当前字体属性"><a href="#font：设置或返回文本内容的当前字体属性" class="headerlink" title="font：设置或返回文本内容的当前字体属性"></a>font：设置或返回文本内容的当前字体属性</h6><h6 id="textAlign：设置或返回文本内容的当前对齐方式"><a href="#textAlign：设置或返回文本内容的当前对齐方式" class="headerlink" title="textAlign：设置或返回文本内容的当前对齐方式"></a>textAlign：设置或返回文本内容的当前对齐方式</h6><h6 id="textBaseline：设置或返回在绘制文本时使用的当前文本基线"><a href="#textBaseline：设置或返回在绘制文本时使用的当前文本基线" class="headerlink" title="textBaseline：设置或返回在绘制文本时使用的当前文本基线"></a>textBaseline：设置或返回在绘制文本时使用的当前文本基线</h6><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><h6 id="fillText-text-x-y-maxWidth-text表示文字，x、y为坐标、maxWidth可选，为文字最大宽度，防止文字溢出；填充文字"><a href="#fillText-text-x-y-maxWidth-text表示文字，x、y为坐标、maxWidth可选，为文字最大宽度，防止文字溢出；填充文字" class="headerlink" title="fillText(text,x,y,maxWidth): text表示文字，x、y为坐标、maxWidth可选，为文字最大宽度，防止文字溢出；填充文字"></a>fillText(text,x,y,maxWidth): text表示文字，x、y为坐标、maxWidth可选，为文字最大宽度，防止文字溢出；填充文字</h6><h6 id="strokeText-text-x-y-maxWidth-text表示文字，x、y为坐标、maxWidth可选，为文字最大宽度，防止文字溢出；绘制文字"><a href="#strokeText-text-x-y-maxWidth-text表示文字，x、y为坐标、maxWidth可选，为文字最大宽度，防止文字溢出；绘制文字" class="headerlink" title="strokeText(text,x,y,maxWidth): text表示文字，x、y为坐标、maxWidth可选，为文字最大宽度，防止文字溢出；绘制文字"></a>strokeText(text,x,y,maxWidth): text表示文字，x、y为坐标、maxWidth可选，为文字最大宽度，防止文字溢出；绘制文字</h6><h3 id="设置阴影"><a href="#设置阴影" class="headerlink" title="设置阴影"></a>设置阴影</h3><h5 id="shadowColor-阴影颜色"><a href="#shadowColor-阴影颜色" class="headerlink" title="shadowColor 阴影颜色"></a>shadowColor 阴影颜色</h5><h5 id="shadowOffsetX-阴影的左右偏移值"><a href="#shadowOffsetX-阴影的左右偏移值" class="headerlink" title="shadowOffsetX 阴影的左右偏移值"></a>shadowOffsetX 阴影的左右偏移值</h5><h5 id="shadowOffsetY-阴影的上下偏移值"><a href="#shadowOffsetY-阴影的上下偏移值" class="headerlink" title="shadowOffsetY 阴影的上下偏移值"></a>shadowOffsetY 阴影的上下偏移值</h5><h5 id="shadowBlur-阴影模糊度"><a href="#shadowBlur-阴影模糊度" class="headerlink" title="shadowBlur 阴影模糊度"></a>shadowBlur 阴影模糊度</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//设置阴影函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">textShadow</span>(<span class="params">x,y,blur,color</span>) </span>&#123;</span><br><span class="line">	ctx.shadowColor = color;<span class="comment">//颜色</span></span><br><span class="line">	ctx.shadowOffsetX = x;<span class="comment">//x偏移</span></span><br><span class="line">	ctx.shadowOffsetY = y;<span class="comment">//y偏移</span></span><br><span class="line">	ctx.shadowBlur = blur;<span class="comment">//模糊度</span></span><br><span class="line">&#125;</span><br><span class="line">textShadow(<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="string">&quot;red&quot;</span>);<span class="comment">//设置阴影</span></span><br><span class="line">ctx.font = <span class="string">&quot;30px 黑体&quot;</span>;<span class="comment">//设置字体大小和字体类型</span></span><br><span class="line">ctx.textBaseline = <span class="string">&quot;bottom&quot;</span>;<span class="comment">//垂直对齐设置</span></span><br><span class="line">ctx.textAlign = <span class="string">&quot;right&quot;</span>;<span class="comment">//水平对齐设置</span></span><br><span class="line"><span class="comment">// ctx.strokeText(&quot;文字内容&quot;,200,200);//文字描边</span></span><br><span class="line">ctx.fillText(<span class="string">&quot;文字内容&quot;</span>,<span class="number">200</span>,<span class="number">200</span>)<span class="comment">//文字填充</span></span><br><span class="line"></span><br><span class="line">#### save()/restore()保存和返回设置</span><br><span class="line"></span><br><span class="line">save()：用来保存Canvas的状态。可以在调用Canvas的平移、放缩、旋转、错切、裁剪等操作前使用。</span><br><span class="line">restore()：用来恢复Canvas之前保存的状态。防止当前设置的操作对后续的绘制有影响。</span><br><span class="line">ctx.fillStyle = <span class="string">&quot;red&quot;</span>;<span class="comment">//设置填充颜色（红色）</span></span><br><span class="line">ctx.save();<span class="comment">//保存当前的设置</span></span><br><span class="line">ctx.fillStyle = <span class="string">&quot;blue&quot;</span>;<span class="comment">//设置填充颜色（蓝色）</span></span><br><span class="line">ctx.fillText(<span class="string">&quot;文字内容1&quot;</span>,<span class="number">100</span>,<span class="number">100</span>)<span class="comment">//文字填充（蓝色）</span></span><br><span class="line">ctx.restore();<span class="comment">//返回上一次保存的属性值</span></span><br><span class="line">ctx.fillText(<span class="string">&quot;文字内容2&quot;</span>,<span class="number">100</span>,<span class="number">200</span>)<span class="comment">//文字填充红色）</span></span><br></pre></td></tr></table></figure>

<h2 id="绘制图形"><a href="#绘制图形" class="headerlink" title="绘制图形"></a>绘制图形</h2><h4 id="rect矩形"><a href="#rect矩形" class="headerlink" title="rect矩形"></a>rect矩形</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">rect(x,y,w,h)：绘制矩形路径</span><br><span class="line">fillRect(x,y,w,h)：填充绘制矩形</span><br><span class="line">strokeRect(x,y,w,h)：描边绘制矩形</span><br><span class="line">clearRect(x,y,w,h)：清除矩形区域</span><br></pre></td></tr></table></figure>

<h4 id="描边矩形"><a href="#描边矩形" class="headerlink" title="描边矩形"></a>描边矩形</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ctx.rect(<span class="number">300</span>,<span class="number">300</span>,<span class="number">100</span>,<span class="number">100</span>)</span><br><span class="line">ctx.stroke();</span><br><span class="line"><span class="comment">//以上两句结合为下面一句</span></span><br><span class="line"><span class="comment">//ctx.strokeRect(300,300,100,100)</span></span><br></pre></td></tr></table></figure>
<h4 id="填充矩形"><a href="#填充矩形" class="headerlink" title="填充矩形"></a>填充矩形</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ctx.rect(<span class="number">300</span>,<span class="number">300</span>,<span class="number">100</span>,<span class="number">100</span>)</span><br><span class="line">ctx.fill();</span><br><span class="line"><span class="comment">//以上两句结合为下面一句</span></span><br><span class="line"><span class="comment">//ctx.fillRect(300,300,100,100)</span></span><br></pre></td></tr></table></figure>
<h4 id="清除矩形区域"><a href="#清除矩形区域" class="headerlink" title="清除矩形区域"></a>清除矩形区域</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取canvas宽高设置全屏清除</span></span><br><span class="line">ctx.clearRect(<span class="number">0</span>,<span class="number">0</span>,canvas.width,canvas.height);</span><br></pre></td></tr></table></figure>
<h2 id="arc圆形"><a href="#arc圆形" class="headerlink" title="arc圆形"></a>arc圆形</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">绘制圆路径方法arc(x,y,radius,startAngle,endAngle,bol)</span><br></pre></td></tr></table></figure>

<p>x,y：中心点<br>radius：半径<br>startAngle：开始角度<br>endAngle：结束角度<br>bol：false:顺时绘制(默认),true:逆时绘制</p>
<h3 id="绘制下半圆"><a href="#绘制下半圆" class="headerlink" title="绘制下半圆"></a>绘制下半圆</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Math.PI = 180度</span></span><br><span class="line">ctx.arc(<span class="number">200</span>,<span class="number">200</span>,<span class="number">100</span>,<span class="number">0</span>,<span class="built_in">Math</span>.PI,<span class="literal">false</span>)</span><br><span class="line">ctx.stroke();</span><br></pre></td></tr></table></figure>
<h3 id="绘制上半圆"><a href="#绘制上半圆" class="headerlink" title="绘制上半圆"></a>绘制上半圆</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ctx.arc(<span class="number">200</span>,<span class="number">200</span>,<span class="number">100</span>,<span class="number">0</span>,<span class="built_in">Math</span>.PI,<span class="literal">true</span>)</span><br><span class="line">ctx.stroke();</span><br></pre></td></tr></table></figure>
<h3 id="绘制整圆"><a href="#绘制整圆" class="headerlink" title="绘制整圆"></a>绘制整圆</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ctx.arc(<span class="number">200</span>,<span class="number">200</span>,<span class="number">100</span>,<span class="number">0</span>,<span class="built_in">Math</span>.PI*<span class="number">2</span>,<span class="literal">true</span>)</span><br><span class="line">ctx.stroke();</span><br></pre></td></tr></table></figure>
<h3 id="绘制吃豆人"><a href="#绘制吃豆人" class="headerlink" title="绘制吃豆人"></a>绘制吃豆人</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ctx.beginPath();</span><br><span class="line">ctx.moveTo(<span class="number">200</span>,<span class="number">200</span>);</span><br><span class="line">ctx.arc(<span class="number">200</span>,<span class="number">200</span>,<span class="number">100</span>,<span class="number">30</span>*<span class="built_in">Math</span>.PI/<span class="number">180</span>,<span class="number">330</span>*<span class="built_in">Math</span>.PI/<span class="number">180</span>,<span class="literal">false</span>)</span><br><span class="line">ctx.lineTo(<span class="number">200</span>,<span class="number">200</span>)</span><br><span class="line">ctx.fillStyle = <span class="string">&quot;#ebee01&quot;</span>;</span><br><span class="line">ctx.fill()</span><br><span class="line">ctx.closePath();</span><br></pre></td></tr></table></figure>

<h2 id="arcTo绘制弧度"><a href="#arcTo绘制弧度" class="headerlink" title="arcTo绘制弧度"></a>arcTo绘制弧度</h2><blockquote>
<p>在坐标50，50的位置画两条线，横长100，竖100，设置一个10像素的圆角</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ctx.beginPath();</span><br><span class="line">ctx.moveTo(<span class="number">50</span>,<span class="number">50</span>);</span><br><span class="line">ctx.lineTo(<span class="number">140</span>,<span class="number">50</span>);</span><br><span class="line">ctx.arcTo(<span class="number">150</span>,<span class="number">50</span>,<span class="number">150</span>,<span class="number">60</span>,<span class="number">10</span>);<span class="comment">//绘制弧度圆角</span></span><br><span class="line">ctx.lineTo(<span class="number">150</span>,<span class="number">150</span>);</span><br><span class="line">ctx.stroke();</span><br></pre></td></tr></table></figure>
<h2 id="曲线设置"><a href="#曲线设置" class="headerlink" title="曲线设置"></a>曲线设置</h2><blockquote>
<p>二次贝塞尔曲线方法quadraticCurveTo(cpx,cpy,x,y)</p>
</blockquote>
<h3 id="二次贝塞尔曲线，一个控制点，一个终点"><a href="#二次贝塞尔曲线，一个控制点，一个终点" class="headerlink" title="二次贝塞尔曲线，一个控制点，一个终点"></a>二次贝塞尔曲线，一个控制点，一个终点</h3><blockquote>
<p>三次贝塞尔曲线方法bezierCurveTo(cpx1,cpy1,cpx2,cpy2,x,y)</p>
</blockquote>
<h3 id="三次贝塞尔曲线，两个控制点，一个终点"><a href="#三次贝塞尔曲线，两个控制点，一个终点" class="headerlink" title="三次贝塞尔曲线，两个控制点，一个终点"></a>三次贝塞尔曲线，两个控制点，一个终点</h3><h3 id="cpx：曲线控制点x轴位置坐标"><a href="#cpx：曲线控制点x轴位置坐标" class="headerlink" title="cpx：曲线控制点x轴位置坐标"></a>cpx：曲线控制点x轴位置坐标</h3><h3 id="cpy：曲线控制点y轴位置坐标"><a href="#cpy：曲线控制点y轴位置坐标" class="headerlink" title="cpy：曲线控制点y轴位置坐标"></a>cpy：曲线控制点y轴位置坐标</h3><h3 id="x-y：终点位置坐标"><a href="#x-y：终点位置坐标" class="headerlink" title="x,y：终点位置坐标"></a>x,y：终点位置坐标</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//封装画曲线函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params">x,y</span>) </span>&#123;</span><br><span class="line">	<span class="comment">//清空画布</span></span><br><span class="line">	ctx.clearRect(<span class="number">0</span>,<span class="number">0</span>,canvas.width,canvas.height)</span><br><span class="line">	<span class="comment">//绘制曲线</span></span><br><span class="line">	ctx.beginPath();</span><br><span class="line">	ctx.moveTo(<span class="number">100</span>,<span class="number">100</span>)</span><br><span class="line">	<span class="comment">// ctx.lineTo(200,200)</span></span><br><span class="line">	ctx.strokeStyle = <span class="string">&quot;blue&quot;</span>;<span class="comment">//设置蓝色</span></span><br><span class="line">	ctx.quadraticCurveTo(x,y,<span class="number">200</span>,<span class="number">200</span>)</span><br><span class="line">	ctx.stroke();</span><br><span class="line">	<span class="comment">//绘制控制点的线</span></span><br><span class="line">	ctx.beginPath();</span><br><span class="line">	ctx.moveTo(<span class="number">100</span>,<span class="number">100</span>)</span><br><span class="line">	ctx.lineTo(x,y)</span><br><span class="line">	ctx.strokeStyle = <span class="string">&quot;red&quot;</span>;<span class="comment">//设置红色</span></span><br><span class="line">	ctx.stroke();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//拖拽调用画曲线函数查看效果</span></span><br><span class="line"><span class="keyword">var</span> x=<span class="number">0</span>,y=<span class="number">0</span>,bol=<span class="literal">false</span>;</span><br><span class="line">canvas.onmousedown = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	bol = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">canvas.onmousemove = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (bol) &#123;</span><br><span class="line">		x = e.clientX - canvas.offsetLeft;</span><br><span class="line">		y = e.clientY - canvas.offsetTop;</span><br><span class="line">		draw(x,y)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">canvas.onmouseup = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	bol = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="转换操作"><a href="#转换操作" class="headerlink" title="转换操作"></a>转换操作</h2><h3 id="缩放scale-x-y"><a href="#缩放scale-x-y" class="headerlink" title="缩放scale(x,y)"></a>缩放scale(x,y)</h3><blockquote>
<p>缩放当前绘图至更大或更小。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ctx.scale(<span class="number">2</span>,<span class="number">2</span>)<span class="comment">//缩放2倍大小；</span></span><br><span class="line">ctx.fillRect(<span class="number">50</span>,<span class="number">50</span>,<span class="number">100</span>,<span class="number">100</span>)<span class="comment">//绘制出200*200的矩形</span></span><br></pre></td></tr></table></figure>
<h3 id="旋转rotate-angle"><a href="#旋转rotate-angle" class="headerlink" title="旋转rotate(angle)"></a>旋转rotate(angle)</h3><blockquote>
<p>旋转当前绘图；angle为旋转的角度，用弧度表示。Math.PI表示180°</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ctx.rotate(<span class="built_in">Math</span>.PI/<span class="number">180</span>*<span class="number">30</span>)<span class="comment">//旋转30度</span></span><br><span class="line">ctx.fillRect(<span class="number">0</span>,<span class="number">0</span>,<span class="number">200</span>,<span class="number">200</span>)<span class="comment">//绘制矩形</span></span><br></pre></td></tr></table></figure>
<h3 id="偏移translate-x-y"><a href="#偏移translate-x-y" class="headerlink" title="偏移translate(x,y)"></a>偏移translate(x,y)</h3><blockquote>
<p>为画布的变换矩阵添加水平的和垂直的偏移 ；x、y为在横、纵坐标轴上的偏移量</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ctx.translate(<span class="number">400</span>,<span class="number">400</span>);<span class="comment">//把画布起点位置（0,0）移动到（400,400）的位置</span></span><br><span class="line"><span class="comment">//绘制矩形在画布中心点旋转效果</span></span><br><span class="line"><span class="keyword">var</span> deg = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	deg += <span class="number">1</span>;<span class="comment">//角度递增</span></span><br><span class="line">	ctx.save();<span class="comment">//保存当前设置</span></span><br><span class="line">	<span class="comment">//清空画布</span></span><br><span class="line">	ctx.clearRect(<span class="number">-400</span>,<span class="number">-400</span>,canvas.width,canvas.height)</span><br><span class="line">	ctx.rotate(<span class="built_in">Math</span>.PI/<span class="number">180</span>*deg)<span class="comment">//旋转角度</span></span><br><span class="line">	ctx.fillRect(<span class="number">-100</span>,<span class="number">-100</span>,<span class="number">200</span>,<span class="number">200</span>)<span class="comment">//绘制矩形</span></span><br><span class="line">	ctx.restore();<span class="comment">//返回上一次保存的设置</span></span><br><span class="line">&#125;,<span class="number">30</span>)</span><br></pre></td></tr></table></figure>
<h2 id="渐变绘制"><a href="#渐变绘制" class="headerlink" title="渐变绘制"></a>渐变绘制</h2><h2 id="线性渐变"><a href="#线性渐变" class="headerlink" title="线性渐变"></a>线性渐变</h2><blockquote>
<p>createLinearGradient(x1,y1,x2,y2)方法创建线性的渐变对象。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建线性渐变颜色</span></span><br><span class="line"><span class="keyword">var</span> c = ctx.createLinearGradient(<span class="number">0</span>,<span class="number">0</span>,<span class="number">800</span>,<span class="number">800</span>);</span><br><span class="line"><span class="comment">// 添加渐变颜色，渐变百分比0-1；</span></span><br><span class="line">c.addColorStop(<span class="number">0</span>,<span class="string">&quot;red&quot;</span>);</span><br><span class="line">c.addColorStop(<span class="number">0.5</span>,<span class="string">&quot;blue&quot;</span>);</span><br><span class="line">c.addColorStop(<span class="number">1</span>,<span class="string">&quot;yellow&quot;</span>);</span><br><span class="line">ctx.fillStyle = c;<span class="comment">//设置填充颜色为渐变颜色</span></span><br><span class="line">ctx.fillRect(<span class="number">0</span>,<span class="number">0</span>,<span class="number">800</span>,<span class="number">800</span>);<span class="comment">//填充矩形</span></span><br><span class="line">## 径向渐变</span><br><span class="line"></span><br><span class="line">createRadialGradient(x1,y1,r1,x2,y2,r2)方法创建径向的渐变对象。</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建线性渐变颜色</span></span><br><span class="line"><span class="keyword">var</span> c = ctx.createRadialGradient(<span class="number">400</span>,<span class="number">400</span>,<span class="number">0</span>,<span class="number">400</span>,<span class="number">400</span>,<span class="number">400</span>);</span><br><span class="line"><span class="comment">// 添加渐变颜色，渐变百分比0-1；</span></span><br><span class="line">c.addColorStop(<span class="number">0</span>,<span class="string">&quot;red&quot;</span>);</span><br><span class="line">c.addColorStop(<span class="number">0.5</span>,<span class="string">&quot;blue&quot;</span>);</span><br><span class="line">c.addColorStop(<span class="number">1</span>,<span class="string">&quot;yellow&quot;</span>);</span><br><span class="line">ctx.fillStyle = c;<span class="comment">//设置填充颜色为渐变颜色</span></span><br><span class="line">ctx.fillRect(<span class="number">0</span>,<span class="number">0</span>,<span class="number">800</span>,<span class="number">800</span>);<span class="comment">//填充矩形</span></span><br></pre></td></tr></table></figure>
<h2 id="图像组合"><a href="#图像组合" class="headerlink" title="图像组合"></a>图像组合</h2><h3 id="source-over：为属性globalCompositeOperation属性的默认值表示新图形覆盖在原图形之上"><a href="#source-over：为属性globalCompositeOperation属性的默认值表示新图形覆盖在原图形之上" class="headerlink" title="source-over：为属性globalCompositeOperation属性的默认值表示新图形覆盖在原图形之上"></a>source-over：为属性globalCompositeOperation属性的默认值表示新图形覆盖在原图形之上</h3><h3 id="source-atop：只绘制新图形与原图形相重叠的部分，以及原图形其他部分"><a href="#source-atop：只绘制新图形与原图形相重叠的部分，以及原图形其他部分" class="headerlink" title="source-atop：只绘制新图形与原图形相重叠的部分，以及原图形其他部分"></a>source-atop：只绘制新图形与原图形相重叠的部分，以及原图形其他部分</h3><h3 id="source-in：只绘制新图形与原图形重叠的部分，新图形与原图形其他部分变透明"><a href="#source-in：只绘制新图形与原图形重叠的部分，新图形与原图形其他部分变透明" class="headerlink" title="source-in：只绘制新图形与原图形重叠的部分，新图形与原图形其他部分变透明"></a>source-in：只绘制新图形与原图形重叠的部分，新图形与原图形其他部分变透明</h3><h3 id="source-out：只绘制新图形与原图形不重叠的部分；新图形与原图形其他部分变透明"><a href="#source-out：只绘制新图形与原图形不重叠的部分；新图形与原图形其他部分变透明" class="headerlink" title="source-out：只绘制新图形与原图形不重叠的部分；新图形与原图形其他部分变透明"></a>source-out：只绘制新图形与原图形不重叠的部分；新图形与原图形其他部分变透明</h3><h3 id="destination-over：表示原图形覆盖在新图形之上dest-ination-atop：只绘制原图形与新图形相重叠的部分，以及新图形其他部分"><a href="#destination-over：表示原图形覆盖在新图形之上dest-ination-atop：只绘制原图形与新图形相重叠的部分，以及新图形其他部分" class="headerlink" title="destination-over：表示原图形覆盖在新图形之上dest* ination-atop：只绘制原图形与新图形相重叠的部分，以及新图形其他部分"></a>destination-over：表示原图形覆盖在新图形之上dest* ination-atop：只绘制原图形与新图形相重叠的部分，以及新图形其他部分</h3><h3 id="destination-in：只绘制原图形与新图形重叠的部分，原图形与新图形其他部分变透明"><a href="#destination-in：只绘制原图形与新图形重叠的部分，原图形与新图形其他部分变透明" class="headerlink" title="destination-in：只绘制原图形与新图形重叠的部分，原图形与新图形其他部分变透明"></a>destination-in：只绘制原图形与新图形重叠的部分，原图形与新图形其他部分变透明</h3><h3 id="destination-out：只绘制原图形与新图形不重叠的部分；原图形与新图形其他部分变透明"><a href="#destination-out：只绘制原图形与新图形不重叠的部分；原图形与新图形其他部分变透明" class="headerlink" title="destination-out：只绘制原图形与新图形不重叠的部分；原图形与新图形其他部分变透明"></a>destination-out：只绘制原图形与新图形不重叠的部分；原图形与新图形其他部分变透明</h3><h3 id="lighter：原有图形与新图形都绘制，重叠部分加色处理"><a href="#lighter：原有图形与新图形都绘制，重叠部分加色处理" class="headerlink" title="lighter：原有图形与新图形都绘制，重叠部分加色处理"></a>lighter：原有图形与新图形都绘制，重叠部分加色处理</h3><h3 id="xor：只绘制原、新图形不重叠之处，其他做透明色"><a href="#xor：只绘制原、新图形不重叠之处，其他做透明色" class="headerlink" title="xor：只绘制原、新图形不重叠之处，其他做透明色"></a>xor：只绘制原、新图形不重叠之处，其他做透明色</h3><h3 id="copy：只绘制新图形，覆盖掉原图"><a href="#copy：只绘制新图形，覆盖掉原图" class="headerlink" title="copy：只绘制新图形，覆盖掉原图"></a>copy：只绘制新图形，覆盖掉原图</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;source-over&#x27;</span>,<span class="string">&#x27;source-in&#x27;</span>,<span class="string">&#x27;source-out&#x27;</span>,<span class="string">&#x27;source-atop&#x27;</span>,</span><br><span class="line">	<span class="string">&#x27;destination-over&#x27;</span>,<span class="string">&#x27;destination-in&#x27;</span>,<span class="string">&#x27;destination-out&#x27;</span>,<span class="string">&#x27;destination-atop&#x27;</span>,<span class="string">&#x27;lighter&#x27;</span>,<span class="string">&#x27;xor&#x27;</span>,<span class="string">&#x27;copy&#x27;</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line"><span class="comment">//创建canvas</span></span><br><span class="line">	<span class="keyword">var</span> canvas = <span class="built_in">document</span>.createElement(<span class="string">&quot;canvas&quot;</span>);</span><br><span class="line">	canvas.width = <span class="number">200</span>;</span><br><span class="line">	canvas.height = <span class="number">200</span>;</span><br><span class="line">	<span class="keyword">var</span> ctx = canvas.getContext(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//绘制一个矩形</span></span><br><span class="line">	ctx.beginPath();</span><br><span class="line">	ctx.rect(<span class="number">20</span>,<span class="number">30</span>,<span class="number">100</span>,<span class="number">100</span>);</span><br><span class="line">	ctx.fillStyle = <span class="string">&quot;blue&quot;</span>;</span><br><span class="line">	ctx.fill()</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//绘制二个圆</span></span><br><span class="line">	ctx.globalCompositeOperation = arr[i];<span class="comment">//设置组合方式</span></span><br><span class="line">	ctx.beginPath();</span><br><span class="line">	ctx.arc(<span class="number">120</span>,<span class="number">130</span>,<span class="number">50</span>,<span class="number">0</span>,<span class="built_in">Math</span>.PI*<span class="number">2</span>);</span><br><span class="line">	ctx.fillStyle = <span class="string">&quot;red&quot;</span>;</span><br><span class="line">	ctx.fill()</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">document</span>.body.appendChild(canvas);</span><br><span class="line">	<span class="comment">//输出当前组合效果的属性文字</span></span><br><span class="line">	ctx.globalCompositeOperation = arr[<span class="number">0</span>];<span class="comment">//设置为默认的组合方式</span></span><br><span class="line">	ctx.font = <span class="string">&quot;20px 黑体&quot;</span>;</span><br><span class="line">	ctx.textAlign = <span class="string">&quot;center&quot;</span>;</span><br><span class="line">	ctx.textBaseline = <span class="string">&quot;top&quot;</span>;</span><br><span class="line">	ctx.fillText(arr[i],<span class="number">100</span>,<span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="绘制图像"><a href="#绘制图像" class="headerlink" title="绘制图像"></a>绘制图像</h2><h3 id="drawImage-img-x-y"><a href="#drawImage-img-x-y" class="headerlink" title="drawImage(img,x,y)"></a>drawImage(img,x,y)</h3><blockquote>
<p>把图片绘制在画布的指定x,y坐标上</p>
</blockquote>
<h6 id="img：图片对象"><a href="#img：图片对象" class="headerlink" title="img：图片对象"></a>img：图片对象</h6><h6 id="x：图片横坐标的起始值"><a href="#x：图片横坐标的起始值" class="headerlink" title="x：图片横坐标的起始值"></a>x：图片横坐标的起始值</h6><h6 id="y：图片纵坐标的起始值"><a href="#y：图片纵坐标的起始值" class="headerlink" title="y：图片纵坐标的起始值"></a>y：图片纵坐标的起始值</h6><h6 id="drawImage-img-x-y-w-h"><a href="#drawImage-img-x-y-w-h" class="headerlink" title="drawImage(img,x,y,w,h)"></a>drawImage(img,x,y,w,h)</h6><blockquote>
<p>绘制固定宽高的图像</p>
</blockquote>
<h6 id="img：图片对象-1"><a href="#img：图片对象-1" class="headerlink" title="img：图片对象"></a>img：图片对象</h6><h6 id="x：图片横坐标的起始值-1"><a href="#x：图片横坐标的起始值-1" class="headerlink" title="x：图片横坐标的起始值"></a>x：图片横坐标的起始值</h6><h6 id="y：图片纵坐标的起始值-1"><a href="#y：图片纵坐标的起始值-1" class="headerlink" title="y：图片纵坐标的起始值"></a>y：图片纵坐标的起始值</h6><h6 id="w：在画布中图片显示的宽度"><a href="#w：在画布中图片显示的宽度" class="headerlink" title="w：在画布中图片显示的宽度"></a>w：在画布中图片显示的宽度</h6><h6 id="h：在画布中图片显示的高度"><a href="#h：在画布中图片显示的高度" class="headerlink" title="h：在画布中图片显示的高度"></a>h：在画布中图片显示的高度</h6><h3 id="drawImage-img-x-y-w-h-rx-ry-rw-rh"><a href="#drawImage-img-x-y-w-h-rx-ry-rw-rh" class="headerlink" title="drawImage(img,x,y,w,h,rx,ry,rw,rh)"></a>drawImage(img,x,y,w,h,rx,ry,rw,rh)</h3><blockquote>
<p>复制或放大图像局部：</p>
</blockquote>
<h6 id="img：图片对象-2"><a href="#img：图片对象-2" class="headerlink" title="img：图片对象"></a>img：图片对象</h6><h6 id="x、y：源图片的起点坐标"><a href="#x、y：源图片的起点坐标" class="headerlink" title="x、y：源图片的起点坐标"></a>x、y：源图片的起点坐标</h6><h6 id="w、h：在源图片上裁剪的宽、高"><a href="#w、h：在源图片上裁剪的宽、高" class="headerlink" title="w、h：在源图片上裁剪的宽、高"></a>w、h：在源图片上裁剪的宽、高</h6><h6 id="rx、ry：显示在画布中的坐标"><a href="#rx、ry：显示在画布中的坐标" class="headerlink" title="rx、ry：显示在画布中的坐标"></a>rx、ry：显示在画布中的坐标</h6><h6 id="rw、rh：显示在画布中的宽、高"><a href="#rw、rh：显示在画布中的宽、高" class="headerlink" title="rw、rh：显示在画布中的宽、高"></a>rw、rh：显示在画布中的宽、高</h6><h2 id="平铺createPattern-img-type"><a href="#平铺createPattern-img-type" class="headerlink" title="平铺createPattern(img,type)"></a>平铺createPattern(img,type)</h2><blockquote>
<p>创建背景对象可设置平铺</p>
</blockquote>
<h6 id="img：图片对象-3"><a href="#img：图片对象-3" class="headerlink" title="img：图片对象"></a>img：图片对象</h6><h6 id="type："><a href="#type：" class="headerlink" title="type："></a>type：</h6><h6 id="repeat：整个画布平铺"><a href="#repeat：整个画布平铺" class="headerlink" title="repeat：整个画布平铺"></a>repeat：整个画布平铺</h6><h6 id="repeat-x：在x轴方向上平铺"><a href="#repeat-x：在x轴方向上平铺" class="headerlink" title="repeat-x：在x轴方向上平铺"></a>repeat-x：在x轴方向上平铺</h6><h6 id="repeat-y：在y轴方向上平铺"><a href="#repeat-y：在y轴方向上平铺" class="headerlink" title="repeat-y：在y轴方向上平铺"></a>repeat-y：在y轴方向上平铺</h6><h6 id="no-repeat：不平铺"><a href="#no-repeat：不平铺" class="headerlink" title="no-repeat：不平铺"></a>no-repeat：不平铺</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> bg = ctx.createPattern(img,<span class="string">&quot;repeat&quot;</span>);</span><br><span class="line">ctx.fillStyle = bg;</span><br><span class="line">ctx.fillRect(<span class="number">0</span>,<span class="number">0</span>,canvas.width,canvas.height);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>html5</category>
      </categories>
  </entry>
  <entry>
    <title>CSS的一些零碎总结</title>
    <url>/2018/06/27/CSS%E7%9A%84%E4%B8%80%E4%BA%9B%E9%9B%B6%E7%A2%8E%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h3 id="1、CSS-伪元素用于向某些选择器设置特殊效果（用来当作一个东西的，跟一个元素差不多，但不是元素）。"><a href="#1、CSS-伪元素用于向某些选择器设置特殊效果（用来当作一个东西的，跟一个元素差不多，但不是元素）。" class="headerlink" title="1、CSS 伪元素用于向某些选择器设置特殊效果（用来当作一个东西的，跟一个元素差不多，但不是元素）。"></a>1、CSS 伪元素用于向某些选择器设置特殊效果（用来当作一个东西的，跟一个元素差不多，但不是元素）。</h3><h4 id="①-frist-line伪元素：用于向文本首行设置特殊样式，但是只能用于块级元素。"><a href="#①-frist-line伪元素：用于向文本首行设置特殊样式，但是只能用于块级元素。" class="headerlink" title="① :frist-line伪元素：用于向文本首行设置特殊样式，但是只能用于块级元素。"></a>① :frist-line伪元素：用于向文本首行设置特殊样式，但是只能用于块级元素。</h4><h4 id="以下属性可应用于-“-frist-line-”-伪元素："><a href="#以下属性可应用于-“-frist-line-”-伪元素：" class="headerlink" title="以下属性可应用于 “ frist-line ” 伪元素："></a>以下属性可应用于 “ frist-line ” 伪元素：</h4><blockquote>
<p>font、color、background、word-spacing、letter-spacing、text-decoration、vertical-align、text-transform、line-height、clear 。</p>
</blockquote>
<h4 id="②-first-letter伪元素：用于向文本首字母设置特殊样式，只能用于块级元素。"><a href="#②-first-letter伪元素：用于向文本首字母设置特殊样式，只能用于块级元素。" class="headerlink" title="② :first-letter伪元素：用于向文本首字母设置特殊样式，只能用于块级元素。"></a>② :first-letter伪元素：用于向文本首字母设置特殊样式，只能用于块级元素。</h4><h3 id="以下属性可应用于-“-first-letter-”-伪元素："><a href="#以下属性可应用于-“-first-letter-”-伪元素：" class="headerlink" title="以下属性可应用于 “ first-letter ” 伪元素："></a>以下属性可应用于 “ first-letter ” 伪元素：</h3><blockquote>
<p>font、color、background、margin、padding、border、text-decoration、vertical-align(仅当float为none时)、text-transform、line-height、float、clear 。</p>
</blockquote>
<ul>
<li><p>③ 伪元素和css类可以配合使用：p.article: first-letter { }，可以使所有 class 为 article 的段落的首字母样式改变 。</p>
</li>
<li><p>④ 多重伪元素：可以结合多个伪元素来使用。p: first-letter { }，p: first-line { }：段落的第一个字母根据p: first-letter具体样式显示，第一行其余文本根据p: first-line具体样式显示，段落中其余文本以具体段落设置的其他样式显示。</p>
</li>
<li><p>⑤ :before伪元素：可以在元素内容前面插入新内容 。</p>
</li>
<li><p>⑥ :after伪元素：可以在元素的内容之后插入新内容 。</p>
</li>
<li><p>⑦ 许多人喜欢给 blockquote 引用段添加巨大的引号作为背景，这种时候我们就可以用 :before 来代替 background 了，既可以给背景留下空间，还可以直接使用文字而非图片：</p>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">blockquote</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: open-quote;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">z-index</span>: -<span class="number">1</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#DDD</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">120px</span>;</span><br><span class="line">    <span class="attribute">font-family</span>: serif;</span><br><span class="line">    <span class="attribute">font-weight</span>: bolder;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="⑧-清除浮动："><a href="#⑧-清除浮动：" class="headerlink" title="⑧ 清除浮动："></a>⑧ 清除浮动：</h3><h5 id="clear-fix-overflow-hidden-zoom-1-clear-fix-after-display-table-content-“”-width-0-clear-both"><a href="#clear-fix-overflow-hidden-zoom-1-clear-fix-after-display-table-content-“”-width-0-clear-both" class="headerlink" title=".clear-fix { *overflow: hidden; *zoom: 1; }.clear-fix:after { display: table; content: “”; width: 0; clear: both; }"></a>.clear-fix { *overflow: hidden; *zoom: 1; }.clear-fix:after { display: table; content: “”; width: 0; clear: both; }</h5><h4 id="2、CSS-伪类用于向某些选择器添加特殊的效果（用来选择的）"><a href="#2、CSS-伪类用于向某些选择器添加特殊的效果（用来选择的）" class="headerlink" title="2、CSS 伪类用于向某些选择器添加特殊的效果（用来选择的）"></a>2、CSS 伪类用于向某些选择器添加特殊的效果（用来选择的）</h4><ul>
<li><p>① :active：向被激活的元素添加样式</p>
</li>
<li><p>② :focus：向拥有键盘输入焦点的元素添加样式</p>
</li>
<li><p>③ :hover：当鼠标悬浮在元素上方时，向元素添加样式</p>
</li>
<li><p>④ :link：向未被访问的链接添加样式</p>
</li>
<li><p>⑤ :visiter：向已被访问的链接添加样式</p>
</li>
<li><p>⑥ :first-child：向元素的第一个子元素添加样式</p>
</li>
<li><p>⑦ :lang：向带有指定lang属性的元素添加样式，使你有能力为不同的语言定义特殊的规则：</p>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">q</span><span class="selector-pseudo">:lang(no)</span></span><br><span class="line">   &#123;</span><br><span class="line">   <span class="attribute">quotes</span>: <span class="string">&quot;~&quot;</span> <span class="string">&quot;~&quot;</span></span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">&lt;p&gt;文字&lt;q lang=&quot;no&quot;&gt;段落中的引用的文字&lt;/q&gt;文字&lt;/p&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="3、解决塌陷，清除浮动"><a href="#3、解决塌陷，清除浮动" class="headerlink" title="3、解决塌陷，清除浮动"></a>3、解决塌陷，清除浮动</h3><ul>
<li>① 添加空元素</li>
</ul>
<h5 id="经典的解决方法，就是在浮动元素下方添加一个非浮动元素。"><a href="#经典的解决方法，就是在浮动元素下方添加一个非浮动元素。" class="headerlink" title="经典的解决方法，就是在浮动元素下方添加一个非浮动元素。"></a>经典的解决方法，就是在浮动元素下方添加一个非浮动元素。</h5><h5 id="代码这样写："><a href="#代码这样写：" class="headerlink" title="代码这样写："></a>代码这样写：</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;float:left;width:45%;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;float:right;width:45%;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;clear:both;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="原理是父容器现在必须考虑非浮动子元素的位置，而后者肯定出现在浮动元素下方，所以显示出来，父容器就把所有子元素都包括进去了。这种方法比较简单，但是要在页面中增加冗余标签，违背了语义网的原则。"><a href="#原理是父容器现在必须考虑非浮动子元素的位置，而后者肯定出现在浮动元素下方，所以显示出来，父容器就把所有子元素都包括进去了。这种方法比较简单，但是要在页面中增加冗余标签，违背了语义网的原则。" class="headerlink" title="原理是父容器现在必须考虑非浮动子元素的位置，而后者肯定出现在浮动元素下方，所以显示出来，父容器就把所有子元素都包括进去了。这种方法比较简单，但是要在页面中增加冗余标签，违背了语义网的原则。"></a>原理是父容器现在必须考虑非浮动子元素的位置，而后者肯定出现在浮动元素下方，所以显示出来，父容器就把所有子元素都包括进去了。这种方法比较简单，但是要在页面中增加冗余标签，违背了语义网的原则。</h5><ul>
<li>② 浮动的父容器</li>
</ul>
<h4 id="另一种思路是，索性将父容器也改成浮动定位，这样它就可以带着子元素一起浮动了。"><a href="#另一种思路是，索性将父容器也改成浮动定位，这样它就可以带着子元素一起浮动了。" class="headerlink" title="另一种思路是，索性将父容器也改成浮动定位，这样它就可以带着子元素一起浮动了。"></a>另一种思路是，索性将父容器也改成浮动定位，这样它就可以带着子元素一起浮动了。</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;float:left;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;float:left;width:45%;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;float:right;width:45%;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="这种方法不用修改HTML代码，但是缺点在于父容器变成浮动以后，会影响到后面元素的定位，而且有时候，父容器是定位死的，无法变成浮动。"><a href="#这种方法不用修改HTML代码，但是缺点在于父容器变成浮动以后，会影响到后面元素的定位，而且有时候，父容器是定位死的，无法变成浮动。" class="headerlink" title="这种方法不用修改HTML代码，但是缺点在于父容器变成浮动以后，会影响到后面元素的定位，而且有时候，父容器是定位死的，无法变成浮动。"></a>这种方法不用修改HTML代码，但是缺点在于父容器变成浮动以后，会影响到后面元素的定位，而且有时候，父容器是定位死的，无法变成浮动。</h4><ul>
<li>③  浮动元素的自动clearing<h4 id="让父容器变得可以自动”清理”（clearing）子元素的浮动，从而能够识别出浮动子元素的位置，不会出现显示上的差错。"><a href="#让父容器变得可以自动”清理”（clearing）子元素的浮动，从而能够识别出浮动子元素的位置，不会出现显示上的差错。" class="headerlink" title="让父容器变得可以自动”清理”（clearing）子元素的浮动，从而能够识别出浮动子元素的位置，不会出现显示上的差错。"></a>让父容器变得可以自动”清理”（clearing）子元素的浮动，从而能够识别出浮动子元素的位置，不会出现显示上的差错。</h4></li>
</ul>
<h4 id="要做到这点，只要为父容器加上一条”overflow-hidden”的CSS语句就行了。代码这样写："><a href="#要做到这点，只要为父容器加上一条”overflow-hidden”的CSS语句就行了。代码这样写：" class="headerlink" title="要做到这点，只要为父容器加上一条”overflow: hidden”的CSS语句就行了。代码这样写："></a>要做到这点，只要为父容器加上一条”overflow: hidden”的CSS语句就行了。代码这样写：</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;overflow: hidden;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;float:left;width:45%;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;float:right;width:45%;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="这种方法的缺点主要有二个，一个是IE-6不支持，另一个是一旦子元素的大小超过父容器的大小，就会出显示问题。"><a href="#这种方法的缺点主要有二个，一个是IE-6不支持，另一个是一旦子元素的大小超过父容器的大小，就会出显示问题。" class="headerlink" title="这种方法的缺点主要有二个，一个是IE 6不支持，另一个是一旦子元素的大小超过父容器的大小，就会出显示问题。"></a>这种方法的缺点主要有二个，一个是IE 6不支持，另一个是一旦子元素的大小超过父容器的大小，就会出显示问题。</h4><ul>
<li>④ 通过CSS语句添加子元素呢，这样就不用修改HTML代码</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;<span class="attribute">content</span>: <span class="string">&quot;\0020&quot;</span>;<span class="attribute">display</span>: block;<span class="attribute">height</span>: <span class="number">0</span>;<span class="attribute">clear</span>: both;&#125;<span class="selector-class">.clearfix</span> &#123;<span class="attribute">zoom</span>: <span class="number">1</span>;&#125;</span><br></pre></td></tr></table></figure>

<h4 id="“clearfix”是父容器的class名称，”content-”020”-”是在父容器的结尾处放一个空白字符，”height-0-”是让这个这个空白字符不显示出来，”display-block-clear-both-”是确保这个空白字符是非浮动的独立区块。添加一条IE-6的独有命令”zoom-1-”就行了，这条命令的作用是激活父元素的”hasLayout”属性，让父元素拥有自己的布局。IE-6会读取这条命令，其他浏览器则会直接忽略它。"><a href="#“clearfix”是父容器的class名称，”content-”020”-”是在父容器的结尾处放一个空白字符，”height-0-”是让这个这个空白字符不显示出来，”display-block-clear-both-”是确保这个空白字符是非浮动的独立区块。添加一条IE-6的独有命令”zoom-1-”就行了，这条命令的作用是激活父元素的”hasLayout”属性，让父元素拥有自己的布局。IE-6会读取这条命令，其他浏览器则会直接忽略它。" class="headerlink" title="“clearfix”是父容器的class名称，”content:”020”;”是在父容器的结尾处放一个空白字符，”height: 0;”是让这个这个空白字符不显示出来，”display: block; clear: both;”是确保这个空白字符是非浮动的独立区块。添加一条IE 6的独有命令”zoom:1;”就行了，这条命令的作用是激活父元素的”hasLayout”属性，让父元素拥有自己的布局。IE 6会读取这条命令，其他浏览器则会直接忽略它。"></a>“clearfix”是父容器的class名称，”content:”020”;”是在父容器的结尾处放一个空白字符，”height: 0;”是让这个这个空白字符不显示出来，”display: block; clear: both;”是确保这个空白字符是非浮动的独立区块。添加一条IE 6的独有命令”zoom:1;”就行了，这条命令的作用是激活父元素的”hasLayout”属性，让父元素拥有自己的布局。IE 6会读取这条命令，其他浏览器则会直接忽略它。</h4><h4 id="4、什么情况下hidden不起作用"><a href="#4、什么情况下hidden不起作用" class="headerlink" title="4、什么情况下hidden不起作用"></a>4、什么情况下hidden不起作用</h4><h4 id="position设置成fixed，overflow的hidden不起作用。"><a href="#position设置成fixed，overflow的hidden不起作用。" class="headerlink" title="position设置成fixed，overflow的hidden不起作用。"></a>position设置成fixed，overflow的hidden不起作用。</h4><h4 id="5、css盒子模型，问的是border、padding、margin三个属性如何作用在一个块级元素上？"><a href="#5、css盒子模型，问的是border、padding、margin三个属性如何作用在一个块级元素上？" class="headerlink" title="5、css盒子模型，问的是border、padding、margin三个属性如何作用在一个块级元素上？"></a>5、css盒子模型，问的是border、padding、margin三个属性如何作用在一个块级元素上？</h4><h4 id="一个盒子的宽度-border-padding-width-content内容的宽度-。"><a href="#一个盒子的宽度-border-padding-width-content内容的宽度-。" class="headerlink" title="一个盒子的宽度 = border + padding + width(content内容的宽度)。"></a>一个盒子的宽度 = border + padding + width(content内容的宽度)。</h4><h4 id="我想给一个给一个盒子加一个宽度，然后再加一个padding，但是这个盒子原本的宽度不改变，也就是说，width的值没有改变，且不会因为加了padding而往外扩增，该如何做？"><a href="#我想给一个给一个盒子加一个宽度，然后再加一个padding，但是这个盒子原本的宽度不改变，也就是说，width的值没有改变，且不会因为加了padding而往外扩增，该如何做？" class="headerlink" title="我想给一个给一个盒子加一个宽度，然后再加一个padding，但是这个盒子原本的宽度不改变，也就是说，width的值没有改变，且不会因为加了padding而往外扩增，该如何做？"></a>我想给一个给一个盒子加一个宽度，然后再加一个padding，但是这个盒子原本的宽度不改变，也就是说，width的值没有改变，且不会因为加了padding而往外扩增，该如何做？</h4><h4 id="有两种方式："><a href="#有两种方式：" class="headerlink" title="有两种方式："></a>有两种方式：</h4><ul>
<li><p>① 当一个块元素没有设置width时，这个盒子的宽度是默认填充父元素的宽度，这时随便给这个块元素加padding都是向内扩展的，不会向外扩展。</p>
</li>
<li><p>② border-sizing: content-box / border-box / inherit ;</p>
</li>
</ul>
<h4 id="content-box：宽度和高度分别应用到元素的内容框，在宽度和高度之外绘制元素的内边距和边框。"><a href="#content-box：宽度和高度分别应用到元素的内容框，在宽度和高度之外绘制元素的内边距和边框。" class="headerlink" title="content-box：宽度和高度分别应用到元素的内容框，在宽度和高度之外绘制元素的内边距和边框。"></a>content-box：宽度和高度分别应用到元素的内容框，在宽度和高度之外绘制元素的内边距和边框。</h4><h4 id="border-box：为元素设定的宽度和高度决定了元素的边框盒，就是说-用border的宽度来指代width，把加上border、padding之后的宽度，用width强行给限制住，然后宽度也就会变成向内扩展。"><a href="#border-box：为元素设定的宽度和高度决定了元素的边框盒，就是说-用border的宽度来指代width，把加上border、padding之后的宽度，用width强行给限制住，然后宽度也就会变成向内扩展。" class="headerlink" title="border-box：为元素设定的宽度和高度决定了元素的边框盒，就是说,用border的宽度来指代width，把加上border、padding之后的宽度，用width强行给限制住，然后宽度也就会变成向内扩展。"></a>border-box：为元素设定的宽度和高度决定了元素的边框盒，就是说,用border的宽度来指代width，把加上border、padding之后的宽度，用width强行给限制住，然后宽度也就会变成向内扩展。</h4><h4 id="inherit：规定应从父元素继承-box-sizing-属性的值。"><a href="#inherit：规定应从父元素继承-box-sizing-属性的值。" class="headerlink" title="inherit：规定应从父元素继承 box-sizing 属性的值。"></a>inherit：规定应从父元素继承 box-sizing 属性的值。</h4><p>##6、关于字体的，说一下rem这个单位（移动端），（产生和设置）</p>
<h4 id="em是相对于父元素的font-size，rem是相对于根元素的font-size。"><a href="#em是相对于父元素的font-size，rem是相对于根元素的font-size。" class="headerlink" title="em是相对于父元素的font-size，rem是相对于根元素的font-size。"></a>em是相对于父元素的font-size，rem是相对于根元素的font-size。</h4><h4 id="rem的补充："><a href="#rem的补充：" class="headerlink" title="rem的补充："></a>rem的补充：</h4><ul>
<li><p>① 对于不支持它的浏览器，应对方法也很简单，就是多写一个绝对单位的声明。这些浏览器会忽略用rem设定的字体大小；</p>
</li>
<li><p>② IE9/IE10在用于伪元素时或者使用字体简写声明时不支持rem；</p>
</li>
<li><p>③ IOS Safari5.0-5.1虽然支持rem，但是在使用媒体查询时不支持rem。</p>
</li>
</ul>
<h2 id="7、如何在css代码里提升代码的优先级？"><a href="#7、如何在css代码里提升代码的优先级？" class="headerlink" title="7、如何在css代码里提升代码的优先级？"></a>7、如何在css代码里提升代码的优先级？</h2><h3 id="a-color-red-用什么方法覆盖掉？-解决："><a href="#a-color-red-用什么方法覆盖掉？-解决：" class="headerlink" title="a { color:red;} 用什么方法覆盖掉？ 解决："></a>a { color:red;} 用什么方法覆盖掉？ 解决：</h3><ul>
<li><p>① body a { color:red;}</p>
<h3 id="优先级计算公式：标签-1，id-100，class-10，加起来就是他的优先级。"><a href="#优先级计算公式：标签-1，id-100，class-10，加起来就是他的优先级。" class="headerlink" title="优先级计算公式：标签=1，id=100，class=10，加起来就是他的优先级。"></a>优先级计算公式：标签=1，id=100，class=10，加起来就是他的优先级。</h3></li>
<li><p>② 在color后面加一个!important，强行将优先级提升到最大。</p>
</li>
<li><p>③ !important提升指定样式规则的应用优先权。</p>
</li>
</ul>
<p>##8、有两个CSS语句能起到隐藏节点的作用visibility和display</p>
<h4 id="（1）visibility"><a href="#（1）visibility" class="headerlink" title="（1）visibility"></a>（1）visibility</h4><blockquote>
<p>规定了元素是否可见，即使不可见也会占用上面的空间，在这里就是在指它与display的不一样了。</p>
</blockquote>
<h4 id="（2）display"><a href="#（2）display" class="headerlink" title="（2）display"></a>（2）display</h4><blockquote>
<p>这个属性用于定义建立布局时元素生成的显示框类型。对于 HTML 等文档类型，如果使用 display 不谨慎会很危险，因为可能违反 HTML 中已经定义的显示层次结构。对于 XML，由于 XML 没有内置的这种层次结构，所有 display 是绝对必要的。</p>
</blockquote>
<h4 id="（3）对比："><a href="#（3）对比：" class="headerlink" title="（3）对比："></a>（3）对比：</h4><h4 id="相同点：都有相同的功能就是隐藏。"><a href="#相同点：都有相同的功能就是隐藏。" class="headerlink" title="相同点：都有相同的功能就是隐藏。"></a>相同点：都有相同的功能就是隐藏。</h4><h4 id="不同点：当我们定义了display后，在渲染树中不会引擎是不会去构建这个框的。而visibility当我们使它隐藏的时候，他在渲染树中会构建，只是不去渲染。这也就是W3c上面所说的不可见会占空间的原因。他们两者在优化中visibility会显得更好，因为我们不会因为它而去改变了文档中已经定义好的显示层次结构了。"><a href="#不同点：当我们定义了display后，在渲染树中不会引擎是不会去构建这个框的。而visibility当我们使它隐藏的时候，他在渲染树中会构建，只是不去渲染。这也就是W3c上面所说的不可见会占空间的原因。他们两者在优化中visibility会显得更好，因为我们不会因为它而去改变了文档中已经定义好的显示层次结构了。" class="headerlink" title="不同点：当我们定义了display后，在渲染树中不会引擎是不会去构建这个框的。而visibility当我们使它隐藏的时候，他在渲染树中会构建，只是不去渲染。这也就是W3c上面所说的不可见会占空间的原因。他们两者在优化中visibility会显得更好，因为我们不会因为它而去改变了文档中已经定义好的显示层次结构了。"></a>不同点：当我们定义了display后，在渲染树中不会引擎是不会去构建这个框的。而visibility当我们使它隐藏的时候，他在渲染树中会构建，只是不去渲染。这也就是W3c上面所说的不可见会占空间的原因。他们两者在优化中visibility会显得更好，因为我们不会因为它而去改变了文档中已经定义好的显示层次结构了。</h4>]]></content>
      <categories>
        <category>CSS</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript 面向对象</title>
    <url>/2018/06/23/JavaScript%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><h4 id="OOP（Object-oriented-programming）面向对象编程，使用面向对象方法可以使代码更简洁、更易于维护，并且具有更强的可重用性。"><a href="#OOP（Object-oriented-programming）面向对象编程，使用面向对象方法可以使代码更简洁、更易于维护，并且具有更强的可重用性。" class="headerlink" title="OOP（Object-oriented programming）面向对象编程，使用面向对象方法可以使代码更简洁、更易于维护，并且具有更强的可重用性。"></a>OOP（Object-oriented programming）面向对象编程，使用面向对象方法可以使代码更简洁、更易于维护，并且具有更强的可重用性。</h4><h4 id="ECMA关于对象的定义是：”无序属性的集合，其属性可以包含基本值、对象或者函数。“对象的每个属性或方法都有一个名字，而每个名字都映射到一个值。"><a href="#ECMA关于对象的定义是：”无序属性的集合，其属性可以包含基本值、对象或者函数。“对象的每个属性或方法都有一个名字，而每个名字都映射到一个值。" class="headerlink" title="ECMA关于对象的定义是：”无序属性的集合，其属性可以包含基本值、对象或者函数。“对象的每个属性或方法都有一个名字，而每个名字都映射到一个值。"></a>ECMA关于对象的定义是：”无序属性的集合，其属性可以包含基本值、对象或者函数。“对象的每个属性或方法都有一个名字，而每个名字都映射到一个值。</h4><h5 id="对象：属性和方法的集合"><a href="#对象：属性和方法的集合" class="headerlink" title="对象：属性和方法的集合"></a>对象：属性和方法的集合</h5><h5 id="属性：变量"><a href="#属性：变量" class="headerlink" title="属性：变量"></a>属性：变量</h5><h5 id="方法：函数"><a href="#方法：函数" class="headerlink" title="方法：函数"></a>方法：函数</h5><h5 id="类：一组同样属性和方法的对象的集合"><a href="#类：一组同样属性和方法的对象的集合" class="headerlink" title="类：一组同样属性和方法的对象的集合"></a>类：一组同样属性和方法的对象的集合</h5><h5 id="封装：封装就是把对象的属性和行为结合成一个独立的相同单位，并尽可能隐蔽对象的内部细节"><a href="#封装：封装就是把对象的属性和行为结合成一个独立的相同单位，并尽可能隐蔽对象的内部细节" class="headerlink" title="封装：封装就是把对象的属性和行为结合成一个独立的相同单位，并尽可能隐蔽对象的内部细节"></a>封装：封装就是把对象的属性和行为结合成一个独立的相同单位，并尽可能隐蔽对象的内部细节</h5><h5 id="继承：面向对象开发方法建立在继承概念的基础上，这种策略提高了代码的重用性。"><a href="#继承：面向对象开发方法建立在继承概念的基础上，这种策略提高了代码的重用性。" class="headerlink" title="继承：面向对象开发方法建立在继承概念的基础上，这种策略提高了代码的重用性。"></a>继承：面向对象开发方法建立在继承概念的基础上，这种策略提高了代码的重用性。</h5><h5 id="多态：对象的多态性是指在父类中定义的属性或行为被子类继承之后，可以具有不同的数据类型或表现出不同的行为。这使得同一个属性或行为在父类及其各个子类中具有不同的语义。"><a href="#多态：对象的多态性是指在父类中定义的属性或行为被子类继承之后，可以具有不同的数据类型或表现出不同的行为。这使得同一个属性或行为在父类及其各个子类中具有不同的语义。" class="headerlink" title="多态：对象的多态性是指在父类中定义的属性或行为被子类继承之后，可以具有不同的数据类型或表现出不同的行为。这使得同一个属性或行为在父类及其各个子类中具有不同的语义。"></a>多态：对象的多态性是指在父类中定义的属性或行为被子类继承之后，可以具有不同的数据类型或表现出不同的行为。这使得同一个属性或行为在父类及其各个子类中具有不同的语义。</h5><h2 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br></pre></td></tr></table></figure>

<h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><blockquote>
<p>工厂模式就是在函数内创建一个对象，给对象添加属性和方法再返回对象。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;<span class="comment">//创建一个空对象</span></span><br><span class="line">obj.name = name;<span class="comment">//给对象加一个name属性</span></span><br><span class="line">obj.show = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">//给对象加一个show方法</span></span><br><span class="line">    <span class="built_in">console</span>.log(obj.name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> obj;<span class="comment">//把创建的对象返回出去</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = Person(<span class="string">&quot;obj&quot;</span>);</span><br><span class="line">obj.show();</span><br></pre></td></tr></table></figure>

<h2 id="构造函数模式"><a href="#构造函数模式" class="headerlink" title="构造函数模式"></a>构造函数模式</h2><blockquote>
<p>构造函数是通过new来创建对象，不需要创建一个空对象，直接使用this对象，也不需要返回一个对象，这是构造函数模式比工厂模式要好的地方。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line"><span class="built_in">this</span>.show = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> Person(<span class="string">&quot;obj&quot;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h2><blockquote>
<p>每个函数都有prototype（原型）属性，通过函数创建的对象有proto（原型）属性，这个属性是一个指针，指向一个对象，所有对象都可以使用原型里面的属性和方法。原型对象都有constructor属性，该属性对应创建所有指向原型的构造函数。</p>
</blockquote>
<h5 id="使用构造函数每次创建对象的时候都会重新创建一次方法，创建两次或多次完全相同的方法是很浪费内存的，所以完全相同的方法应该使用原型来创建。"><a href="#使用构造函数每次创建对象的时候都会重新创建一次方法，创建两次或多次完全相同的方法是很浪费内存的，所以完全相同的方法应该使用原型来创建。" class="headerlink" title="使用构造函数每次创建对象的时候都会重新创建一次方法，创建两次或多次完全相同的方法是很浪费内存的，所以完全相同的方法应该使用原型来创建。"></a>使用构造函数每次创建对象的时候都会重新创建一次方法，创建两次或多次完全相同的方法是很浪费内存的，所以完全相同的方法应该使用原型来创建。</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line"><span class="comment">// this.show = function()&#123;</span></span><br><span class="line"><span class="comment">// 	console.log(this.name);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.show = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj1 = <span class="keyword">new</span> Person(<span class="string">&quot;obj1&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> obj2 = <span class="keyword">new</span> Person(<span class="string">&quot;obj2&quot;</span>);</span><br><span class="line">obj1.show();</span><br><span class="line">obj2.show();</span><br></pre></td></tr></table></figure>

<h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><blockquote>
<p>所有对象和原型都有父级原型，这种原型的层层关系叫原型链。</p>
</blockquote>
<p><img src="https://s2.ax1x.com/2019/07/17/ZLMjmD.jpg" alt="我是图片"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">this</span>.name = <span class="string">&quot;a&quot;</span>;</span><br><span class="line"><span class="built_in">this</span>.num1 = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//设置B的原型是A的对象</span></span><br><span class="line">B.prototype = <span class="keyword">new</span> A();</span><br><span class="line">B.prototype.constructor = B;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.name = <span class="string">&quot;b&quot;</span>;</span><br><span class="line"><span class="built_in">this</span>.num2 = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//设置C的原型是B的对象</span></span><br><span class="line">C.prototype = <span class="keyword">new</span> B();</span><br><span class="line">C.prototype.constructor = C;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">C</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.name = <span class="string">&quot;c&quot;</span>;</span><br><span class="line"><span class="built_in">this</span>.num3 = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> A();</span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> B();</span><br><span class="line"><span class="keyword">var</span> c = <span class="keyword">new</span> C();</span><br><span class="line"><span class="built_in">console</span>.log(c);<span class="comment">//查看c对象的原型链</span></span><br><span class="line"><span class="comment">/*原型链的作用域</span></span><br><span class="line"><span class="comment">父级获取不了子级的属性</span></span><br><span class="line"><span class="comment">子级可以获取到父级的属性</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">console</span>.log(a.num1,a.num2,a.num3)<span class="comment">//1 undefined undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(b.num1,b.num2,b.num3)<span class="comment">//1 2 undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(c.num1,c.num2,c.num3)<span class="comment">//1 2 3</span></span><br></pre></td></tr></table></figure>



<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><blockquote>
<p>有些功能需要多个对象的功能结合起来，所以需要一些对象继承其他对象的一些属性和方法来实现。</p>
</blockquote>
<h3 id="call和apply方法继承"><a href="#call和apply方法继承" class="headerlink" title="call和apply方法继承"></a>call和apply方法继承</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">	<span class="built_in">this</span>.name = name;</span><br><span class="line">	<span class="built_in">this</span>.show1 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="built_in">this</span>.name)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.show2 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//继承Person原型里的属性和方法</span></span><br><span class="line">Son.prototype = <span class="keyword">new</span> Person;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">	<span class="comment">//使用call或者apply继承Person构造函数里的属性和方法，原型的方法是继承不了的</span></span><br><span class="line">	Person.apply(<span class="built_in">this</span>,<span class="built_in">arguments</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Son继承了Person后，Son构造出来的对象也可以使用Person的属性和方法</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> Son(<span class="string">&quot;obj&quot;</span>);</span><br><span class="line">obj.show1();<span class="comment">//输出obj</span></span><br><span class="line">obj.show2();<span class="comment">//报错</span></span><br></pre></td></tr></table></figure>

<h2 id="拷贝继承"><a href="#拷贝继承" class="headerlink" title="拷贝继承"></a>拷贝继承</h2><blockquote>
<p>通过循环遍历拷贝对象里面的所有属性和方法。</p>
</blockquote>
<h2 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h2><blockquote>
<p>在JS中赋值如果是对象就不知拷贝了，是指向，两个变量都会指向同一个对象。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">copy</span>(<span class="params">child,parent</span>)</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> parent)&#123;</span><br><span class="line">	child[key] = parent[key]<span class="comment">//拷贝内容</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">	arr:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;&#125;;</span><br><span class="line">copy(obj2,obj1);<span class="comment">//obj2拷贝obj1的内容</span></span><br><span class="line">obj2.arr[<span class="number">1</span>] = <span class="number">6</span>;<span class="comment">//改变obj2里面的数组内容</span></span><br><span class="line"><span class="comment">//改变的是obj2的数组obj1里面的数组也改变了</span></span><br><span class="line"><span class="built_in">console</span>.log(obj1.arr);<span class="comment">//输出1,6,3,4</span></span><br></pre></td></tr></table></figure>

<h2 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h2><blockquote>
<p>通过判断是否对象结构递归方法实现对象的拷贝。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//深拷贝函数，使用到递归方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">copy</span>(<span class="params">child,parent</span>)</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> parent)&#123;</span><br><span class="line">   	<span class="keyword">if</span> (<span class="keyword">typeof</span> parent[key]==<span class="string">&quot;object&quot;</span>) &#123;<span class="comment">//判断是否对象</span></span><br><span class="line">   		child[key] = (parent[key].constructor == <span class="built_in">Array</span>)?[]:&#123;&#125;;<span class="comment">//判断对象是否数组,是创建数组否则创建对象</span></span><br><span class="line">   		copy(child[key],parent[key])<span class="comment">//递归循环复制对象内容</span></span><br><span class="line">   	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">   	child[key] = parent[key]<span class="comment">//拷贝内容</span></span><br><span class="line">   	&#125;		</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">	arr:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;&#125;;</span><br><span class="line">copy(obj2,obj1);<span class="comment">//obj2拷贝obj1的内容</span></span><br><span class="line">obj2.arr[<span class="number">1</span>] = <span class="number">6</span>;<span class="comment">//改变obj2里面的数组内容</span></span><br><span class="line"><span class="comment">//通过深拷贝的obj2怎么改变也不会影响到obj1了</span></span><br><span class="line"><span class="built_in">console</span>.log(obj1.arr);<span class="comment">//输出1,2,3,4</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>js高级</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript事件</title>
    <url>/2018/06/21/JavaScript%E4%BA%8B%E4%BB%B6/</url>
    <content><![CDATA[<h3 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h3><blockquote>
<p>事件对象代表事件的状态，比如事件在其中发生的元素、键盘按键的状态、鼠标的位置、鼠标按钮的状态。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.onclick = <span class="function"><span class="keyword">function</span>  (<span class="params">e</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> e = e || event;<span class="comment">//兼容写法</span></span><br><span class="line">	<span class="built_in">console</span>.log(e);<span class="comment">//输出事件对象查看</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="事件对象的一些属性和方法"><a href="#事件对象的一些属性和方法" class="headerlink" title="事件对象的一些属性和方法"></a>事件对象的一些属性和方法</h5><table>
<thead>
<tr>
<th align="center">属性/方法</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">clientX</td>
<td align="center">返回当事件被触发时，鼠标指针的水平坐标。</td>
</tr>
<tr>
<td align="center">clientY</td>
<td align="center">返回当事件被触发时，鼠标指针的垂直坐标。</td>
</tr>
<tr>
<td align="center">keyCode</td>
<td align="center">返回虚拟键盘码</td>
</tr>
<tr>
<td align="center">ctrlKey</td>
<td align="center">返回当事件被触发时，”CTRL” 键是否被按下。</td>
</tr>
<tr>
<td align="center">altKey</td>
<td align="center">返回当事件被触发时，”ALT” 是否被按下。</td>
</tr>
<tr>
<td align="center">shiftKey</td>
<td align="center">返回当事件被触发时，”SHIFT” 键是否被按下。</td>
</tr>
<tr>
<td align="center">currentTarget</td>
<td align="center">返回其事件监听器触发该事件的元素。</td>
</tr>
<tr>
<td align="center">target</td>
<td align="center">返回触发此事件的元素（事件的目标节点）。</td>
</tr>
<tr>
<td align="center">type</td>
<td align="center">返回当前 Event 对象表示的事件的名称。</td>
</tr>
<tr>
<td align="center">preventDefault()</td>
<td align="center">阻止默认事件。</td>
</tr>
<tr>
<td align="center">stopPropagation()</td>
<td align="center">阻止冒泡。</td>
</tr>
</tbody></table>
<h5 id="一些兼容写法"><a href="#一些兼容写法" class="headerlink" title="一些兼容写法"></a>一些兼容写法</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获得event对象兼容性写法 </span></span><br><span class="line"><span class="keyword">var</span> event = event || <span class="built_in">window</span>.event;</span><br><span class="line"><span class="comment">//获得target兼容型写法 </span></span><br><span class="line">event.target||event.srcElement</span><br><span class="line"><span class="comment">//阻止浏览器默认行为兼容性写法 </span></span><br><span class="line">event.preventDefault ? event.preventDefault() : (event.returnValue = <span class="literal">false</span>);</span><br><span class="line"><span class="comment">//阻止冒泡写法 </span></span><br><span class="line">event.stopPropagation ? event.stopPropagation() : (event.cancelBubble = <span class="literal">true</span>);</span><br></pre></td></tr></table></figure>

<h3 id="委托事件"><a href="#委托事件" class="headerlink" title="委托事件"></a>委托事件</h3><blockquote>
<p>事件委托：就是本来需要给多个子元素添加事件的，只要利用事件对象和事件冒泡，只给父级一个添加事件就相当于所有子元素都有了事件。</p>
</blockquote>
<h4 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>6<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ul = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;ul&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line">ul.onclick = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> e = e || <span class="built_in">window</span>.event;</span><br><span class="line">	<span class="comment">//通过事件对象获取触发事件的子元素</span></span><br><span class="line">	<span class="keyword">var</span> li = e.target || e.srcElement;</span><br><span class="line">	li.style.background = <span class="string">&quot;blue&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="事件绑定冒泡捕获"><a href="#事件绑定冒泡捕获" class="headerlink" title="事件绑定冒泡捕获"></a>事件绑定冒泡捕获</h3><table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">addEventListener</td>
<td align="center">绑定事件</td>
</tr>
<tr>
<td align="center">removeEventListener</td>
<td align="center">移除事件</td>
</tr>
<tr>
<td align="center">attachEvent</td>
<td align="center">IE的绑定事件</td>
</tr>
<tr>
<td align="center">detachEvent</td>
<td align="center">IE的移除事件</td>
</tr>
</tbody></table>
<h3 id="结构-1"><a href="#结构-1" class="headerlink" title="结构"></a>结构</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;d1&quot;</span>&gt;</span><br><span class="line">	&lt;div id=<span class="string">&quot;d2&quot;</span>&gt;</span><br><span class="line">		&lt;div id=<span class="string">&quot;d3&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">	&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">javascript</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> aDiv = <span class="built_in">document</span>.querySelectorAll(<span class="string">&quot;div&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; aDiv.length; i++) &#123;</span><br><span class="line">	aDiv[i].index = i;</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">		绑定事件（监听事件）注意：不加on； 兼容ie8以上</span></span><br><span class="line"><span class="comment">		第三个参数false:冒泡 true:捕获 默认false</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	aDiv[i].addEventListener(<span class="string">&quot;click&quot;</span>,show,<span class="literal">false</span>)	</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="built_in">this</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="事件绑定兼容写法"><a href="#事件绑定兼容写法" class="headerlink" title="事件绑定兼容写法"></a>事件绑定兼容写法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">attachEvent:IE绑定事件、注意：</span></span><br><span class="line"><span class="comment">	1.默认就是冒泡，没有第3个参数</span></span><br><span class="line"><span class="comment">	2.里面函数的this指向window</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//绑定事件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">on</span>(<span class="params">obj,type,fn</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (obj.addEventListener) &#123;</span><br><span class="line">		obj.addEventListener(type,fn)</span><br><span class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span>(obj.attachEvent)&#123;</span><br><span class="line">		obj.attachEvent(<span class="string">&quot;on&quot;</span>+type,fn)</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		obj[<span class="string">&quot;on&quot;</span>+type]=fn;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//移除事件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">off</span>(<span class="params">obj,type,fn</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (obj.addEventListener) &#123;</span><br><span class="line">		obj.removeEventListener(type,fn)</span><br><span class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span>(obj.attachEvent)&#123;</span><br><span class="line">		obj.detachEvent(<span class="string">&quot;on&quot;</span>+type,fn)</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		obj[<span class="string">&quot;on&quot;</span>+type]=<span class="string">&quot;&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="鼠标事件"><a href="#鼠标事件" class="headerlink" title="鼠标事件"></a>鼠标事件</h3><table>
<thead>
<tr>
<th align="center">事件</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">click</td>
<td align="center">鼠标单击</td>
</tr>
<tr>
<td align="center">dblclick</td>
<td align="center">鼠标双击击</td>
</tr>
<tr>
<td align="center">mousedown</td>
<td align="center">鼠标被按下</td>
</tr>
<tr>
<td align="center">mouseup</td>
<td align="center">鼠标被松开</td>
</tr>
<tr>
<td align="center">mousemove</td>
<td align="center">鼠标移动</td>
</tr>
<tr>
<td align="center">contextmenu</td>
<td align="center">鼠标右键</td>
</tr>
<tr>
<td align="center">mouseout/mouseleave</td>
<td align="center">鼠标从某元素移开</td>
</tr>
<tr>
<td align="center">mouseover/mouseenter</td>
<td align="center">鼠标被移到某元素之上</td>
</tr>
</tbody></table>
<h3 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h3><table>
<thead>
<tr>
<th align="center">事件</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">keydown</td>
<td align="center">键盘按下</td>
</tr>
<tr>
<td align="center">keyup    键盘释放</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">keypress</td>
<td align="center">键盘按下</td>
</tr>
</tbody></table>
<h3 id="表单事件"><a href="#表单事件" class="headerlink" title="表单事件"></a>表单事件</h3><table>
<thead>
<tr>
<th align="center">事件</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">onfocus</td>
<td align="center">元素获得焦点</td>
</tr>
<tr>
<td align="center">onblur</td>
<td align="center">元素失去焦点</td>
</tr>
<tr>
<td align="center">submit</td>
<td align="center">表单提交</td>
</tr>
<tr>
<td align="center">reset</td>
<td align="center">表单重置</td>
</tr>
<tr>
<td align="center">change</td>
<td align="center">当文本框内容改变且失去焦点后</td>
</tr>
<tr>
<td align="center">select</td>
<td align="center">选择文本框中的一个或多个字符</td>
</tr>
</tbody></table>
<h3 id="窗口事件"><a href="#窗口事件" class="headerlink" title="窗口事件"></a>窗口事件</h3><table>
<thead>
<tr>
<th align="center">事件</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">load</td>
<td align="center">加载完</td>
</tr>
<tr>
<td align="center">scroll</td>
<td align="center">滚动条移动</td>
</tr>
<tr>
<td align="center">resize</td>
<td align="center">窗口大小改变</td>
</tr>
</tbody></table>
<h3 id="touch事件"><a href="#touch事件" class="headerlink" title="touch事件"></a>touch事件</h3><table>
<thead>
<tr>
<th align="center">事件</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">touchstart</td>
<td align="center">当手指触摸屏幕时候触发</td>
</tr>
<tr>
<td align="center">touchmove</td>
<td align="center">当手指在屏幕上滑动的时候连续地触发</td>
</tr>
<tr>
<td align="center">touchend</td>
<td align="center">当手指从屏幕上离开的时候触发</td>
</tr>
<tr>
<td align="center">touchcancel</td>
<td align="center">当系统停止跟踪触摸的时候触发(如电话接入或者弹出信息)</td>
</tr>
</tbody></table>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>手指拖动DIV<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line">	div&#123;</span><br><span class="line">		width: 200px;</span><br><span class="line">		height: 200px;</span><br><span class="line">		background: red;</span><br><span class="line">		position: absolute;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line">/*	</span><br><span class="line">	触屏事件</span><br><span class="line"><span class="javascript">	touchstart <span class="comment">//手指触摸屏幕的时候触发的事件</span></span></span><br><span class="line"><span class="javascript">	touchmove <span class="comment">//手指在屏幕移动的时候</span></span></span><br><span class="line"><span class="javascript">	touchend  <span class="comment">//手指离开屏幕</span></span></span><br><span class="line"><span class="javascript">	e.touches <span class="comment">//手指组对象（可以获取多个手指在屏幕里的信息）</span></span></span><br><span class="line">*/</span><br><span class="line"><span class="javascript"><span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">&quot;div&quot;</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> dx = <span class="number">0</span>,dy = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">div.addEventListener(<span class="string">&quot;touchstart&quot;</span>,<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line">	dx = e.touches[0].clientX-div.offsetLeft;</span><br><span class="line">	dy = e.touches[0].clientY-div.offsetTop;</span><br><span class="line"><span class="javascript">&#125;,<span class="literal">false</span>)</span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.addEventListener(<span class="string">&quot;touchmove&quot;</span>,<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">	<span class="keyword">var</span> x = e.touches[<span class="number">0</span>].clientX-dx</span></span><br><span class="line"><span class="javascript">	<span class="keyword">var</span> y = e.touches[<span class="number">0</span>].clientY-dy</span></span><br><span class="line"><span class="javascript">	div.style.left = x +<span class="string">&quot;px&quot;</span>;</span></span><br><span class="line"><span class="javascript">	div.style.top = y + <span class="string">&quot;px&quot;</span>;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.addEventListener(<span class="string">&quot;touchend&quot;</span>,<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">	<span class="built_in">console</span>.log(<span class="string">&quot;手指离开屏幕&quot;</span>)</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="设备事件"><a href="#设备事件" class="headerlink" title="设备事件"></a>设备事件</h3><table>
<thead>
<tr>
<th align="center">事件</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">deviceorientation</td>
<td align="center">设备的物理方向信息。</td>
</tr>
<tr>
<td align="center">devicemotion</td>
<td align="center">提供设备的加速信息。</td>
</tr>
</tbody></table>
<h5 id="设备方向"><a href="#设备方向" class="headerlink" title="设备方向"></a>设备方向</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//deviceorientation:设备方向</span></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&#x27;deviceorientation&#x27;</span>,<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;		</span><br><span class="line">	<span class="built_in">document</span>.body.innerHTML = <span class="string">&quot;alpha:&quot;</span> + e.alpha + <span class="string">&quot;&lt;br&gt; beta:&quot;</span>+e.beta + <span class="string">&quot;&lt;br&gt;gamma:&quot;</span>+e.gamma</span><br><span class="line">&#125;)</span><br><span class="line">摇一摇</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bX = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> bY = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> bZ = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> bTime = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> speed = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//  devicemotion设备动作</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.DeviceMotionEvent)&#123;</span><br><span class="line">	<span class="built_in">window</span>.addEventListener(<span class="string">&quot;devicemotion&quot;</span>,<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">		<span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">		<span class="keyword">if</span> (now-bTime&gt;<span class="number">100</span>) &#123;</span><br><span class="line">			<span class="keyword">var</span> motion = e.accelerationIncludingGravity;</span><br><span class="line">			<span class="keyword">var</span> x = <span class="built_in">parseInt</span>(motion.x);</span><br><span class="line">			<span class="keyword">var</span> y = <span class="built_in">parseInt</span>(motion.y);</span><br><span class="line">			<span class="keyword">var</span> z = <span class="built_in">parseInt</span>(motion.z);</span><br><span class="line">			<span class="comment">// document.body.innerHTML = &quot;x:&quot;+x+&quot;&lt;br&gt;y:&quot;+y+&quot;&lt;br&gt;z:&quot;+z;</span></span><br><span class="line">			speed += <span class="built_in">Math</span>.abs(x+y+z-bX-bY-bZ);</span><br><span class="line">			<span class="keyword">if</span> (speed&gt;<span class="number">1000</span>) &#123;</span><br><span class="line">				alert(<span class="string">&quot;摇一摇了&quot;</span>);</span><br><span class="line">				speed=<span class="number">0</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">document</span>.body.innerHTML = speed;</span><br><span class="line">			bX = x;</span><br><span class="line">			bY = y;</span><br><span class="line">			bZ = z;</span><br><span class="line">			bTime = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">		&#125;		</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">	alert(<span class="string">&quot;设备不支持摇一摇功能！&quot;</span>);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>js初级</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript函数</title>
    <url>/2018/06/16/JavaScript%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h2 id="什么是函数"><a href="#什么是函数" class="headerlink" title="什么是函数"></a>什么是函数</h2><blockquote>
<p>函数是由事件驱动的或者当它被调用时执行的可重复使用的代码块</p>
</blockquote>
<h2 id="创建函数"><a href="#创建函数" class="headerlink" title="创建函数"></a>创建函数</h2><h3 id="声明函数"><a href="#声明函数" class="headerlink" title="声明函数"></a>声明函数</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> 函数名(<span class="params">参数<span class="number">1</span>,参数<span class="number">2</span>,参数<span class="number">3.</span>..</span>)</span>&#123;</span><br><span class="line">程序代码</span><br><span class="line"><span class="keyword">return</span> 返回的内容;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="函数字面量"><a href="#函数字面量" class="headerlink" title="函数字面量"></a>函数字面量</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params">参数<span class="number">1</span>,参数<span class="number">2</span>,参数<span class="number">3.</span>..</span>)</span>&#123;</span><br><span class="line">程序代码</span><br><span class="line"><span class="keyword">return</span> 返回的内容;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">参数<span class="number">1</span>,参数<span class="number">2</span>,参数<span class="number">3.</span>..</span>)</span>&#123;</span><br><span class="line">程序代码</span><br><span class="line"><span class="keyword">return</span> 返回的内容;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h2><h3 id="函数名调用"><a href="#函数名调用" class="headerlink" title="函数名调用"></a>函数名调用</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">output</span>(<span class="params"></span>) </span>&#123;	</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;函数被调用时执行&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">output()<span class="comment">//调用函数</span></span><br></pre></td></tr></table></figure>
<h3 id="事件触发调用"><a href="#事件触发调用" class="headerlink" title="事件触发调用"></a>事件触发调用</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">div.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;	</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;点击DIV时函数被调用&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="自调用"><a href="#自调用" class="headerlink" title="自调用"></a>自调用</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;自调用&#x27;</span>);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
<h3 id="函数传参与返回值"><a href="#函数传参与返回值" class="headerlink" title="函数传参与返回值"></a>函数传参与返回值</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a,b</span>) </span>&#123;</span><br><span class="line">a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> c = sum(<span class="number">5</span>,<span class="number">6</span>);<span class="comment">//c=undefined</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a,b</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> c = sum(<span class="number">5</span>,<span class="number">6</span>);<span class="comment">//c=11</span></span><br></pre></td></tr></table></figure>
<h3 id="函数this对象"><a href="#函数this对象" class="headerlink" title="函数this对象"></a>函数this对象</h3><blockquote>
<p>this是函数运行时生成的一个内部对象。函数是被哪个对象调用的，this指向的就是哪个对象。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">div.onclick = fn;<span class="comment">//div点击时输出的是DIV对象</span></span><br><span class="line"></span><br><span class="line">fn()<span class="comment">//输出的是winow对象</span></span><br></pre></td></tr></table></figure>
<h3 id="函数arguments对象"><a href="#函数arguments对象" class="headerlink" title="函数arguments对象"></a>函数arguments对象</h3><blockquote>
<p>arguments是函数运行时生成的一个内部对象，arguments对象类似数组,可以通过数组方式获取到函数的参数。</p>
</blockquote>
<pre><code class="JavaScript">function sum() &#123;
var sum = 0;
//arguments.length 参数数量
for(var i = 0;i &lt; arguments.length; i++) &#123;
     sum = sum + arguments[i];
&#125;
return sum; //返回累加结果
&#125;
console.log(sum(2,3,5,6))</code></pre>
]]></content>
      <categories>
        <category>js初级</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript入门</title>
    <url>/2018/06/13/JavaScript%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h2 id="JavaScript是什么"><a href="#JavaScript是什么" class="headerlink" title="JavaScript是什么"></a>JavaScript是什么</h2><h4 id="JavaScript一种直译式脚本语言，是一种动态类型、弱类型、基于原型的语言，内置支持类型。它的解释器被称为JavaScript引擎，为浏览器的一部分，广泛用于客户端的脚本语言，最早是在HTML（标准通用标记语言下的一个应用）网页上使用，用来给HTML网页增加动态功能。"><a href="#JavaScript一种直译式脚本语言，是一种动态类型、弱类型、基于原型的语言，内置支持类型。它的解释器被称为JavaScript引擎，为浏览器的一部分，广泛用于客户端的脚本语言，最早是在HTML（标准通用标记语言下的一个应用）网页上使用，用来给HTML网页增加动态功能。" class="headerlink" title="JavaScript一种直译式脚本语言，是一种动态类型、弱类型、基于原型的语言，内置支持类型。它的解释器被称为JavaScript引擎，为浏览器的一部分，广泛用于客户端的脚本语言，最早是在HTML（标准通用标记语言下的一个应用）网页上使用，用来给HTML网页增加动态功能。"></a>JavaScript一种直译式脚本语言，是一种动态类型、弱类型、基于原型的语言，内置支持类型。它的解释器被称为JavaScript引擎，为浏览器的一部分，广泛用于客户端的脚本语言，最早是在HTML（标准通用标记语言下的一个应用）网页上使用，用来给HTML网页增加动态功能。</h4><p><img src="https://s2.ax1x.com/2019/07/17/ZLKRVH.jpg" alt="我是图片"></p>
<h2 id="JavaScript的引入方式"><a href="#JavaScript的引入方式" class="headerlink" title="JavaScript的引入方式"></a>JavaScript的引入方式</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!-- 内部引入 --&gt;</span><br><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">alert(<span class="string">&quot;内部引入&quot;</span>);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;!-- 外部引入 --&gt;</span><br><span class="line">&lt;script src=<span class="string">&quot;js/index.js&quot;</span> type=<span class="string">&quot;text/javascript&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h2 id="JavaScript语法基础"><a href="#JavaScript语法基础" class="headerlink" title="JavaScript语法基础"></a>JavaScript语法基础</h2><h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><table>
<thead>
<tr>
<th align="center">类型</th>
<th align="center">名称</th>
<th align="center">示例</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Number</td>
<td align="center">数字类型</td>
<td align="center">10-十进制、0.5-浮点、 0xf-十六进制</td>
</tr>
<tr>
<td align="center">String</td>
<td align="center">字符串类型</td>
<td align="center">‘string’ “字符串”</td>
</tr>
<tr>
<td align="center">Object</td>
<td align="center">对象类型</td>
<td align="center">document window</td>
</tr>
<tr>
<td align="center">Boolean</td>
<td align="center">布尔类型</td>
<td align="center">true和false</td>
</tr>
<tr>
<td align="center">undefined</td>
<td align="center">未定义类型</td>
<td align="center">undefined</td>
</tr>
<tr>
<td align="center">null</td>
<td align="center">空类型</td>
<td align="center">null</td>
</tr>
</tbody></table>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><blockquote>
<p>变量首先是一个容器，可以用来存放数据，而且存放在这个容器中的数据可以发生变化。</p>
</blockquote>
<h2 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//变量 = 值</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="comment">//以上代码定义了一个变量 a ,变量里保存的值是数值 10 。</span></span><br></pre></td></tr></table></figure>

<h2 id="变量的命名规则"><a href="#变量的命名规则" class="headerlink" title="变量的命名规则"></a>变量的命名规则</h2><ul>
<li>字符可以是字母、下划线、美元符号或数字</li>
<li>第一个字符必须是一个字母、下划线（_）或一个美元符号（$）</li>
<li>不能以关键字或保留字命名</li>
<li>区分大小写</li>
</ul>
<h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><table>
<thead>
<tr>
<th align="center">运算符</th>
<th align="center">名称</th>
<th align="center">示例</th>
</tr>
</thead>
<tbody><tr>
<td align="center">+</td>
<td align="center">加</td>
<td align="center">a=a+1、a+=2、a=”hello”+” world!”</td>
</tr>
<tr>
<td align="center">_</td>
<td align="center">减</td>
<td align="center">a=a-1、a-=2</td>
</tr>
<tr>
<td align="center">*</td>
<td align="center">乘</td>
<td align="center">a=a1、a=2</td>
</tr>
<tr>
<td align="center">/</td>
<td align="center">除</td>
<td align="center">a=a/1、a/=2</td>
</tr>
<tr>
<td align="center">%</td>
<td align="center">求模运算符（求余）</td>
<td align="center">a=a%2、a%=2</td>
</tr>
<tr>
<td align="center">++</td>
<td align="center">递增</td>
<td align="center">a++、++a</td>
</tr>
<tr>
<td align="center">–</td>
<td align="center">递减</td>
<td align="center">a–、–a</td>
</tr>
</tbody></table>
<h2 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h2><table>
<thead>
<tr>
<th align="center">运算符</th>
<th align="center">名称</th>
<th align="center">示例</th>
</tr>
</thead>
<tbody><tr>
<td align="center">==</td>
<td align="center">等于</td>
<td align="center">1==”1”:true、1==”2”:false、1===”1”:false</td>
</tr>
<tr>
<td align="center">!=</td>
<td align="center">不等于</td>
<td align="center">1!=2:true、 1!=1:false</td>
</tr>
<tr>
<td align="center">&gt;</td>
<td align="center">大于</td>
<td align="center">2&gt;2:false、2&gt;1:true</td>
</tr>
<tr>
<td align="center">&gt;=</td>
<td align="center">大于等于</td>
<td align="center">2&gt;=2:true</td>
</tr>
<tr>
<td align="center">&lt;</td>
<td align="center">小于</td>
<td align="center">2&lt;2:false、1&lt;2:true</td>
</tr>
<tr>
<td align="center">&lt;=</td>
<td align="center">小于等于</td>
<td align="center">2&lt;=2:true</td>
</tr>
</tbody></table>
<h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><h5 id="或"><a href="#或" class="headerlink" title="|| - 或"></a>|| - 或</h5><h5 id="amp-amp-与"><a href="#amp-amp-与" class="headerlink" title="&amp;&amp; - 与"></a>&amp;&amp; - 与</h5><h5 id="非"><a href="#非" class="headerlink" title="! - 非"></a>! - 非</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//只要其中一个为false就是false</span></span><br><span class="line"><span class="literal">true</span> &amp;&amp; <span class="literal">false</span> = <span class="literal">false</span></span><br><span class="line"><span class="literal">true</span> &amp;&amp; <span class="literal">true</span> = <span class="literal">true</span></span><br><span class="line"><span class="literal">false</span> &amp;&amp; <span class="literal">true</span> = <span class="literal">false</span></span><br><span class="line"><span class="comment">//只要其中一个为true就是true</span></span><br><span class="line"><span class="literal">true</span> || <span class="literal">false</span> = <span class="literal">true</span></span><br><span class="line"><span class="literal">true</span> || <span class="literal">true</span> = <span class="literal">true</span></span><br><span class="line"><span class="literal">false</span> || <span class="literal">true</span> = <span class="literal">true</span></span><br><span class="line"><span class="literal">false</span> || <span class="literal">false</span> = <span class="literal">false</span></span><br><span class="line"><span class="comment">//非true就是false 非flase就是true</span></span><br><span class="line">!<span class="literal">true</span> = <span class="literal">false</span></span><br><span class="line">!<span class="literal">false</span> = <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h2 id="流程控制语句"><a href="#流程控制语句" class="headerlink" title="流程控制语句"></a>流程控制语句</h2><h3 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件判断语句)&#123;</span><br><span class="line">语句<span class="number">1</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(条件)&#123;</span><br><span class="line">语句<span class="number">2</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">语句<span class="number">3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="for语句"><a href="#for语句" class="headerlink" title="for语句"></a>for语句</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(初始值表达式,循环条件表达式,循环后表达式)&#123;</span><br><span class="line">语句</span><br><span class="line"><span class="comment">//continue:结束本次循环，继续下次循环</span></span><br><span class="line"><span class="comment">//break:退出循环</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span>(条件判断语句)&#123;</span><br><span class="line"><span class="keyword">case</span> value1: 语句<span class="number">1</span>; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> value2: 语句<span class="number">2</span>; <span class="keyword">break</span>;</span><br><span class="line">…………</span><br><span class="line"><span class="keyword">default</span>：语句<span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="while语句"><a href="#while语句" class="headerlink" title="while语句"></a>while语句</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>（条件判断语句）｛</span><br><span class="line">语句</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="do-while语句"><a href="#do-while语句" class="headerlink" title="do..while语句"></a>do..while语句</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">语句</span><br><span class="line">&#125;<span class="keyword">while</span>(条件判断语句)</span><br></pre></td></tr></table></figure>
<h2 id="JavaScript基础实例"><a href="#JavaScript基础实例" class="headerlink" title="JavaScript基础实例"></a>JavaScript基础实例</h2><h3 id="获取元素对象"><a href="#获取元素对象" class="headerlink" title="获取元素对象"></a>获取元素对象</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;d1&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;box&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;div id=<span class="string">&quot;d2&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;box&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line"><span class="comment">// 根据ID名获取div</span></span><br><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;d1&#x27;</span>);</span><br><span class="line"><span class="comment">// 根据标类名获取div</span></span><br><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;box&#x27;</span>);</span><br><span class="line"><span class="comment">// 根据标签名获取div</span></span><br><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#d1&#x27;</span>);</span><br><span class="line"><span class="comment">// 根据标类名获取div</span></span><br><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;.box&#x27;</span>);</span><br><span class="line"><span class="comment">// 根据标签名获取div</span></span><br><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;div&#x27;</span>);</span><br></pre></td></tr></table></figure>
<h3 id="onclick事件"><a href="#onclick事件" class="headerlink" title="onclick事件"></a>onclick事件</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 根据ID名获取DIV</span></span><br><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;d1&#x27;</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">onclick：给DIV设置点击事件</span></span><br><span class="line"><span class="comment">function：函数,是一个方法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">div.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">div.style.color = <span class="string">&quot;red&quot;</span>;</span><br><span class="line">div.innerHTML = <span class="string">&quot;点击了&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="onmouseenter-onmouseleave事件"><a href="#onmouseenter-onmouseleave事件" class="headerlink" title="onmouseenter/onmouseleave事件"></a>onmouseenter/onmouseleave事件</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 根据ID名获取DIV</span></span><br><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;d1&#x27;</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">onclick：给DIV设置点击事件</span></span><br><span class="line"><span class="comment">function：函数,是一个方法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">div.onmouseenter = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">div.style.color = <span class="string">&quot;red&quot;</span>;</span><br><span class="line">div.innerHTML = <span class="string">&quot;进来了&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">div.onmouseleave = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">div.style.color = <span class="string">&quot;blue&quot;</span>;</span><br><span class="line">div.innerHTML = <span class="string">&quot;出去了&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>js初级</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript动画</title>
    <url>/2018/06/22/JavaScript%E5%8A%A8%E7%94%BB/</url>
    <content><![CDATA[<h2 id="动画帧"><a href="#动画帧" class="headerlink" title="动画帧"></a>动画帧</h2><h5 id="帧数就是在1秒钟时间里传输的图片的量，也可以理解为图形处理器每秒钟能够刷新几次，通常用fps（Frames-Per-Second）表示。每一帧都是静止的图象，快速连续地显示帧便形成了运动的假象。高的帧率可以得到更流畅、更逼真的动画。每秒钟帧数-fps-愈多，所显示的动作就会愈流畅。"><a href="#帧数就是在1秒钟时间里传输的图片的量，也可以理解为图形处理器每秒钟能够刷新几次，通常用fps（Frames-Per-Second）表示。每一帧都是静止的图象，快速连续地显示帧便形成了运动的假象。高的帧率可以得到更流畅、更逼真的动画。每秒钟帧数-fps-愈多，所显示的动作就会愈流畅。" class="headerlink" title="帧数就是在1秒钟时间里传输的图片的量，也可以理解为图形处理器每秒钟能够刷新几次，通常用fps（Frames Per Second）表示。每一帧都是静止的图象，快速连续地显示帧便形成了运动的假象。高的帧率可以得到更流畅、更逼真的动画。每秒钟帧数 (fps) 愈多，所显示的动作就会愈流畅。"></a>帧数就是在1秒钟时间里传输的图片的量，也可以理解为图形处理器每秒钟能够刷新几次，通常用fps（Frames Per Second）表示。每一帧都是静止的图象，快速连续地显示帧便形成了运动的假象。高的帧率可以得到更流畅、更逼真的动画。每秒钟帧数 (fps) 愈多，所显示的动作就会愈流畅。</h5><h2 id="元素移动"><a href="#元素移动" class="headerlink" title="元素移动"></a>元素移动</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取元素DIV</span></span><br><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">&quot;div&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> x = <span class="number">0</span>;<span class="comment">//定义x变量用于控制DIVx轴移动</span></span><br><span class="line"><span class="keyword">var</span> timer = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	x += <span class="number">2</span>;<span class="comment">//每帧移动2像素</span></span><br><span class="line">	<span class="keyword">if</span> (x&gt;=<span class="number">200</span>) &#123;<span class="comment">//判断移到200像素的位置</span></span><br><span class="line">		<span class="built_in">clearInterval</span>(timer);<span class="comment">//停止定时器</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//改变DIV样式left的位置</span></span><br><span class="line">	div.style.left = x+<span class="string">&quot;px&quot;</span>;</span><br><span class="line">&#125;,<span class="number">1000</span>/<span class="number">60</span>)<span class="comment">//计算每秒60帧的速度</span></span><br></pre></td></tr></table></figure>

<h3 id="requestAnimationFrame函数"><a href="#requestAnimationFrame函数" class="headerlink" title="requestAnimationFrame函数"></a>requestAnimationFrame函数</h3><h5 id="用js实现动画一般使用一个定时器来循环每隔几毫秒移元素实现动画效果。在某些性能较差的设备上设置的毫秒数可能会超出设备的速度，从而导致卡顿。requestAnimationFrame-函数就是用优化卡顿问题而出现的。"><a href="#用js实现动画一般使用一个定时器来循环每隔几毫秒移元素实现动画效果。在某些性能较差的设备上设置的毫秒数可能会超出设备的速度，从而导致卡顿。requestAnimationFrame-函数就是用优化卡顿问题而出现的。" class="headerlink" title="用js实现动画一般使用一个定时器来循环每隔几毫秒移元素实现动画效果。在某些性能较差的设备上设置的毫秒数可能会超出设备的速度，从而导致卡顿。requestAnimationFrame()函数就是用优化卡顿问题而出现的。"></a>用js实现动画一般使用一个定时器来循环每隔几毫秒移元素实现动画效果。在某些性能较差的设备上设置的毫秒数可能会超出设备的速度，从而导致卡顿。requestAnimationFrame()函数就是用优化卡顿问题而出现的。</h5><h5 id="requestAnimationFrame会跟着设备的频率速度来执行每一帧的动画，这会减少CPU，内存的压力，节省电池电量。一般浏览器的显示频率是16-7ms也就是每秒60帧。"><a href="#requestAnimationFrame会跟着设备的频率速度来执行每一帧的动画，这会减少CPU，内存的压力，节省电池电量。一般浏览器的显示频率是16-7ms也就是每秒60帧。" class="headerlink" title="requestAnimationFrame会跟着设备的频率速度来执行每一帧的动画，这会减少CPU，内存的压力，节省电池电量。一般浏览器的显示频率是16.7ms也就是每秒60帧。"></a>requestAnimationFrame会跟着设备的频率速度来执行每一帧的动画，这会减少CPU，内存的压力，节省电池电量。一般浏览器的显示频率是16.7ms也就是每秒60帧。</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取元素DIV</span></span><br><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">&quot;div&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> x = <span class="number">0</span>;<span class="comment">//定义x变量用于控制DIVx轴移动</span></span><br><span class="line">requestAnimationFrame(<span class="function"><span class="keyword">function</span> <span class="title">step</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	x += <span class="number">2</span>;<span class="comment">//每帧移动2像素</span></span><br><span class="line">	<span class="comment">//改变DIV样式left的位置</span></span><br><span class="line">	div.style.left = x+<span class="string">&quot;px&quot;</span>;</span><br><span class="line">	<span class="keyword">if</span> (x&lt;<span class="number">200</span>) &#123;<span class="comment">//判断移到未到200像素时</span></span><br><span class="line">		requestAnimationFrame(step)<span class="comment">//执行下一帧</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br><span class="line">requestAnimationFrame兼容写法如下</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.requestAnimationFrame = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span>  <span class="built_in">window</span>.requestAnimationFrame ||</span><br><span class="line"><span class="built_in">window</span>.webkitRequestAnimationFrame ||</span><br><span class="line"><span class="built_in">window</span>.mozRequestAnimationFrame ||</span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params"> callback </span>)</span>&#123;</span><br><span class="line">    <span class="built_in">window</span>.setTimeout(callback, <span class="number">1000</span> / <span class="number">60</span>);</span><br><span class="line">&#125;;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

<h2 id="封装动画函数例子"><a href="#封装动画函数例子" class="headerlink" title="封装动画函数例子"></a>封装动画函数例子</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">&quot;div&quot;</span>);</span><br><span class="line"><span class="comment">/*封装move动画函数以下是所需参数</span></span><br><span class="line"><span class="comment">	self:获取动画元素</span></span><br><span class="line"><span class="comment">	attr:改变的属性</span></span><br><span class="line"><span class="comment">	dis:动画移动的距离</span></span><br><span class="line"><span class="comment">	endT:动画移动的时间</span></span><br><span class="line"><span class="comment">	callback:回调函数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">move</span>(<span class="params">self,attr,dis,endT,callback</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> T = <span class="built_in">Date</span>.now();<span class="comment">//获取当前时间</span></span><br><span class="line">	requestAnimationFrame(<span class="function"><span class="keyword">function</span> <span class="title">step</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="comment">// 计算动画时间的进度比例</span></span><br><span class="line">		<span class="keyword">var</span> p = <span class="built_in">Math</span>.min(<span class="number">1</span>, (<span class="built_in">Date</span>.now() - T) / endT);</span><br><span class="line">		<span class="comment">// dis*p根据比例和距离计算元素移动的位置</span></span><br><span class="line">		self.style[attr] = dis*p + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">		<span class="keyword">if</span>(p &lt; <span class="number">1</span>)&#123;</span><br><span class="line">		    <span class="comment">//p小于1时动画时间未结束</span></span><br><span class="line">		    requestAnimationFrame(step);<span class="comment">//执行下一帧动画</span></span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		    <span class="comment">// 判断callback有传参就执行callback函数</span></span><br><span class="line">		    callback &amp;&amp; callback();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//执行动画函数往右移动200像素</span></span><br><span class="line">move(div,<span class="string">&quot;left&quot;</span>,<span class="number">200</span>,<span class="number">2000</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="comment">//执行动画函数往下移动200像素</span></span><br><span class="line">	move(div,<span class="string">&quot;top&quot;</span>,<span class="number">200</span>,<span class="number">2000</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="加速度动画"><a href="#加速度动画" class="headerlink" title="加速度动画"></a>加速度动画</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> divs = <span class="built_in">document</span>.querySelectorAll(<span class="string">&quot;div&quot;</span>);</span><br><span class="line"><span class="comment">/*封装动画函数</span></span><br><span class="line"><span class="comment">	self:获取动画元素</span></span><br><span class="line"><span class="comment">	type:动画类型</span></span><br><span class="line"><span class="comment">	attr:改变的属性	</span></span><br><span class="line"><span class="comment">	dis:动画移动的距离</span></span><br><span class="line"><span class="comment">	endT:动画移动的时间</span></span><br><span class="line"><span class="comment">	callback:回调函数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">move</span>(<span class="params">self,type,attr,dis,endT,callback</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> T = <span class="built_in">Date</span>.now();<span class="comment">//获取当前时间</span></span><br><span class="line">	requestAnimationFrame(<span class="function"><span class="keyword">function</span> <span class="title">step</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="comment">// 计算动画时间的进度比例</span></span><br><span class="line">		<span class="keyword">var</span> p = <span class="built_in">Math</span>.min(<span class="number">1</span>, (<span class="built_in">Date</span>.now() - T) / endT);</span><br><span class="line">		<span class="keyword">switch</span>(type)&#123;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">&quot;linear&quot;</span>:</span><br><span class="line">				<span class="comment">// 计算每帧均速移动的位置</span></span><br><span class="line">				<span class="keyword">var</span> site = dis*p;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">&quot;easeIn&quot;</span>:</span><br><span class="line">				<span class="comment">// 计算每帧加速移动的位置</span></span><br><span class="line">				<span class="keyword">var</span> site = dis*p*p;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 设置元素移动的位置</span></span><br><span class="line">		self.style[attr] = site + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">		<span class="keyword">if</span>(p &lt; <span class="number">1</span>)&#123;</span><br><span class="line">		    <span class="comment">//p小于1时动画时间未结束</span></span><br><span class="line">		    requestAnimationFrame(step);<span class="comment">//执行下一帧动画</span></span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		    <span class="comment">// 判断callback有传参就执行callback函数</span></span><br><span class="line">		    callback &amp;&amp; callback();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//执行动画函数往右移动400像素</span></span><br><span class="line">move(divs[<span class="number">0</span>],<span class="string">&quot;linear&quot;</span>,<span class="string">&quot;left&quot;</span>,<span class="number">400</span>,<span class="number">1000</span>);</span><br><span class="line">move(divs[<span class="number">1</span>],<span class="string">&quot;easeIn&quot;</span>,<span class="string">&quot;left&quot;</span>,<span class="number">400</span>,<span class="number">1000</span>);</span><br></pre></td></tr></table></figure>

<h2 id="减速度动画"><a href="#减速度动画" class="headerlink" title="减速度动画"></a>减速度动画</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> divs = <span class="built_in">document</span>.querySelectorAll(<span class="string">&quot;div&quot;</span>);</span><br><span class="line"><span class="comment">/*封装动画函数</span></span><br><span class="line"><span class="comment">	self:获取动画元素</span></span><br><span class="line"><span class="comment">	type:动画类型</span></span><br><span class="line"><span class="comment">	attr:改变的属性	</span></span><br><span class="line"><span class="comment">	dis:动画移动的距离</span></span><br><span class="line"><span class="comment">	endT:动画移动的时间</span></span><br><span class="line"><span class="comment">	callback:回调函数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">move</span>(<span class="params">self,type,attr,dis,endT,callback</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> T = <span class="built_in">Date</span>.now();<span class="comment">//获取当前时间</span></span><br><span class="line">	requestAnimationFrame(<span class="function"><span class="keyword">function</span> <span class="title">step</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="comment">// 计算动画时间的进度比例</span></span><br><span class="line">		<span class="keyword">var</span> p = <span class="built_in">Math</span>.min(<span class="number">1</span>, (<span class="built_in">Date</span>.now() - T) / endT);</span><br><span class="line">		<span class="keyword">switch</span>(type)&#123;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">&quot;linear&quot;</span>:</span><br><span class="line">				<span class="comment">// 计算每帧均速移动的位置</span></span><br><span class="line">				<span class="keyword">var</span> site = dis*p;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">&quot;easeIn&quot;</span>:</span><br><span class="line">				<span class="comment">// 计算每帧加速移动的位置</span></span><br><span class="line">				<span class="keyword">var</span> site = dis*p*p;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">&quot;easeOut&quot;</span>:</span><br><span class="line">				<span class="comment">// 计算每帧减速移动的位置</span></span><br><span class="line">				<span class="keyword">var</span> site = dis*p*(<span class="number">2</span>-p);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 设置元素移动的位置</span></span><br><span class="line">		self.style[attr] = site + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">		<span class="keyword">if</span>(p &lt; <span class="number">1</span>)&#123;</span><br><span class="line">		    <span class="comment">//p小于1时动画时间未结束</span></span><br><span class="line">		    requestAnimationFrame(step);<span class="comment">//执行下一帧动画</span></span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		    <span class="comment">// 判断callback有传参就执行callback函数</span></span><br><span class="line">		    callback &amp;&amp; callback();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//执行动画函数往右移动200像素</span></span><br><span class="line">move(divs[<span class="number">0</span>],<span class="string">&quot;linear&quot;</span>,<span class="string">&quot;left&quot;</span>,<span class="number">400</span>,<span class="number">1000</span>);</span><br><span class="line">move(divs[<span class="number">1</span>],<span class="string">&quot;easeOut&quot;</span>,<span class="string">&quot;left&quot;</span>,<span class="number">400</span>,<span class="number">1000</span>);</span><br></pre></td></tr></table></figure>

<h2 id="抛物线动画"><a href="#抛物线动画" class="headerlink" title="抛物线动画"></a>抛物线动画</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">&quot;.d2&quot;</span>);</span><br><span class="line"><span class="comment">/*封装动画函数</span></span><br><span class="line"><span class="comment">	self:获取动画元素</span></span><br><span class="line"><span class="comment">	dis:动画移动的距离</span></span><br><span class="line"><span class="comment">	endT:动画移动的时间</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">move</span>(<span class="params">self,dis,endT</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> T = <span class="built_in">Date</span>.now();<span class="comment">//获取当前时间</span></span><br><span class="line">	requestAnimationFrame(<span class="function"><span class="keyword">function</span> <span class="title">step</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="comment">// 计算动画时间的进度比例</span></span><br><span class="line">		<span class="keyword">var</span> p = <span class="built_in">Math</span>.min(<span class="number">1</span>, (<span class="built_in">Date</span>.now() - T) / endT);</span><br><span class="line">		<span class="comment">// x轴和y轴移动速度不一样就可实现抛物线移动</span></span><br><span class="line">		self.style.left = dis*p*(<span class="number">2</span>-p) + <span class="string">&#x27;px&#x27;</span>;<span class="comment">//加速移动</span></span><br><span class="line">		self.style.top = dis*p*p + <span class="string">&#x27;px&#x27;</span>;<span class="comment">//减速移动</span></span><br><span class="line">		<span class="keyword">if</span>(p &lt; <span class="number">1</span>)&#123;</span><br><span class="line">		    <span class="comment">//p小于1时动画时间未结束</span></span><br><span class="line">		    requestAnimationFrame(step);<span class="comment">//执行下一帧动画</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//执行动画函数往右移动200像素</span></span><br><span class="line">move(div,<span class="number">300</span>,<span class="number">1000</span>);</span><br></pre></td></tr></table></figure>
<h2 id="Tween-js动画效果库"><a href="#Tween-js动画效果库" class="headerlink" title="Tween.js动画效果库"></a>Tween.js动画效果库</h2><h3 id="Tween-js用法"><a href="#Tween-js用法" class="headerlink" title="Tween.js用法"></a>Tween.js用法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">&quot;div&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> start = <span class="number">0</span>;<span class="comment">//开始位置</span></span><br><span class="line"><span class="keyword">var</span> dis = <span class="number">200</span>;<span class="comment">//移动的距离</span></span><br><span class="line"><span class="keyword">var</span> T = <span class="number">0</span>;<span class="comment">//帧数位置</span></span><br><span class="line"><span class="keyword">var</span> endT = <span class="number">1000</span>/<span class="number">16.7</span>;<span class="comment">//总帧数</span></span><br><span class="line"><span class="keyword">var</span> timer = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	T++;<span class="comment">//执行移动到下一帧</span></span><br><span class="line">	<span class="keyword">if</span> (T&gt;=endT) &#123;<span class="comment">//判断到了最后一帧</span></span><br><span class="line">		<span class="built_in">clearInterval</span>(timer);<span class="comment">//停止定时器</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//根据Tween.js计算每一帧的位置</span></span><br><span class="line">	<span class="keyword">var</span> l = Tween.Bounce.easeOut(T,start,dis,endT);</span><br><span class="line">	<span class="comment">//设置DIV的left值位置</span></span><br><span class="line">	div.style.left = l + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">&#125;,<span class="number">1000</span>/<span class="number">60</span>)<span class="comment">//计算每秒60帧的速度</span></span><br></pre></td></tr></table></figure>

<h5 id="把Tween-js加到封装的动画函数里"><a href="#把Tween-js加到封装的动画函数里" class="headerlink" title="把Tween.js加到封装的动画函数里"></a>把Tween.js加到封装的动画函数里</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">&quot;div&quot;</span>);</span><br><span class="line"><span class="comment">/*封装动画函数</span></span><br><span class="line"><span class="comment">	self:获取动画元素</span></span><br><span class="line"><span class="comment">	Tween:tween的动画算法函数</span></span><br><span class="line"><span class="comment">	attr:改变的属性</span></span><br><span class="line"><span class="comment">	start:元素开始位置</span></span><br><span class="line"><span class="comment">	dis:动画移动的距离</span></span><br><span class="line"><span class="comment">	endT:动画移动的时间或总帧数</span></span><br><span class="line"><span class="comment">	callback:回调函数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">move</span>(<span class="params">self,Tween,attr,start,dis,endT,callback</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> T = <span class="built_in">Date</span>.now();<span class="comment">//获取当前时间	</span></span><br><span class="line">	requestAnimationFrame(<span class="function"><span class="keyword">function</span> <span class="title">step</span>(<span class="params"></span>) </span>&#123;		</span><br><span class="line">		<span class="comment">// 计算动画时间的进度比例</span></span><br><span class="line">		<span class="keyword">var</span> p = <span class="built_in">Math</span>.min(<span class="number">1</span>, (<span class="built_in">Date</span>.now() - T) / endT);</span><br><span class="line">		<span class="comment">// 计算当前时间移动到的帧数位置</span></span><br><span class="line">		<span class="comment">// Tween(&quot;开始帧数的位置&quot;,&quot;开始位置&quot;,&quot;移动的距离&quot;,&quot;总帧数&quot;)</span></span><br><span class="line">		<span class="keyword">var</span> site = Tween(p*endT,start,dis,endT);</span><br><span class="line">		<span class="comment">// 设置元素移动的位置</span></span><br><span class="line">		self.style[attr] = site + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">		<span class="keyword">if</span>(p &lt; <span class="number">1</span>)&#123;</span><br><span class="line">		    <span class="comment">//p小于1时动画时间未结束</span></span><br><span class="line">		    requestAnimationFrame(step);<span class="comment">//执行下一帧动画</span></span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		    <span class="comment">// 判断callback有传参就执行callback函数</span></span><br><span class="line">		    callback &amp;&amp; callback();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//执行动画函数往右移动200像素</span></span><br><span class="line">move(div,Tween.Linear,<span class="string">&quot;left&quot;</span>,<span class="number">0</span>,<span class="number">500</span>,<span class="number">1000</span>);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>js高级</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript变量的作用域和闭包</title>
    <url>/2018/06/18/JavaScript%E5%8F%98%E9%87%8F%E7%9A%84%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%92%8C%E9%97%AD%E5%8C%85/</url>
    <content><![CDATA[<h2 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h2><h5 id="变量作用域可分为：”全局变量”和”局部变量”"><a href="#变量作用域可分为：”全局变量”和”局部变量”" class="headerlink" title="变量作用域可分为：”全局变量”和”局部变量”"></a>变量作用域可分为：”全局变量”和”局部变量”</h5><h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><blockquote>
<p>全局变量可在本页面代码中的任何位置使用。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">0</span>;<span class="comment">//定义全局变量</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">//在函数内部变量没加var定义的属于全局变量</span></span><br><span class="line">a = <span class="number">10</span>;<span class="comment">//改变或是定义全局变量</span></span><br><span class="line"><span class="built_in">window</span>.b = <span class="number">5</span>;<span class="comment">//定义全局变量</span></span><br><span class="line">&#125;</span><br><span class="line">show()</span><br><span class="line"><span class="built_in">console</span>.log(a)<span class="comment">//输出10</span></span><br><span class="line"><span class="built_in">console</span>.log(b)<span class="comment">//输出5</span></span><br></pre></td></tr></table></figure>

<h3 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h3><blockquote>
<p>局部变量:函数内部用var定义的变量只能在当前的函数内部使用。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">15</span>;<span class="comment">//全局变量:window.a</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;<span class="comment">//全局变量:window.a</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">show2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      alert(a)<span class="comment">//第一次弹10 show1.a</span></span><br><span class="line">      a = <span class="number">5</span>;<span class="comment">//局部变量:show1.a</span></span><br><span class="line">      alert(a);<span class="comment">//第二次弹5 show1.a</span></span><br><span class="line">    &#125;</span><br><span class="line">    show2();</span><br><span class="line">    alert(a);<span class="comment">//第三次弹5  show1.a</span></span><br><span class="line">&#125;</span><br><span class="line">show1()</span><br><span class="line">alert(a)<span class="comment">//第四次弹15 window.a</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">15</span>;<span class="comment">//全局变量:window.a</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">a = <span class="number">10</span>;<span class="comment">//全局变量:window.a </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   alert(a)<span class="comment">//第一次弹undefined show2.a</span></span><br><span class="line">   <span class="keyword">var</span> a = <span class="number">5</span>;<span class="comment">//局部变量:show2.a</span></span><br><span class="line">   alert(a);<span class="comment">//第二次弹5 show2.a</span></span><br><span class="line">&#125;</span><br><span class="line">show2();</span><br><span class="line">alert(a);<span class="comment">//第三次弹10  window.a</span></span><br><span class="line">&#125;</span><br><span class="line">show1()</span><br><span class="line">alert(a)<span class="comment">//第四次弹10 window.a</span></span><br></pre></td></tr></table></figure>

<h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><h5 id="function函数就是一个闭包，闭包里面的变量是封闭的-函数外面不可以获取。JavaScript具有自动垃圾收集机制-一般情况函数执行完后变量也会在内存里释放。"><a href="#function函数就是一个闭包，闭包里面的变量是封闭的-函数外面不可以获取。JavaScript具有自动垃圾收集机制-一般情况函数执行完后变量也会在内存里释放。" class="headerlink" title="function函数就是一个闭包，闭包里面的变量是封闭的,函数外面不可以获取。JavaScript具有自动垃圾收集机制,一般情况函数执行完后变量也会在内存里释放。"></a>function函数就是一个闭包，闭包里面的变量是封闭的,函数外面不可以获取。JavaScript具有自动垃圾收集机制,一般情况函数执行完后变量也会在内存里释放。</h5><blockquote>
<p>函数里面的变量不会影响外部的变量，多人开发也可以解决命名冲突的问题。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//函数自执行</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> a = <span class="number">5</span>;</span><br><span class="line">	<span class="built_in">console</span>.log(a)<span class="comment">//输出5</span></span><br><span class="line">&#125;)();</span><br><span class="line"><span class="built_in">console</span>.log(a)<span class="comment">//输出1</span></span><br></pre></td></tr></table></figure>
<hr>
<h4 id="模块化开发时也可以避免命名冲突的问题"><a href="#模块化开发时也可以避免命名冲突的问题" class="headerlink" title="模块化开发时也可以避免命名冲突的问题"></a>模块化开发时也可以避免命名冲突的问题</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//模块一</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	模块内容</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="comment">//模块二</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	模块内容</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="comment">//模块三</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	模块内容</span><br><span class="line">&#125;)();</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<hr>
<h5 id="之前说到函数变量外部不能使用，那模块内部的变量和功能怎么使用？其实函数内部的变量是有方法可以获取的。"><a href="#之前说到函数变量外部不能使用，那模块内部的变量和功能怎么使用？其实函数内部的变量是有方法可以获取的。" class="headerlink" title="之前说到函数变量外部不能使用，那模块内部的变量和功能怎么使用？其实函数内部的变量是有方法可以获取的。"></a>之前说到函数变量外部不能使用，那模块内部的变量和功能怎么使用？其实函数内部的变量是有方法可以获取的。</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> i = <span class="number">5</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">   i += n;</span><br><span class="line">   <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> c = a();</span><br><span class="line">c(<span class="number">5</span>)</span><br><span class="line">alert(c(<span class="number">5</span>))<span class="comment">//15</span></span><br></pre></td></tr></table></figure>

<h5 id="以上a函数通过返回一个内部函数b与外部全局变量c关联后，通过全局变量c就可以控制或获取到函数a内部的变量了。"><a href="#以上a函数通过返回一个内部函数b与外部全局变量c关联后，通过全局变量c就可以控制或获取到函数a内部的变量了。" class="headerlink" title="以上a函数通过返回一个内部函数b与外部全局变量c关联后，通过全局变量c就可以控制或获取到函数a内部的变量了。"></a>以上a函数通过返回一个内部函数b与外部全局变量c关联后，通过全局变量c就可以控制或获取到函数a内部的变量了。</h5><h5 id="由于以上方法会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题-可能导致内存泄露。"><a href="#由于以上方法会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题-可能导致内存泄露。" class="headerlink" title="由于以上方法会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题,可能导致内存泄露。"></a>由于以上方法会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题,可能导致内存泄露。</h5><h5 id="内存泄漏：是指程序中己动态分配的堆内存由于某种原因程序未释放或无法释放，造成系统内存的浪费，导致程序运行速度减慢甚至系统崩溃等严重后果。"><a href="#内存泄漏：是指程序中己动态分配的堆内存由于某种原因程序未释放或无法释放，造成系统内存的浪费，导致程序运行速度减慢甚至系统崩溃等严重后果。" class="headerlink" title="内存泄漏：是指程序中己动态分配的堆内存由于某种原因程序未释放或无法释放，造成系统内存的浪费，导致程序运行速度减慢甚至系统崩溃等严重后果。"></a>内存泄漏：是指程序中己动态分配的堆内存由于某种原因程序未释放或无法释放，造成系统内存的浪费，导致程序运行速度减慢甚至系统崩溃等严重后果。</h5><h3 id="eval-函数"><a href="#eval-函数" class="headerlink" title="eval() 函数"></a>eval() 函数</h3><blockquote>
<p>eval() 函数可将字符串转换为代码执行，并返回一个或多个值</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;(function()&#123;a = 5;&#125;)&quot;</span>;</span><br><span class="line">fn = <span class="built_in">eval</span>(str);</span><br><span class="line">fn()</span><br><span class="line"><span class="built_in">console</span>.log(a)<span class="comment">//输出5</span></span><br></pre></td></tr></table></figure>
<h5 id="如果eval-的参数不是字符串，那么eval-将直接返回参数。"><a href="#如果eval-的参数不是字符串，那么eval-将直接返回参数。" class="headerlink" title="如果eval()的参数不是字符串，那么eval()将直接返回参数。"></a>如果eval()的参数不是字符串，那么eval()将直接返回参数。</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">eval</span>(<span class="number">1</span>))<span class="comment">//输出1</span></span><br></pre></td></tr></table></figure>
<h5 id="如果eval-的参数是字符串，那么eval-将这个字符串解析成代码后进行执行，并返回最后一行代码执行的结果。"><a href="#如果eval-的参数是字符串，那么eval-将这个字符串解析成代码后进行执行，并返回最后一行代码执行的结果。" class="headerlink" title="如果eval()的参数是字符串，那么eval()将这个字符串解析成代码后进行执行，并返回最后一行代码执行的结果。"></a>如果eval()的参数是字符串，那么eval()将这个字符串解析成代码后进行执行，并返回最后一行代码执行的结果。</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">eval</span>(<span class="string">&quot;var a=5;a&quot;</span>))<span class="comment">//输出5</span></span><br></pre></td></tr></table></figure>
<h5 id="如果字符串无法解析成合法的代码，eval-将抛出错误。"><a href="#如果字符串无法解析成合法的代码，eval-将抛出错误。" class="headerlink" title="如果字符串无法解析成合法的代码，eval()将抛出错误。"></a>如果字符串无法解析成合法的代码，eval()将抛出错误。</h5>]]></content>
      <categories>
        <category>js初级</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript字符串和数组的常用方法</title>
    <url>/2018/06/17/JavaScript%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E6%95%B0%E7%BB%84%E7%9A%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h2 id="字符串常用方法"><a href="#字符串常用方法" class="headerlink" title="字符串常用方法"></a>字符串常用方法</h2><h3 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf()"></a>indexOf()</h3><blockquote>
<p>indexOf方法可返回某个指定的字符串值在字符串中首次出现的位置,没找到则为-1。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//indexOf(&quot;查找的内容&quot;,&quot;从哪个位置开始查找&quot;)</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;abcdefg&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.indexOf(<span class="string">&quot;c&quot;</span>))<span class="comment">//输出2</span></span><br><span class="line"><span class="built_in">console</span>.log(str.indexOf(<span class="string">&quot;c&quot;</span>,<span class="number">3</span>))<span class="comment">//输出-1</span></span><br></pre></td></tr></table></figure>

<h3 id="substr"><a href="#substr" class="headerlink" title="substr()"></a>substr()</h3><blockquote>
<p>substr方法可在字符串中截取指定的位置和长度</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//substr(&quot;截取的开始位置&quot;,&quot;截取的长度&quot;)</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;abcdefg&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.substr(<span class="number">2</span>));<span class="comment">//输出cdefg</span></span><br><span class="line"><span class="built_in">console</span>.log(str.substr(<span class="number">2</span>,<span class="number">2</span>))<span class="comment">//输出cd</span></span><br></pre></td></tr></table></figure>

<h3 id="substring"><a href="#substring" class="headerlink" title="substring()"></a>substring()</h3><blockquote>
<p>substring方法可在字符串中截取指定的开始位置和结束位置</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//substring(&quot;截取的开始位置&quot;,&quot;截取的结束位置&quot;)</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;abcdefg&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.substring(<span class="number">2</span>));<span class="comment">//输出cdefg</span></span><br><span class="line"><span class="built_in">console</span>.log(str.substring(<span class="number">2</span>,<span class="number">4</span>))<span class="comment">//输出cd</span></span><br><span class="line"><span class="built_in">console</span>.log(str.substring(<span class="number">4</span>,<span class="number">2</span>))<span class="comment">//输出cd</span></span><br></pre></td></tr></table></figure>

<h3 id="split"><a href="#split" class="headerlink" title="split()"></a>split()</h3><blockquote>
<p>用于把一个字符串分割成字符串数组。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//split(&quot;指定的内容作为分割点&quot;)</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;abcdefg&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.split(<span class="string">&quot;&quot;</span>));</span><br><span class="line"><span class="comment">//输出[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;, &quot;g&quot;]</span></span><br><span class="line"><span class="built_in">console</span>.log(str.split(<span class="string">&quot;c&quot;</span>));</span><br><span class="line"><span class="comment">//输出[&quot;ab&quot;, &quot;defg&quot;]</span></span><br></pre></td></tr></table></figure>

<h3 id="toLowerCase"><a href="#toLowerCase" class="headerlink" title="toLowerCase()"></a>toLowerCase()</h3><blockquote>
<p>用于把一个字符串变成小写</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;aBcDeFg&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.toLowerCase())<span class="comment">//输出abcdefg</span></span><br></pre></td></tr></table></figure>

<h3 id="toUpperCase"><a href="#toUpperCase" class="headerlink" title="toUpperCase()"></a>toUpperCase()</h3><blockquote>
<p>用于把一个字符串变成大写</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;aBcDeFg&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.toUpperCase())<span class="comment">//输出ABCDEFG</span></span><br></pre></td></tr></table></figure>

<h2 id="数组常用方法"><a href="#数组常用方法" class="headerlink" title="数组常用方法"></a>数组常用方法</h2><h3 id="join"><a href="#join" class="headerlink" title="join()"></a>join()</h3><blockquote>
<p>把数组转换成一个用符号连接的字符串</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;d&quot;</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.join(<span class="string">&quot;&quot;</span>))<span class="comment">//输出abcd</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.join(<span class="string">&quot;-&quot;</span>))<span class="comment">//输出a-b-c-d</span></span><br></pre></td></tr></table></figure>

<h3 id="shift"><a href="#shift" class="headerlink" title="shift()"></a>shift()</h3><blockquote>
<p>删除并返回数组的第一个元素</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;d&quot;</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.shift())<span class="comment">//输出a</span></span><br><span class="line"><span class="built_in">console</span>.log(arr)<span class="comment">//输出[b&quot;,&quot;c&quot;,&quot;d&quot;]</span></span><br></pre></td></tr></table></figure>

<h3 id="unshift"><a href="#unshift" class="headerlink" title="unshift()"></a>unshift()</h3><blockquote>
<p>向数组的开头添加一个或更多元素，并返回新的长度。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;d&quot;</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.unshift(<span class="number">1</span>))<span class="comment">//输出5</span></span><br><span class="line"><span class="built_in">console</span>.log(arr)<span class="comment">//输出[&quot;1&quot;,&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;]</span></span><br></pre></td></tr></table></figure>

<h3 id="pop"><a href="#pop" class="headerlink" title="pop()"></a>pop()</h3><blockquote>
<p>删除并返回数组的最后一个元素</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;d&quot;</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.pop())<span class="comment">//输出d</span></span><br><span class="line"><span class="built_in">console</span>.log(arr)<span class="comment">//输出[&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]</span></span><br></pre></td></tr></table></figure>

<h3 id="push"><a href="#push" class="headerlink" title="push()"></a>push()</h3><blockquote>
<p>向数组的末尾添加一个或更多元素，并返回新的长度。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;d&quot;</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.push(<span class="number">1</span>))<span class="comment">//输出5</span></span><br><span class="line"><span class="built_in">console</span>.log(arr)<span class="comment">//输出[&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;,&quot;1&quot;]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="slice"><a href="#slice" class="headerlink" title="slice()"></a>slice()</h3><blockquote>
<p>获取数组中数据，需指定位置和数量。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;d&quot;</span>,<span class="string">&quot;e&quot;</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.slice(<span class="number">2</span>))<span class="comment">//输出[&quot;c&quot;,&quot;d&quot;,&quot;e&quot;]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.slice(<span class="number">1</span>,<span class="number">3</span>))<span class="comment">//输出[b&quot;,&quot;c&quot;]</span></span><br></pre></td></tr></table></figure>

<h3 id="splice"><a href="#splice" class="headerlink" title="splice()"></a>splice()</h3><blockquote>
<p>删除元素，并向数组添加新元素,返回删除的内容。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//splice(&quot;位置&quot;,&quot;删除数量&quot;,&quot;添加的内容&quot;)</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;d&quot;</span>,<span class="string">&quot;e&quot;</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.splice(<span class="number">2</span>,<span class="number">1</span>,<span class="string">&quot;k&quot;</span>))<span class="comment">//输出c (删除)</span></span><br><span class="line"><span class="built_in">console</span>.log(arr)<span class="comment">//输出[&quot;a&quot;,&quot;b&quot;,&quot;k&quot;,&quot;d&quot;,&quot;e&quot;]</span></span><br></pre></td></tr></table></figure>

<h3 id="reverse"><a href="#reverse" class="headerlink" title="reverse()"></a>reverse()</h3><blockquote>
<p>对数组中的元素进行反序</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;d&quot;</span>,<span class="string">&quot;e&quot;</span>];	arr.reverse();</span><br><span class="line"><span class="built_in">console</span>.log(arr)<span class="comment">//输出[&quot;e&quot;,&quot;d&quot;,&quot;c&quot;,&quot;b&quot;,&quot;a&quot;]</span></span><br></pre></td></tr></table></figure>

<h3 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h3><blockquote>
<p>对数组的元素进行排序</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">4</span>];</span><br><span class="line"><span class="comment">//按顺序排列</span></span><br><span class="line">arr.sort(<span class="function"><span class="keyword">function</span> (<span class="params">a,b</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> a-b;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(arr)<span class="comment">//[1,2,3,4,5]</span></span><br><span class="line"><span class="comment">//按倒序排列</span></span><br><span class="line">arr.sort(<span class="function"><span class="keyword">function</span> (<span class="params">a,b</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> b-a;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(arr)<span class="comment">//[5,4,3,2,1]</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>js初级</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript定时器、Date对象和Math对象</title>
    <url>/2018/06/19/JavaScript%E5%AE%9A%E6%97%B6%E5%99%A8%E3%80%81Date%E5%AF%B9%E8%B1%A1%E5%92%8CMath%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<h3 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h3><h5 id="一次性定时器"><a href="#一次性定时器" class="headerlink" title="一次性定时器"></a>一次性定时器</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>  (<span class="params"></span>) </span>&#123;</span><br><span class="line">	alert(<span class="string">&quot;这是一次行定时器，只执行1次&quot;</span>);</span><br><span class="line">&#125;,<span class="number">1000</span>)</span><br><span class="line"><span class="keyword">var</span> timer = <span class="literal">null</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">timeFn</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">timer = <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>  (<span class="params"></span>) </span>&#123;</span><br><span class="line">   	alert(<span class="string">&quot;这是一次行定时器，也可以不断执行&quot;</span>);</span><br><span class="line">   	timeFn();</span><br><span class="line">&#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line">timeFn()<span class="comment">//执行函数</span></span><br><span class="line"><span class="comment">//点击页面时停止定时器</span></span><br><span class="line"><span class="built_in">document</span>.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">clearTimeout</span>(timer)<span class="comment">//停止一次性定时器</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="循环定时器"><a href="#循环定时器" class="headerlink" title="循环定时器"></a>循环定时器</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> timer = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>  (<span class="params"></span>) </span>&#123;</span><br><span class="line">alert(<span class="string">&quot;循环定时器&quot;</span>);</span><br><span class="line">i++;<span class="comment">//每循环一次加1</span></span><br><span class="line"><span class="keyword">if</span> (i&gt;<span class="number">5</span>) &#123;</span><br><span class="line">   	<span class="comment">//判断执行5次循环后停止循环定时器</span></span><br><span class="line">   	<span class="built_in">clearInterval</span>(timer);</span><br><span class="line">&#125;;</span><br><span class="line">&#125;,<span class="number">1000</span>);</span><br><span class="line">~~~ </span><br><span class="line"></span><br><span class="line">##### Date对象</span><br><span class="line"></span><br><span class="line">&gt;<span class="built_in">Date</span> 对象用于处理日期和时间。</span><br><span class="line"></span><br><span class="line">~~~JavaScript</span><br><span class="line"><span class="keyword">var</span> time = <span class="keyword">new</span> <span class="built_in">Date</span>();<span class="comment">//创建时间对象，当前时间</span></span><br><span class="line"><span class="comment">//var time = new Date(2017,5,15,10,30,0)//设置指定时间对象2017-6-15 10:30:00</span></span><br><span class="line"><span class="comment">//所有get开头的为获取方法</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;年:&quot;</span>+time.getFullYear())</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;月:&quot;</span>+time.getMonth())<span class="comment">//从0开始0-11</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;日:&quot;</span>+time.getDate())</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;星期:&quot;</span>+time.getDay())<span class="comment">//从0开始0-6，0是星期日</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;时:&quot;</span>+time.getHours())</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;钟:&quot;</span>+time.getMinutes())</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;秒:&quot;</span>+time.getSeconds())</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;时间戳&quot;</span>:+time.getTime())</span><br><span class="line"><span class="comment">//时间戳：是指格林威治时间1970年01月01日00时00分00秒(北京时间1970年01月01日08时00分00秒)起至现在的总秒数</span></span><br><span class="line"><span class="comment">//以上方法都有对应的设置set开头的方法</span></span><br><span class="line"><span class="comment">//如：</span></span><br><span class="line">time.setFullYear(<span class="number">2016</span>)<span class="comment">//把时间设置为2016年</span></span><br></pre></td></tr></table></figure>

<h5 id="结合定时器在页面上动态显示时间"><a href="#结合定时器在页面上动态显示时间" class="headerlink" title="结合定时器在页面上动态显示时间"></a>结合定时器在页面上动态显示时间</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> time = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">	<span class="keyword">var</span> str = time.getFullYear()+<span class="string">&quot;年&quot;</span>;</span><br><span class="line">	str += time.getMonth()+<span class="string">&quot;月&quot;</span>;</span><br><span class="line">	str += time.getDate()+<span class="string">&quot;日 &quot;</span>;</span><br><span class="line">	str += time.getHours()+<span class="string">&quot;:&quot;</span>;</span><br><span class="line">	str += time.getMinutes()+<span class="string">&quot;:&quot;</span>;</span><br><span class="line">	str += time.getSeconds();</span><br><span class="line">	<span class="built_in">document</span>.body.innerText = str;</span><br><span class="line">&#125;,<span class="number">1000</span>)</span><br><span class="line">~~~ </span><br><span class="line">##### Math对象</span><br><span class="line"></span><br><span class="line">&gt;<span class="built_in">Math</span> 对象用于执行数学任务。</span><br><span class="line"></span><br><span class="line">~~~JavaScript</span><br><span class="line"><span class="comment">//输出Math,可以查看所以属性和方法</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>);</span><br><span class="line"><span class="comment">//常用方法</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;绝对值：&quot;</span>+<span class="built_in">Math</span>.abs(<span class="number">2</span><span class="number">-5</span>))<span class="comment">//输出3</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;最小值：&quot;</span>+<span class="built_in">Math</span>.min(<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">4</span>))<span class="comment">//输出1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;最大值：&quot;</span>+<span class="built_in">Math</span>.max(<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">4</span>))<span class="comment">//输出5</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;向上取整：&quot;</span>+<span class="built_in">Math</span>.ceil(<span class="number">3.3</span>))<span class="comment">//输出4</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;向下取整：&quot;</span>+<span class="built_in">Math</span>.floor(<span class="number">3.3</span>))<span class="comment">//输出3</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;四舍五入：&quot;</span>+<span class="built_in">Math</span>.round(<span class="number">3.3</span>))<span class="comment">//输出3</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;随机数：&quot;</span>+<span class="built_in">Math</span>.random())<span class="comment">//0-1之间,不包括0和1</span></span><br></pre></td></tr></table></figure>

<h5 id="自定义随机数函数"><a href="#自定义随机数函数" class="headerlink" title="自定义随机数函数"></a>自定义随机数函数</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//根据最大最小值的范围计算随机数的函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">rndFn</span> (<span class="params">min,max</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">Math</span>.round(<span class="built_in">Math</span>.random()*(max-min))+min;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(rndFn(<span class="number">1</span>,<span class="number">5</span>))<span class="comment">//获取1-5的随机数</span></span><br></pre></td></tr></table></figure>

<h5 id="随机排列"><a href="#随机排列" class="headerlink" title="随机排列"></a>随机排列</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line">arr.sort(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">Math</span>.random()<span class="number">-0.5</span>;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(arr)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>js初级</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript文档对象模型</title>
    <url>/2018/06/19/JavaScript%E6%96%87%E6%A1%A3%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<h2 id="DOM-文档对象模型"><a href="#DOM-文档对象模型" class="headerlink" title="DOM-文档对象模型"></a>DOM-文档对象模型</h2><h6 id="DOM（文档对象模型）是W3C制定的标准接口规范，是一种处理HTML和XML文件的标准API。他的功能是把浏览器。DOM实际上是一个操作文档里面所包含的内容的一个编程的API，允许开发人员从文档中查找、读取、修改、增加和删除数据"><a href="#DOM（文档对象模型）是W3C制定的标准接口规范，是一种处理HTML和XML文件的标准API。他的功能是把浏览器。DOM实际上是一个操作文档里面所包含的内容的一个编程的API，允许开发人员从文档中查找、读取、修改、增加和删除数据" class="headerlink" title="DOM（文档对象模型）是W3C制定的标准接口规范，是一种处理HTML和XML文件的标准API。他的功能是把浏览器。DOM实际上是一个操作文档里面所包含的内容的一个编程的API，允许开发人员从文档中查找、读取、修改、增加和删除数据"></a>DOM（文档对象模型）是W3C制定的标准接口规范，是一种处理HTML和XML文件的标准API。他的功能是把浏览器。DOM实际上是一个操作文档里面所包含的内容的一个编程的API，允许开发人员从文档中查找、读取、修改、增加和删除数据</h6><h2 id="DOM-节点"><a href="#DOM-节点" class="headerlink" title="DOM 节点"></a>DOM 节点</h2><h5 id="根据-W3C-的-HTML-DOM-标准，HTML-文档中的所有内容都是节点："><a href="#根据-W3C-的-HTML-DOM-标准，HTML-文档中的所有内容都是节点：" class="headerlink" title="根据 W3C 的 HTML DOM 标准，HTML 文档中的所有内容都是节点："></a>根据 W3C 的 HTML DOM 标准，HTML 文档中的所有内容都是节点：</h5><ul>
<li>整个文档是一个文档节点</li>
<li>每个 HTML 元素是元素节点</li>
<li>HTML 元素内的文本是文本节点</li>
<li>每个 HTML 属性是属性节点</li>
<li>注释是注释节点</li>
</ul>
<p> <img src="https://s2.ax1x.com/2019/07/17/ZLKgqe.jpg" alt="我是图片"></p>
<h2 id="DOM-节点获取"><a href="#DOM-节点获取" class="headerlink" title="DOM 节点获取"></a>DOM 节点获取</h2><table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">getElementById(id)</td>
<td align="center">获取指定 ID 的元素。</td>
</tr>
<tr>
<td align="center">getElementsByTagName(name)</td>
<td align="center">获取指定标签名称的所有元素的节点列表（集合/节点数组）。</td>
</tr>
<tr>
<td align="center">getElementsByClassName(class)</td>
<td align="center">获取指定类名的所有元素的节点列表。</td>
</tr>
<tr>
<td align="center">querySelector()</td>
<td align="center">获取指定 CSS 选择器元素的第一个元素。</td>
</tr>
<tr>
<td align="center">querySelectorAll()</td>
<td align="center">获取指定 CSS 选择器的所有元素列表。</td>
</tr>
</tbody></table>
<h2 id="DOM-节点类型"><a href="#DOM-节点类型" class="headerlink" title="DOM 节点类型"></a>DOM 节点类型</h2><h3 id="常用属性节点类型"><a href="#常用属性节点类型" class="headerlink" title="常用属性节点类型"></a>常用属性节点类型</h3><table>
<thead>
<tr>
<th align="center">类型</th>
<th align="center">类型值</th>
</tr>
</thead>
<tbody><tr>
<td align="center">元素节点</td>
<td align="center">1</td>
</tr>
<tr>
<td align="center">属性节点</td>
<td align="center">2</td>
</tr>
<tr>
<td align="center">文本节点</td>
<td align="center">3</td>
</tr>
<tr>
<td align="center">注释节点</td>
<td align="center">8</td>
</tr>
<tr>
<td align="center">文档节点</td>
<td align="center">9</td>
</tr>
</tbody></table>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>节点类型<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span>&gt;</span>这是DIV<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">p</span>&gt;</span>这是P<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 注释 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">span</span>&gt;</span>这是span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">/*</span><br><span class="line">	nodeType:节点的类型</span><br><span class="line">	nodeName:节点的名称</span><br><span class="line">	nodeValue:节点的值</span><br><span class="line">*/</span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="string">&quot;文档节点:&quot;</span>+<span class="built_in">document</span>.nodeType,<span class="built_in">document</span>.nodeName,<span class="built_in">document</span>.nodeValue)</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> wrap = <span class="built_in">document</span>.querySelector(<span class="string">&quot;.wrap&quot;</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> attr = wrap.attributes.class;<span class="comment">//wrap的属性节点</span></span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="string">&quot;wrap属性节点:&quot;</span>+attr.nodeType,attr.nodeName,attr.nodeValue)</span></span><br><span class="line"><span class="javascript"><span class="comment">//获取wrap所有子节点</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> childs = wrap.childNodes;</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="string">&quot;所有节点长度:&quot;</span>+childs.length)</span></span><br><span class="line"><span class="javascript"><span class="comment">// 循环输出所有子节点的类型、名字、值</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; childs.length; i++) &#123;	</span></span><br><span class="line"><span class="javascript">	<span class="built_in">console</span>.log(childs[i].nodeType,childs[i].nodeName,childs[i].nodeValue)	</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="DOM-元素节点尺寸和位置"><a href="#DOM-元素节点尺寸和位置" class="headerlink" title="DOM 元素节点尺寸和位置"></a>DOM 元素节点尺寸和位置</h2><table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">clientWidth</td>
<td align="center">获取元素可视区的宽</td>
</tr>
<tr>
<td align="center">clientHeight</td>
<td align="center">获取元素可视区的高</td>
</tr>
<tr>
<td align="center">offsetWidth</td>
<td align="center">获取元素实际宽</td>
</tr>
<tr>
<td align="center">offsetHeight</td>
<td align="center">获取元素实际高</td>
</tr>
<tr>
<td align="center">offsetLeft</td>
<td align="center">获取定位的left值</td>
</tr>
<tr>
<td align="center">offsetTop</td>
<td align="center">获取定位的top值</td>
</tr>
<tr>
<td align="center">offsetParent</td>
<td align="center">获取定位父级元素</td>
</tr>
</tbody></table>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line"><span class="css">	<span class="selector-class">.wrap</span>&#123;</span></span><br><span class="line">		width: 100px;</span><br><span class="line">		height: 100px;</span><br><span class="line"><span class="css">		<span class="selector-tag">background</span>: <span class="selector-id">#ccc</span>;</span></span><br><span class="line">		border: 10px solid black;</span><br><span class="line"><span class="css">		<span class="comment">/*margin: auto;*/</span></span></span><br><span class="line">		position: absolute;</span><br><span class="line">		left: 50%;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>	</span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> wrap = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.wrap&#x27;</span>);</span></span><br><span class="line"><span class="javascript"><span class="comment">//可视宽高 = padding + content;</span></span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="string">&quot;获取可视宽:&quot;</span>+wrap.clientWidth);</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="string">&quot;获取可视高:&quot;</span>+wrap.clientHeight);	</span></span><br><span class="line"><span class="javascript"><span class="comment">//实际大小 = border + padding + content;</span></span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="string">&quot;实际宽:&quot;</span>+wrap.offsetWidth)</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="string">&quot;实际高:&quot;</span>+wrap.offsetHeight)</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="string">&quot;定位left值:&quot;</span>+wrap.offsetLeft)</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="string">&quot;定位父级元素:&quot;</span>,wrap.offsetParent)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="DOM-节点关系"><a href="#DOM-节点关系" class="headerlink" title="DOM 节点关系"></a>DOM 节点关系</h2><table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">childNodes</td>
<td align="center">所有子节点</td>
</tr>
<tr>
<td align="center">children</td>
<td align="center">所有是标签类型的子节点</td>
</tr>
<tr>
<td align="center">parentNode</td>
<td align="center">父节点</td>
</tr>
<tr>
<td align="center">firstChild</td>
<td align="center">第一个子节点</td>
</tr>
<tr>
<td align="center">lastChild</td>
<td align="center">最后一个子节点</td>
</tr>
<tr>
<td align="center">nextSibling</td>
<td align="center">下一个兄弟节点</td>
</tr>
<tr>
<td align="center">previousSibling</td>
<td align="center">上一个兄弟节点</td>
</tr>
</tbody></table>
<h2 id="DOM-节点操作"><a href="#DOM-节点操作" class="headerlink" title="DOM 节点操作"></a>DOM 节点操作</h2><table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">createElement()</td>
<td align="center">创建节点</td>
</tr>
<tr>
<td align="center">appendChild()</td>
<td align="center">插入节点到最后</td>
</tr>
<tr>
<td align="center">insertBefore()</td>
<td align="center">插入节点到目标节点的前面</td>
</tr>
<tr>
<td align="center">repalceChild()</td>
<td align="center">替换节点</td>
</tr>
<tr>
<td align="center">cloneNode(boolean)</td>
<td align="center">复制节点</td>
</tr>
<tr>
<td align="center">removeChild()</td>
<td align="center">删除节点</td>
</tr>
<tr>
<td align="center">setAttribute()</td>
<td align="center">设置节点属性</td>
</tr>
<tr>
<td align="center">getAttribute()</td>
<td align="center">获取节点属性</td>
</tr>
<tr>
<td align="center">removeAttribute()</td>
<td align="center">删除节点属性</td>
</tr>
</tbody></table>
<h2 id="例子-1-创建、添加、替换"><a href="#例子-1-创建、添加、替换" class="headerlink" title="例子-1.创建、添加、替换"></a>例子-1.创建、添加、替换</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">button</span>&gt;</span>添加li<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> ul = <span class="built_in">document</span>.querySelector(<span class="string">&quot;ul&quot;</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">&quot;button&quot;</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> i = <span class="number">1</span>;</span></span><br><span class="line"><span class="javascript"><span class="comment">//点击添加li按钮</span></span></span><br><span class="line"><span class="javascript">btn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line">	i++;</span><br><span class="line"><span class="javascript">	<span class="comment">//创建li节点</span></span></span><br><span class="line"><span class="javascript">	<span class="keyword">var</span> li = <span class="built_in">document</span>.createElement(<span class="string">&quot;li&quot;</span>);</span></span><br><span class="line"><span class="javascript">	<span class="comment">//给li节点添加内容</span></span></span><br><span class="line">	li.innerHTML = i;</span><br><span class="line"><span class="javascript">	<span class="comment">//在UL最后添加一个LI节点</span></span></span><br><span class="line">	ul.appendChild(li);</span><br><span class="line">	</span><br><span class="line"><span class="javascript">	<span class="comment">//把li添加到ul的第一个节点之前</span></span></span><br><span class="line"><span class="javascript">	<span class="comment">//ul.insertBefore(li,ul.children[0]);</span></span></span><br><span class="line">	</span><br><span class="line"><span class="javascript">	<span class="comment">//把ul第一个子字节替换为创建的那个li</span></span></span><br><span class="line"><span class="javascript">	<span class="comment">//ul.replaceChild(li,ul.children[0])</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="例子-2-节点复制"><a href="#例子-2-节点复制" class="headerlink" title="例子-2.节点复制"></a>例子-2.节点复制</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span>这是DIV</span><br><span class="line">		<span class="tag">&lt;<span class="name">span</span>&gt;</span>这是span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="javascript"><span class="comment">//浅复制：只复制DIV不包括里面的内容</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// var clone_div = div.cloneNode(false);</span></span></span><br><span class="line"><span class="javascript"><span class="comment">//深复制：复制DIV包括DIV里面的内容</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> clone_div = div.cloneNode(<span class="literal">true</span>);</span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.body.appendChild(clone_div);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="例子-3-节点删除"><a href="#例子-3-节点删除" class="headerlink" title="例子-3.节点删除"></a>例子-3.节点删除</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>6<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>7<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>8<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>9<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>10<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">button</span>&gt;</span>删除节点<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> ul = <span class="built_in">document</span>.querySelector(<span class="string">&quot;ul&quot;</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">&quot;button&quot;</span>);</span></span><br><span class="line"><span class="javascript">btn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">	<span class="comment">//删除ul的第一个子节点</span></span></span><br><span class="line">	ul.removeChild(ul.children[0]);	</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="例子-4-节点的属性操作"><a href="#例子-4-节点的属性操作" class="headerlink" title="例子-4.节点的属性操作"></a>例子-4.节点的属性操作</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//设置标签里面的属性值</span></span><br><span class="line">div.setAttribute(<span class="string">&quot;index&quot;</span>,<span class="string">&quot;5&quot;</span>);</span><br><span class="line"><span class="comment">//获取标签里面的属性值</span></span><br><span class="line">alert(div.getAttribute(<span class="string">&quot;index&quot;</span>));</span><br><span class="line"><span class="comment">//删除标签里面的属性值</span></span><br><span class="line">div.removeAttribute(<span class="string">&quot;index&quot;</span>);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>js初级</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript鼠标滚轮事件</title>
    <url>/2018/06/22/JavaScript%E9%BC%A0%E6%A0%87%E6%BB%9A%E8%BD%AE%E4%BA%8B%E4%BB%B6/</url>
    <content><![CDATA[<h2 id="鼠标滚轮事件"><a href="#鼠标滚轮事件" class="headerlink" title="鼠标滚轮事件"></a>鼠标滚轮事件</h2><h5 id="浏览器兼容性问题都是让人头痛的一个问题，鼠标滚轮事件同样也存在兼容问题，接下来我们就看看怎么解决这个兼容问题吧。"><a href="#浏览器兼容性问题都是让人头痛的一个问题，鼠标滚轮事件同样也存在兼容问题，接下来我们就看看怎么解决这个兼容问题吧。" class="headerlink" title="浏览器兼容性问题都是让人头痛的一个问题，鼠标滚轮事件同样也存在兼容问题，接下来我们就看看怎么解决这个兼容问题吧。"></a>浏览器兼容性问题都是让人头痛的一个问题，鼠标滚轮事件同样也存在兼容问题，接下来我们就看看怎么解决这个兼容问题吧。</h5><h2 id="mousewheel事件"><a href="#mousewheel事件" class="headerlink" title="mousewheel事件"></a>mousewheel事件</h2><h5 id="mousewheel-鼠标滚轮事件，大部分浏览器都支持mousewheel事件，除了火狐浏览器。（总有浏览器要搞些事）通过事件对象属性wheelDelta的正负值来判断滚动的方向。"><a href="#mousewheel-鼠标滚轮事件，大部分浏览器都支持mousewheel事件，除了火狐浏览器。（总有浏览器要搞些事）通过事件对象属性wheelDelta的正负值来判断滚动的方向。" class="headerlink" title="mousewheel:鼠标滚轮事件，大部分浏览器都支持mousewheel事件，除了火狐浏览器。（总有浏览器要搞些事）通过事件对象属性wheelDelta的正负值来判断滚动的方向。"></a>mousewheel:鼠标滚轮事件，大部分浏览器都支持mousewheel事件，除了火狐浏览器。（总有浏览器要搞些事）通过事件对象属性wheelDelta的正负值来判断滚动的方向。</h5><h5 id="wheelDelta的值：鼠标滚轮向上滚动是120，向下滚动是-120"><a href="#wheelDelta的值：鼠标滚轮向上滚动是120，向下滚动是-120" class="headerlink" title="wheelDelta的值：鼠标滚轮向上滚动是120，向下滚动是-120"></a>wheelDelta的值：鼠标滚轮向上滚动是120，向下滚动是-120</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line"><span class="css">	<span class="selector-tag">body</span>&#123;<span class="attribute">height</span>: <span class="number">3000px</span>;&#125;</span></span><br><span class="line"><span class="css">	<span class="selector-tag">div</span>&#123;<span class="attribute">width</span>: <span class="number">100px</span>;<span class="attribute">height</span>: <span class="number">100px</span>;	<span class="attribute">background</span>: red;&#125;	</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">&quot;div&quot;</span>);</span></span><br><span class="line"><span class="javascript"><span class="comment">//滚轮事件</span></span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.onmousewheel = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">	<span class="comment">//判断往上滚还是往下滚</span></span></span><br><span class="line">	if (e.wheelDelta&gt;0) &#123;</span><br><span class="line"><span class="javascript">		<span class="comment">//增div宽高</span></span></span><br><span class="line"><span class="javascript">		div.style.width = div.offsetWidth+<span class="number">10</span>+<span class="string">&quot;px&quot;</span>;</span></span><br><span class="line"><span class="javascript">		div.style.height = div.offsetHeight+<span class="number">10</span>+<span class="string">&quot;px&quot;</span>;</span></span><br><span class="line"><span class="javascript">	&#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">		<span class="comment">//减div宽高</span></span></span><br><span class="line"><span class="javascript">		div.style.width = div.offsetWidth<span class="number">-10</span>+<span class="string">&quot;px&quot;</span>;</span></span><br><span class="line"><span class="javascript">		div.style.height = div.offsetHeight<span class="number">-10</span>+<span class="string">&quot;px&quot;</span>;</span></span><br><span class="line">	&#125;</span><br><span class="line"><span class="javascript">	<span class="comment">//阻止默认事件，否则默认窗口的滚动了也会滚动</span></span></span><br><span class="line"><span class="javascript">	event.preventDefault ? event.preventDefault() : (event.returnValue = <span class="literal">false</span>);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="DOMMouseScroll事件"><a href="#DOMMouseScroll事件" class="headerlink" title="DOMMouseScroll事件"></a>DOMMouseScroll事件</h2><h5 id="DOMMouseScroll-是火狐专有的鼠标滚轮事件，而且只能通过addEventListener来绑定事件，通过事件对象的detail属性的正负值来判断滚动的方向。"><a href="#DOMMouseScroll-是火狐专有的鼠标滚轮事件，而且只能通过addEventListener来绑定事件，通过事件对象的detail属性的正负值来判断滚动的方向。" class="headerlink" title="DOMMouseScroll:是火狐专有的鼠标滚轮事件，而且只能通过addEventListener来绑定事件，通过事件对象的detail属性的正负值来判断滚动的方向。"></a>DOMMouseScroll:是火狐专有的鼠标滚轮事件，而且只能通过addEventListener来绑定事件，通过事件对象的detail属性的正负值来判断滚动的方向。</h5><h5 id="detail：鼠标滚轮向上滚动是-3，向下滚动是3"><a href="#detail：鼠标滚轮向上滚动是-3，向下滚动是3" class="headerlink" title="detail：鼠标滚轮向上滚动是-3，向下滚动是3"></a>detail：鼠标滚轮向上滚动是-3，向下滚动是3</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line"><span class="css">	<span class="selector-tag">body</span>&#123;<span class="attribute">height</span>: <span class="number">3000px</span>;&#125;</span></span><br><span class="line"><span class="css">	<span class="selector-tag">div</span>&#123;<span class="attribute">width</span>: <span class="number">100px</span>;<span class="attribute">height</span>: <span class="number">100px</span>;<span class="attribute">background</span>: red;&#125;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">&quot;div&quot;</span>);</span></span><br><span class="line"><span class="javascript"><span class="comment">//滚轮事件</span></span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.addEventListener(<span class="string">&quot;DOMMouseScroll&quot;</span>,<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">	<span class="comment">//判断往上滚还是往下滚</span></span></span><br><span class="line">	if (e.detail&gt;0) &#123;</span><br><span class="line"><span class="javascript">		<span class="comment">//增div宽高</span></span></span><br><span class="line"><span class="javascript">		div.style.width = div.offsetWidth+<span class="number">10</span>+<span class="string">&quot;px&quot;</span>;</span></span><br><span class="line"><span class="javascript">		div.style.height = div.offsetHeight+<span class="number">10</span>+<span class="string">&quot;px&quot;</span>;</span></span><br><span class="line"><span class="javascript">	&#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">		<span class="comment">//减div宽高</span></span></span><br><span class="line"><span class="javascript">		div.style.width = div.offsetWidth<span class="number">-10</span>+<span class="string">&quot;px&quot;</span>;</span></span><br><span class="line"><span class="javascript">		div.style.height = div.offsetHeight<span class="number">-10</span>+<span class="string">&quot;px&quot;</span>;</span></span><br><span class="line">	&#125;</span><br><span class="line"><span class="javascript">	<span class="comment">//阻止默认事件，否则默认窗口的滚动了也会滚动</span></span></span><br><span class="line">	e.preventDefault()</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="封滚轮事件函数兼容例子"><a href="#封滚轮事件函数兼容例子" class="headerlink" title="封滚轮事件函数兼容例子"></a>封滚轮事件函数兼容例子</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line">	body&#123;</span><br><span class="line">		height: 3000px;</span><br><span class="line">	&#125;</span><br><span class="line">	div&#123;</span><br><span class="line">		width: 100px;</span><br><span class="line">		height: 100px;</span><br><span class="line">		background: red;</span><br><span class="line">		margin-bottom: 10px;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> div = <span class="built_in">document</span>.querySelectorAll(<span class="string">&quot;div&quot;</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; div.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">	mousewheel(div[i],<span class="function"><span class="keyword">function</span> (<span class="params">e,bol</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">   	<span class="comment">//判断上滚还是下滚</span></span></span><br><span class="line">		if (bol) &#123;		</span><br><span class="line"><span class="javascript">		<span class="comment">//增div宽高</span></span></span><br><span class="line"><span class="javascript">			<span class="built_in">this</span>.style.width = <span class="built_in">this</span>.offsetWidth + <span class="number">10</span> + <span class="string">&quot;px&quot;</span></span></span><br><span class="line"><span class="javascript">			<span class="built_in">this</span>.style.height = <span class="built_in">this</span>.offsetHeight + <span class="number">10</span> + <span class="string">&quot;px&quot;</span>	</span></span><br><span class="line"><span class="javascript">		&#125;<span class="keyword">else</span>&#123;	</span></span><br><span class="line"><span class="javascript">		<span class="comment">//减div宽高</span></span></span><br><span class="line"><span class="javascript">			<span class="built_in">this</span>.style.width = <span class="built_in">this</span>.offsetWidth - <span class="number">10</span> + <span class="string">&quot;px&quot;</span></span></span><br><span class="line"><span class="javascript">			<span class="built_in">this</span>.style.height = <span class="built_in">this</span>.offsetHeight - <span class="number">10</span> + <span class="string">&quot;px&quot;</span>	</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="javascript"><span class="comment">//滚轮事件函数封装</span></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">mousewheel</span>(<span class="params">obj,callback</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">	<span class="comment">//判断是否火狐浏览器</span></span></span><br><span class="line"><span class="javascript">	<span class="keyword">if</span> (navigator.userAgent.indexOf(<span class="string">&quot;Firefox&quot;</span>)&gt;<span class="number">-1</span>) &#123;</span></span><br><span class="line"><span class="javascript">		obj.addEventListener(<span class="string">&quot;DOMMouseScroll&quot;</span>,fn);<span class="comment">//火狐滚轮事件</span></span></span><br><span class="line"><span class="javascript">	&#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line">	if(obj.addEventListener)&#123;</span><br><span class="line"><span class="javascript">		obj.addEventListener(<span class="string">&quot;mousewheel&quot;</span>,fn);</span></span><br><span class="line"><span class="javascript">		&#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line">		obj.onmousewheel = fn;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="javascript">	<span class="comment">//滚轮事件执行函数</span></span></span><br><span class="line"><span class="javascript">	<span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">		<span class="keyword">var</span> e = e || <span class="built_in">window</span>.event;</span></span><br><span class="line">	/*</span><br><span class="line">	detail 上滚:-3 下滚:3</span><br><span class="line"><span class="javascript">	e.detail&lt;<span class="number">0</span>返回<span class="literal">true</span>:上,<span class="attr">false</span>:下</span></span><br><span class="line">	</span><br><span class="line">	wheelDelta 上滚:120 下滚:-120</span><br><span class="line"><span class="javascript">	e.wheelDelta&gt;<span class="number">0</span>返回<span class="literal">true</span>:上,<span class="attr">false</span>:下</span></span><br><span class="line">	*/</span><br><span class="line"><span class="javascript">		<span class="keyword">var</span> bol = e.detail?e.detail&lt;<span class="number">0</span>:e.wheelDelta&gt;<span class="number">0</span>;</span></span><br><span class="line"><span class="javascript"><span class="comment">//call调用函数方法，第一个参数是函数的this指向;</span></span></span><br><span class="line">		callback.call(obj,e,bol)</span><br><span class="line"><span class="javascript">		<span class="comment">//阻止默认事件</span></span></span><br><span class="line"><span class="javascript">		e.preventDefault ? e.preventDefault() : (e.returnValue = <span class="literal">false</span>);</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>js高级</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript浏览器对象模型</title>
    <url>/2018/06/20/JavaScript%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<h2 id="BOM-浏览器对象模型"><a href="#BOM-浏览器对象模型" class="headerlink" title="BOM-浏览器对象模型"></a>BOM-浏览器对象模型</h2><h4 id="浏览器对象模型提供了独立于内容的、可以与浏览器窗口进行互动的对象结构。BOM由多个对象组成，其中代表浏览器窗口的Window对象是BOM的顶层对象，其他对象都是该对象的子对象。"><a href="#浏览器对象模型提供了独立于内容的、可以与浏览器窗口进行互动的对象结构。BOM由多个对象组成，其中代表浏览器窗口的Window对象是BOM的顶层对象，其他对象都是该对象的子对象。" class="headerlink" title="浏览器对象模型提供了独立于内容的、可以与浏览器窗口进行互动的对象结构。BOM由多个对象组成，其中代表浏览器窗口的Window对象是BOM的顶层对象，其他对象都是该对象的子对象。"></a>浏览器对象模型提供了独立于内容的、可以与浏览器窗口进行互动的对象结构。BOM由多个对象组成，其中代表浏览器窗口的Window对象是BOM的顶层对象，其他对象都是该对象的子对象。</h4><h2 id="window对象"><a href="#window对象" class="headerlink" title="window对象"></a>window对象</h2><h4 id="所有浏览器都支持-window-对象。它表示浏览器窗口。所有-JavaScript-全局对象、函数以及变量均自动成为-window对象的成员。全局变量是-window-对象的属性。全局函数是-window-对象的方法"><a href="#所有浏览器都支持-window-对象。它表示浏览器窗口。所有-JavaScript-全局对象、函数以及变量均自动成为-window对象的成员。全局变量是-window-对象的属性。全局函数是-window-对象的方法" class="headerlink" title="所有浏览器都支持 window 对象。它表示浏览器窗口。所有 JavaScript 全局对象、函数以及变量均自动成为 window对象的成员。全局变量是 window 对象的属性。全局函数是 window 对象的方法"></a>所有浏览器都支持 window 对象。它表示浏览器窗口。所有 JavaScript 全局对象、函数以及变量均自动成为 window对象的成员。全局变量是 window 对象的属性。全局函数是 window 对象的方法</h4><h3 id="例子-打开关闭窗口"><a href="#例子-打开关闭窗口" class="headerlink" title="例子-打开关闭窗口"></a>例子-打开关闭窗口</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;打开新窗口&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;关闭&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="comment">//用于记录打开的窗口对象</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> win = <span class="literal">null</span>;</span></span><br><span class="line"><span class="javascript"><span class="comment">//获取两个input按钮</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> input= <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;input&#x27;</span>);</span></span><br><span class="line"><span class="javascript"><span class="comment">//点击打开新窗口按钮</span></span></span><br><span class="line"><span class="javascript">input[<span class="number">0</span>].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">	win = <span class="built_in">window</span>.open(<span class="string">&#x27;http:baidu.com&#x27;</span>,<span class="string">&#x27;_blank&#x27;</span>)</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="javascript"><span class="comment">//点击关闭新窗口按钮</span></span></span><br><span class="line"><span class="javascript">input[<span class="number">1</span>].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line">	win.close();</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="例子-运行代码"><a href="#例子-运行代码" class="headerlink" title="例子-运行代码"></a>例子-运行代码</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">textarea</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">alert(<span class="string">&quot;hello world&quot;</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;运行代码&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="comment">//获取文本框</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> txt = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;textarea&#x27;</span>);</span></span><br><span class="line"><span class="javascript"><span class="comment">//获取运行代码按钮</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;input&#x27;</span>);</span></span><br><span class="line"><span class="javascript"><span class="comment">//点击运行代码按钮</span></span></span><br><span class="line"><span class="javascript">btn.onclick = <span class="function"><span class="keyword">function</span>  (<span class="params"></span>) </span>&#123;</span></span><br><span class="line">	runCode(txt.value)</span><br><span class="line">&#125;</span><br><span class="line"><span class="javascript"><span class="comment">//打开新窗口运行代码函数</span></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">runCode</span>(<span class="params">oCode</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">	<span class="keyword">var</span> win = <span class="built_in">window</span>.open(<span class="string">&#x27;&#x27;</span>, <span class="string">&quot;_blank&quot;</span>);<span class="comment">//打开新窗口</span></span></span><br><span class="line"><span class="javascript">	win.document.write(oCode);<span class="comment">//在新窗口写入代码内容</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="移动滚动条"><a href="#移动滚动条" class="headerlink" title="移动滚动条"></a>移动滚动条</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">style</span>=<span class="string">&quot;line-height:100px;&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>内容1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>内容2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>内容3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>内容4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>内容5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>内容6<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>内容7<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>内容8<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>内容9<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>内容10<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="comment">//点击文档</span></span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;	</span></span><br><span class="line"><span class="javascript">	<span class="comment">//移动滚动条到指定位置和所需时间</span></span></span><br><span class="line">	move(0,800)</span><br><span class="line">&#125;</span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">move</span>(<span class="params">site,time</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">	time = time || <span class="number">500</span>;<span class="comment">//移动时间,默认500毫秒</span></span></span><br><span class="line"><span class="javascript">	<span class="comment">// 获取上下滚动条位置兼容写法，start开始位置</span></span></span><br><span class="line"><span class="javascript">	<span class="keyword">var</span> start = <span class="built_in">document</span>.body.scrollTop || <span class="built_in">document</span>.documentElement.scrollTop;</span></span><br><span class="line"><span class="javascript">	<span class="keyword">var</span> dis = site - start;</span></span><br><span class="line"><span class="javascript">	<span class="keyword">var</span> T = <span class="built_in">Date</span>.now();<span class="comment">//获取当前时间</span></span></span><br><span class="line"><span class="javascript">	requestAnimationFrame(<span class="function"><span class="keyword">function</span> <span class="title">step</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">		<span class="keyword">var</span> p = <span class="built_in">Math</span>.min(<span class="number">1</span>,(<span class="built_in">Date</span>.now()-T)/time);<span class="comment">//根据时间计算进度比例</span></span></span><br><span class="line"><span class="javascript">		<span class="built_in">window</span>.scrollTo(<span class="number">0</span>,(<span class="number">2</span>-p)*p*dis+start);<span class="comment">//改变滚动条的位置</span></span></span><br><span class="line"><span class="javascript">		<span class="keyword">if</span> (p&lt;<span class="number">1</span>) &#123;<span class="comment">//判断还没执行完</span></span></span><br><span class="line"><span class="javascript">			requestAnimationFrame(step)<span class="comment">//执行下一帧</span></span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="获取计算后的样式"><a href="#获取计算后的样式" class="headerlink" title="获取计算后的样式"></a>获取计算后的样式</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取计算后的样式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStyle</span>(<span class="params">obj,attr</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (obj.currentStyle) &#123;</span><br><span class="line">		<span class="keyword">return</span> obj.currentStyle[attr];<span class="comment">//IE获取方法</span></span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> getComputedStyle(obj,<span class="literal">null</span>)[attr];<span class="comment">//非IE取方法</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="screen对象"><a href="#screen对象" class="headerlink" title="screen对象"></a>screen对象</h2><blockquote>
<p>window.screen 对象包含有关用户屏幕的信息</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> screenW = screen.width;</span><br><span class="line"><span class="keyword">var</span> screenH = screen.height;</span><br><span class="line"><span class="keyword">var</span> availW = screen.availWidth;</span><br><span class="line"><span class="keyword">var</span> availH = screen.availHeight;	</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">&quot;屏幕宽度&quot;</span>+screenW+<span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">&quot;屏幕高度&quot;</span>+screenH+<span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">&quot;可用的屏幕宽度&quot;</span>+availW+<span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">&quot;可用的屏幕高度&quot;</span>+availH+<span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="location对象"><a href="#location对象" class="headerlink" title="location对象"></a>location对象</h3><h5 id="对象属性"><a href="#对象属性" class="headerlink" title="对象属性"></a>对象属性</h5><table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">href</td>
<td align="center">返回完整的 URL</td>
</tr>
<tr>
<td align="center">hash</td>
<td align="center">返回一个URL的锚部分</td>
</tr>
<tr>
<td align="center">search</td>
<td align="center">返回一个URL的查询部分</td>
</tr>
<tr>
<td align="center">hostname</td>
<td align="center">返回URL的主机名</td>
</tr>
<tr>
<td align="center">pathname</td>
<td align="center">返回的URL路径名</td>
</tr>
<tr>
<td align="center">port</td>
<td align="center">返回端口号</td>
</tr>
<tr>
<td align="center">protocol</td>
<td align="center">返回一个URL协议</td>
</tr>
</tbody></table>
<h3 id="对象方法"><a href="#对象方法" class="headerlink" title="对象方法"></a>对象方法</h3><table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">reload()</td>
<td align="center">重新载入当前文档</td>
</tr>
<tr>
<td align="center">assign()</td>
<td align="center">载入一个新的文档</td>
</tr>
<tr>
<td align="center">replace()</td>
<td align="center">用新的文档替换当前文档</td>
</tr>
</tbody></table>
<h6 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> url = location.href;</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">&quot;url:&quot;</span>+url+<span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> hash = location.hash;</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">&quot;hash:&quot;</span>+hash+<span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> hostname = location.hostname;</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">&quot;hostname:&quot;</span>+hostname+<span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> pathname = location.pathname;</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">&quot;pathname:&quot;</span>+pathname+<span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> port = location.port;</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">&quot;port:&quot;</span>+port+<span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> protocol = location.protocol;</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">&quot;protocol:&quot;</span>+protocol+<span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> search = location.search;</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">&quot;search:&quot;</span>+search+<span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="history对象"><a href="#history对象" class="headerlink" title="history对象"></a>history对象</h2><h4 id="对象属性-1"><a href="#对象属性-1" class="headerlink" title="对象属性"></a>对象属性</h4><table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">length</td>
<td align="center">返回历史记录的数量</td>
</tr>
</tbody></table>
<h4 id="对象方法-1"><a href="#对象方法-1" class="headerlink" title="对象方法"></a>对象方法</h4><table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">back()</td>
<td align="center">返回上一页</td>
</tr>
<tr>
<td align="center">forward()</td>
<td align="center">进入下一页</td>
</tr>
<tr>
<td align="center">go()</td>
<td align="center">跳转到历史记录里指定的某一页</td>
</tr>
</tbody></table>
<h4 id="Navigator对象"><a href="#Navigator对象" class="headerlink" title="Navigator对象"></a>Navigator对象</h4><h3 id="对象属性-2"><a href="#对象属性-2" class="headerlink" title="对象属性"></a>对象属性</h3><table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">appCodeName</td>
<td align="center">返回浏览器的代码名</td>
</tr>
<tr>
<td align="center">appName</td>
<td align="center">返回浏览器的名称</td>
</tr>
<tr>
<td align="center">appVersion</td>
<td align="center">返回浏览器的平台和版本信息</td>
</tr>
<tr>
<td align="center">cookieEnabled</td>
<td align="center">返回指明浏览器中是否启用 cookie 的布尔值</td>
</tr>
<tr>
<td align="center">platform</td>
<td align="center">返回运行浏览器的操作系统平台</td>
</tr>
<tr>
<td align="center">userAgent</td>
<td align="center">返回由客户机发送服务器的user-agent 头部的值</td>
</tr>
</tbody></table>
<h3 id="浏览器检测"><a href="#浏览器检测" class="headerlink" title="浏览器检测"></a>浏览器检测</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取浏览器信息</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="built_in">window</span>.navigator.userAgent;</span><br><span class="line"><span class="keyword">if</span> (a.indexOf(<span class="string">&quot;OPR&quot;</span>)&gt;<span class="number">-1</span>) &#123;</span><br><span class="line">alert(<span class="string">&quot;欧朋浏览器&quot;</span>)</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(a.indexOf(<span class="string">&quot;Chrome&quot;</span>)&gt;<span class="number">-1</span>) &#123;</span><br><span class="line">alert(<span class="string">&quot;谷歌浏览器&quot;</span>)</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (a.indexOf(<span class="string">&quot;Firefox&quot;</span>)&gt;<span class="number">-1</span>) &#123;</span><br><span class="line">alert(<span class="string">&quot;火狐浏览器&quot;</span>)</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (a.indexOf(<span class="string">&quot;Safari&quot;</span>)&gt;<span class="number">-1</span>) &#123;</span><br><span class="line">alert(<span class="string">&quot;苹果浏览器&quot;</span>)</span><br><span class="line">&#125;<span class="comment">//......</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>js初级</category>
      </categories>
  </entry>
  <entry>
    <title>css3 边框、背景</title>
    <url>/2018/03/22/css3%20%E8%BE%B9%E6%A1%86%E3%80%81%E8%83%8C%E6%99%AF/</url>
    <content><![CDATA[<h1 id="css3-边框"><a href="#css3-边框" class="headerlink" title="css3 边框"></a>css3 边框</h1><p><img src="https://s2.ax1x.com/2019/07/17/ZLeilD.jpg" alt="我是图片"></p>
<h3 id="border-radius边框圆角"><a href="#border-radius边框圆角" class="headerlink" title="border-radius边框圆角"></a>border-radius边框圆角</h3><blockquote>
<p>border-radius:用于设置边框圆角</p>
</blockquote>
<h3 id="分别设置四个角，每个角2个值"><a href="#分别设置四个角，每个角2个值" class="headerlink" title="分别设置四个角，每个角2个值"></a>分别设置四个角，每个角2个值</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line"><span class="attribute">border-top-left-radius</span>:<span class="number">30px</span> <span class="number">40px</span>;</span><br><span class="line"><span class="attribute">border-top-right-radius</span>:<span class="number">50px</span>;</span><br><span class="line"><span class="attribute">border-bottom-right-radius</span>:<span class="number">20px</span>;</span><br><span class="line"><span class="attribute">border-bottom-left-radius</span>:<span class="number">10px</span>;</span><br><span class="line"><span class="comment">/*简写*/</span></span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">30px</span> <span class="number">50px</span> <span class="number">20px</span> <span class="number">10px</span>/<span class="number">40px</span> <span class="number">50px</span> <span class="number">20px</span> <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id=""><a href="#" class="headerlink" title=""></a><img src="https://s2.ax1x.com/2019/07/17/ZLekOH.jpg" alt="我是图片"></h2><h3 id="图案例子"><a href="#图案例子" class="headerlink" title="图案例子"></a>图案例子</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line"><span class="attribute">margin</span>:<span class="number">25px</span> auto <span class="number">0</span>;</span><br><span class="line"><span class="attribute">width</span>:<span class="number">50px</span>;</span><br><span class="line"><span class="attribute">height</span>:<span class="number">50px</span>;</span><br><span class="line"><span class="attribute">background</span>:<span class="number">#d5d2c1</span>;</span><br><span class="line"><span class="attribute">line-height</span>:<span class="number">50px</span>;</span><br><span class="line"><span class="attribute">text-align</span>:center;</span><br><span class="line"><span class="attribute">font-weight</span>:bold;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.A</span>&#123;<span class="attribute">border-radius</span>:<span class="number">10px</span>;&#125;</span><br><span class="line"><span class="selector-class">.B</span>&#123;<span class="attribute">border-radius</span>:<span class="number">25px</span>;&#125;</span><br><span class="line"><span class="selector-class">.C</span>&#123;<span class="attribute">border-radius</span>:<span class="number">25px</span> <span class="number">0</span>;&#125;</span><br><span class="line"><span class="selector-class">.D</span>&#123;<span class="attribute">border-radius</span>:<span class="number">25px</span> <span class="number">0</span> <span class="number">25px</span> <span class="number">25px</span>;&#125;</span><br><span class="line"><span class="selector-class">.E</span>&#123;<span class="attribute">border-radius</span>:<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">25px</span>;&#125;</span><br><span class="line"><span class="selector-class">.F</span>&#123;<span class="attribute">width</span>:<span class="number">100px</span>;<span class="attribute">border-radius</span>:<span class="number">50px</span>/<span class="number">25px</span>;&#125;</span><br><span class="line"><span class="selector-class">.G</span>&#123;</span><br><span class="line"><span class="attribute">width</span>:<span class="number">0</span>;</span><br><span class="line"><span class="attribute">height</span>:<span class="number">0</span>;</span><br><span class="line"><span class="attribute">background</span>:transparent;</span><br><span class="line"><span class="attribute">border</span>:<span class="number">25px</span> solid <span class="number">#d5d2c1</span>;</span><br><span class="line"><span class="attribute">border-radius</span>:<span class="number">25px</span>;</span><br><span class="line"><span class="attribute">border-right-color</span>:transparent;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.H</span>&#123;</span><br><span class="line"><span class="attribute">width</span>:<span class="number">0</span>;</span><br><span class="line"><span class="attribute">height</span>:<span class="number">0</span>;</span><br><span class="line"><span class="attribute">background</span>:transparent;</span><br><span class="line"><span class="attribute">border</span>:<span class="number">25px</span> solid transparent;</span><br><span class="line"><span class="attribute">border-radius</span>:<span class="number">25px</span>/<span class="number">10px</span>;</span><br><span class="line"><span class="attribute">border-top-color</span>:<span class="number">#d5d2c1</span>;</span><br><span class="line"><span class="attribute">border-bottom-color</span>:<span class="number">#d5d2c1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="-1"><a href="#-1" class="headerlink" title=""></a><img src="https://s2.ax1x.com/2019/07/17/ZLePSO.jpg" alt="我是图片"></h2><h3 id="border-image边框图片"><a href="#border-image边框图片" class="headerlink" title="border-image边框图片"></a>border-image边框图片</h3><blockquote>
<p>border-image:用于设置边框图片。</p>
</blockquote>
<h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">border-image-source</td>
<td align="center">图片的路径</td>
</tr>
<tr>
<td align="center">border-image-slice</td>
<td align="center">图片边框剪切的范围</td>
</tr>
<tr>
<td align="center">border-image-width</td>
<td align="center">图片边框的宽度</td>
</tr>
<tr>
<td align="center">border-image-outset</td>
<td align="center">边框图像区域超出边框的量</td>
</tr>
<tr>
<td align="center">border-image-repeat</td>
<td align="center">stretch-拉伸(默认)、repeat-平铺、round-铺满</td>
</tr>
<tr>
<td align="center">border-image</td>
<td align="center">简写：border-image: source slice repeat</td>
</tr>
</tbody></table>
<h2 id="素材"><a href="#素材" class="headerlink" title="素材"></a>素材</h2><p><img src="https://s2.ax1x.com/2019/07/17/ZLe9fK.jpg" alt="我是图片"></p>
<h3 id="素材1例子"><a href="#素材1例子" class="headerlink" title="素材1例子"></a>素材1例子</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line"><span class="attribute">border-image</span>:<span class="built_in">url</span>(<span class="number">7</span>_sucai1.png) <span class="number">100%</span> <span class="number">100%</span> <span class="number">100%</span> <span class="number">100%</span>;</span><br><span class="line"><span class="attribute">border-width</span>:<span class="number">20px</span>;</span><br><span class="line"><span class="attribute">border-style</span>: solid;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">50px</span>;</span><br><span class="line"><span class="attribute">line-height</span>: <span class="number">100px</span>;</span><br><span class="line"><span class="attribute">text-align</span>: center;</span><br><span class="line"><span class="attribute">border-image</span>:<span class="built_in">url</span>(<span class="number">7</span>_sucai1.png) <span class="number">33%</span> <span class="number">33%</span> <span class="number">33%</span> <span class="number">33%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://s2.ax1x.com/2019/07/17/ZLeF6e.jpg" alt="我是图片"></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line"><span class="attribute">border-image</span>:<span class="built_in">url</span>(<span class="number">7</span>_sucai1.png) <span class="number">33%</span> <span class="number">33%</span> <span class="number">33%</span> <span class="number">33%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.ax1x.com/2019/07/17/ZLeZTI.jpg" alt="我是图片"></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line"><span class="attribute">border-image</span>:<span class="built_in">url</span>(<span class="number">7</span>_sucai1.png) <span class="number">33%</span> repeat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><img src="https://s2.ax1x.com/2019/07/17/ZLeV0A.jpg" alt="我是图片"></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line"><span class="attribute">border-image</span>:<span class="built_in">url</span>(<span class="number">7</span>_sucai1.png) <span class="number">33%</span> round;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://s2.ax1x.com/2019/07/17/ZLeEmd.jpg" alt="我是图片"></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line"><span class="attribute">-webkit-border-image</span>:<span class="built_in">url</span>(<span class="number">7</span>_sucai1.png) <span class="number">33%</span> round;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://s2.ax1x.com/2019/07/17/ZLemkt.jpg" alt="我是图片"></p>
<p>素材2例子</p>
<p><img src="https://s2.ax1x.com/2019/07/17/ZLel6g.jpg" alt="我是图片"></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line"><span class="attribute">-webkit-border-image</span>:<span class="built_in">url</span>(<span class="number">7</span>_sucai2.png) <span class="number">0</span> <span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="css3-背景"><a href="#css3-背景" class="headerlink" title="css3 背景"></a>css3 背景</h3><table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">background-size</td>
<td align="center">规定背景图片的尺寸</td>
</tr>
<tr>
<td align="center">background-origin</td>
<td align="center">规定背景图片的定位区域</td>
</tr>
<tr>
<td align="center">background-clip</td>
<td align="center">规定背景的绘制区域</td>
</tr>
</tbody></table>
<h3 id="背景素材"><a href="#背景素材" class="headerlink" title="背景素材"></a>背景素材</h3><p><img src="https://s2.ax1x.com/2019/07/17/ZLentP.jpg" alt="我是图片"></p>
<h3 id="background-size属性"><a href="#background-size属性" class="headerlink" title="background-size属性"></a>background-size属性</h3><h3 id="属性值"><a href="#属性值" class="headerlink" title="属性值"></a>属性值</h3><table>
<thead>
<tr>
<th align="center">属性值</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">length</td>
<td align="center">指定长度值</td>
</tr>
<tr>
<td align="center">percentage</td>
<td align="center">指定百分比</td>
</tr>
<tr>
<td align="center">auto</td>
<td align="center">实际比例大小</td>
</tr>
<tr>
<td align="center">cover</td>
<td align="center">等比缩放到完全覆盖容器，背景图像有可以超出容器</td>
</tr>
<tr>
<td align="center">contain</td>
<td align="center">背景图像始终完整显示到容器内，可能会留空</td>
</tr>
</tbody></table>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line"><span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="number">7</span>_bg.jpg);</span><br><span class="line"><span class="attribute">background-size</span>: <span class="number">100%</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.ax1x.com/2019/07/17/ZLeMp8.jpg" alt="我是图片"></p>
<h3 id="background-origin属性"><a href="#background-origin属性" class="headerlink" title="background-origin属性"></a>background-origin属性</h3><h3 id="属性值-1"><a href="#属性值-1" class="headerlink" title="属性值"></a>属性值</h3><table>
<thead>
<tr>
<th align="center">属性值</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">border-box</td>
<td align="center">背景起点在边框上</td>
</tr>
<tr>
<td align="center">padding-box</td>
<td align="center">背景起点在内边距上(默认)</td>
</tr>
<tr>
<td align="center">content-box</td>
<td align="center">背景起点在内容上</td>
</tr>
</tbody></table>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line"><span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="number">7</span>_bg.jpg);</span><br><span class="line"><span class="attribute">background-size</span>: <span class="number">100%</span> auto;</span><br><span class="line"><span class="attribute">background-origin</span>: border-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.ax1x.com/2019/07/17/ZLeuff.jpg" alt="我是图片"></p>
<h3 id="background-clip属性"><a href="#background-clip属性" class="headerlink" title="background-clip属性"></a>background-clip属性</h3><p>###属性值</p>
<table>
<thead>
<tr>
<th align="center">属性值</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">border-box</td>
<td align="center">边框之外的背景剪切</td>
</tr>
<tr>
<td align="center">padding-box</td>
<td align="center">内边距之外的背景剪切</td>
</tr>
<tr>
<td align="center">content-box</td>
<td align="center">内容之外的背景剪切</td>
</tr>
</tbody></table>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;    </span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="number">7</span>_bg.jpg);    </span><br><span class="line">    <span class="attribute">background-size</span>: <span class="number">100%</span> auto;    </span><br><span class="line">    <span class="attribute">background-origin</span>: border-box;    </span><br><span class="line">    <span class="attribute">background-clip</span>: padding-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://s2.ax1x.com/2019/07/17/ZLeQ1S.jpg" alt="我是图片"></p>
]]></content>
      <categories>
        <category>CSS3</category>
      </categories>
  </entry>
  <entry>
    <title>css3特效，阴影、渐变、蒙版、倒影</title>
    <url>/2018/03/23/css3%E7%89%B9%E6%95%88%EF%BC%8C%E9%98%B4%E5%BD%B1%E3%80%81%E6%B8%90%E5%8F%98%E3%80%81%E8%92%99%E7%89%88%E3%80%81%E5%80%92%E5%BD%B1/</url>
    <content><![CDATA[<h1 id="css3特效，阴影、渐变、蒙版、倒影"><a href="#css3特效，阴影、渐变、蒙版、倒影" class="headerlink" title="css3特效，阴影、渐变、蒙版、倒影"></a>css3特效，阴影、渐变、蒙版、倒影</h1><p><img src="https://s2.ax1x.com/2019/07/17/ZLZKsJ.jpg" alt="我是图片"></p>
<h2 id="CSS3属性前缀"><a href="#CSS3属性前缀" class="headerlink" title="CSS3属性前缀"></a>CSS3属性前缀</h2><h2 id="CSS3的属性为什么要带前缀"><a href="#CSS3的属性为什么要带前缀" class="headerlink" title="CSS3的属性为什么要带前缀"></a>CSS3的属性为什么要带前缀</h2><blockquote>
<p>因为浏览器厂商很早一直在实施CSS3,在测试阶段,还没真正的标准所以需要加上前缀。</p>
</blockquote>
<h1 id="浏览器内核和前缀"><a href="#浏览器内核和前缀" class="headerlink" title="浏览器内核和前缀"></a>浏览器内核和前缀</h1><table>
<thead>
<tr>
<th align="center">内核</th>
<th align="center">浏览器</th>
<th align="center">前缀</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Trident</td>
<td align="center">IE</td>
<td align="center">-ms-</td>
</tr>
<tr>
<td align="center">Gecko</td>
<td align="center">Firefox</td>
<td align="center">-moz-</td>
</tr>
<tr>
<td align="center">WebKit</td>
<td align="center">Safari、Chrome</td>
<td align="center">-webkit-</td>
</tr>
<tr>
<td align="center">Presto</td>
<td align="center">Opera</td>
<td align="center">-o-</td>
</tr>
<tr>
<td align="center">Blink</td>
<td align="center">Chrome(28及往后版)、Opera(15及往后版本)、Yandex</td>
<td align="center">-webkit-</td>
</tr>
</tbody></table>
<h1 id="css3阴影"><a href="#css3阴影" class="headerlink" title="css3阴影"></a>css3阴影</h1><h2 id="text-shadow-文本阴影"><a href="#text-shadow-文本阴影" class="headerlink" title="text-shadow 文本阴影"></a>text-shadow 文本阴影</h2><blockquote>
<p>以下这些效果都是通过css3:text-shadow属性设置的。</p>
</blockquote>
<p><img src="https://s2.ax1x.com/2019/07/17/ZLZuM4.jpg" alt="我是图片"></p>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><h4 id="text-shadow-x-y-blur-color"><a href="#text-shadow-x-y-blur-color" class="headerlink" title="text-shadow: x y blur color;"></a>text-shadow: x y blur color;</h4><table>
<thead>
<tr>
<th align="center">属性值</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">x</td>
<td align="center">阴影的左右偏移</td>
</tr>
<tr>
<td align="center">y</td>
<td align="center">阴影的上下偏移</td>
</tr>
<tr>
<td align="center">blur</td>
<td align="center">阴影的模糊度</td>
</tr>
<tr>
<td align="center">color</td>
<td align="center">阴影的颜色</td>
</tr>
</tbody></table>
<h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;d1&#x27;</span>&gt;</span>CSS3 文本阴影<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;d2&#x27;</span>&gt;</span>CSS3 文本阴影<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;d3&#x27;</span>&gt;</span>CSS3 文本阴影<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;d4&#x27;</span>&gt;</span>CSS3 文本阴影<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;d5&#x27;</span>&gt;</span>CSS3 文本阴影<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;d6&#x27;</span>&gt;</span>CSS3 文本阴影<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;d7&#x27;</span>&gt;</span>CSS3 文本阴影<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;d8&#x27;</span>&gt;</span>CSS3 文本阴影<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">	<span class="attribute">margin</span>:<span class="number">0</span> auto;</span><br><span class="line">	<span class="attribute">padding</span>:<span class="number">40px</span> <span class="number">0</span>;</span><br><span class="line">	<span class="attribute">text-align</span>:center;</span><br><span class="line">	<span class="attribute">height</span>:<span class="number">50px</span>;</span><br><span class="line">	<span class="attribute">width</span>:<span class="number">380px</span>;</span><br><span class="line">	<span class="attribute">font-size</span>:<span class="number">44px</span>;</span><br><span class="line">	<span class="attribute">font-weight</span>:bold;</span><br><span class="line">	<span class="attribute">background</span>:<span class="number">#d5d2c1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.d1</span>&#123;</span><br><span class="line">	<span class="attribute">background</span>:<span class="number">#454545</span>;</span><br><span class="line">	<span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">	<span class="attribute">text-shadow</span>: -<span class="number">1px</span> -<span class="number">1px</span> <span class="number">#ccc</span>, <span class="number">1px</span> <span class="number">1px</span> <span class="number">#666</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.d2</span>&#123;</span><br><span class="line">	<span class="attribute">background</span>:<span class="number">#000</span>;<span class="attribute">color</span>:<span class="number">#fff</span>;</span><br><span class="line">	<span class="attribute">text-shadow</span>:<span class="number">0px</span> <span class="number">0px</span> <span class="number">5px</span> <span class="number">#f0f</span>,</span><br><span class="line">	<span class="number">0px</span> <span class="number">0px</span> <span class="number">10px</span> <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">0</span>,<span class="number">255</span>,<span class="number">0.8</span>),</span><br><span class="line">	<span class="number">0px</span> <span class="number">0px</span> <span class="number">20px</span> <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">0</span>,<span class="number">255</span>,<span class="number">0.8</span>),<span class="number">0px</span> <span class="number">0px</span> <span class="number">35px</span> <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">0</span>,<span class="number">255</span>,<span class="number">0.8</span>),</span><br><span class="line">	<span class="number">0px</span> <span class="number">0px</span> <span class="number">55px</span> <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">0</span>,<span class="number">255</span>,<span class="number">0.8</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.d3</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>:<span class="number">#ddd</span>;<span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">	<span class="attribute">text-shadow</span>:<span class="number">0</span> <span class="number">1px</span> <span class="number">0</span> <span class="number">#ccc</span>,</span><br><span class="line">	<span class="number">0</span> <span class="number">2px</span> <span class="number">0</span> <span class="number">#c9c9c9</span>,</span><br><span class="line">	<span class="number">0</span> <span class="number">3px</span> <span class="number">0</span> <span class="number">#bbb</span>,</span><br><span class="line">	<span class="number">0</span> <span class="number">4px</span> <span class="number">0</span> <span class="number">#b9b9b9</span>,</span><br><span class="line">	<span class="number">0</span> <span class="number">5px</span> <span class="number">0</span> <span class="number">#aaa</span>,</span><br><span class="line">	<span class="number">0</span> <span class="number">6px</span> <span class="number">1px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.1</span>),</span><br><span class="line">	<span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.1</span>),</span><br><span class="line">	<span class="number">0</span> <span class="number">1px</span> <span class="number">3px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.3</span>),</span><br><span class="line">	<span class="number">0</span> <span class="number">3px</span> <span class="number">5px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.2</span>),</span><br><span class="line">	<span class="number">0</span> <span class="number">5px</span> <span class="number">10px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.25</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.d4</span>&#123;</span><br><span class="line">	<span class="attribute">background</span>:<span class="number">#eee</span>;</span><br><span class="line">	<span class="attribute">color</span>: transparent;</span><br><span class="line">	<span class="attribute">text-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">8px</span> <span class="number">#f36</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.d5</span>&#123;</span><br><span class="line">	<span class="attribute">color</span>: <span class="number">#ccc</span>;</span><br><span class="line">	<span class="attribute">text-shadow</span>: -<span class="number">1px</span> -<span class="number">1px</span> <span class="number">#333</span>, <span class="number">1px</span> <span class="number">1px</span> <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.d6</span>&#123;</span><br><span class="line">	<span class="attribute">background</span>:<span class="number">#eee</span>;</span><br><span class="line">	<span class="attribute">color</span>:<span class="number">#707070</span>;</span><br><span class="line">	<span class="attribute">text-shadow</span>: <span class="number">0px</span> -<span class="number">1px</span> <span class="number">#00f</span>,</span><br><span class="line">	<span class="number">0px</span> <span class="number">1px</span> <span class="number">#00f</span>,</span><br><span class="line">	<span class="number">1px</span> <span class="number">0px</span> <span class="number">#00f</span>,</span><br><span class="line">	-<span class="number">1px</span> <span class="number">0px</span> <span class="number">#00f</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.d7</span>&#123;</span><br><span class="line">	<span class="attribute">-webkit-text-stroke</span>: <span class="number">1px</span> <span class="number">#000</span>;</span><br><span class="line">	<span class="attribute">-webkit-text-fill-color</span>: transparent;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.d8</span>&#123;</span><br><span class="line">	<span class="attribute">background</span>:<span class="number">#eee</span>;<span class="attribute">color</span>:<span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.8</span>);</span><br><span class="line">	<span class="attribute">text-shadow</span>: <span class="number">0</span> -<span class="number">3px</span> <span class="number">6px</span> <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.8</span>),</span><br><span class="line">	<span class="number">0</span> -<span class="number">6px</span> <span class="number">10px</span> <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">64</span>,<span class="number">0</span>,<span class="number">0.8</span>),</span><br><span class="line">	<span class="number">0</span> -<span class="number">10px</span> <span class="number">16px</span>  <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">127</span>,<span class="number">0</span>,<span class="number">0.8</span>),</span><br><span class="line">	<span class="number">0</span> -<span class="number">16px</span> <span class="number">24px</span>  <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">127</span>,<span class="number">0</span>,<span class="number">0.4</span>),</span><br><span class="line">	<span class="number">0</span> -<span class="number">22px</span> <span class="number">30px</span>  <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">127</span>,<span class="number">0</span>,<span class="number">0.1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="box-shadow-盒阴影"><a href="#box-shadow-盒阴影" class="headerlink" title="box-shadow 盒阴影"></a>box-shadow 盒阴影</h1><h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><h3 id="text-shadow-x-y-blur-color-1"><a href="#text-shadow-x-y-blur-color-1" class="headerlink" title="text-shadow: x y blur color"></a>text-shadow: x y blur color</h3><table>
<thead>
<tr>
<th align="center">属性值</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">x</td>
<td align="center">阴影的左右偏移</td>
</tr>
<tr>
<td align="center">y</td>
<td align="center">阴影的上下偏移</td>
</tr>
<tr>
<td align="center">blur</td>
<td align="center">阴影的模糊度</td>
</tr>
<tr>
<td align="center">spread</td>
<td align="center">阴影的尺寸</td>
</tr>
<tr>
<td align="center">color</td>
<td align="center">阴影的颜色</td>
</tr>
<tr>
<td align="center">inset</td>
<td align="center">设置为内部阴影</td>
</tr>
</tbody></table>
<h2 id="结构-1"><a href="#结构-1" class="headerlink" title="结构"></a>结构</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;d1&#x27;</span>&gt;</span>CSS3 盒阴影<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;d2&#x27;</span>&gt;</span>CSS3 盒阴影<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;d3&#x27;</span>&gt;</span>CSS3 盒阴影<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;d4&#x27;</span>&gt;</span>CSS3 盒阴影<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><p><img src="https://s2.ax1x.com/2019/07/17/ZLZmzF.jpg" alt="我是图片"></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">	<span class="attribute">margin</span>:<span class="number">0</span> auto;</span><br><span class="line">	<span class="attribute">padding</span>:<span class="number">40px</span> <span class="number">0</span> <span class="number">50px</span>;</span><br><span class="line">	<span class="attribute">text-align</span>:center;</span><br><span class="line">	<span class="attribute">height</span>:<span class="number">50px</span>;</span><br><span class="line">	<span class="attribute">width</span>:<span class="number">300px</span>;</span><br><span class="line">	<span class="attribute">margin</span>: <span class="number">20px</span>;</span><br><span class="line">	<span class="attribute">font-size</span>:<span class="number">45px</span>;</span><br><span class="line">	<span class="attribute">font-weight</span>:bold;</span><br><span class="line">	<span class="attribute">background</span>:<span class="number">#d5d2c1</span>;</span><br><span class="line">	<span class="attribute">background</span>:<span class="number">#ddd</span>;<span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">	<span class="attribute">text-shadow</span>:<span class="number">0</span> <span class="number">1px</span> <span class="number">0</span> <span class="number">#ccc</span>,</span><br><span class="line">	<span class="number">0</span> <span class="number">2px</span> <span class="number">0</span> <span class="number">#c9c9c9</span>,</span><br><span class="line">	<span class="number">0</span> <span class="number">3px</span> <span class="number">0</span> <span class="number">#bbb</span>,</span><br><span class="line">	<span class="number">0</span> <span class="number">4px</span> <span class="number">0</span> <span class="number">#b9b9b9</span>,</span><br><span class="line">	<span class="number">0</span> <span class="number">5px</span> <span class="number">0</span> <span class="number">#aaa</span>,</span><br><span class="line">	<span class="number">0</span> <span class="number">6px</span> <span class="number">1px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.1</span>),</span><br><span class="line">	<span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.1</span>),</span><br><span class="line">	<span class="number">0</span> <span class="number">1px</span> <span class="number">3px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.3</span>),</span><br><span class="line">	<span class="number">0</span> <span class="number">3px</span> <span class="number">5px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.2</span>),</span><br><span class="line">	<span class="number">0</span> <span class="number">5px</span> <span class="number">10px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.25</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.d1</span>&#123;</span><br><span class="line">	<span class="attribute">box-shadow</span>: <span class="number">2px</span> <span class="number">2px</span> <span class="number">5px</span> <span class="number">0px</span> black;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.d2</span>&#123;</span><br><span class="line">	<span class="attribute">box-shadow</span>: -<span class="number">2px</span> -<span class="number">2px</span> <span class="number">5px</span> <span class="number">0px</span> black;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.d3</span>&#123;</span><br><span class="line">	<span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">0px</span> <span class="number">5px</span> <span class="number">5px</span> black;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.d4</span>&#123;</span><br><span class="line">	<span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">0px</span> <span class="number">5px</span> <span class="number">5px</span> black inset;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="CSS3渐变"><a href="#CSS3渐变" class="headerlink" title="CSS3渐变"></a>CSS3渐变</h1><h3 id="线性渐变-linear-gradient"><a href="#线性渐变-linear-gradient" class="headerlink" title="线性渐变: linear-gradient"></a>线性渐变: linear-gradient</h3><h1 id="结构-2"><a href="#结构-2" class="headerlink" title="结构"></a>结构</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;d1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;d2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;d3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;d4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.d1</span>&#123;</span><br><span class="line">	<span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(red,blue);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.d2</span>&#123;</span><br><span class="line">	<span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="number">90deg</span>,red,blue);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.d3</span>&#123;</span><br><span class="line">	<span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(to left,red,blue);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.d4</span>&#123;</span><br><span class="line">	<span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(red <span class="number">0%</span>,yellow <span class="number">80%</span>,blue <span class="number">100%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="效果-1"><a href="#效果-1" class="headerlink" title="效果"></a>效果</h3><p><img src="https://s2.ax1x.com/2019/07/17/ZLZML9.jpg" alt="我是图片"></p>
<h3 id="径向渐变-radial-gradient"><a href="#径向渐变-radial-gradient" class="headerlink" title="径向渐变: radial-gradient"></a>径向渐变: radial-gradient</h3><h1 id="结构-3"><a href="#结构-3" class="headerlink" title="结构"></a>结构</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;d1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;d2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;d3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;d4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="样式-1"><a href="#样式-1" class="headerlink" title="样式"></a>样式</h1><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">200px</span>;	</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.d1</span>&#123;</span><br><span class="line">	<span class="attribute">background</span>: <span class="built_in">-webkit-radial-gradient</span>(red,blue);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.d2</span>&#123;</span><br><span class="line">	<span class="attribute">background</span>: <span class="built_in">-webkit-radial-gradient</span>(red,yellow <span class="number">80%</span>,blue);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.d3</span>&#123;</span><br><span class="line">	<span class="attribute">background</span>: <span class="built_in">-webkit-radial-gradient</span>(<span class="number">0px</span> <span class="number">0px</span>,red,yellow,blue);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.d4</span>&#123;</span><br><span class="line">	<span class="attribute">background</span>: <span class="built_in">-webkit-radial-gradient</span>(<span class="number">50%</span> <span class="number">50%</span>,<span class="number">50px</span> <span class="number">50px</span>,red,blue,yellow);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="效果-2"><a href="#效果-2" class="headerlink" title="效果"></a>效果</h1><p><img src="https://s2.ax1x.com/2019/07/17/ZLZeRU.jpg" alt="我是图片"></p>
<h1 id="css3蒙版"><a href="#css3蒙版" class="headerlink" title="css3蒙版"></a>css3蒙版</h1><h1 id="蒙版素材"><a href="#蒙版素材" class="headerlink" title="蒙版素材"></a>蒙版素材</h1><p><img src="https://s2.ax1x.com/2019/07/17/ZLZ1d1.png" alt="我是图片"></p>
<h1 id="结构-4"><a href="#结构-4" class="headerlink" title="结构"></a>结构</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;d1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;d2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;d3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;d4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="样式-2"><a href="#样式-2" class="headerlink" title="样式"></a>样式</h1><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">	<span class="attribute">border</span>:<span class="number">5px</span> solid black;</span><br><span class="line">	<span class="attribute">float</span>: left;</span><br><span class="line">	<span class="attribute">margin</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">	<span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">	<span class="attribute">background</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.d1</span>&#123;</span><br><span class="line">	<span class="attribute">-webkit-mask-image</span>: <span class="built_in">url</span>(<span class="number">8</span>_star.png);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.d2</span>&#123;</span><br><span class="line">	<span class="attribute">-webkit-mask-image</span>: <span class="built_in">url</span>(<span class="number">8</span>_star.png);</span><br><span class="line">	<span class="attribute">-webkit-mask-repeat</span>:no-repeat;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.d3</span>&#123;</span><br><span class="line">	<span class="attribute">-webkit-mask-image</span>: <span class="built_in">url</span>(<span class="number">8</span>_star.png);</span><br><span class="line">	<span class="attribute">-webkit-mask-repeat</span>:no-repeat;</span><br><span class="line">	<span class="attribute">-webkit-mask-position</span>:<span class="number">50px</span> <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.d4</span>&#123;</span><br><span class="line">	<span class="attribute">-webkit-mask</span>:<span class="built_in">-webkit-linear-gradient</span>(left,rgba(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>),<span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="效果-3"><a href="#效果-3" class="headerlink" title="效果"></a>效果</h1><p><img src="https://s2.ax1x.com/2019/07/17/ZLZ3Ix.jpg" alt="我是图片"></p>
<h1 id="css3倒影"><a href="#css3倒影" class="headerlink" title="css3倒影"></a>css3倒影</h1><h1 id="结构-5"><a href="#结构-5" class="headerlink" title="结构"></a>结构</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;d1&quot;</span>&gt;</span>css3倒影<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;d2&quot;</span>&gt;</span>css3倒影<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;d3&quot;</span>&gt;</span>css3倒影<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;d4&quot;</span>&gt;</span>css3倒影<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="样式-3"><a href="#样式-3" class="headerlink" title="样式"></a>样式</h1><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">	<span class="attribute">padding</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">	<span class="attribute">border</span>: <span class="number">5px</span> solid black;</span><br><span class="line">	<span class="attribute">text-align</span>: center;</span><br><span class="line">	<span class="attribute">font-size</span>: <span class="number">25px</span>;</span><br><span class="line">	<span class="attribute">line-height</span>: <span class="number">100px</span>;</span><br><span class="line">	<span class="attribute">float</span>: left;</span><br><span class="line">	<span class="attribute">margin</span>: <span class="number">20px</span>;		</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.d1</span>&#123;</span><br><span class="line">	<span class="attribute">-webkit-box-reflect</span>:above <span class="number">0px</span>;				</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.d2</span>&#123;</span><br><span class="line">	<span class="attribute">-webkit-box-reflect</span>:right <span class="number">0px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.d3</span>&#123;</span><br><span class="line">	<span class="attribute">-webkit-box-reflect</span>:below  <span class="number">10px</span> <span class="built_in">linear-gradient</span>(transparent,black);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.d4</span>&#123;</span><br><span class="line">	<span class="attribute">-webkit-box-reflect</span>:right <span class="number">10px</span> <span class="built_in">linear-gradient</span>(transparent,black);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="效果-4"><a href="#效果-4" class="headerlink" title="效果"></a>效果</h1><p><img src="https://s2.ax1x.com/2019/07/17/ZLZlZR.jpg" alt="我是图片"></p>
]]></content>
      <categories>
        <category>CSS3</category>
      </categories>
  </entry>
  <entry>
    <title>CSS入门</title>
    <url>/2018/03/18/css%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h1 id="CSS入门"><a href="#CSS入门" class="headerlink" title="CSS入门"></a>CSS入门</h1><hr>
<h3 id="什么是-CSS"><a href="#什么是-CSS" class="headerlink" title="什么是 CSS"></a>什么是 CSS</h3><blockquote>
<p>CSS（cascading Style Sheet 的缩写），可译为层叠样式表，用来进行网页风格修饰，控制页面的外观。</p>
</blockquote>
<hr>
<h3 id="WEB-标准构成"><a href="#WEB-标准构成" class="headerlink" title="WEB 标准构成"></a>WEB 标准构成</h3><ul>
<li>HTML:结构，搭建页面的内容结构。</li>
<li>CSS:样式，用来进行网页风格修饰，控制页面的外观。</li>
<li>JS:行为，用来给HTML网页增加动态功能。</li>
</ul>
<hr>
<h2 id="CSS-特点"><a href="#CSS-特点" class="headerlink" title="CSS 特点"></a>CSS 特点</h2><ul>
<li>页面内容与表现形式分离</li>
<li>可很好的控制页面的布局</li>
<li>提高网页加载速度</li>
<li>降低服务器的成本</li>
<li>呈现一致的效果</li>
</ul>
<h2 id="CSS-的引入方式"><a href="#CSS-的引入方式" class="headerlink" title="CSS 的引入方式"></a>CSS 的引入方式</h2><h3 id="标签内引入"><a href="#标签内引入" class="headerlink" title="标签内引入"></a>标签内引入</h3><blockquote>
<p>是把样式编写在标签内的style属性中</p>
</blockquote>
<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul>
<li>优先级最高</li>
<li>冗余代码多，代码量大</li>
<li>不易改版与维护</li>
</ul>
<h3 id="头部style标签引入"><a href="#头部style标签引入" class="headerlink" title="头部style标签引入"></a>头部style标签引入</h3><blockquote>
<p>是在head标签内加入style标签，在style标签内编写样式。</p>
</blockquote>
<h3 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h3><ul>
<li>不需要额外请求，速度快</li>
<li>不易改版与维护</li>
</ul>
<h3 id="link标签外部引入"><a href="#link标签外部引入" class="headerlink" title="link标签外部引入"></a>link标签外部引入</h3><blockquote>
<p>在head部分加入link标签，通过外部css文件地址引入</p>
</blockquote>
<h3 id="特点-2"><a href="#特点-2" class="headerlink" title="特点"></a>特点</h3><ul>
<li>一个CSS文件可控制多个页面</li>
<li>易改版、便于维护</li>
<li>减少代码量、代码简洁规范易于分工协作</li>
<li>有效利用缓存机制</li>
<li>需要额外请求</li>
</ul>
<h3 id="import样式外部引入"><a href="#import样式外部引入" class="headerlink" title="import样式外部引入"></a>import样式外部引入</h3><blockquote>
<p>在样式中通过@import “地址” 引入外部CSS文件</p>
</blockquote>
<h3 id="特点-3"><a href="#特点-3" class="headerlink" title="特点"></a>特点</h3><ul>
<li>不常用</li>
<li>会在网页加载完后再加载CSS文件</li>
<li>会出现闪烁问题</li>
</ul>
<hr>
<h2 id="CSS-选择器"><a href="#CSS-选择器" class="headerlink" title="CSS 选择器"></a>CSS 选择器</h2><h3 id="标签名选择器"><a href="#标签名选择器" class="headerlink" title="标签名选择器"></a>标签名选择器</h3><blockquote>
<p>直接通过标签名来选择</p>
</blockquote>
<h3 id="特点-4"><a href="#特点-4" class="headerlink" title="特点"></a>特点</h3><ul>
<li>优先级权重:1<h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span>	</span><br><span class="line"><span class="css"><span class="comment">/*根据类标签名选择元素*/</span></span></span><br><span class="line">div&#123;</span><br><span class="line"><span class="css"><span class="comment">/*设置字体颜色为红色*/</span></span></span><br><span class="line">color: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--div字体变为红色--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>这是DIV<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h2></li>
</ul>
<blockquote>
<p>在标签内加载class属性，根据属性值前加“ . ”来选择</p>
</blockquote>
<h3 id="特点-5"><a href="#特点-5" class="headerlink" title="特点"></a>特点</h3><ul>
<li>优先级权重:10</li>
<li>可以有相同的类名</li>
<li>类选择器用的较多</li>
</ul>
<h3 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span>	</span><br><span class="line"><span class="css"><span class="comment">/*根据类名选择元素*/</span></span></span><br><span class="line"><span class="css"><span class="selector-class">.test</span>&#123;</span></span><br><span class="line"><span class="css"><span class="comment">/*设置字体颜色为红色*/</span></span></span><br><span class="line">color: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--字体变为红色--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;test&quot;</span>&gt;</span>这是DIV1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--字体变为红色--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;test&quot;</span>&gt;</span>这是DIV2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="ID选择器"><a href="#ID选择器" class="headerlink" title="ID选择器"></a>ID选择器</h2><blockquote>
<p>在标签内加载id属性，根据属性值前加“ # ”来选择</p>
</blockquote>
<h3 id="特点-6"><a href="#特点-6" class="headerlink" title="特点"></a>特点</h3><ul>
<li>优先级权重:100</li>
<li>选择器里的优先级最高</li>
<li>页面中不要有同名的 ID</li>
</ul>
<h3 id="例子-2"><a href="#例子-2" class="headerlink" title="例子"></a>例子</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span>	</span><br><span class="line"><span class="css"><span class="comment">/*根据ID名选择元素*/</span></span></span><br><span class="line"><span class="css"><span class="selector-id">#test</span>&#123;</span></span><br><span class="line"><span class="css"><span class="comment">/*设置字体颜色为红色*/</span></span></span><br><span class="line">color: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--div字体变为红色--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span>这是DIV<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a>后代选择器</h2><blockquote>
<p>后代选择器可以选择作为某元素后代的元素，通过空格获取后代元素</p>
</blockquote>
<h3 id="特点-7"><a href="#特点-7" class="headerlink" title="特点"></a>特点</h3><ul>
<li>优先级权重:叠加，但不管加多少，不能越权</li>
<li>可分区域选择</li>
</ul>
<h3 id="例子-3"><a href="#例子-3" class="headerlink" title="例子"></a>例子</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span>	</span><br><span class="line"><span class="css"><span class="comment">/*获取ID名为test的后代span标签*/</span></span></span><br><span class="line"><span class="css"><span class="selector-id">#test</span> <span class="selector-tag">span</span>&#123;</span></span><br><span class="line"><span class="css"><span class="comment">/*设置字体颜色为红色*/</span></span></span><br><span class="line">color: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--span字体变为红色--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>这是span1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--span字体颜色未变--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>这是span2<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="群组选择器"><a href="#群组选择器" class="headerlink" title="群组选择器"></a>群组选择器</h2><blockquote>
<p>多个选择器设置的样式一样，可以通过逗号组合起</p>
</blockquote>
<h3 id="特点-8"><a href="#特点-8" class="headerlink" title="特点"></a>特点</h3><ul>
<li>减少代码量<h3 id="例子-4"><a href="#例子-4" class="headerlink" title="例子"></a>例子</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span>	</span><br><span class="line"><span class="css"><span class="comment">/*获取ID名为test的后代span标签*/</span></span></span><br><span class="line"><span class="css"><span class="selector-id">#test1</span> <span class="selector-tag">span</span>&#123;</span></span><br><span class="line"><span class="css"><span class="comment">/*设置字体颜色为红色*/</span></span></span><br><span class="line">color: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-id">#test2</span> <span class="selector-tag">span</span>&#123;</span></span><br><span class="line"><span class="css"><span class="comment">/*设置字体颜色为红色*/</span></span></span><br><span class="line">color: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="comment">/*以上代码可以改为*/</span></span></span><br><span class="line"><span class="css"><span class="comment">/*多个选择器设置的样式一样，可以通过逗号组合起来*/</span></span></span><br><span class="line"><span class="css"><span class="selector-id">#test1</span> <span class="selector-tag">span</span>,<span class="selector-id">#test2</span> <span class="selector-tag">span</span>&#123;</span></span><br><span class="line"><span class="css"><span class="comment">/*设置字体颜色为红色*/</span></span></span><br><span class="line">color: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test1&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--span字体变为红色--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>这是span1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test2&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--span字体变为红色--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>这是span2<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="通配选择器"><a href="#通配选择器" class="headerlink" title="通配选择器"></a>通配选择器</h2><blockquote>
<p>通过“ * ”符合，选择所以标签</p>
</blockquote>
<h3 id="特点-9"><a href="#特点-9" class="headerlink" title="特点"></a>特点</h3><ul>
<li>优先级最低</li>
<li>可用于重置样式</li>
</ul>
<h3 id="例子-5"><a href="#例子-5" class="headerlink" title="例子"></a>例子</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span>	</span><br><span class="line"><span class="css"><span class="comment">/*获取全部标签*/</span></span></span><br><span class="line">*&#123;</span><br><span class="line"><span class="css"><span class="comment">/*设置字体颜色为红色*/</span></span></span><br><span class="line">color: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--全部标签字体变为红色--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>这是DIV<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>这是span1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是P<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<hr>
<h2 id="CSS-样式基本设置"><a href="#CSS-样式基本设置" class="headerlink" title="CSS 样式基本设置"></a>CSS 样式基本设置</h2><h3 id="文字设置"><a href="#文字设置" class="headerlink" title="文字设置"></a>文字设置</h3><h4 id="字体设置-font-family"><a href="#字体设置-font-family" class="headerlink" title="字体设置- font-family"></a>字体设置- font-family</h4><blockquote>
<p>可以同时为页面设置多个字体，当浏览器找不到第一个字体时会寻找第二个字体，依次进行，直到找到可用的字体</p>
</blockquote>
<ul>
<li>中文页面建议以宋体为首选，其他字体次之。</li>
<li>英文页面建议以Arail/Tahoma等字体。</li>
<li>中英结合网站建议最好用英文字体。</li>
<li>特殊字体一律用图片<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;style type=&quot;text/css&quot;&gt;	</span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line"><span class="attribute">font-family</span>: <span class="string">&quot;宋体&quot;</span>,Arail;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="字体大小-font-size"><a href="#字体大小-font-size" class="headerlink" title="字体大小 - font-size"></a>字体大小 - font-size</h4><blockquote>
<p>设置页面中字体的大小，有px、百分比、em、rem等单位。</p>
</blockquote>
<blockquote>
<p>在网页中一般最小的字号就是12px；另外12px也是网页设计中通用默认的最小字体大小。浏览器的默认字体大小都是16px。</p>
</blockquote>
<ul>
<li>px:像素大小</li>
<li>百分比:根据父级字体大小设置 如：父级-12px*自身-200% = 24px</li>
<li>em:根据自身字体大小设置 如：自身-12px*自身-2em = 24px</li>
<li>rem:根据HTML字体大小设置 如：html-100px*自身-0.5rem = 50px<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;style type=&quot;text/css&quot;&gt;	</span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">1.5em</span>;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">150%</span>;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">2rem</span>;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="字体风格-font-style"><a href="#字体风格-font-style" class="headerlink" title="字体风格 - font-style"></a>字体风格 - font-style</h4><blockquote>
<p>定义字体的风格，属性设置使用斜体、倾斜或正常字体。</p>
</blockquote>
<ul>
<li>normal 常规字体</li>
<li>italic 斜体<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;style type=&quot;text/css&quot;&gt;	</span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line"><span class="attribute">font-style</span>: italic;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="字体粗细属-font-weight"><a href="#字体粗细属-font-weight" class="headerlink" title="字体粗细属 - font-weight"></a>字体粗细属 - font-weight</h4><ul>
<li><p>normal : 表示正常</p>
</li>
<li><p>bold : 表示加粗</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;style type=&quot;text/css&quot;&gt;	</span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line"><span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>字体设置简写</p>
</li>
</ul>
<blockquote>
<p>font: font-style | font-weight | font-size | font-family</p>
</blockquote>
<blockquote>
<p>需要按顺序设置</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;style type=&quot;text/css&quot;&gt;	</span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line"><span class="attribute">font</span>: italic bold <span class="number">12px</span> <span class="string">&quot;宋体&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<h4 id="文本设置"><a href="#文本设置" class="headerlink" title="文本设置"></a>文本设置</h4><h4 id="颜色-color"><a href="#颜色-color" class="headerlink" title="颜色 - color"></a>颜色 - color</h4><ul>
<li>设置颜色关键字，如 color : red;</li>
<li>设置十六进制颜色值，如color : #ffffff；可简写为 #fff</li>
<li>设置RGB颜色值，如color:rgb(255,0,0);</li>
</ul>
<h4 id="文本修饰属性设置-text-decoration"><a href="#文本修饰属性设置-text-decoration" class="headerlink" title="文本修饰属性设置 - text-decoration"></a>文本修饰属性设置 - text-decoration</h4><ul>
<li>none: 无文本修饰（浏览器默认初始值）</li>
<li>underline: 表示有下划线</li>
<li>overline : 表示有上划线</li>
<li>line-through : 表示有贯穿线/删除线</li>
</ul>
<h4 id="行高-line-height"><a href="#行高-line-height" class="headerlink" title="行高 - line-height"></a>行高 - line-height</h4><ul>
<li>normal :浏览器默认为正常行距</li>
<li>length : 用于设置行高的大小值</li>
</ul>
<h4 id="文本缩进-text-indent"><a href="#文本缩进-text-indent" class="headerlink" title="文本缩进 - text-indent"></a>文本缩进 - text-indent</h4><ul>
<li>常用单位是 px 或者是 em</li>
<li>2em 缩进两个字</li>
</ul>
<p>####文本水平对齐 - text-align</p>
<ul>
<li>left: 左对齐</li>
<li>center: 左右居中</li>
<li>right: 右对齐</li>
<li>justify: 两端对齐文本</li>
</ul>
<h4 id="文本垂直对齐-vertical-align"><a href="#文本垂直对齐-vertical-align" class="headerlink" title="文本垂直对齐 - vertical-align"></a>文本垂直对齐 - vertical-align</h4><ul>
<li>top: 顶部</li>
<li>bottom: 底部</li>
<li>middle : 上下居中</li>
</ul>
<h4 id="字词间隔-word-spacing"><a href="#字词间隔-word-spacing" class="headerlink" title="字词间隔 - word-spacing"></a>字词间隔 - word-spacing</h4><blockquote>
<p>改变字（单词）之间的标准间隔</p>
</blockquote>
<ul>
<li>normal: 默认值</li>
<li>length: 间隔大小</li>
</ul>
<h4 id="字符间隔-letter-spacing"><a href="#字符间隔-letter-spacing" class="headerlink" title="字符间隔 - letter-spacing"></a>字符间隔 - letter-spacing</h4><blockquote>
<p>改变字符之间的标准间隔</p>
</blockquote>
<ul>
<li>normal: 默认值</li>
<li>length: 间隔大小</li>
</ul>
<hr>
<h2 id="背景设置"><a href="#背景设置" class="headerlink" title="背景设置"></a>背景设置</h2><h3 id="背景颜色-backgroung-color"><a href="#背景颜色-backgroung-color" class="headerlink" title="背景颜色 - backgroung-color"></a>背景颜色 - backgroung-color</h3><ul>
<li>background-color: red | #ffffff</li>
<li>用法跟color相似，只是代表属性不同，属性值是一样</li>
</ul>
<h3 id="背景图片-background-image"><a href="#背景图片-background-image" class="headerlink" title="背景图片 - background-image"></a>背景图片 - background-image</h3><ul>
<li>background-image: none | url ( url )</li>
<li>none: 是无背景图</li>
<li>url: 里面跟的图片的路径</li>
</ul>
<h3 id="背景重复-background-repeat"><a href="#背景重复-background-repeat" class="headerlink" title="背景重复 - background-repeat"></a>背景重复 - background-repeat</h3><ul>
<li>background-repeat: repeat | no-repeat | repeat-x | repeat-y</li>
<li>repeat: 重复默认选项</li>
<li>no-repeat: 不重复</li>
<li>repeat-x: 横向重复</li>
<li>repeat-y : 纵向重复</li>
</ul>
<h4 id="背景图片-background-position"><a href="#背景图片-background-position" class="headerlink" title="背景图片 - background-position"></a>背景图片 - background-position</h4><ul>
<li>background-position: x轴坐标值 y轴坐标值</li>
<li>可以是具体的方位。left | right | center | top | bottom</li>
</ul>
<h4 id="背景图滚动-background-attachment"><a href="#背景图滚动-background-attachment" class="headerlink" title="背景图滚动 - background-attachment"></a>背景图滚动 - background-attachment</h4><ul>
<li>background-attachment: scroll | fixed；</li>
<li>scroll: 随着页面的滚动轴背景图片将移动，默认值</li>
<li>fixed: 随着页面的滚动轴背景图片不会移动</li>
</ul>
<h4 id="简写方式"><a href="#简写方式" class="headerlink" title="简写方式"></a>简写方式</h4><blockquote>
<p>无需按特定顺序</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;style type=&quot;text/css&quot;&gt;	</span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line"><span class="attribute">background</span>: red <span class="built_in">url</span>(xxx.jpg) <span class="number">0px</span> <span class="number">0px</span> no-repeat;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
  </entry>
  <entry>
    <title>css基础布局</title>
    <url>/2018/03/19/css%E5%9F%BA%E7%A1%80%E5%B8%83%E5%B1%80/</url>
    <content><![CDATA[<h1 id="css基础布局"><a href="#css基础布局" class="headerlink" title="css基础布局"></a>css基础布局</h1><hr>
<h2 id="HTML页面中布局的方法："><a href="#HTML页面中布局的方法：" class="headerlink" title="HTML页面中布局的方法："></a>HTML页面中布局的方法：</h2><ul>
<li>float（浮动布局）</li>
<li>position（定位布局）</li>
<li>弹性布局 (CSS3)。<blockquote>
<p>制作页面最常用的是float布局。</p>
</blockquote>
</li>
</ul>
<h2 id="元素浮动的特性："><a href="#元素浮动的特性：" class="headerlink" title="元素浮动的特性："></a>元素浮动的特性：</h2><ul>
<li>所有的元素都可以浮动</li>
<li>浮动元素脱离文档流，不占据空间，浮动元素碰到包含它的边框或者浮动元素的边框则停留。</li>
<li>float能解决标签之间有间隙的问题</li>
<li>float 对行内属性标签和块属性标签的影响</li>
</ul>
<h2 id="float-对行内属性标签的影响"><a href="#float-对行内属性标签的影响" class="headerlink" title="float 对行内属性标签的影响"></a>float 对行内属性标签的影响</h2><ul>
<li>float之后能设置width和height属性，并支持margin和padding属性</li>
<li>float 对块属性标签的影响</li>
<li>在没有设置宽高的情况下浮动后，内容撑开宽度高度</li>
<li>可以使块属性元素并排排列</li>
</ul>
<h2 id="float属性"><a href="#float属性" class="headerlink" title="float属性"></a>float属性</h2><ul>
<li>float: none;//默认值。对象元素不浮动；</li>
<li>float: left;//左浮动；</li>
<li>float: right;//右浮动；</li>
<li>浮动元素可能引起的问题</li>
<li>父元素的高度无法被撑开，影响与父级元素同级的元素</li>
<li>与浮动元素同级的非浮动元素会跟随其后</li>
<li>若非第一个元素浮动，则该元素之前的元素也需要浮动，否则会影响页面的显示结构<blockquote>
<p>要避免上述问题,我要就需要给元素清除浮动。</p>
</blockquote>
</li>
</ul>
<h2 id="清除浮动的方法"><a href="#清除浮动的方法" class="headerlink" title="清除浮动的方法"></a>清除浮动的方法</h2><h3 id="1-使用空标签清除浮动"><a href="#1-使用空标签清除浮动" class="headerlink" title="1.使用空标签清除浮动"></a>1.使用空标签清除浮动</h3><ul>
<li><p>.clear:after{content:’’;display:block;clear:both;}</p>
</li>
<li><p>在所有浮动标签后面添加一个伪标签,并定义CSS属性 clear:both</p>
</li>
<li><p>原理：利用clear:both的特性，让父级div能自动获取到高度</p>
</li>
<li><p>浮动清除成功，元素占用空间，父级高度被撑出，先前的布局没有受到影响。</p>
<h3 id="2-在父级使用overflow属性"><a href="#2-在父级使用overflow属性" class="headerlink" title="2.在父级使用overflow属性;"></a>2.在父级使用overflow属性;</h3></li>
<li><p>使用overflow:hidden时，浏览器会自动检查浮动区域的高度</p>
</li>
<li><p>使用简单，代码少，浏览器支持好</p>
</li>
<li><p>缺点：不能和position配合使用，因为超出的尺寸的会被隐藏</p>
</li>
</ul>
<h3 id="overflow属性"><a href="#overflow属性" class="headerlink" title="overflow属性"></a>overflow属性</h3><blockquote>
<p>当内容超出元素框时的设置。</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">属性值</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">visible</td>
<td align="center">默认值，超出的内容不会隐藏。</td>
</tr>
<tr>
<td align="center">hidden</td>
<td align="center">超出的内容会隐藏。</td>
</tr>
<tr>
<td align="center">scroll</td>
<td align="center">显示滚动条。</td>
</tr>
<tr>
<td align="center">auto</td>
<td align="center">内容超出时才显示滚动条</td>
</tr>
</tbody></table>
<h3 id="position定位"><a href="#position定位" class="headerlink" title="position定位"></a>position定位</h3><blockquote>
<p>可以把元素固定到页面的任意位置中。</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">属性值</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">static</td>
<td align="center">默认值，位置按文档流排列。</td>
</tr>
<tr>
<td align="center">relative</td>
<td align="center">相对定位，还没有脱离文档流，相对于文档流位置移动</td>
</tr>
<tr>
<td align="center">absolute</td>
<td align="center">绝对定位，脱离文档流，根据定位父级左上角移动。</td>
</tr>
<tr>
<td align="center">fixed</td>
<td align="center">相对窗口定位。</td>
</tr>
</tbody></table>
<blockquote>
<p>元素定位后可通过 “left”、”top”、”right” 以及 “bottom” 属性来定位。</p>
</blockquote>
<h3 id="z-index"><a href="#z-index" class="headerlink" title="z-index"></a>z-index</h3><blockquote>
<p>设置元素的层级顺序，值可以为负</p>
</blockquote>
<h3 id="opacity不透明度"><a href="#opacity不透明度" class="headerlink" title="opacity不透明度"></a>opacity不透明度</h3><blockquote>
<p>opacity设置元素的透明度，设置1是不透明，0是透明。</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">opacity:0.5;//设置为半透明</span><br><span class="line">//因为opacity不兼容低版本浏览器，需要用到IE的半透明滤镜</span><br><span class="line">filter:alpha(opacity=50);//设置为半透明</span><br></pre></td></tr></table></figure>

<h3 id="a标签的四个伪类"><a href="#a标签的四个伪类" class="headerlink" title="a标签的四个伪类"></a>a标签的四个伪类</h3><table>
<thead>
<tr>
<th align="center">属性值</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">link</td>
<td align="center">在a标签属性href里面有地址内容的时候执行的样式。</td>
</tr>
<tr>
<td align="center">visited</td>
<td align="center">链接地址已被访问过。</td>
</tr>
<tr>
<td align="center">hover</td>
<td align="center">当鼠标移动内容上回触发的样式。</td>
</tr>
<tr>
<td align="center">active</td>
<td align="center">当鼠标按住的时候。</td>
</tr>
</tbody></table>
<blockquote>
<p>使用A标签伪类是需要注意顺序问题</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">a:link&#123;color:red;&#125;//1</span><br><span class="line">a:visited&#123;color:red;&#125;//2</span><br><span class="line">a:hover&#123;color:red;&#125;//3</span><br><span class="line">a:active&#123;color:red;&#125;//4</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CSS</category>
      </categories>
  </entry>
  <entry>
    <title>Hello  Word</title>
    <url>/2015/03/15/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>html5新增的元素、属性</title>
    <url>/2018/03/20/html5%E6%96%B0%E5%A2%9E%E7%9A%84%E5%85%83%E7%B4%A0%E3%80%81%E5%B1%9E%E6%80%A7/</url>
    <content><![CDATA[<h1 id="html5新增的元素、属性"><a href="#html5新增的元素、属性" class="headerlink" title="html5新增的元素、属性"></a>html5新增的元素、属性</h1><hr>
<h2 id="html5语义化"><a href="#html5语义化" class="headerlink" title="html5语义化"></a>html5语义化</h2><blockquote>
<p>html5新增的元素语义化更好，结构更清晰，更利于维护，功能更强大。</p>
</blockquote>
<p><img src="https://s2.ax1x.com/2019/07/17/ZLn6W6.jpg" alt="我是图片"></p>
<hr>
<h3 id="主体元素"><a href="#主体元素" class="headerlink" title="主体元素"></a>主体元素</h3><blockquote>
<p>HTML5中新增了几种结构元素，分别是section、article、aside、nav、time等。</p>
</blockquote>
<h4 id="section-元素"><a href="#section-元素" class="headerlink" title="section 元素"></a>section 元素</h4><blockquote>
<p>section：主要用于网页内容分块，如定义章节、页眉、页脚等。</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h2</span>&gt;</span>标题一<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>内容一<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h2</span>&gt;</span>标题二<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>内容二<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<h4 id="article-元素"><a href="#article-元素" class="headerlink" title="article 元素"></a>article 元素</h4><blockquote>
<p>外部内容可以是来自一个外部的新闻提供者的一篇新的文章，或者来自 blog 的文本，或者是来自论坛的文本。亦或是来自其他外部源内容。</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">articl</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h2</span>&gt;</span>标题一<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>内容一<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">articl</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">articl</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h2</span>&gt;</span>标题二<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>内容二<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">articl</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="aside-元素"><a href="#aside-元素" class="headerlink" title="aside 元素"></a>aside 元素</h4><blockquote>
<p>aside标签一般用于导航条、侧边栏、广告等。</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aside</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>内容一<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>内容二<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="nav-元素"><a href="#nav-元素" class="headerlink" title="nav 元素"></a>nav 元素</h3><blockquote>
<p>nav标签主要用于导航结构</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">nav</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/home&quot;</span>&gt;</span>主页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/article&quot;</span>&gt;</span>文章<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>关于我们<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="time-元素"><a href="#time-元素" class="headerlink" title="time 元素"></a>time 元素</h4><blockquote>
<p>time标签主要用于定义时间或日期。</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">time</span>&gt;</span>2017年5月23日<span class="tag">&lt;/<span class="name">time</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="非主体结构"><a href="#非主体结构" class="headerlink" title="非主体结构"></a>非主体结构</h4><blockquote>
<p>非主体结构：分别有header、hgroup、footer、figure、address、。</p>
</blockquote>
<h4 id="header-元素"><a href="#header-元素" class="headerlink" title="header 元素"></a>header 元素</h4><blockquote>
<p>header一般用作页面头部区域块，也可以为每个区域块都加一个header元素。</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span>页面头部<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">header</span>&gt;</span>该区域头部<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="hgroup-元素"><a href="#hgroup-元素" class="headerlink" title="hgroup 元素"></a>hgroup 元素</h4><blockquote>
<p>hgroup用于对网页或区域块的标题进行分组。</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">hgroup</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h1</span>&gt;</span>主标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h2</span>&gt;</span>子标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">hgroup</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>####footer 元素</p>
<blockquote>
<p>footer用于网页的底部或区域块的底部。</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span>头部<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">article</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span>底部<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="figure-元素"><a href="#figure-元素" class="headerlink" title="figure 元素"></a>figure 元素</h4><blockquote>
<p>figure用于图像、图表、代码等，移除后也不会对网页内容产生影响。</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">figure</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">figure</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="address-元素"><a href="#address-元素" class="headerlink" title="address 元素"></a>address 元素</h4><blockquote>
<p>address用于显示联系信息。</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">address</span>&gt;</span></span><br><span class="line">	作者：xxx</span><br><span class="line">	地址：xxxx</span><br><span class="line"><span class="tag">&lt;/<span class="name">address</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="其他新增的元素"><a href="#其他新增的元素" class="headerlink" title="其他新增的元素"></a>其他新增的元素</h4><table>
<thead>
<tr>
<th align="center">标签</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">mark</td>
<td align="center">标签定义带有记号的文本</td>
</tr>
<tr>
<td align="center">source</td>
<td align="center">定义媒体资源</td>
</tr>
<tr>
<td align="center">source</td>
<td align="center">定义媒体资源</td>
</tr>
<tr>
<td align="center">ruby</td>
<td align="center">定义注释</td>
</tr>
<tr>
<td align="center">audio</td>
<td align="center">定义声音内容，元素允许多个 source 元素</td>
</tr>
<tr>
<td align="center">video</td>
<td align="center">定义视频</td>
</tr>
<tr>
<td align="center">canvas</td>
<td align="center">定义图形容器，使用js来绘制图形</td>
</tr>
<tr>
<td align="center">svg</td>
<td align="center">可缩放矢量图形,使用XML格式定义图像</td>
</tr>
</tbody></table>
<h3 id="input的新特性"><a href="#input的新特性" class="headerlink" title="input的新特性"></a>input的新特性</h3><h4 id="input的新type属性"><a href="#input的新type属性" class="headerlink" title="input的新type属性"></a>input的新type属性</h4><table>
<thead>
<tr>
<th align="center">类型</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">color</td>
<td align="center">定义拾色器</td>
</tr>
<tr>
<td align="center">date</td>
<td align="center">定义日期字段</td>
</tr>
<tr>
<td align="center">datetime</td>
<td align="center">定义日期字段</td>
</tr>
<tr>
<td align="center">datetime-local</td>
<td align="center">定义日期字段</td>
</tr>
<tr>
<td align="center">month</td>
<td align="center">定义日期字段的月</td>
</tr>
<tr>
<td align="center">week</td>
<td align="center">定义日期字段的周</td>
</tr>
<tr>
<td align="center">time</td>
<td align="center">定义日期字段的时</td>
</tr>
<tr>
<td align="center">email</td>
<td align="center">定义邮箱</td>
</tr>
<tr>
<td align="center">number</td>
<td align="center">定义带有 spinner 控件的数字字段</td>
</tr>
<tr>
<td align="center">range</td>
<td align="center">定义带有 slider 控件的数字字段</td>
</tr>
<tr>
<td align="center">search</td>
<td align="center">定义用于搜索的文本字段</td>
</tr>
<tr>
<td align="center">tel</td>
<td align="center">定义用于电话号码的文本字段</td>
</tr>
<tr>
<td align="center">url</td>
<td align="center">定义用于地址的文本字段</td>
</tr>
</tbody></table>
<hr>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>定义拾色器<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;color&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>定义图片按钮<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;image&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>定义日期字段<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;date&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>定义日期字段<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;datetime&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>定义日期字段<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;datetime-local&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>定义日期字段的月<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;month&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>定义日期字段的周<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;week&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>定义日期字段的时<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;time&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>定义邮箱<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>定义带有 spinner 控件的数字字段<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>定义带有 slider 控件的数字字段<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;range&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>定义用于搜索的文本字段<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;search&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>定义用于电话号码的文本字段<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;tel&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>定义用于地址的文本字段<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;url&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h4 id="input的新属性"><a href="#input的新属性" class="headerlink" title="input的新属性"></a>input的新属性</h4><table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">autofocus</td>
<td align="center">页面加载时时获得焦点</td>
</tr>
<tr>
<td align="center">list</td>
<td align="center">指定一个datalist，作为下拉提示单</td>
</tr>
<tr>
<td align="center">min/max</td>
<td align="center">输入的最大/最小</td>
</tr>
<tr>
<td align="center">step</td>
<td align="center">每次递增step的值</td>
</tr>
<tr>
<td align="center">multiple</td>
<td align="center">可接受多个值的文件上传字段</td>
</tr>
<tr>
<td align="center">pattern</td>
<td align="center">于验证输入字段的模式</td>
</tr>
<tr>
<td align="center">required</td>
<td align="center">用于判断内容是否为空</td>
</tr>
<tr>
<td align="center">placeholder</td>
<td align="center">描述输入字段的提示信息</td>
</tr>
</tbody></table>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 页面加载时时获得焦点 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">autofocus</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定一个datalist，作为下拉提示单 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">list</span>=<span class="string">&quot;select&quot;</span> <span class="attr">required</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span>	</span><br><span class="line">	<span class="tag">&lt;<span class="name">datalist</span> <span class="attr">id</span>=<span class="string">&quot;select&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>选项一<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>选项二<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span>选项三<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">datalist</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">	min/max | 输入的最大/最小</span></span><br><span class="line"><span class="comment">	step | 每次递增step的值</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">min</span>=<span class="string">0</span> <span class="attr">max</span>=<span class="string">10</span> <span class="attr">step</span>=<span class="string">2</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 可接受多个值的文件上传字段 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">multiple</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">	pattern于验证输入字段的模式</span></span><br><span class="line"><span class="comment">	required用于判断内容是否为空</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">pattern</span>=<span class="string">&quot;[a-z]&#123;3&#125;&quot;</span> <span class="attr">required</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 描述输入字段的提示信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入姓名&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>html5</category>
      </categories>
  </entry>
  <entry>
    <title>jQuery UI、其他插件、封装自定义插件</title>
    <url>/2018/07/04/jQuery%20UI%E3%80%81%E5%85%B6%E4%BB%96%E6%8F%92%E4%BB%B6%E3%80%81%E5%B0%81%E8%A3%85%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<h2 id="jQueryUI"><a href="#jQueryUI" class="headerlink" title="jQueryUI"></a>jQueryUI</h2><h4 id="什么是：jQuery官方出的，基于jQuery实现的比jQuery更简化的UI组件和函数库。"><a href="#什么是：jQuery官方出的，基于jQuery实现的比jQuery更简化的UI组件和函数库。" class="headerlink" title="什么是：jQuery官方出的，基于jQuery实现的比jQuery更简化的UI组件和函数库。"></a><strong>什么是</strong>：jQuery官方出的，基于jQuery实现的比jQuery更简化的UI组件和函数库。</h4><h4 id="何时：如果觉得jQuery依然不够简化时"><a href="#何时：如果觉得jQuery依然不够简化时" class="headerlink" title="何时：如果觉得jQuery依然不够简化时"></a><strong>何时</strong>：如果觉得jQuery依然不够简化时</h4><h4 id="UI-User-Interface-用户界面，包括-内容HTML-样式CSS-行为JS"><a href="#UI-User-Interface-用户界面，包括-内容HTML-样式CSS-行为JS" class="headerlink" title="UI: User Interface 用户界面，包括: 内容HTML, 样式CSS, 行为JS"></a><strong>UI</strong>: User Interface 用户界面，包括: 内容HTML, 样式CSS, 行为JS</h4><h4 id="UI库-使用HTML-CSS-JS组成的实现一个专门功能的UI程序和效果的包，比如下拉菜单、弹出对话框、手风琴"><a href="#UI库-使用HTML-CSS-JS组成的实现一个专门功能的UI程序和效果的包，比如下拉菜单、弹出对话框、手风琴" class="headerlink" title="UI库: 使用HTML/CSS/JS组成的实现一个专门功能的UI程序和效果的包，比如下拉菜单、弹出对话框、手风琴"></a><strong>UI库</strong>: 使用HTML/CSS/JS组成的实现一个专门功能的UI程序和效果的包，比如下拉菜单、弹出对话框、手风琴</h4><h4 id="jQueryUI是基于jQuery封装的，进一步简化的UI组件库"><a href="#jQueryUI是基于jQuery封装的，进一步简化的UI组件库" class="headerlink" title="jQueryUI是基于jQuery封装的，进一步简化的UI组件库"></a><strong>jQueryUI是基于jQuery封装的，进一步简化的UI组件库</strong></h4><h4 id="为什么-避免重复开发，实现HTML-CSS-JS的代码重用"><a href="#为什么-避免重复开发，实现HTML-CSS-JS的代码重用" class="headerlink" title="为什么: 避免重复开发，实现HTML,CSS,JS的代码重用"></a><strong>为什么</strong>: 避免重复开发，实现HTML,CSS,JS的代码重用</h4><h4 id="如何"><a href="#如何" class="headerlink" title="如何:"></a><strong>如何</strong>:</h4><h4 id="下载jQueryUI"><a href="#下载jQueryUI" class="headerlink" title="下载jQueryUI"></a>下载jQueryUI</h4><h4 id="在网页中先引入jQuery-js，再引入jQueryUI-js"><a href="#在网页中先引入jQuery-js，再引入jQueryUI-js" class="headerlink" title="在网页中先引入jQuery.js，再引入jQueryUI.js"></a>在网页中先引入jQuery.js，再引入jQueryUI.js</h4><h3 id="三大部分"><a href="#三大部分" class="headerlink" title="三大部分"></a><strong>三大部分</strong></h3><h4 id="第一部分：效果：对jQuery中原有的动画API进行增强"><a href="#第一部分：效果：对jQuery中原有的动画API进行增强" class="headerlink" title="第一部分：效果：对jQuery中原有的动画API进行增强:"></a><strong>第一部分</strong>：<strong>效果</strong>：对jQuery中原有的动画API进行增强:</h4><h4 id="1-为-add-remove-toggleClass添加动画-speed"><a href="#1-为-add-remove-toggleClass添加动画-speed" class="headerlink" title="1. 为.add/remove/toggleClass添加动画(speed)"></a><strong>1</strong>. 为.add/remove/toggleClass添加动画(speed)</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">.add/remove/toggleClass(<span class="string">&quot;类名&quot;</span>,speed)</span><br></pre></td></tr></table></figure>
<h4 id="2-为-show-hide-toggle添加了更多的特效"><a href="#2-为-show-hide-toggle添加了更多的特效" class="headerlink" title="2. 为.show/hide/toggle添加了更多的特效"></a><strong>2</strong>. 为.show/hide/toggle添加了更多的特效</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">.show/hide/toggle(<span class="string">&quot;特效名&quot;</span>,speed)</span><br></pre></td></tr></table></figure>
<h4 id="3-让animate支持颜色动画"><a href="#3-让animate支持颜色动画" class="headerlink" title="3. 让animate支持颜色动画"></a><strong>3</strong>. 让animate支持颜色动画</h4><p><img src="http://imagehosting.biz/images/2018/04/10/1879689894574171377.jpg" alt="我是图片"><br><img src="http://imagehosting.biz/images/2018/04/10/5717527534644814465.jpg" alt="我是图片"></p>
<h4 id="第二部分-交互组件-为页面现有元素添加特殊交互行为"><a href="#第二部分-交互组件-为页面现有元素添加特殊交互行为" class="headerlink" title="第二部分: 交互组件:为页面现有元素添加特殊交互行为"></a><strong>第二部分</strong>: <strong>交互组件:为页面现有元素添加特殊交互行为</strong></h4><h4 id="侵入性-组件根据自身的需要-动态向原有元素上添加所需的class或自定义扩展属性。"><a href="#侵入性-组件根据自身的需要-动态向原有元素上添加所需的class或自定义扩展属性。" class="headerlink" title="侵入性: 组件根据自身的需要, 动态向原有元素上添加所需的class或自定义扩展属性。"></a><strong>侵入性</strong>: 组件根据自身的需要, 动态向原有元素上添加所需的class或自定义扩展属性。</h4><h4 id="问题-如果发现侵入，但样式依然没变"><a href="#问题-如果发现侵入，但样式依然没变" class="headerlink" title="问题: 如果发现侵入，但样式依然没变"></a><strong>问题</strong>: 如果发现侵入，但样式依然没变</h4><h4 id="解决"><a href="#解决" class="headerlink" title="解决:"></a><strong>解决</strong>:</h4><h4 id="1-可能没有引入jqueryui的css"><a href="#1-可能没有引入jqueryui的css" class="headerlink" title="1. 可能没有引入jqueryui的css"></a>1. 可能没有引入jqueryui的css</h4><h4 id="2-可能侵入的样式需要自行实现"><a href="#2-可能侵入的样式需要自行实现" class="headerlink" title="2.可能侵入的样式需要自行实现"></a>2.可能侵入的样式需要自行实现</h4><h4 id="1-draggable-让一个元素可拖拽"><a href="#1-draggable-让一个元素可拖拽" class="headerlink" title="1.  .draggable()  让一个元素可拖拽"></a><strong>1</strong>.  .draggable()  让一个元素可拖拽</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HTML:div.box&gt;hn.ui-dialog-titlebar+p</span><br><span class="line">CSS: 不用</span><br><span class="line">JS: $(<span class="string">&quot;.box&quot;</span>).draggable();</span><br></pre></td></tr></table></figure>
<h4 id="2-selectable-让一个列表中的li可选择"><a href="#2-selectable-让一个列表中的li可选择" class="headerlink" title="2.  .selectable()  让一个列表中的li可选择"></a><strong>2</strong>.  .selectable()  让一个列表中的li可选择</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HTML: ul&gt;li*n</span><br><span class="line">CSS: .ui-selected&#123;...&#125;定义选中的li样式</span><br><span class="line">js: $(<span class="string">&quot;ul&quot;</span>).selectable();</span><br></pre></td></tr></table></figure>
<h4 id="3-sortable-让一个列表中的li可重新排列位置"><a href="#3-sortable-让一个列表中的li可重新排列位置" class="headerlink" title="3.  .sortable() 让一个列表中的li可重新排列位置"></a><strong>3</strong>.  .sortable() 让一个列表中的li可重新排列位置</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HTML:ul&gt;li*n</span><br><span class="line">CSS: 不需要</span><br><span class="line">js: $(<span class="string">&quot;ul&quot;</span>).sortable();</span><br></pre></td></tr></table></figure>
<h4 id="第三部分：部件：拥有完成样式和行为的一个独立功能"><a href="#第三部分：部件：拥有完成样式和行为的一个独立功能" class="headerlink" title="第三部分：部件：拥有完成样式和行为的一个独立功能"></a><strong>第三部分：部件：拥有完成样式和行为的一个独立功能</strong></h4><h6 id="强调-用部件，都要先引入jquery-ui-css"><a href="#强调-用部件，都要先引入jquery-ui-css" class="headerlink" title="强调: 用部件，都要先引入jquery-ui.css"></a><strong>强调</strong>: 用部件，都要先引入jquery-ui.css</h6><h6 id="关于色调和主题-官网-gt-Themes-gt-Gallery-gt-选择颜色主体-gt-download"><a href="#关于色调和主题-官网-gt-Themes-gt-Gallery-gt-选择颜色主体-gt-download" class="headerlink" title="关于色调和主题: 官网-&gt;Themes-&gt;Gallery-&gt;选择颜色主体-&gt;download"></a><strong>关于色调和主题</strong>: 官网-&gt;Themes-&gt;Gallery-&gt;选择颜色主体-&gt;download</h6><h4 id="1、-accordion手风琴；"><a href="#1、-accordion手风琴；" class="headerlink" title="1、.accordion手风琴；"></a><strong>1、.accordion手风琴</strong>；</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">html:父元素&gt;(标题hn+内容div/p)*n</span><br><span class="line">CSS: 不用</span><br><span class="line">js: $(<span class="string">&quot;父元素&quot;</span>).accordion();</span><br></pre></td></tr></table></figure>
<h4 id="2、-autocomplete-自动完成"><a href="#2、-autocomplete-自动完成" class="headerlink" title="2、 .autocomplete 自动完成"></a><strong>2、 .autocomplete 自动完成</strong></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">html: input文本框</span><br><span class="line">css:不用</span><br><span class="line">js: <span class="number">1.</span> 定义备选词数组</span><br><span class="line">    <span class="number">2.</span> 对input文本框调用.autocomplete()</span><br><span class="line">    $(...).autocomplete(&#123;source: 数组&#125;)</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> dishList=[<span class="string">&quot;鱼香肉丝&quot;</span>,<span class="string">&quot;京酱肉丝&quot;</span>,<span class="string">&quot;番茄炒鸡蛋&quot;</span>,<span class="string">&quot;香椿鸡蛋&quot;</span>,<span class="string">&quot;松鼠桂鱼&quot;</span>];</span><br><span class="line">$(<span class="string">&quot;input&quot;</span>).autocomplete(&#123;<span class="attr">source</span>:dishList&#125;); </span><br></pre></td></tr></table></figure>
<h4 id="3、-button-让各种按钮变成统一的按钮样式"><a href="#3、-button-让各种按钮变成统一的按钮样式" class="headerlink" title="3、.button 让各种按钮变成统一的按钮样式"></a><strong>3</strong>、.button 让各种按钮变成统一的按钮样式</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">html: a , input type=<span class="string">&quot;button&quot;</span> , button</span><br><span class="line">js: $(...).button();</span><br></pre></td></tr></table></figure>
<h4 id="4-datepicker日历部件"><a href="#4-datepicker日历部件" class="headerlink" title="4. datepicker日历部件:"></a><strong>4</strong>. datepicker日历部件:</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">html: input文本框</span><br><span class="line">css:</span><br><span class="line">js: $(...).datepicker(&#123;</span><br><span class="line">                     dateFormat:<span class="string">&quot;yy年mm月dd日&quot;</span></span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<h2 id="H5-也有日期组件-input-type-”date”-但是无法修改样式"><a href="#H5-也有日期组件-input-type-”date”-但是无法修改样式" class="headerlink" title="H5: 也有日期组件: input type=”date” 但是无法修改样式"></a><strong>H5</strong>: 也有日期组件: input type=”date” 但是无法修改样式</h2><h4 id="5、dialog-对话框"><a href="#5、dialog-对话框" class="headerlink" title="5、dialog: 对话框:"></a><strong>5</strong>、dialog: 对话框:</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">html: 对话框容器[title=标题]&gt;内容</span><br><span class="line">其中title属性会自动成为对话框标题</span><br><span class="line">js: $(...).dialog(); <span class="comment">//让找到的元素变成对话框的样子</span></span><br></pre></td></tr></table></figure>
<h4 id="默认隐藏-…-dialog-autoOpen-false"><a href="#默认隐藏-…-dialog-autoOpen-false" class="headerlink" title="默认隐藏: $(…).dialog({autoOpen:false})"></a><strong>默认隐藏</strong>: $(…).dialog({autoOpen:false})</h4><h4 id="打开-…-dialog-“open”"><a href="#打开-…-dialog-“open”" class="headerlink" title="打开: $(…).dialog(“open”)"></a><strong>打开</strong>: $(…).dialog(“open”)</h4><h4 id="关闭s-…-dialog-“close”"><a href="#关闭s-…-dialog-“close”" class="headerlink" title="关闭s: $(…).dialog(“close”)"></a><strong>关闭</strong>s: $(…).dialog(“close”)</h4><h2 id="模态对话框-一旦打开对话框，则禁止操作网页其他元素"><a href="#模态对话框-一旦打开对话框，则禁止操作网页其他元素" class="headerlink" title="模态对话框: 一旦打开对话框，则禁止操作网页其他元素"></a><strong>模态对话框</strong>: 一旦打开对话框，则禁止操作网页其他元素</h2><h4 id="…-dialog-autoOpen-false-modal-true"><a href="#…-dialog-autoOpen-false-modal-true" class="headerlink" title="$(…).dialog({autoOpen:false,modal: true })"></a><strong>$(…).dialog({autoOpen:false,modal: true })</strong></h4><p><img src="http://imagehosting.biz/images/2018/04/10/6597786648240020139.jpg" alt="我是图片"></p>
<h4 id="6、Menu菜单"><a href="#6、Menu菜单" class="headerlink" title="6、Menu菜单:"></a><strong>6</strong>、Menu菜单:</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">HTML: ul&gt;li&gt;ul&gt;li....</span><br><span class="line">CSS: .ui-menu&#123;<span class="attr">width</span>: xxxpx&#125;</span><br><span class="line">js: $(<span class="string">&quot;ul&quot;</span>).menu();</span><br><span class="line">如果某个li不可用，就添加<span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;ui-state-disabled&quot;</span></span><br></pre></td></tr></table></figure>
<h4 id="7、-进度条"><a href="#7、-进度条" class="headerlink" title="7、 进度条:"></a><strong>7</strong>、 进度条:</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">   html: <span class="xml"><span class="tag">&lt;<span class="name">divid=&quot;my-pb&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;my-label&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">   css: 为进度条div和标签div设置定位</span><br><span class="line">   js: 初始化进度条:</span><br><span class="line">     $progressbar.progressbar(&#123;</span><br><span class="line">       value:<span class="literal">false</span>,              <span class="comment">//进度值，也可以取0,</span></span><br><span class="line">      change:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">//当进度条的value被改变时</span></span><br><span class="line">                              $(<span class="built_in">this</span>).progressbar(<span class="string">&quot;value&quot;</span>)<span class="comment">//获取当前进度值</span></span><br><span class="line">                              <span class="comment">//修改label的内容为进度条当前value</span></span><br><span class="line">                              <span class="comment">//获取当前进度条的value:</span></span><br><span class="line">       &#125;,</span><br><span class="line">      complete:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">//当进度条进度为100%时</span></span><br><span class="line">        <span class="comment">//改label</span></span><br><span class="line">       &#125;</span><br><span class="line">     &#125;)</span><br><span class="line">修改进度条进度:</span><br><span class="line">            $progressbar.progressbar(<span class="string">&quot;value&quot;</span>,值)</span><br></pre></td></tr></table></figure>
<h4 id="8、sider"><a href="#8、sider" class="headerlink" title="8、sider"></a><strong>8</strong>、sider</h4><h4 id="9、spinner递增递减"><a href="#9、spinner递增递减" class="headerlink" title="9、spinner递增递减"></a><strong>9</strong>、spinner递增递减</h4><h4 id="10、Tabs-标签页-boot中有"><a href="#10、Tabs-标签页-boot中有" class="headerlink" title="10、Tabs 标签页 boot中有"></a><strong>10</strong>、Tabs 标签页 boot中有</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">html：divid=<span class="string">&quot;my-tabs&quot;</span></span><br><span class="line">    ul</span><br><span class="line">     li&gt;a href=<span class="string">&quot;#divId&quot;</span></span><br><span class="line">    divid=<span class="string">&quot;divId&quot;</span> 内容</span><br><span class="line">CSS:不用</span><br><span class="line">JS: $(“容器div”).tabs();</span><br></pre></td></tr></table></figure>
<p><img src="http://imagehosting.biz/images/2018/04/10/6597653607333202273.jpg" alt="我是图片"></p>
<h4 id="11、tooltip工具提示-html中的title-boot中有"><a href="#11、tooltip工具提示-html中的title-boot中有" class="headerlink" title="11、tooltip工具提示: html中的title  boot中有"></a><strong>11</strong>、tooltip工具提示: html中的title  boot中有</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">HTML ：为元素添加title属性&lt;ANY title&gt;</span><br><span class="line">CSS:</span><br><span class="line">JS: $(<span class="built_in">document</span>).tooltip()</span><br></pre></td></tr></table></figure>
<h2 id="二、第三方插件"><a href="#二、第三方插件" class="headerlink" title="二、第三方插件"></a><strong>二、第三方插件</strong></h2><h4 id="使用前也必须去官网下载，并用link和script将css和js文件加载到页面"><a href="#使用前也必须去官网下载，并用link和script将css和js文件加载到页面" class="headerlink" title="使用前也必须去官网下载，并用link和script将css和js文件加载到页面"></a>使用前也必须去官网下载，并用link和script将css和js文件加载到页面</h4><h4 id="1-日历-laydate-不依赖于jQuery"><a href="#1-日历-laydate-不依赖于jQuery" class="headerlink" title="1. 日历: laydate  不依赖于jQuery"></a><strong>1</strong>. 日历: laydate  不依赖于jQuery</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> HTML: <span class="xml"><span class="tag">&lt;<span class="name">inputid=&quot;#id&quot;</span></span></span></span><br><span class="line"><span class="xml"> CSS:</span></span><br><span class="line"><span class="xml">JS: laydate(&#123;elem:&quot;#id&quot;, format:&quot;YYYY年MM月DD日&quot;&#125;)</span></span><br></pre></td></tr></table></figure>
<h4 id="2-表单验证-jquery-validate-基于jQuery"><a href="#2-表单验证-jquery-validate-基于jQuery" class="headerlink" title="2. 表单验证: jquery.validate  基于jQuery"></a><strong>2</strong>. 表单验证: jquery.validate  基于jQuery</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">HTML: 普通表单</span><br><span class="line">CSS: 自定义验证未通过时的样式</span><br><span class="line">input.error&#123; 定义出错的输入框的样式&#125;</span><br><span class="line">label.error&#123; 定义错误提示的label元素的样式&#125;</span><br><span class="line"></span><br><span class="line">JS:</span><br><span class="line">   $(...).validate(&#123;</span><br><span class="line">      rules:&#123;<span class="comment">//保存对每个输入框的验证规则</span></span><br><span class="line">              <span class="comment">//如果一个输入框只有一个验证规则时</span></span><br><span class="line">         name1: <span class="string">&quot;规则名&quot;</span>,<span class="comment">//必填</span></span><br><span class="line">              <span class="comment">//如果一个输入框被多个规则约束</span></span><br><span class="line">         name2:&#123;</span><br><span class="line">            <span class="string">&quot;规则名&quot;</span>:值,</span><br><span class="line">                 ... : ...,</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    messages:&#123;<span class="comment">//保存每个验证规则对象的错误提示</span></span><br><span class="line">            name1: <span class="string">&quot;错误提示&quot;</span>,</span><br><span class="line">              <span class="comment">//如果一个输入框被多个规则约束</span></span><br><span class="line">            name2:&#123;</span><br><span class="line">                <span class="string">&quot;规则名&quot;</span>:<span class="string">&quot;错误提示&quot;</span>,</span><br><span class="line">                     ... : ...,</span><br><span class="line">            &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></figure>
<h4 id="规则-看jquery-validate-js的326行"><a href="#规则-看jquery-validate-js的326行" class="headerlink" title="规则: 看jquery.validate.js的326行"></a><strong>规则</strong>: 看jquery.validate.js的326行</h4><h4 id="required-true-必填"><a href="#required-true-必填" class="headerlink" title="required: true 必填"></a><strong>required</strong>: true 必填</h4><h4 id="min-maxlength-值-最小-最大长度"><a href="#min-maxlength-值-最小-最大长度" class="headerlink" title="min/maxlength:值 最小/最大长度"></a><strong>min/maxlength</strong>:值 最小/最大长度</h4><h4 id="rangelength-min-max-长度的范围"><a href="#rangelength-min-max-长度的范围" class="headerlink" title="rangelength:[min,max], 长度的范围"></a><strong>rangelength</strong>:[min,max], 长度的范围</h4><h4 id="min-max-值-最小-最大值"><a href="#min-max-值-最小-最大值" class="headerlink" title="min/max:值  最小/最大值"></a><strong>min/max</strong>:值  最小/最大值</h4><h4 id="range-min-max-取值的范围"><a href="#range-min-max-取值的范围" class="headerlink" title="range: [min,max]取值的范围"></a><strong>range</strong>: [min,max]取值的范围</h4><h4 id="格式验证-email-url-date"><a href="#格式验证-email-url-date" class="headerlink" title="格式验证: email, url, date"></a><strong>格式验证</strong>: email, url, date</h4><h4 id="强调-格式验证时，不加required，如果为空，则不验证"><a href="#强调-格式验证时，不加required，如果为空，则不验证" class="headerlink" title="强调: 格式验证时，不加required，如果为空，则不验证"></a><strong>强调</strong>: 格式验证时，不加required，如果为空，则不验证</h4><h4 id="两元素内容相等-equalTo-“-id”"><a href="#两元素内容相等-equalTo-“-id”" class="headerlink" title="两元素内容相等:equalTo: “#id”"></a><strong>两元素内容相等</strong>:equalTo: “#id”</h4><h4 id="添加自定义验证规则"><a href="#添加自定义验证规则" class="headerlink" title="添加自定义验证规则:"></a><strong>添加自定义验证规则</strong>:</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">jQuery.validator.addMethod(“规则名”,fn,”错误提示”)</span><br><span class="line">jQuery.validator.addMethod(</span><br><span class="line">    <span class="string">&quot;规则名&quot;</span>,</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">val</span>)</span>&#123;<span class="comment">//val会自动获得当前元素的内容</span></span><br><span class="line">       其中: fn的参数value可自动获得要验证的输入值</span><br><span class="line">        如果验证通过,返回<span class="literal">true</span>,否则返回<span class="literal">false</span></span><br><span class="line">        returnval是否验证通过</span><br><span class="line">    &#125;,</span><br><span class="line">        <span class="string">&quot;错误提示&quot;</span></span><br><span class="line">    )</span><br></pre></td></tr></table></figure>
<h4 id="3-瀑布流masonry彩砖墙"><a href="#3-瀑布流masonry彩砖墙" class="headerlink" title="3. 瀑布流masonry彩砖墙"></a><strong>3</strong>. 瀑布流masonry彩砖墙</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">HTML: 容器div#container&gt;div*n</span><br><span class="line">CSS:</span><br><span class="line">JS: $(...).masonry();</span><br></pre></td></tr></table></figure>

<h2 id="三、添加jQuery全局函数-封装自定义插件"><a href="#三、添加jQuery全局函数-封装自定义插件" class="headerlink" title="三、添加jQuery全局函数: 封装自定义插件"></a><strong>三、添加jQuery全局函数: 封装自定义插件</strong></h2><h4 id="何时：只要发现网页中一个效果或功能需要在多个网站中重用时"><a href="#何时：只要发现网页中一个效果或功能需要在多个网站中重用时" class="headerlink" title="何时：只要发现网页中一个效果或功能需要在多个网站中重用时"></a><strong>何时</strong>：只要发现网页中一个效果或功能需要在多个网站中重用时</h4><h4 id="如何：2种"><a href="#如何：2种" class="headerlink" title="如何：2种"></a><strong>如何</strong>：2种</h4><h4 id="1-添加jQuery全局函数"><a href="#1-添加jQuery全局函数" class="headerlink" title="1.添加jQuery全局函数"></a><strong>1</strong>.添加jQuery全局函数</h4><h6 id="鄙视"><a href="#鄙视" class="headerlink" title="鄙视:"></a><strong>鄙视</strong>:</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$.each(数组/集合,<span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;...&#125;)-&gt;函数名(“参数列表”)</span><br><span class="line">       直接定义在$构造函数对象上</span><br><span class="line">       对任意数组或类数组对象均可用</span><br><span class="line">    $(...).each(<span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;...&#125;)-&gt;变量.API();</span><br><span class="line">       仅定义在jQuery查询结果对象的原型对象中</span><br><span class="line">       只能被jQuery查询结果对象使用</span><br></pre></td></tr></table></figure>
<p><img src="http://imagehosting.biz/images/2018/04/10/286260051415153432.jpg" alt="我是图片"></p>
<h3 id="jQuery函数分两种"><a href="#jQuery函数分两种" class="headerlink" title="jQuery函数分两种:"></a><strong>jQuery函数分两种</strong>:</h3><h4 id="1-jQuery全局函数-直接定义在jQuery构造函数上的，所有对象都可使用的函数"><a href="#1-jQuery全局函数-直接定义在jQuery构造函数上的，所有对象都可使用的函数" class="headerlink" title="1. jQuery全局函数: 直接定义在jQuery构造函数上的，所有对象都可使用的函数"></a><strong>1. jQuery全局函数</strong>: 直接定义在jQuery构造函数上的，所有对象都可使用的函数</h4><h4 id="2-jQuery实例函数-定义在jQuery-fn原型对象上，只有jQuery的查询结果对象才能使用。"><a href="#2-jQuery实例函数-定义在jQuery-fn原型对象上，只有jQuery的查询结果对象才能使用。" class="headerlink" title="2. jQuery实例函数: 定义在jQuery.fn原型对象上，只有jQuery的查询结果对象才能使用。"></a><strong>2. jQuery实例函数</strong>: 定义在jQuery.fn原型对象上，只有jQuery的查询结果对象才能使用。</h4><h4 id="如果觉得jQuery函数不够用-可扩展自定义函数"><a href="#如果觉得jQuery函数不够用-可扩展自定义函数" class="headerlink" title="如果觉得jQuery函数不够用: 可扩展自定义函数"></a>如果觉得jQuery函数不够用: 可扩展自定义函数</h4><h4 id="如果仅希望jQuery查询结果使用，就定义在jQuery-fn上"><a href="#如果仅希望jQuery查询结果使用，就定义在jQuery-fn上" class="headerlink" title="如果仅希望jQuery查询结果使用，就定义在jQuery.fn上"></a>如果仅希望jQuery查询结果使用，就定义在jQuery.fn上</h4><h4 id="如果希望jQuery查询结果以及所有数组，类数组对象都能使用，就定义在jQuery构造函数上"><a href="#如果希望jQuery查询结果以及所有数组，类数组对象都能使用，就定义在jQuery构造函数上" class="headerlink" title="如果希望jQuery查询结果以及所有数组，类数组对象都能使用，就定义在jQuery构造函数上"></a>如果希望jQuery查询结果以及所有数组，类数组对象都能使用，就定义在jQuery构造函数上</h4><h3 id="2-封装jQuery部件-3步"><a href="#2-封装jQuery部件-3步" class="headerlink" title="2.封装jQuery部件  3步"></a><strong>2.封装jQuery部件  3步</strong></h3><h4 id="1-定义css样式"><a href="#1-定义css样式" class="headerlink" title="1.定义css样式"></a>1.定义css样式</h4><h4 id="2-位指定元素侵入class"><a href="#2-位指定元素侵入class" class="headerlink" title="2.位指定元素侵入class"></a>2.位指定元素侵入class</h4><h4 id="3-为元素绑定事件"><a href="#3-为元素绑定事件" class="headerlink" title="3.为元素绑定事件"></a>3.为元素绑定事件</h4><p><img src="http://imagehosting.biz/images/2018/04/10/1875186294946828018.jpg" alt="我是图片"></p>
]]></content>
      <categories>
        <category>jQuery</category>
      </categories>
  </entry>
  <entry>
    <title>HTML基础</title>
    <url>/2018/03/17/html%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="html基础"><a href="#html基础" class="headerlink" title="html基础"></a>html基础</h1><h4 id="什么是HTML"><a href="#什么是HTML" class="headerlink" title="什么是HTML"></a>什么是HTML</h4><ol>
<li>HTML(HyperText Markup Language):超级文本标记语言</li>
<li>HTML是制作网页的一种语言</li>
<li>HTML不是编程语言</li>
<li>HTML文档通过浏览器的解释和编译，并以我们平常所看到的网页形式展示。</li>
</ol>
<h4 id="HTML基本结构"><a href="#HTML基本结构" class="headerlink" title="HTML基本结构"></a>HTML基本结构</h4> <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span><span class="comment">&lt;!-- 头部声明：用来告诉浏览器用什么标准去解释这个文档 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="comment">&lt;!-- 描述了文档的各种属性和信息 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><span class="comment">&lt;!-- charset：声明文档使用的字符编码，以防乱码 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span><span class="comment">&lt;!-- 文档的标题 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 文档的内容 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="HTML基本标签"><a href="#HTML基本标签" class="headerlink" title="HTML基本标签"></a>HTML基本标签</h4><h5 id="语义化"><a href="#语义化" class="headerlink" title="语义化"></a>语义化</h5><ul>
<li>有利于SEO,让网页更好的被搜索引擎理解</li>
<li>能让页面呈现清晰的结构，提高可读性</li>
<li>便于团队开发和维护</li>
<li>让其他设备更方便解释 如:屏幕阅读器</li>
</ul>
<blockquote>
<p>SEO:是由英文Search Engine Optimization缩写而来， 中文意译为“搜索引擎优化”。SEO是指通过对网站进行站内优化(网站结构调整、网站内容建设、网站代码优化等)和站外优化，以便更好的被搜索引擎搜录和拥有更好的网站排名。</p>
</blockquote>
<h5 id="块属性标签"><a href="#块属性标签" class="headerlink" title="块属性标签"></a>块属性标签</h5><ul>
<li>div:无语义标签，主要用于布局</li>
<li>h1~h6:作为标题使用，并且依据重要性递减。</li>
<li>ol:有序列表</li>
<li>ul:无序列表</li>
<li>p:段落</li>
<li>br:换行</li>
</ul>
<h5 id="块属性标签特点"><a href="#块属性标签特点" class="headerlink" title="块属性标签特点"></a>块属性标签特点</h5><ul>
<li>从上往下排列，每个元素占据一行</li>
<li>可以设定元素的宽和高</li>
<li>元素宽度默认与父级同宽</li>
</ul>
<hr>
<h5 id="行内属性标签"><a href="#行内属性标签" class="headerlink" title="行内属性标签"></a>行内属性标签</h5><ul>
<li>span:标签是没有语义的，它的作用就是为了设置单独的样式用的。</li>
<li>strong:默认加粗、强调文本</li>
<li>em:默认斜体、强调文本</li>
<li>sa:标签定义超链接、定义锚点，有利于seo 属性</li>
<li>img:定义图片</li>
</ul>
<h5 id="a标签属性"><a href="#a标签属性" class="headerlink" title="a标签属性"></a>a标签属性</h5><ul>
<li>href:链接地址，也可以定义锚点</li>
<li>target：跳转链接方式<ul>
<li>_blank-在新窗口中打开。</li>
<li>_self 默认。在相同的框架中打开。</li>
<li>_parent 在父框架集中打开。</li>
<li>_top 在整个窗口中打开。</li>
</ul>
</li>
</ul>
<h5 id="img标签属性"><a href="#img标签属性" class="headerlink" title="img标签属性"></a>img标签属性</h5><ul>
<li>src:图片地址</li>
<li>alt:当图像不可见时指定的文本</li>
<li>title:鼠标滑过图片时显示的文本</li>
</ul>
<h5 id="行内属性标签特点"><a href="#行内属性标签特点" class="headerlink" title="行内属性标签特点"></a>行内属性标签特点</h5><ul>
<li>从左往右排列</li>
<li>不可以设定元素的宽、高和上下间距，特殊标签除外，如:img</li>
</ul>
<hr>
<h5 id="form表单"><a href="#form表单" class="headerlink" title="form表单"></a>form表单</h5><blockquote>
<p>表单：表单是一个包含表单元素的区域，用于提交表单内的数据</p>
</blockquote>
<h5 id="表单属性"><a href="#表单属性" class="headerlink" title="表单属性"></a>表单属性</h5><ul>
<li>action：设置跳转的页面地址，同时也会传送数据到新的页面</li>
<li>method：数据传送的方式（get/post）</li>
</ul>
<h5 id="表单标签"><a href="#表单标签" class="headerlink" title="表单标签"></a>表单标签</h5><ul>
<li><p>textarea:定义多行的文本输入控件</p>
</li>
<li><p>select:定义选择列表（下拉列表）</p>
</li>
<li><p>option:定义选择列表中的选项</p>
</li>
<li><p>label:标签为 input 元素定义标注</p>
</li>
<li><p>input:定义文本的变量部分</p>
</li>
<li><p>input的常用type属性值分别为：</p>
</li>
<li><p>text：文本</p>
</li>
<li><p>password：密码</p>
</li>
<li><p>button：按钮</p>
</li>
<li><p>submit：提交按钮</p>
</li>
<li><p>checkbox：复选框</p>
</li>
<li><p>radio：单选框</p>
</li>
<li><p>file：文件</p>
</li>
<li><p>reset：重置</p>
</li>
<li><p>hidden：隐藏</p>
</li>
</ul>
<hr>
<h4 id="table表格"><a href="#table表格" class="headerlink" title="table表格"></a>table表格</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">caption</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">caption</span>&gt;</span>      </span><br><span class="line"><span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>标签<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>描述<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>标签<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>描述<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>table<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>定义表格<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>td<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>定义表格单元<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>caption<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>定义表格标题<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>thead<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>定义表格的页眉<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>th<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>定义表格的表头<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>tbody<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>定义表格的主体<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>tr<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>定义表格的行<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>tfoot<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>定义表格的页脚<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>
<hr>
<table>
<thead>
<tr>
<th align="center">标签</th>
<th align="center">描述</th>
<th align="center">标签</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">table</td>
<td align="center">定义表格</td>
<td align="center">td</td>
<td align="center">定义表格单元</td>
</tr>
<tr>
<td align="center">caption</td>
<td align="center">定义表格标题</td>
<td align="center">thead</td>
<td align="center">定义表格的页眉</td>
</tr>
<tr>
<td align="center">th</td>
<td align="center">定义表格的表头</td>
<td align="center">tbody</td>
<td align="center">定义表格的主体</td>
</tr>
<tr>
<td align="center">tr</td>
<td align="center">定义表格的行</td>
<td align="center">tfoot</td>
<td align="center">定义表格的页脚</td>
</tr>
</tbody></table>
<hr>
<h5 id="table的属性："><a href="#table的属性：" class="headerlink" title="table的属性："></a>table的属性：</h5><ul>
<li><p>border: 设置单元格边框</p>
</li>
<li><p>cellpadding：设置单元格边框与单元格里的内容之间的距离</p>
</li>
<li><p>cellspacing：设置单元格间的距离</p>
</li>
<li><p>table合并单元格：</p>
</li>
<li><p>colspan：跨行</p>
</li>
<li><p>rowspan：跨列</p>
</li>
</ul>
<h5 id="table例子："><a href="#table例子：" class="headerlink" title="table例子："></a>table例子：</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">cellpadding</span>=<span class="string">&quot;5&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;5&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>跨行<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>跨列<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>跨列<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="url-路径（uniform-resource-locator）"><a href="#url-路径（uniform-resource-locator）" class="headerlink" title="url 路径（uniform resource locator）"></a>url 路径（uniform resource locator）</h2><h4 id="1-绝对路径"><a href="#1-绝对路径" class="headerlink" title="1.绝对路径"></a>1.绝对路径</h4><h6 id="网络资源"><a href="#网络资源" class="headerlink" title="网络资源"></a>网络资源</h6><h6 id="四部分组成："><a href="#四部分组成：" class="headerlink" title="四部分组成："></a>四部分组成：</h6><ul>
<li><p>1 协议名：http/https</p>
</li>
<li><p>2 主机名（ip地址/域名）</p>
</li>
<li><p>3 目录路径:</p>
</li>
<li><p>4 文件名：</p>
<h6 id="本机资源：从盘符位置处开始"><a href="#本机资源：从盘符位置处开始" class="headerlink" title="本机资源：从盘符位置处开始"></a>本机资源：从盘符位置处开始</h6></li>
<li><p>2.相对路径</p>
</li>
<li><p>3.根相对路径<br>  从网站的根目录处开始查找资源文件的位置<br>  /：表示网站所在的根目录<br>  eg：/images/front/logo.jpg</p>
<h2 id="图像"><a href="#图像" class="headerlink" title="图像"></a>图像</h2></li>
<li><ol>
<li>jpeg 图像图像联合专家组 有损压缩<br>表现：*.jpg</li>
</ol>
</li>
<li><p>2.gif 图形结构格式<br>  表现：.gif<br>  特点：动态效果</p>
</li>
<li><p>3.png 可移植网络图形<br>   表现：.png<br>   特点：支持透明</p>
<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2></li>
<li><ul>
<li>锚点：在文档中的某行位置处做记号<br>1.定义锚点<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">name</span>=<span class="string">&quot;NAME1&quot;</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"> 任意标记的 id 属性</span><br><span class="line">    <span class="tag">&lt;<span class="name">any</span> <span class="attr">id</span>=<span class="string">&quot;NAME2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">any</span>&gt;</span>  any:任一标记</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><ul>
<li>2.连接到锚点<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> 连接到本页锚点处</span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#锚点name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">连接到其他页锚点处</span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;页面url#锚点name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>HTML</category>
      </categories>
  </entry>
  <entry>
    <title>jQuery事件简化、模拟触发、hover、动画</title>
    <url>/2018/07/03/jQuery%E4%BA%8B%E4%BB%B6%E7%AE%80%E5%8C%96%E3%80%81%E6%A8%A1%E6%8B%9F%E8%A7%A6%E5%8F%91%E3%80%81hover%E3%80%81%E5%8A%A8%E7%94%BB/</url>
    <content><![CDATA[<h2 id="事件绑定简化"><a href="#事件绑定简化" class="headerlink" title="事件绑定简化"></a>事件绑定简化</h2><h5 id="绑定"><a href="#绑定" class="headerlink" title="绑定:"></a><strong>绑定</strong>:</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">已废弃: $ (...).live(&quot;事件名&quot;,fn)        $(...).die(&quot;事件名&quot;,fn)</span><br></pre></td></tr></table></figure>
<h5 id="极端：将网页中所有事件集中绑定在document上。效率极低"><a href="#极端：将网页中所有事件集中绑定在document上。效率极低" class="headerlink" title="极端：将网页中所有事件集中绑定在document上。效率极低"></a><strong>极端</strong>：将网页中所有事件集中绑定在document上。效率极低</h5><h5 id="终极简化"><a href="#终极简化" class="headerlink" title="终极简化:"></a><strong>终极简化</strong>:</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(...).on(...) 绑定        $(...).off(...)解绑</span><br><span class="line">$(...).on(&quot;事件名&quot;,fn)  -&gt; 代替bind</span><br><span class="line">$(...).on(&quot;事件名&quot;,&quot;selector&quot;,fn) -&gt; 代替delegate</span><br><span class="line">强调: on代替delegate，要事件名在前，选择器在后</span><br><span class="line">解绑: $(...).off(&quot;事件名&quot;,[&quot;selector&quot;,]fn)</span><br></pre></td></tr></table></figure>
<h3 id="模拟触发"><a href="#模拟触发" class="headerlink" title="模拟触发"></a><strong>模拟触发</strong></h3><h5 id="什么是：希望通过代码代替用户操作，触发元素的事件"><a href="#什么是：希望通过代码代替用户操作，触发元素的事件" class="headerlink" title="什么是：希望通过代码代替用户操作，触发元素的事件"></a><strong>什么是</strong>：希望通过代码代替用户操作，触发元素的事件</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(...).trigger(&quot;事件名&quot;) 触发找到的元素上绑定的事件函数</span><br><span class="line">$(...).事件名()  比如：$(form).submit();提交表单</span><br></pre></td></tr></table></figure>
<h5 id="总结：jQuery简化版事件处理函数两用："><a href="#总结：jQuery简化版事件处理函数两用：" class="headerlink" title="总结：jQuery简化版事件处理函数两用："></a><strong>总结</strong>：jQuery简化版事件处理函数两用：</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(…).事件名([fn])        有fn，则绑定事件；   没有fn，则模拟触发事件</span><br></pre></td></tr></table></figure>
<p><img src="http://imagehosting.biz/images/2018/04/10/6597541457147015163.jpg" alt="我是图片"></p>
<h3 id="页面加载后自动执行"><a href="#页面加载后自动执行" class="headerlink" title="页面加载后自动执行"></a><strong>页面加载后自动执行</strong></h3><h6 id="1、整个页面内容加载完成才触发-window-onload-function-…"><a href="#1、整个页面内容加载完成才触发-window-onload-function-…" class="headerlink" title="1、整个页面内容加载完成才触发  window.onload=function(){…}"></a>1、整个页面内容加载完成才触发  window.onload=function(){…}</h6><h6 id="HTML，CSS，JS，图片全部加载完成"><a href="#HTML，CSS，JS，图片全部加载完成" class="headerlink" title="HTML，CSS，JS，图片全部加载完成"></a>HTML，CSS，JS，图片全部加载完成</h6><h6 id="2、DOM内容加载完成就触发-DOMContentLoaded-有兼容性问题"><a href="#2、DOM内容加载完成就触发-DOMContentLoaded-有兼容性问题" class="headerlink" title="2、DOM内容加载完成就触发 DOMContentLoaded : 有兼容性问题"></a>2、DOM内容加载完成就触发 DOMContentLoaded : 有兼容性问题</h6><h6 id="仅HTML和JS加载并执行完成"><a href="#仅HTML和JS加载并执行完成" class="headerlink" title="仅HTML和JS加载并执行完成"></a>仅HTML和JS加载并执行完成</h6><h6 id="准备工作包括-事件绑定，DOM操作"><a href="#准备工作包括-事件绑定，DOM操作" class="headerlink" title="准备工作包括: 事件绑定，DOM操作"></a>准备工作包括: 事件绑定，DOM操作</h6><h6 id="DOM内容加载完成比整个页面加载完成提前触发"><a href="#DOM内容加载完成比整个页面加载完成提前触发" class="headerlink" title="DOM内容加载完成比整个页面加载完成提前触发"></a>DOM内容加载完成比整个页面加载完成提前触发</h6><h6 id="何时-：凡是对DOM的初始化操作，都要放在DOM内容加载完成时提前执行，不必等待整个页面加载完成"><a href="#何时-：凡是对DOM的初始化操作，都要放在DOM内容加载完成时提前执行，不必等待整个页面加载完成" class="headerlink" title="何时 ：凡是对DOM的初始化操作，都要放在DOM内容加载完成时提前执行，不必等待整个页面加载完成"></a><strong>何时</strong> ：凡是对DOM的初始化操作，都要放在DOM内容加载完成时提前执行，不必等待整个页面加载完成</h6><h6 id="比如-：动态生成DOM内容和内容和事件绑定"><a href="#比如-：动态生成DOM内容和内容和事件绑定" class="headerlink" title="比如 ：动态生成DOM内容和内容和事件绑定"></a><strong>比如</strong> ：动态生成DOM内容和内容和事件绑定</h6><h6 id="如何jQuery"><a href="#如何jQuery" class="headerlink" title="如何jQuery"></a><strong>如何jQuery</strong></h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(document).ready(function()&#123;....&#125;)</span><br><span class="line">简写: $().ready(function()&#123;....&#125;)</span><br><span class="line">再简写：$(function()&#123;....&#125;) 反复$()的fn，默认DOM内容加载后就提前执行</span><br></pre></td></tr></table></figure>
<h6 id="终极简化："><a href="#终极简化：" class="headerlink" title="终极简化："></a><strong>终极简化</strong>：</h6><p>只要放在body结尾的script中的代码，默认DOM内容加载后提前执行。</p>
<h6 id="特殊的事件："><a href="#特殊的事件：" class="headerlink" title="特殊的事件："></a><strong>特殊的事件</strong>：</h6><h6 id="hover-mouseover-mouseout"><a href="#hover-mouseover-mouseout" class="headerlink" title="hover = mouseover+mouseout"></a>hover = mouseover+mouseout</h6><h6 id="什么是：同时绑定两个事件：mouseover和mouseout"><a href="#什么是：同时绑定两个事件：mouseover和mouseout" class="headerlink" title="什么是：同时绑定两个事件：mouseover和mouseout"></a><strong>什么是</strong>：同时绑定两个事件：mouseover和mouseout</h6><h6 id="何时-只要同时绑定-mouseover和mouseout时："><a href="#何时-只要同时绑定-mouseover和mouseout时：" class="headerlink" title="何时: 只要同时绑定 mouseover和mouseout时："></a><strong>何时</strong>: 只要同时绑定 mouseover和mouseout时：</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(...).hover(</span><br><span class="line">    function()&#123;...mouseover...&#125;,</span><br><span class="line">    function()&#123;...mouseout...&#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<h6 id="更简化-如果能够将两个函数统一为一个函数，可简写为-…-hover-fn-，无论over还是out都执行相同操作。"><a href="#更简化-如果能够将两个函数统一为一个函数，可简写为-…-hover-fn-，无论over还是out都执行相同操作。" class="headerlink" title="更简化: 如果能够将两个函数统一为一个函数，可简写为: $(…).hover(fn);，无论over还是out都执行相同操作。"></a><strong>更简化</strong>: 如果能够将两个函数统一为一个函数，可简写为: $(…).hover(fn);，无论over还是out都执行相同操作。</h6><h4 id="“-target”-hover-function-this-toggleClass-“hover”"><a href="#“-target”-hover-function-this-toggleClass-“hover”" class="headerlink" title="$(“#target”).hover(function(){$(this).toggleClass(“hover”)})"></a><strong>$(“#target”).hover(function(){$(this).toggleClass(“hover”)})</strong></h4><h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a><strong>动画</strong></h2><h4 id="1-简单动画-3种固定效果"><a href="#1-简单动画-3种固定效果" class="headerlink" title="1. 简单动画: 3种固定效果"></a>1. 简单动画: 3种固定效果</h4><h4 id="1-显示-隐藏-…-show-hide-toggle"><a href="#1-显示-隐藏-…-show-hide-toggle" class="headerlink" title="1. 显示/隐藏: $(…).show/hide/toggle();"></a>1. 显示/隐藏: $(…).show/hide/toggle();</h4><h4 id="问题-如果show-hide不给任何参数-display-none，-瞬间显示隐藏"><a href="#问题-如果show-hide不给任何参数-display-none，-瞬间显示隐藏" class="headerlink" title="问题:如果show/hide不给任何参数: display:none， 瞬间显示隐藏"></a><strong>问题</strong>:如果show/hide不给任何参数: display:none， 瞬间显示隐藏</h4><h4 id="解决：在参数中加入时间-直接添加毫秒数或者指定参数-speed-1-三档-“slow”-”normal”-”fast”"><a href="#解决：在参数中加入时间-直接添加毫秒数或者指定参数-speed-1-三档-“slow”-”normal”-”fast”" class="headerlink" title="解决：在参数中加入时间 直接添加毫秒数或者指定参数: speed: 1. 三档(“slow”,”normal”,”fast”)"></a><strong>解决</strong>：在参数中加入时间 直接添加毫秒数或者指定参数: speed: 1. 三档(“slow”,”normal”,”fast”)</h4><h4 id="问题：所有效果属性变化，都写死在jQuery源代码内部，无法按需求更改。"><a href="#问题：所有效果属性变化，都写死在jQuery源代码内部，无法按需求更改。" class="headerlink" title="问题：所有效果属性变化，都写死在jQuery源代码内部，无法按需求更改。"></a><strong>问题</strong>：所有效果属性变化，都写死在jQuery源代码内部，无法按需求更改。</h4><h4 id="解决：1、少用简单动画-2、class-transition"><a href="#解决：1、少用简单动画-2、class-transition" class="headerlink" title="解决：1、少用简单动画     2、class+transition"></a><strong>解决</strong>：1、少用简单动画     2、class+transition</h4><h4 id="2-上滑-下滑-…-slideUp-slideDown-slideToggle"><a href="#2-上滑-下滑-…-slideUp-slideDown-slideToggle" class="headerlink" title="2. 上滑/下滑:$(…).slideUp/slideDown/slideToggle();"></a><strong>2</strong>. 上滑/下滑:$(…).slideUp/slideDown/slideToggle();</h4><h4 id="3-淡入-淡出-…-fadeIn-fadeOut-fadeToggle"><a href="#3-淡入-淡出-…-fadeIn-fadeOut-fadeToggle" class="headerlink" title="3. 淡入/淡出:$(…).fadeIn/fadeOut/fadeToggle();"></a><strong>3</strong>. 淡入/淡出:$(…).fadeIn/fadeOut/fadeToggle();</h4><h4 id="缺点-效果写死在库函数中，无法维护！"><a href="#缺点-效果写死在库函数中，无法维护！" class="headerlink" title="缺点: 效果写死在库函数中，无法维护！"></a>缺点: 效果写死在库函数中，无法维护！</h4><h2 id="解决-class-transition"><a href="#解决-class-transition" class="headerlink" title="解决: class+transition"></a><strong>解决: class+transition</strong></h2><h2 id="所有动画API的最后一个参数，都可指定回调函数"><a href="#所有动画API的最后一个参数，都可指定回调函数" class="headerlink" title="所有动画API的最后一个参数，都可指定回调函数"></a><strong>所有动画API的最后一个参数，都可指定回调函数</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(...).show(speed,callback)</span><br><span class="line">    callback:在动画结束后自动执行，this-&gt;当前元素</span><br></pre></td></tr></table></figure>
<h2 id="2-自定义动画——万能动画"><a href="#2-自定义动画——万能动画" class="headerlink" title="2. 自定义动画——万能动画"></a><strong>2. 自定义动画——万能动画</strong></h2><h4 id="什么是：可对任意数值类型的CSS属性执行动画效果"><a href="#什么是：可对任意数值类型的CSS属性执行动画效果" class="headerlink" title="什么是：可对任意数值类型的CSS属性执行动画效果"></a><strong>什么是</strong>：可对任意数值类型的CSS属性执行动画效果</h4><h4 id="何时：只要希望对任意数值类型执行动画效果"><a href="#何时：只要希望对任意数值类型执行动画效果" class="headerlink" title="何时：只要希望对任意数值类型执行动画效果"></a><strong>何时</strong>：只要希望对任意数值类型执行动画效果</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(...).animate(&#123;<span class="comment">//目标样式</span></span><br><span class="line">    css属性:值, css属性:值, ...</span><br><span class="line">&#125;,speed[easing,callback]);</span><br></pre></td></tr></table></figure>
<h4 id="其中：speed-是动画持续的总毫秒数"><a href="#其中：speed-是动画持续的总毫秒数" class="headerlink" title="其中：speed 是动画持续的总毫秒数"></a><strong>其中</strong>：speed 是动画持续的总毫秒数</h4><h4 id="easing-是动画变化的效果-：linear-swing"><a href="#easing-是动画变化的效果-：linear-swing" class="headerlink" title="easing 是动画变化的效果 ：linear swing"></a>easing 是动画变化的效果 ：linear swing</h4><h4 id="callback是动画结束后的回调函数，动画执行完再执行回调函数"><a href="#callback是动画结束后的回调函数，动画执行完再执行回调函数" class="headerlink" title="callback是动画结束后的回调函数，动画执行完再执行回调函数"></a>callback是动画结束后的回调函数，动画执行完再执行回调函数</h4><h4 id="不足-只能对单个纯数字的属性值执行动画变化，不支持颜色动画"><a href="#不足-只能对单个纯数字的属性值执行动画变化，不支持颜色动画" class="headerlink" title="不足: 只能对单个纯数字的属性值执行动画变化，不支持颜色动画"></a><strong>不足</strong>: 只能对单个纯数字的属性值执行动画变化，不支持颜色动画</h4><h4 id="并发和排队"><a href="#并发和排队" class="headerlink" title="并发和排队"></a><strong>并发和排队</strong></h4><h4 id="并发-多个css属性同时变化"><a href="#并发-多个css属性同时变化" class="headerlink" title="并发: 多个css属性同时变化"></a><strong>并发</strong>: 多个css属性同时变化</h4><h4 id="1-放在同一个animate中的多个css属性都是并发变化"><a href="#1-放在同一个animate中的多个css属性都是并发变化" class="headerlink" title="1. 放在同一个animate中的多个css属性都是并发变化"></a>1. 放在同一个animate中的多个css属性都是并发变化</h4><h4 id="2-同时给多个元素添加animate效果，不同元素调用的动画也是并发。"><a href="#2-同时给多个元素添加animate效果，不同元素调用的动画也是并发。" class="headerlink" title="2. 同时给多个元素添加animate效果，不同元素调用的动画也是并发。"></a>2. 同时给多个元素添加animate效果，不同元素调用的动画也是并发。</h4><p><img src="http://imagehosting.biz/images/2018/04/10/1982146786096809806.jpg" alt="我是图片"></p>
<h4 id="排队-每个css属性，先后逐个变化"><a href="#排队-每个css属性，先后逐个变化" class="headerlink" title="排队: 每个css属性，先后逐个变化"></a><strong>排队</strong>: 每个css属性，先后逐个变化</h4><h4 id="先后调用的不同animate内的多个css属性时排队变化——动画队列"><a href="#先后调用的不同animate内的多个css属性时排队变化——动画队列" class="headerlink" title="先后调用的不同animate内的多个css属性时排队变化——动画队列"></a>先后调用的不同animate内的多个css属性时排队变化——动画队列</h4><h4 id="停止动画：-…-stop"><a href="#停止动画：-…-stop" class="headerlink" title="停止动画：$(…).stop();"></a><strong>停止动画</strong>：$(…).stop();</h4><h4 id="问题-默认仅停止队列中正在执行的当前动画，后续动画继续执行"><a href="#问题-默认仅停止队列中正在执行的当前动画，后续动画继续执行" class="headerlink" title="问题: 默认仅停止队列中正在执行的当前动画，后续动画继续执行"></a><strong>问题</strong>: 默认仅停止队列中正在执行的当前动画，后续动画继续执行</h4><h4 id="解决-…-stop-true-停止当前动画，清空队列"><a href="#解决-…-stop-true-停止当前动画，清空队列" class="headerlink" title="解决: $(…).stop(true);//停止当前动画，清空队列"></a><strong>解决</strong>: $(…).stop(true);//停止当前动画，清空队列</h4><h4 id="推迟执行：-…-delay-ms-animate-…"><a href="#推迟执行：-…-delay-ms-animate-…" class="headerlink" title="推迟执行：$(…).delay(ms).animate(…)"></a>推迟执行：$(…).delay(ms).animate(…)</h4><h4 id="问题：如果停止动画时，会直接停止delay，后续动画继续执行。如果stop-true-则所有动画都停止"><a href="#问题：如果停止动画时，会直接停止delay，后续动画继续执行。如果stop-true-则所有动画都停止" class="headerlink" title="问题：如果停止动画时，会直接停止delay，后续动画继续执行。如果stop(true)则所有动画都停止"></a><strong>问题</strong>：如果停止动画时，会直接停止delay，后续动画继续执行。如果stop(true)则所有动画都停止</h4><h4 id="查找一个正在播放动画的元素-animated"><a href="#查找一个正在播放动画的元素-animated" class="headerlink" title="查找一个正在播放动画的元素  :animated"></a>查找一个正在播放动画的元素  :animated</h4><h4 id="连续链式调用的多个animate的css属性是排队执行"><a href="#连续链式调用的多个animate的css属性是排队执行" class="headerlink" title="连续链式调用的多个animate的css属性是排队执行"></a>连续链式调用的多个animate的css属性是排队执行</h4><h4 id="练习-为多个元素，有规律的指定属性值（属性值中可以写函数）"><a href="#练习-为多个元素，有规律的指定属性值（属性值中可以写函数）" class="headerlink" title="练习: 为多个元素，有规律的指定属性值（属性值中可以写函数）"></a><strong>练习</strong>: 为多个元素，有规律的指定属性值（属性值中可以写函数）</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(...).css(<span class="string">&quot;属性&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">i,val</span>)</span>&#123;<span class="comment">//自动在每个元素上执行</span></span><br><span class="line">    i<span class="comment">//自动获得当前元素的下标</span></span><br><span class="line">    val<span class="comment">//当前元素的指定属性值</span></span><br><span class="line">    <span class="built_in">this</span><span class="comment">//当前DOM元素...</span></span><br><span class="line">    <span class="keyword">return</span>要修改给当前元素的属性的值</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h4 id="类数组对象的操作"><a href="#类数组对象的操作" class="headerlink" title="类数组对象的操作"></a><strong>类数组对象的操作</strong></h4><h4 id="类数组对象不是数组类型，无法使用数组的API"><a href="#类数组对象不是数组类型，无法使用数组的API" class="headerlink" title="类数组对象不是数组类型，无法使用数组的API"></a>类数组对象不是数组类型，无法使用数组的API</h4><h4 id="size-gt-代替-length获得类数组对象中的元素个数"><a href="#size-gt-代替-length获得类数组对象中的元素个数" class="headerlink" title=".size()-&gt;代替.length获得类数组对象中的元素个数"></a><strong>.size()-&gt;代替.length获得类数组对象中的元素个数</strong></h4><h4 id="get-i-gt-获得数组对象中i位置的元素"><a href="#get-i-gt-获得数组对象中i位置的元素" class="headerlink" title=".get(i)-&gt;获得数组对象中i位置的元素"></a><strong>.get(i)-&gt;获得数组对象中i位置的元素</strong></h4><h4 id="each-fn-gt-相当于数组的forEach，对类数组对象中每个元素执行相同操作"><a href="#each-fn-gt-相当于数组的forEach，对类数组对象中每个元素执行相同操作" class="headerlink" title=".each(fn)-&gt;相当于数组的forEach，对类数组对象中每个元素执行相同操作"></a><strong>.each(fn)-&gt;相当于数组的forEach，对类数组对象中每个元素执行相同操作</strong></h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">其中：fn：<span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123; <span class="comment">//i 当前元素的下标</span></span><br><span class="line">                 <span class="built_in">this</span>-&gt;当前DOM元素-&gt;$(<span class="built_in">this</span>)-&gt;jQuery对象</span><br><span class="line">           &#125;</span><br></pre></td></tr></table></figure>
<h4 id="index-gt-在类数组对象中查找指定元素的下标位置。类似于indexOf函数"><a href="#index-gt-在类数组对象中查找指定元素的下标位置。类似于indexOf函数" class="headerlink" title=".index()-&gt;在类数组对象中查找指定元素的下标位置。类似于indexOf函数"></a><strong>.index()-&gt;在类数组对象中查找指定元素的下标位置。类似于indexOf函数</strong></h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;selector&quot;</span>).index(DOM/$(...))</span><br></pre></td></tr></table></figure>
<h4 id="在满足selector的所有元素中找右侧DOM-JQ对象的位置——在左边的集合中找右边的对象"><a href="#在满足selector的所有元素中找右侧DOM-JQ对象的位置——在左边的集合中找右边的对象" class="headerlink" title="在满足selector的所有元素中找右侧DOM/JQ对象的位置——在左边的集合中找右边的对象"></a><strong>在满足selector的所有元素中找右侧DOM/JQ对象的位置——在左边的集合中找右边的对象</strong></h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">    $(<span class="string">&quot;selector1&quot;</span>).index(<span class="string">&quot;selector2&quot;</span>)</span><br><span class="line">~~~    </span><br><span class="line">#### **在满足selector2的所有元素中找左侧selector1元素的位置——在右边的集合中找左边的对象**</span><br><span class="line">~~~javascript</span><br><span class="line">    $(<span class="string">&quot;selector&quot;</span>).index()</span><br></pre></td></tr></table></figure>
<h4 id="返回selector元素在其父元素下平辈子元素中的下标位置"><a href="#返回selector元素在其父元素下平辈子元素中的下标位置" class="headerlink" title="返回selector元素在其父元素下平辈子元素中的下标位置"></a><strong>返回selector元素在其父元素下平辈子元素中的下标位置</strong></h4><p><img src="http://imagehosting.biz/images/2018/04/10/845550830139160188.jpg" alt="我是图片"><br><img src="http://imagehosting.biz/images/2018/04/10/1380634760866078083.jpg" alt="我是图片"></p>
]]></content>
      <categories>
        <category>jQuery</category>
      </categories>
  </entry>
  <entry>
    <title>jQuery基础、查找（过滤、内容、属性选择器）</title>
    <url>/2018/06/30/jQuery%E5%9F%BA%E7%A1%80%E3%80%81%E6%9F%A5%E6%89%BE%EF%BC%88%E8%BF%87%E6%BB%A4%E3%80%81%E5%86%85%E5%AE%B9%E3%80%81%E5%B1%9E%E6%80%A7%E9%80%89%E6%8B%A9%E5%99%A8%EF%BC%89/</url>
    <content><![CDATA[<h2 id="什么是jQuery"><a href="#什么是jQuery" class="headerlink" title="什么是jQuery"></a>什么是jQuery</h2><h6 id="第三方开发的，快速，简洁的javascript函数库（极简化的DOM操作的函数库）"><a href="#第三方开发的，快速，简洁的javascript函数库（极简化的DOM操作的函数库）" class="headerlink" title="第三方开发的，快速，简洁的javascript函数库（极简化的DOM操作的函数库）"></a>第三方开发的，快速，简洁的javascript函数库（极简化的DOM操作的函数库）</h6><h2 id="为什么用jQuery"><a href="#为什么用jQuery" class="headerlink" title="为什么用jQuery"></a>为什么用jQuery</h2><h6 id="是DOM操作的终极简化-学jQuery还是在学DOM，只不过API更简单-write-less-do-more"><a href="#是DOM操作的终极简化-学jQuery还是在学DOM，只不过API更简单-write-less-do-more" class="headerlink" title="是DOM操作的终极简化: 学jQuery还是在学DOM，只不过API更简单 write less do more"></a>是DOM操作的终极简化: 学jQuery还是在学DOM，只不过API更简单 write less do more</h6><h6 id="核心DOM：万能，API太繁琐"><a href="#核心DOM：万能，API太繁琐" class="headerlink" title="核心DOM：万能，API太繁琐"></a>核心DOM：万能，API太繁琐</h6><h6 id="HTML-DOM：简洁，不是万能"><a href="#HTML-DOM：简洁，不是万能" class="headerlink" title="HTML DOM：简洁，不是万能"></a>HTML DOM：简洁，不是万能</h6><h6 id="jQuery简化了："><a href="#jQuery简化了：" class="headerlink" title="jQuery简化了："></a>jQuery简化了：</h6><h6 id="1-DOM四大操作：增删改查-2-事件-3-动画-4-AJAX"><a href="#1-DOM四大操作：增删改查-2-事件-3-动画-4-AJAX" class="headerlink" title="1.DOM四大操作：增删改查  2.事件  3.动画 4.AJAX"></a>1.DOM四大操作：增删改查  2.事件  3.动画 4.AJAX</h6><h6 id="2、解决了兼容性问题：凡是jQuery允许使用的，都解决了兼容性问题"><a href="#2、解决了兼容性问题：凡是jQuery允许使用的，都解决了兼容性问题" class="headerlink" title="2、解决了兼容性问题：凡是jQuery允许使用的，都解决了兼容性问题"></a>2、解决了兼容性问题：凡是jQuery允许使用的，都解决了兼容性问题</h6><h6 id="3、如何使用-第三方：不是浏览器内置的，也不是开发人员自己编写的，由其他第三方组织或个人编写的"><a href="#3、如何使用-第三方：不是浏览器内置的，也不是开发人员自己编写的，由其他第三方组织或个人编写的" class="headerlink" title="3、如何使用: 第三方：不是浏览器内置的，也不是开发人员自己编写的，由其他第三方组织或个人编写的"></a>3、如何使用: 第三方：不是浏览器内置的，也不是开发人员自己编写的，由其他第三方组织或个人编写的</h6><blockquote>
<p>下载: 官网jquery.com<br>版本: 1.x 兼容旧浏览器<br>jquery-1.x.3.js     未压缩 体积大 可读性好——学习<br>jquery-1.x.min.js        压缩  体积小 可读性差——生产环境<br>差别: 去掉了注释和空字符(空格，缩进，换行)<br>极简化了变量和参数名<br>使用专门的压缩软件生成的<br>2.x 不再兼容旧浏览器</p>
</blockquote>
<h6 id="CDN-内容分发网络"><a href="#CDN-内容分发网络" class="headerlink" title="CDN: 内容分发网络"></a>CDN: 内容分发网络</h6><h6 id="共享的资源在网络中多台服务器上都有副本，客户端请求资源时，CDN网络会智能选择离客户端最近，网络最优的服务器下载资源。"><a href="#共享的资源在网络中多台服务器上都有副本，客户端请求资源时，CDN网络会智能选择离客户端最近，网络最优的服务器下载资源。" class="headerlink" title="共享的资源在网络中多台服务器上都有副本，客户端请求资源时，CDN网络会智能选择离客户端最近，网络最优的服务器下载资源。"></a>共享的资源在网络中多台服务器上都有副本，客户端请求资源时，CDN网络会智能选择离客户端最近，网络最优的服务器下载资源。</h6><h6 id="为什么：就近快速获得资源"><a href="#为什么：就近快速获得资源" class="headerlink" title="为什么：就近快速获得资源"></a>为什么：就近快速获得资源</h6><h6 id="何时：只要公共的、通用的库、框架都从CDN网络中"><a href="#何时：只要公共的、通用的库、框架都从CDN网络中" class="headerlink" title="何时：只要公共的、通用的库、框架都从CDN网络中"></a>何时：只要公共的、通用的库、框架都从CDN网络中</h6><h6 id="script-src-”http-CDN地址-“"><a href="#script-src-”http-CDN地址-“" class="headerlink" title="script src=”http://CDN地址 “"></a>script src=”<a href="http://cdn地址/">http://CDN地址</a> “</h6><h6 id="百度："><a href="#百度：" class="headerlink" title="百度："></a>百度：</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>src=<span class="string">&quot;http://libs.baidu.com/jquery/1.8.3/jquery.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h6 id="使用jQuery之前，必须先引入jQuery-js文件"><a href="#使用jQuery之前，必须先引入jQuery-js文件" class="headerlink" title="使用jQuery之前，必须先引入jQuery.js文件"></a>使用jQuery之前，必须先引入jQuery.js文件</h6><h6 id="引入"><a href="#引入" class="headerlink" title="引入:"></a>引入:</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;jquery-1.11.3.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h6 id="1-向window中加入了一个jQuery构造-工厂函数-查找，创建"><a href="#1-向window中加入了一个jQuery构造-工厂函数-查找，创建" class="headerlink" title="1. 向window中加入了一个jQuery构造/工厂函数(查找，创建)"></a>1. 向window中加入了一个jQuery构造/工厂函数(查找，创建)</h6><h6 id="2-为今后生成的jQuery对象添加了公共的原型对象"><a href="#2-为今后生成的jQuery对象添加了公共的原型对象" class="headerlink" title="2. 为今后生成的jQuery对象添加了公共的原型对象:"></a>2. 为今后生成的jQuery对象添加了公共的原型对象:</h6><h6 id="jQuery-fn-其中封装了所有jQuery的简化版API"><a href="#jQuery-fn-其中封装了所有jQuery的简化版API" class="headerlink" title="jQuery.fn:其中封装了所有jQuery的简化版API"></a>jQuery.fn:其中封装了所有jQuery的简化版API</h6><h2 id="使用API-jQuery对象"><a href="#使用API-jQuery对象" class="headerlink" title="使用API: jQuery对象"></a>使用API: jQuery对象</h2><h5 id="什么是：用jQuery工厂函数包装DOM对象后形成的新对象。"><a href="#什么是：用jQuery工厂函数包装DOM对象后形成的新对象。" class="headerlink" title="什么是：用jQuery工厂函数包装DOM对象后形成的新对象。"></a>什么是：用jQuery工厂函数包装DOM对象后形成的新对象。</h5><h5 id="为什么：普通的DOM对象不包含jQuery简化版API"><a href="#为什么：普通的DOM对象不包含jQuery简化版API" class="headerlink" title="为什么：普通的DOM对象不包含jQuery简化版API"></a>为什么：普通的DOM对象不包含jQuery简化版API</h5><h5 id="何时：只要希望使用jQuery简化版API之前，都要将DOM对象包装为jQuery对象"><a href="#何时：只要希望使用jQuery简化版API之前，都要将DOM对象包装为jQuery对象" class="headerlink" title="何时：只要希望使用jQuery简化版API之前，都要将DOM对象包装为jQuery对象"></a>何时：只要希望使用jQuery简化版API之前，都要将DOM对象包装为jQuery对象</h5><h5 id="如何：1、将现有DOM对象包装为jQuery对象"><a href="#如何：1、将现有DOM对象包装为jQuery对象" class="headerlink" title="如何：1、将现有DOM对象包装为jQuery对象"></a>如何：1、将现有DOM对象包装为jQuery对象</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> $xxx = jQuery(DOM对象)</span><br><span class="line">何时：如果已经获得一个DOM对象，想用简化版API时</span><br><span class="line">比如：<span class="built_in">this</span>  e.target转为jQuery对象</span><br><span class="line"><span class="keyword">var</span> $this=jQuery(<span class="built_in">this</span>);</span><br><span class="line"><span class="keyword">var</span> $target=jQuery(e.target);</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> btn=<span class="built_in">document</span>.getElementById(<span class="string">&quot;bt1&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> $btn=jQuery(btn);</span><br><span class="line">----------------------→</span><br><span class="line">$btn.click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="built_in">this</span>.innerHTML);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="jQuery工厂函数查找"><a href="#jQuery工厂函数查找" class="headerlink" title="jQuery工厂函数查找"></a>jQuery工厂函数查找</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> $xxx=jQuery(“选择器”);</span><br></pre></td></tr></table></figure>
<h6 id="何时：绝大多数情况，在未获得任何元素时，首选用jQuery工厂函数直接查找元素。"><a href="#何时：绝大多数情况，在未获得任何元素时，首选用jQuery工厂函数直接查找元素。" class="headerlink" title="何时：绝大多数情况，在未获得任何元素时，首选用jQuery工厂函数直接查找元素。"></a>何时：绝大多数情况，在未获得任何元素时，首选用jQuery工厂函数直接查找元素。</h6><h6 id="为什么-原生的DOM元素不具有jQuery的简化版API。必须封装进jQuery对象，才能调用简化版API"><a href="#为什么-原生的DOM元素不具有jQuery的简化版API。必须封装进jQuery对象，才能调用简化版API" class="headerlink" title="为什么: 原生的DOM元素不具有jQuery的简化版API。必须封装进jQuery对象，才能调用简化版API"></a>为什么: 原生的DOM元素不具有jQuery的简化版API。必须封装进jQuery对象，才能调用简化版API</h6><h2 id="简写："><a href="#简写：" class="headerlink" title="简写："></a>简写：</h2><h2 id="引入jQuery-js文件时"><a href="#引入jQuery-js文件时" class="headerlink" title="引入jQuery.js文件时"></a>引入jQuery.js文件时</h2><h6 id="1-向window中添加了一个jQuery工厂函数，用于创建jQuery类型的对象"><a href="#1-向window中添加了一个jQuery工厂函数，用于创建jQuery类型的对象" class="headerlink" title="1.向window中添加了一个jQuery工厂函数，用于创建jQuery类型的对象"></a>1.向window中添加了一个jQuery工厂函数，用于创建jQuery类型的对象</h6><h6 id="2-在jQuery工厂函数中添加了一个原型对象"><a href="#2-在jQuery工厂函数中添加了一个原型对象" class="headerlink" title="2.在jQuery工厂函数中添加了一个原型对象"></a>2.在jQuery工厂函数中添加了一个原型对象</h6><h6 id="在jQuery工厂函数的原型对象中封装了所有简化版API。"><a href="#在jQuery工厂函数的原型对象中封装了所有简化版API。" class="headerlink" title="在jQuery工厂函数的原型对象中封装了所有简化版API。"></a>在jQuery工厂函数的原型对象中封装了所有简化版API。</h6><h6 id="每次使用jQuery工厂函数获得jQuery结果对象都继承自jQuery原型对象，可直接使用原型对象中保存的简化版API"><a href="#每次使用jQuery工厂函数获得jQuery结果对象都继承自jQuery原型对象，可直接使用原型对象中保存的简化版API" class="headerlink" title="每次使用jQuery工厂函数获得jQuery结果对象都继承自jQuery原型对象，可直接使用原型对象中保存的简化版API"></a>每次使用jQuery工厂函数获得jQuery结果对象都继承自jQuery原型对象，可直接使用原型对象中保存的简化版API</h6><h6 id="3-向window中添加全局变量-，引用jQuery工厂函数——所有jQuery都可用-代替"><a href="#3-向window中添加全局变量-，引用jQuery工厂函数——所有jQuery都可用-代替" class="headerlink" title="3.向window中添加全局变量$，引用jQuery工厂函数——所有jQuery都可用$代替"></a>3.向window中添加全局变量$，引用jQuery工厂函数——所有jQuery都可用$代替</h6><h6 id="其实：jQuery对象是一个类数组对象，找到的每个DOM元素都是类数组对象中的一个元素"><a href="#其实：jQuery对象是一个类数组对象，找到的每个DOM元素都是类数组对象中的一个元素" class="headerlink" title="其实：jQuery对象是一个类数组对象，找到的每个DOM元素都是类数组对象中的一个元素"></a>其实：jQuery对象是一个类数组对象，找到的每个DOM元素都是类数组对象中的一个元素</h6><h6 id="且jQuery简化版API都子代forEach（遍历）效果；只需调用一次，即可自动应用到每个DOM对象上"><a href="#且jQuery简化版API都子代forEach（遍历）效果；只需调用一次，即可自动应用到每个DOM对象上" class="headerlink" title="且jQuery简化版API都子代forEach（遍历）效果；只需调用一次，即可自动应用到每个DOM对象上"></a>且jQuery简化版API都子代forEach（遍历）效果；只需调用一次，即可自动应用到每个DOM对象上</h6><h6 id="终极简化-所有jQuery-…-都可简化为-…"><a href="#终极简化-所有jQuery-…-都可简化为-…" class="headerlink" title="终极简化: 所有jQuery(…), 都可简化为$(…)"></a>终极简化: 所有jQuery(…), 都可简化为$(…)</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.jQuery=<span class="built_in">window</span>.$=jQuery;</span><br></pre></td></tr></table></figure>
<h6 id="Chrome：控制台中也可以使用-“选择器”-查找元素（只提供-函数，并不包含jQuery）"><a href="#Chrome：控制台中也可以使用-“选择器”-查找元素（只提供-函数，并不包含jQuery）" class="headerlink" title="Chrome：控制台中也可以使用$(“选择器”)查找元素（只提供$函数，并不包含jQuery）"></a>Chrome：控制台中也可以使用$(“选择器”)查找元素（只提供$函数，并不包含jQuery）</h6><h6 id="Chrome：控制台也提供了-函数，类似于jQuery的-，但无需引入jQuery也可使用"><a href="#Chrome：控制台也提供了-函数，类似于jQuery的-，但无需引入jQuery也可使用" class="headerlink" title="Chrome：控制台也提供了$函数，类似于jQuery的$，但无需引入jQuery也可使用"></a>Chrome：控制台也提供了$函数，类似于jQuery的$，但无需引入jQuery也可使用</h6><h6 id="如何：只找一个：-“选择器”-相当于querySelector"><a href="#如何：只找一个：-“选择器”-相当于querySelector" class="headerlink" title="如何：只找一个：$(“选择器”)相当于querySelector"></a>如何：只找一个：$(“选择器”)相当于querySelector</h6><h6 id="找多个：-“选择器”-相当于querySelectorAll"><a href="#找多个：-“选择器”-相当于querySelectorAll" class="headerlink" title="找多个：$$(“选择器”)相当于querySelectorAll"></a>找多个：$$(“选择器”)相当于querySelectorAll</h6><h6 id="学习jQuery，还是在学DOM：查找-gt-绑定事件-gt-修改-gt-添加-删除"><a href="#学习jQuery，还是在学DOM：查找-gt-绑定事件-gt-修改-gt-添加-删除" class="headerlink" title="学习jQuery，还是在学DOM：查找-&gt;绑定事件-&gt;修改-&gt;添加/删除"></a>学习jQuery，还是在学DOM：查找-&gt;绑定事件-&gt;修改-&gt;添加/删除</h6><h2 id="查找-选择器：css，jQuery新增"><a href="#查找-选择器：css，jQuery新增" class="headerlink" title="查找: 选择器：css，jQuery新增"></a>查找: 选择器：css，jQuery新增</h2><h4 id="1、按选择器查找"><a href="#1、按选择器查找" class="headerlink" title="1、按选择器查找:"></a>1、按选择器查找:</h4><h3 id="基本选择器-5个-同CSS"><a href="#基本选择器-5个-同CSS" class="headerlink" title="基本选择器: 5个: 同CSS"></a>基本选择器: 5个: 同CSS</h3><h6 id="id"><a href="#id" class="headerlink" title="id"></a>id</h6><h6 id="element"><a href="#element" class="headerlink" title="element"></a>element</h6><h6 id="class"><a href="#class" class="headerlink" title=".class"></a>.class</h6><h6 id=""><a href="#" class="headerlink" title="*"></a>*</h6><h6 id="selector1-selector2-…"><a href="#selector1-selector2-…" class="headerlink" title="selector1,selector2,…"></a>selector1,selector2,…</h6><h4 id="修改css样式-DOM-elem-style-css属性-值"><a href="#修改css样式-DOM-elem-style-css属性-值" class="headerlink" title="修改css样式: DOM: elem.style.css属性=值"></a>修改css样式: DOM: elem.style.css属性=值</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">JQ: $(...).css(<span class="string">&quot;属性名&quot;</span>,值);</span><br></pre></td></tr></table></figure>
<h4 id="绑定事件"><a href="#绑定事件" class="headerlink" title="绑定事件:"></a>绑定事件:</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">DOM: elem.onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;...&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">JQ:$(...).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;...&#125;);</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">强调: 对 $(...)调用一次API，相当于自动对 $(...)找到的每个DOM元素分别调用API——自带forEach</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="built_in">this</span>.innerHTML);</span><br><span class="line">&#125;);   <span class="comment">//会给所有button元素绑定单击事件</span></span><br></pre></td></tr></table></figure>
<h3 id="层级选择器-2组-4个-同CSS"><a href="#层级选择器-2组-4个-同CSS" class="headerlink" title="层级选择器 : 2组 4个: 同CSS"></a>层级选择器 : 2组 4个: 同CSS</h3><h4 id="父子-parent-child-所有后代"><a href="#父子-parent-child-所有后代" class="headerlink" title="父子: parent  child  所有后代"></a>父子: parent  child  所有后代</h4><h4 id="parent-gt-child-直接子代"><a href="#parent-gt-child-直接子代" class="headerlink" title="parent&gt;child 直接子代"></a>parent&gt;child 直接子代</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;div:eq(3)&quot;</span>).css(<span class="string">&quot;border&quot;</span>,<span class="string">&quot;2px solid red&quot;</span>);</span><br><span class="line">$(<span class="string">&quot;div :eq(3)&quot;</span>).css(<span class="string">&quot;border&quot;</span>,<span class="string">&quot;2px solid red&quot;</span>);</span><br></pre></td></tr></table></figure>

<h6 id="强调：如果div与伪类选择器直接用，则选择的是所有div元素，如果加空格，则为div的后代元素"><a href="#强调：如果div与伪类选择器直接用，则选择的是所有div元素，如果加空格，则为div的后代元素" class="headerlink" title="强调：如果div与伪类选择器直接用，则选择的是所有div元素，如果加空格，则为div的后代元素"></a>强调：如果div与伪类选择器直接用，则选择的是所有div元素，如果加空格，则为div的后代元素</h6><h3 id="兄弟"><a href="#兄弟" class="headerlink" title="兄弟:"></a>兄弟:</h3><h6 id="child1-next-紧邻child1的下一个，且满足next的要求"><a href="#child1-next-紧邻child1的下一个，且满足next的要求" class="headerlink" title="child1+next  紧邻child1的下一个，且满足next的要求"></a>child1+next  紧邻child1的下一个，且满足next的要求</h6><h6 id="child1-nextsiblings-不必紧邻，只要满足nextsiblings的要求"><a href="#child1-nextsiblings-不必紧邻，只要满足nextsiblings的要求" class="headerlink" title="child1~nextsiblings 不必紧邻，只要满足nextsiblings的要求"></a>child1~nextsiblings 不必紧邻，只要满足nextsiblings的要求</h6><h3 id="过滤选择器"><a href="#过滤选择器" class="headerlink" title="过滤选择器"></a>过滤选择器</h3><h5 id="基本过滤：位置过滤——jQuery独有，css没有"><a href="#基本过滤：位置过滤——jQuery独有，css没有" class="headerlink" title="基本过滤：位置过滤——jQuery独有，css没有"></a>基本过滤：位置过滤——jQuery独有，css没有</h5><h5 id="什么是：根据元素在查找结果集合中的下标位置选择元素；从0开始"><a href="#什么是：根据元素在查找结果集合中的下标位置选择元素；从0开始" class="headerlink" title="什么是：根据元素在查找结果集合中的下标位置选择元素；从0开始"></a>什么是：根据元素在查找结果集合中的下标位置选择元素；从0开始</h5><h5 id="何时：只要希望根据元素在结果集合中的位置查找元素"><a href="#何时：只要希望根据元素在结果集合中的位置查找元素" class="headerlink" title="何时：只要希望根据元素在结果集合中的位置查找元素"></a>何时：只要希望根据元素在结果集合中的位置查找元素</h5><h5 id="强调："><a href="#强调：" class="headerlink" title="强调："></a>强调：</h5><h6 id="1-将所有元素先查找到集合中，再按下表过滤"><a href="#1-将所有元素先查找到集合中，再按下表过滤" class="headerlink" title="1.将所有元素先查找到集合中，再按下表过滤"></a>1.将所有元素先查找到集合中，再按下表过滤</h6><h6 id="2-下标从0开始"><a href="#2-下标从0开始" class="headerlink" title="2.下标从0开始"></a>2.下标从0开始</h6><h6 id="3-和元素在父元素中的相对位置无关"><a href="#3-和元素在父元素中的相对位置无关" class="headerlink" title="3.和元素在父元素中的相对位置无关"></a>3.和元素在父元素中的相对位置无关</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">:first/last      获取结果集合中第一个/最后一个元素，一个集合中只能找到一个</span><br><span class="line">:odd/even    获取结果集合中偶数/奇数位置的元素</span><br><span class="line">:eq/gt/lt(i)    获取结果集合中小于等于/大于等于/等于 i 位置的元素</span><br></pre></td></tr></table></figure>

<h6 id="强调：用此选择器时需要注意在冒号前加父元素-如果不加则会按照html-gt-head-gt-body顺序查找"><a href="#强调：用此选择器时需要注意在冒号前加父元素-如果不加则会按照html-gt-head-gt-body顺序查找" class="headerlink" title="强调：用此选择器时需要注意在冒号前加父元素,如果不加则会按照html-&gt;head-&gt;body顺序查找"></a>强调：用此选择器时需要注意在冒号前加父元素,如果不加则会按照html-&gt;head-&gt;body顺序查找</h6><h6 id="如果不加父元素会从html到body中按照深度优先的顺序查找元素"><a href="#如果不加父元素会从html到body中按照深度优先的顺序查找元素" class="headerlink" title="如果不加父元素会从html到body中按照深度优先的顺序查找元素"></a>如果不加父元素会从html到body中按照深度优先的顺序查找元素</h6><p><img src="http://imagehosting.biz/images/2018/04/10/2017612633162420421.jpg" alt="我是图片"></p>
<h6 id="特殊"><a href="#特殊" class="headerlink" title="特殊"></a>特殊</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">:animated     选择正在播放动画的元素</span><br><span class="line">:not(selector)      否定伪类,同CSS  </span><br></pre></td></tr></table></figure>

<h6 id="选择class不为one的div元素"><a href="#选择class不为one的div元素" class="headerlink" title="选择class不为one的div元素"></a>选择class不为one的div元素</h6><h6 id="练习-同时修改多个css属性"><a href="#练习-同时修改多个css属性" class="headerlink" title="练习: 同时修改多个css属性;"></a>练习: 同时修改多个css属性;</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">    $(...).css(&#123;</span><br><span class="line">     属性名:”值”,</span><br><span class="line">     属性名:”值”,</span><br><span class="line">       ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h6 id="强调-1-jQuery中的css属性名都要去横线变驼峰"><a href="#强调-1-jQuery中的css属性名都要去横线变驼峰" class="headerlink" title="强调:1. jQuery中的css属性名都要去横线变驼峰"></a>强调:1. jQuery中的css属性名都要去横线变驼峰</h6><h6 id="强烈建议：只要在js中css样式都要去横线变驼峰"><a href="#强烈建议：只要在js中css样式都要去横线变驼峰" class="headerlink" title="强烈建议：只要在js中css样式都要去横线变驼峰"></a>强烈建议：只要在js中css样式都要去横线变驼峰</h6><h6 id="2-如果属性值为数字，可不用加引号，且可省略单位，仅限单个数字，像padding需要多个数字则需要引号"><a href="#2-如果属性值为数字，可不用加引号，且可省略单位，仅限单个数字，像padding需要多个数字则需要引号" class="headerlink" title="2.如果属性值为数字，可不用加引号，且可省略单位，仅限单个数字，像padding需要多个数字则需要引号"></a>2.如果属性值为数字，可不用加引号，且可省略单位，仅限单个数字，像padding需要多个数字则需要引号</h6><p><img src="http://imagehosting.biz/images/2018/04/10/1905304117454696340.jpg" alt="我是图片"></p>
<h3 id="子元素过滤：选择在父元素下指定位置的子元素"><a href="#子元素过滤：选择在父元素下指定位置的子元素" class="headerlink" title="子元素过滤：选择在父元素下指定位置的子元素"></a>子元素过滤：选择在父元素下指定位置的子元素</h3><h6 id="什么是：根据元素在其父元素中的相对位置选择"><a href="#什么是：根据元素在其父元素中的相对位置选择" class="headerlink" title="什么是：根据元素在其父元素中的相对位置选择"></a>什么是：根据元素在其父元素中的相对位置选择</h6><h6 id="何时：只要根据元素再起父元素中位置选择"><a href="#何时：只要根据元素再起父元素中位置选择" class="headerlink" title="何时：只要根据元素再起父元素中位置选择"></a>何时：只要根据元素再起父元素中位置选择</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">:first-child第一个子元素</span><br><span class="line">:last-child最后一个子元素</span><br><span class="line">:nth-child(n/even/odd/<span class="number">2n</span>/<span class="number">2n</span>+<span class="number">1</span>)获得结果在其父元素中的位置，此时下标从<span class="number">1</span>开始</span><br><span class="line">:only-child选择仅有的一个子元素（选择独生子女）</span><br></pre></td></tr></table></figure>
<p><img src="http://imagehosting.biz/images/2018/04/10/1855483046576991784.jpg" alt="我是图片"><br><img src="http://imagehosting.biz/images/2018/04/10/6631637312725988121.jpg" alt="我是图片"></p>
<h6 id="问题-旧浏览器不支持-last-child-nth-child"><a href="#问题-旧浏览器不支持-last-child-nth-child" class="headerlink" title="问题: 旧浏览器不支持:last-child,:nth-child"></a>问题: 旧浏览器不支持:last-child,:nth-child</h6><h6 id="解决-凡是jQuery让使用的，都已经解决了兼容性问题"><a href="#解决-凡是jQuery让使用的，都已经解决了兼容性问题" class="headerlink" title="解决: 凡是jQuery让使用的，都已经解决了兼容性问题"></a>解决: 凡是jQuery让使用的，都已经解决了兼容性问题</h6><h3 id="基本过滤-vs-子元素过滤"><a href="#基本过滤-vs-子元素过滤" class="headerlink" title="基本过滤 vs 子元素过滤"></a>基本过滤 vs 子元素过滤</h3><h6 id="子元素过滤-相对于自己的父元素内定位，下标从1开始"><a href="#子元素过滤-相对于自己的父元素内定位，下标从1开始" class="headerlink" title="子元素过滤 相对于自己的父元素内定位，下标从1开始"></a>子元素过滤 相对于自己的父元素内定位，下标从1开始</h6><h6 id="基本过滤-先将所有元素放入结果集合，再在结果集合中定义，下标从0开始"><a href="#基本过滤-先将所有元素放入结果集合，再在结果集合中定义，下标从0开始" class="headerlink" title="基本过滤  先将所有元素放入结果集合，再在结果集合中定义，下标从0开始"></a>基本过滤  先将所有元素放入结果集合，再在结果集合中定义，下标从0开始</h6><h5 id="内容过滤-根据元素的内容，选择满足条件的父元素"><a href="#内容过滤-根据元素的内容，选择满足条件的父元素" class="headerlink" title="内容过滤: 根据元素的内容，选择满足条件的父元素"></a>内容过滤: 根据元素的内容，选择满足条件的父元素</h5><h3 id="contains-text-选择内容中包含指定文本的父元素"><a href="#contains-text-选择内容中包含指定文本的父元素" class="headerlink" title="contains(text)选择内容中包含指定文本的父元素"></a><strong>contains(text)选择内容中包含指定文本的父元素</strong></h3><h6 id="比如-span-contains-“购物车”"><a href="#比如-span-contains-“购物车”" class="headerlink" title="比如: span:contains(“购物车”)"></a>比如: span:contains(“购物车”)</h6><h4 id="强调：只能是文字中包含text的，如果是标签名中包含则不选择"><a href="#强调：只能是文字中包含text的，如果是标签名中包含则不选择" class="headerlink" title="强调：只能是文字中包含text的，如果是标签名中包含则不选择"></a>强调：只能是文字中包含text的，如果是标签名中包含则不选择</h4><h6 id="empty-选择不包含任何内容的空的父元素"><a href="#empty-选择不包含任何内容的空的父元素" class="headerlink" title=":empty  选择不包含任何内容的空的父元素"></a>:empty  选择不包含任何内容的空的父元素</h6><h6 id="parent-选择内容不为空的元素。-not-empty-选择只要包含内容（文字-子元素（标签））的任意父元素"><a href="#parent-选择内容不为空的元素。-not-empty-选择只要包含内容（文字-子元素（标签））的任意父元素" class="headerlink" title=":parent  选择内容不为空的元素。:not(:empty)选择只要包含内容（文字,子元素（标签））的任意父元素"></a>:parent  选择内容不为空的元素。:not(:empty)选择只要包含内容（文字,子元素（标签））的任意父元素</h6><h6 id="has-selector-选择内容中包含符合selector要求的子元素的父元素"><a href="#has-selector-选择内容中包含符合selector要求的子元素的父元素" class="headerlink" title=":has(selector) 选择内容中包含符合selector要求的子元素的父元素"></a>:has(selector) 选择内容中包含符合selector要求的子元素的父元素</h6><h6 id="选择包含class为active的子元素的父元素li-li-has-a-active"><a href="#选择包含class为active的子元素的父元素li-li-has-a-active" class="headerlink" title="选择包含class为active的子元素的父元素li        li:has(a.active)"></a>选择包含class为active的子元素的父元素li        li:has(a.active)</h6><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">aclass=active</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h6 id="可见性过滤-visible-选择所有可见元素"><a href="#可见性过滤-visible-选择所有可见元素" class="headerlink" title="可见性过滤: :visible    选择所有可见元素"></a>可见性过滤: :visible    选择所有可见元素</h6><h6 id="hidden选择所有不可见的元素"><a href="#hidden选择所有不可见的元素" class="headerlink" title=":hidden选择所有不可见的元素"></a>:hidden选择所有不可见的元素</h6><h6 id="只能选择display-none-input-type-hidden的"><a href="#只能选择display-none-input-type-hidden的" class="headerlink" title="只能选择display:none;  input type=hidden的"></a>只能选择display:none;  input type=hidden的</h6><h6 id="网页中所有隐藏样式：display-none-visibility-hidden-opacity-0-type-”hidden”"><a href="#网页中所有隐藏样式：display-none-visibility-hidden-opacity-0-type-”hidden”" class="headerlink" title="网页中所有隐藏样式：display:none;      visibility:hidden;  opacity:0; type=”hidden”"></a>网页中所有隐藏样式：display:none;      visibility:hidden;  opacity:0; type=”hidden”</h6><h3 id="属性选择器-同CSS"><a href="#属性选择器-同CSS" class="headerlink" title="属性选择器: 同CSS"></a><strong>属性选择器: 同CSS</strong></h3><h6 id="什么是：按照任意属性的任意值选择元素"><a href="#什么是：按照任意属性的任意值选择元素" class="headerlink" title="什么是：按照任意属性的任意值选择元素"></a>什么是：按照任意属性的任意值选择元素</h6><h6 id="何时：只要按-除id，元素，class之外的其他属性作为条件查找时，甚至模糊查找时"><a href="#何时：只要按-除id，元素，class之外的其他属性作为条件查找时，甚至模糊查找时" class="headerlink" title="何时：只要按 除id，元素，class之外的其他属性作为条件查找时，甚至模糊查找时"></a>何时：只要按 除id，元素，class之外的其他属性作为条件查找时，甚至模糊查找时</h6><h6 id="属性名-选择包含指定属性的元素"><a href="#属性名-选择包含指定属性的元素" class="headerlink" title="[属性名]选择包含指定属性的元素"></a>[属性名]选择包含指定属性的元素</h6><h6 id="属性名-值-选择包含指定属性且属性值为指定值的元素"><a href="#属性名-值-选择包含指定属性且属性值为指定值的元素" class="headerlink" title="[属性名=值]选择包含指定属性且属性值为指定值的元素"></a>[属性名=值]选择包含指定属性且属性值为指定值的元素</h6><h6 id="属性名-值-以值开头"><a href="#属性名-值-以值开头" class="headerlink" title="[属性名^=值]以值开头"></a>[属性名^=值]以值开头</h6><h6 id="属性名-值-以值结尾"><a href="#属性名-值-以值结尾" class="headerlink" title="[属性名$=值]以值结尾"></a>[属性名$=值]以值结尾</h6><h6 id="属性名-值-选择属性值包含指定值的元素"><a href="#属性名-值-选择属性值包含指定值的元素" class="headerlink" title="[属性名*=值]选择属性值包含指定值的元素"></a>[属性名*=值]选择属性值包含指定值的元素</h6><h6 id="属性名-值-not-属性名-值-选择属性值不等于指定值的元素"><a href="#属性名-值-not-属性名-值-选择属性值不等于指定值的元素" class="headerlink" title="[属性名!=值]:not([属性名=值]) 选择属性值不等于指定值的元素"></a>[属性名!=值]:not([属性名=值]) 选择属性值不等于指定值的元素</h6><h6 id="强调-即选择包含title属性，但值不符合"><a href="#强调-即选择包含title属性，但值不符合" class="headerlink" title="强调: 即选择包含title属性，但值不符合"></a>强调: 即选择包含title属性，但值不符合</h6><h6 id="也选择不包含title属性的"><a href="#也选择不包含title属性的" class="headerlink" title="也选择不包含title属性的"></a>也选择不包含title属性的</h6><h6 id="特殊：-属性选择器1-属性选择器2-…-而且"><a href="#特殊：-属性选择器1-属性选择器2-…-而且" class="headerlink" title="特殊：[属性选择器1][属性选择器2]…  而且"></a>特殊：[属性选择器1][属性选择器2]…  而且</h6><h6 id="练习-jQuery事件处理函数的this可获得当前DOM对象"><a href="#练习-jQuery事件处理函数的this可获得当前DOM对象" class="headerlink" title="练习: jQuery事件处理函数的this可获得当前DOM对象"></a>练习: jQuery事件处理函数的this可获得当前DOM对象</h6><h6 id="但无法使用jQuery简化版API"><a href="#但无法使用jQuery简化版API" class="headerlink" title="但无法使用jQuery简化版API"></a>但无法使用jQuery简化版API</h6><h6 id="需要-this"><a href="#需要-this" class="headerlink" title="需要$(this)"></a>需要$(this)</h6><h6 id="点击菜单-菜单切换"><a href="#点击菜单-菜单切换" class="headerlink" title="点击菜单/菜单切换"></a>点击菜单/菜单切换</h6><p><img src="http://imagehosting.biz/images/2018/04/10/1494913601410482119.jpg" alt="我是图片"></p>
<p><img src="http://imagehosting.biz/images/2018/04/10/795166809307966232.jpg" alt="我是图片"></p>
<h3 id="jQuery-API通用规律"><a href="#jQuery-API通用规律" class="headerlink" title="jQuery API通用规律"></a><strong>jQuery API通用规律</strong></h3><h4 id="1、所有API自带遍历-子代forEach"><a href="#1、所有API自带遍历-子代forEach" class="headerlink" title="1、所有API自带遍历: 子代forEach"></a>1、所有API自带遍历: 子代forEach</h4><h6 id="对jQuery对象调用的修改，会自动应用到集合中每个DOM元素上"><a href="#对jQuery对象调用的修改，会自动应用到集合中每个DOM元素上" class="headerlink" title="对jQuery对象调用的修改，会自动应用到集合中每个DOM元素上"></a>对jQuery对象调用的修改，会自动应用到集合中每个DOM元素上</h6><h4 id="2、所有API都返回正在查询的结果集合，可使用链式操作对同一个结果集合执行多个操作。"><a href="#2、所有API都返回正在查询的结果集合，可使用链式操作对同一个结果集合执行多个操作。" class="headerlink" title="2、所有API都返回正在查询的结果集合，可使用链式操作对同一个结果集合执行多个操作。"></a>2、所有API都返回正在查询的结果集合，可使用链式操作对同一个结果集合执行多个操作。</h4><h4 id="3、一个API两用-如果提供了新值，就修改。没提供新值就获取"><a href="#3、一个API两用-如果提供了新值，就修改。没提供新值就获取" class="headerlink" title="3、一个API两用: 如果提供了新值，就修改。没提供新值就获取"></a>3、一个API两用: 如果提供了新值，就修改。没提供新值就获取</h4><h6 id="修改-…-css-属性名-值"><a href="#修改-…-css-属性名-值" class="headerlink" title="修改: $(…).css(属性名,值)"></a>修改: $(…).css(属性名,值)</h6><h6 id="获取-var-value-…-css-属性名"><a href="#获取-var-value-…-css-属性名" class="headerlink" title="获取: var value=$(…).css(属性名)"></a>获取: var value=$(…).css(属性名)</h6><h3 id="表单元素选择器"><a href="#表单元素选择器" class="headerlink" title="表单元素选择器"></a><strong>表单元素选择器</strong></h3><h4 id="什么是：利用表单元素的标签名和type属性值选择表单中的元素"><a href="#什么是：利用表单元素的标签名和type属性值选择表单中的元素" class="headerlink" title="什么是：利用表单元素的标签名和type属性值选择表单中的元素"></a>什么是：利用表单元素的标签名和type属性值选择表单中的元素</h4><h4 id="何时：只要查找表单中的表单元素时"><a href="#何时：只要查找表单中的表单元素时" class="headerlink" title="何时：只要查找表单中的表单元素时"></a>何时：只要查找表单中的表单元素时</h4><h5 id="input选择所有表单元素（input-select-textarea-button）"><a href="#input选择所有表单元素（input-select-textarea-button）" class="headerlink" title=":input选择所有表单元素（input select textarea button）"></a>:input选择所有表单元素（input select textarea button）</h5><h5 id="type-按type属性查找"><a href="#type-按type属性查找" class="headerlink" title=":[type]按type属性查找:"></a>:[type]按type属性查找:</h5><h6 id="比如-text-password-checkbox-radio"><a href="#比如-text-password-checkbox-radio" class="headerlink" title="比如: :text  :password   :checkbox  :radio"></a>比如: :text  :password   :checkbox  :radio</h6><h6 id="submit-reset-button-hidden-file-image"><a href="#submit-reset-button-hidden-file-image" class="headerlink" title=":submit :reset :button   :hidden  :file :image"></a>:submit :reset :button   :hidden  :file :image</h6><h3 id="状态过滤选择器"><a href="#状态过滤选择器" class="headerlink" title="状态过滤选择器"></a><strong>状态过滤选择器</strong></h3><h4 id="什么是：选择处于三大状态之一的元素；"><a href="#什么是：选择处于三大状态之一的元素；" class="headerlink" title="什么是：选择处于三大状态之一的元素；"></a>什么是：选择处于三大状态之一的元素；</h4><h4 id="何时：只要根据元素状态选择元素时"><a href="#何时：只要根据元素状态选择元素时" class="headerlink" title="何时：只要根据元素状态选择元素时"></a>何时：只要根据元素状态选择元素时</h4><h6 id="enabled-disabled-checked-selected"><a href="#enabled-disabled-checked-selected" class="headerlink" title=":enabled :disabled  :checked  :selected"></a>:enabled :disabled  :checked  :selected</h6><p><img src="http://imagehosting.biz/images/2018/04/10/2605050909477263008.jpg" alt="我是图片"></p>
<p><img src="http://imagehosting.biz/images/2018/04/10/6597985659844640270.jpg" alt="我是图片"></p>
<h3 id="问题1-css只能修改css属性"><a href="#问题1-css只能修改css属性" class="headerlink" title="问题1: .css只能修改css属性"></a><strong>问题1: .css只能修改css属性</strong></h3><h6 id="解决-attr-“属性名”-新值-可修改标准属性"><a href="#解决-attr-“属性名”-新值-可修改标准属性" class="headerlink" title="解决:.attr(“属性名”,新值) 可修改标准属性"></a>解决:.attr(“属性名”,新值) 可修改标准属性</h6><h6 id="attr-“属性名”-获取属性值"><a href="#attr-“属性名”-获取属性值" class="headerlink" title=".attr(“属性名”) 获取属性值"></a>.attr(“属性名”) 获取属性值</h6><h3 id="总结-jQuery-API第二大特定"><a href="#总结-jQuery-API第二大特定" class="headerlink" title="总结: jQuery API第二大特定:"></a><strong>总结: jQuery API第二大特定:</strong></h3><h5 id="一个函数两用-没提供新值，就读取属性现有值；提供了新值，就修改属性为新值"><a href="#一个函数两用-没提供新值，就读取属性现有值；提供了新值，就修改属性为新值" class="headerlink" title="一个函数两用: 没提供新值，就读取属性现有值；提供了新值，就修改属性为新值"></a>一个函数两用: 没提供新值，就读取属性现有值；提供了新值，就修改属性为新值</h5><h3 id="问题2-attr无法访问三大状态属性"><a href="#问题2-attr无法访问三大状态属性" class="headerlink" title="问题2: .attr无法访问三大状态属性"></a><strong>问题2: .attr无法访问三大状态属性</strong></h3><h6 id="解决-prop-专门操作三大状态属性"><a href="#解决-prop-专门操作三大状态属性" class="headerlink" title="解决: .prop() 专门操作三大状态属性"></a>解决: .prop() 专门操作三大状态属性</h6>]]></content>
      <categories>
        <category>jQuery</category>
      </categories>
  </entry>
  <entry>
    <title>jQuery 节点选择器、修改、绑定事件</title>
    <url>/2018/07/01/jQuery%E8%8A%82%E7%82%B9%E9%80%89%E6%8B%A9%E5%99%A8%E3%80%81%E4%BF%AE%E6%94%B9%E3%80%81%E7%BB%91%E5%AE%9A%E4%BA%8B%E4%BB%B6/</url>
    <content><![CDATA[<h2 id="按节点间关系"><a href="#按节点间关系" class="headerlink" title="按节点间关系"></a>按节点间关系</h2><h6 id="何时：如果已经获得一个元素，找周围的元素时"><a href="#何时：如果已经获得一个元素，找周围的元素时" class="headerlink" title="何时：如果已经获得一个元素，找周围的元素时"></a>何时：如果已经获得一个元素，找周围的元素时</h6><p><strong>父子: $(child).parent()              child.parentNode</strong><br><strong>$(parent).children([selector])  parent.children</strong></p>
<h6 id="强调："><a href="#强调：" class="headerlink" title="强调："></a>强调：</h6><h6 id="1-仅查找直接子节点"><a href="#1-仅查找直接子节点" class="headerlink" title="1.仅查找直接子节点"></a>1.仅查找直接子节点</h6><h6 id="2-带中括号-，表示选择器可用可不用；可用选择器仅选择感兴趣的子节点，但选择器可写可不写"><a href="#2-带中括号-，表示选择器可用可不用；可用选择器仅选择感兴趣的子节点，但选择器可写可不写" class="headerlink" title="2.带中括号[ ]，表示选择器可用可不用；可用选择器仅选择感兴趣的子节点，但选择器可写可不写"></a>2.带中括号[ ]，表示选择器可用可不用；可用选择器仅选择感兴趣的子节点，但选择器可写可不写</h6><h6 id="获得parent下直接子元素中符合selector条件的"><a href="#获得parent下直接子元素中符合selector条件的" class="headerlink" title="获得parent下直接子元素中符合selector条件的"></a>获得parent下直接子元素中符合selector条件的</h6><h6 id="parent-find-selector"><a href="#parent-find-selector" class="headerlink" title="$(parent).find(selector)"></a>$(parent).find(selector)</h6><h6 id="强调：1-不但查找直接子元素，且查找后代元素"><a href="#强调：1-不但查找直接子元素，且查找后代元素" class="headerlink" title="强调：1.不但查找直接子元素，且查找后代元素"></a>强调：1.不但查找直接子元素，且查找后代元素</h6><h4 id="选择器必须写"><a href="#选择器必须写" class="headerlink" title="选择器必须写"></a><strong>选择器必须写</strong></h4><h6 id="获得parent下所有后代元素中符合selector条件的"><a href="#获得parent下所有后代元素中符合selector条件的" class="headerlink" title="获得parent下所有后代元素中符合selector条件的"></a>获得parent下所有后代元素中符合selector条件的</h6><h6 id="parent-children-first-parent-firstChild"><a href="#parent-children-first-parent-firstChild" class="headerlink" title="$(parent).children().first()      parent.firstChild"></a>$(parent).children().first()      parent.firstChild</h6><h6 id="parent-children-last-parent-lastChild"><a href="#parent-children-last-parent-lastChild" class="headerlink" title="$(parent).children().last()      parent.lastChild"></a>$(parent).children().last()      parent.lastChild</h6><h6 id="2、兄弟-…-prev-选择和当前元素紧邻的前一个兄弟"><a href="#2、兄弟-…-prev-选择和当前元素紧邻的前一个兄弟" class="headerlink" title="2、兄弟: $(…).prev() 选择和当前元素紧邻的前一个兄弟"></a>2、兄弟: $(…).prev() 选择和当前元素紧邻的前一个兄弟</h6><h6 id="强调-必须紧邻的前一个"><a href="#强调-必须紧邻的前一个" class="headerlink" title="强调: 必须紧邻的前一个"></a>强调: 必须紧邻的前一个</h6><h6 id="…-prev-selector"><a href="#…-prev-selector" class="headerlink" title="$(…).prev([selector])"></a>$(…).prev([selector])</h6><h6 id="要求-必须紧邻的前一个且满足selector"><a href="#要求-必须紧邻的前一个且满足selector" class="headerlink" title="要求: 必须紧邻的前一个且满足selector"></a>要求: 必须紧邻的前一个且满足selector</h6><h6 id="…-prevAll-selector-选择当前元素之前的所有兄弟"><a href="#…-prevAll-selector-选择当前元素之前的所有兄弟" class="headerlink" title="$(…).prevAll([selector])选择当前元素之前的所有兄弟"></a>$(…).prevAll([selector])选择当前元素之前的所有兄弟</h6><h6 id="…-next-…-nextAll-…-同prev-prevAll"><a href="#…-next-…-nextAll-…-同prev-prevAll" class="headerlink" title="$(…).next(…)/.nextAll(…)同prev/prevAll"></a>$(…).next(…)/.nextAll(…)同prev/prevAll</h6><h6 id="…-siblings-selector-除自己之外的所有前后的平级兄弟"><a href="#…-siblings-selector-除自己之外的所有前后的平级兄弟" class="headerlink" title="$(…).siblings([selector])除自己之外的所有前后的平级兄弟"></a>$(…).siblings([selector])除自己之外的所有前后的平级兄弟</h6><h2 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h2><h4 id="内容"><a href="#内容" class="headerlink" title="内容:"></a><strong>内容</strong>:</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(...).html([html代码片段])-&gt; elem.innerHTML</span><br><span class="line">$(...).text([文本]) -&gt;elem.textContent</span><br><span class="line">$(...).val([值]) -&gt; elem.value</span><br><span class="line">$(...).empty() 清空元素的内容</span><br></pre></td></tr></table></figure>
<h6 id="属性-…-attr-“属性名”-”值”-gt-elem-属性-不写值是获取，写值为修改"><a href="#属性-…-attr-“属性名”-”值”-gt-elem-属性-不写值是获取，写值为修改" class="headerlink" title="属性: $(…).attr(“属性名”[,”值”]) -&gt; elem.属性    不写值是获取，写值为修改"></a><strong>属性</strong>: $(…).attr(“属性名”[,”值”]) -&gt; elem.属性    <strong>不写值是获取，写值为修改</strong></h6><h6 id="移除属性-…-removeAttr-“属性名”"><a href="#移除属性-…-removeAttr-“属性名”" class="headerlink" title="移除属性: $(…).removeAttr(“属性名”)"></a>移除属性: $(…).removeAttr(“属性名”)</h6><h6 id="问题-不能访问三大状态-disabled-checked-selected"><a href="#问题-不能访问三大状态-disabled-checked-selected" class="headerlink" title="问题: 不能访问三大状态: disabled checked selected"></a>问题: 不能访问三大状态: disabled checked selected</h6><h6 id="解决-…-prop-…"><a href="#解决-…-prop-…" class="headerlink" title="解决: $(…).prop(…)"></a>解决: $(…).prop(…)</h6><h6 id="问题-一句attr只能修改一个属性"><a href="#问题-一句attr只能修改一个属性" class="headerlink" title="问题: 一句attr只能修改一个属性"></a>问题: 一句attr只能修改一个属性</h6><h6 id="解决-…-attr"><a href="#解决-…-attr" class="headerlink" title="解决: $(…).attr({"></a>解决: $(…).attr({</h6><h6 id="属性名-值"><a href="#属性名-值" class="headerlink" title="属性名: 值,"></a>属性名: 值,</h6><h6 id="…-…"><a href="#…-…" class="headerlink" title="… : … ,"></a>… : … ,</h6><h6 id=""><a href="#" class="headerlink" title="})"></a>})</h6><h6 id="样式-…-css-“属性名”-”值”"><a href="#样式-…-css-“属性名”-”值”" class="headerlink" title="样式:$(…).css(“属性名”[,”值”])"></a><strong>样式</strong>:$(…).css(“属性名”[,”值”])</h6><h6 id="获取：自动获取计算后的完整样式"><a href="#获取：自动获取计算后的完整样式" class="headerlink" title="获取：自动获取计算后的完整样式"></a>获取：自动获取计算后的完整样式</h6><h6 id="修改：自动仅修改内联样式"><a href="#修改：自动仅修改内联样式" class="headerlink" title="修改：自动仅修改内联样式"></a>修改：自动仅修改内联样式</h6><h6 id="强调-凡是从页面上获得的属性-样式的值都是字符串"><a href="#强调-凡是从页面上获得的属性-样式的值都是字符串" class="headerlink" title="强调: 凡是从页面上获得的属性/样式的值都是字符串"></a>强调: 凡是从页面上获得的属性/样式的值都是字符串</h6><h6 id="如要计算，必须先转为浮点数，去单位。"><a href="#如要计算，必须先转为浮点数，去单位。" class="headerlink" title="如要计算，必须先转为浮点数，去单位。"></a>如要计算，必须先转为浮点数，去单位。</h6><p><img src="https://s2.ax1x.com/2019/07/17/ZLul6O.png" alt="我是图片"></p>
<h6 id="修改一个css属性-…-css-“css属性名”-”值”"><a href="#修改一个css属性-…-css-“css属性名”-”值”" class="headerlink" title="修改一个css属性: $(…).css(“css属性名”[,”值”])"></a>修改一个css属性: $(…).css(“css属性名”[,”值”])</h6><h6 id="如果不给值，就获取css属性的值"><a href="#如果不给值，就获取css属性的值" class="headerlink" title="如果不给值，就获取css属性的值"></a>如果不给值，就获取css属性的值</h6><h6 id="强调-jq-修改-…-css-…-值-gt-elem-style-css属性"><a href="#强调-jq-修改-…-css-…-值-gt-elem-style-css属性" class="headerlink" title="强调: jq: 修改: $(…).css(…,值) =&gt; elem.style.css属性"></a><strong>强调</strong>: jq: 修改: $(…).css(…,值) =&gt; elem.style.css属性</h6><h6 id="获取-…-css-…-gt-getComputedStyle-elem"><a href="#获取-…-css-…-gt-getComputedStyle-elem" class="headerlink" title="获取: $(…).css(…) =&gt;getComputedStyle(elem)"></a><strong>获取</strong>: $(…).css(…) =&gt;getComputedStyle(elem)</h6><h6 id="同时修改多个css属性"><a href="#同时修改多个css属性" class="headerlink" title="同时修改多个css属性:"></a>同时修改多个css属性:</h6><h6 id="…-css"><a href="#…-css" class="headerlink" title="$(…).css({"></a>$(…).css({</h6><h6 id="css属性-值"><a href="#css属性-值" class="headerlink" title="css属性: 值,"></a>css属性: 值,</h6><h6 id="…-…-1"><a href="#…-…-1" class="headerlink" title="… : …"></a>… : …</h6><h6 id="-1"><a href="#-1" class="headerlink" title="})"></a>})</h6><h6 id="强调"><a href="#强调" class="headerlink" title="强调:"></a><strong>强调</strong>:</h6><h6 id="1-所有css属性名都要去横线变驼峰"><a href="#1-所有css属性名都要去横线变驼峰" class="headerlink" title="1. 所有css属性名都要去横线变驼峰"></a>1. 所有css属性名都要去横线变驼峰</h6><h6 id="2-如果属性值为数值-可省略引号和单位"><a href="#2-如果属性值为数值-可省略引号和单位" class="headerlink" title="2. 如果属性值为数值, 可省略引号和单位"></a>2. 如果属性值为数值, 可省略引号和单位</h6><h6 id="问题：要修改的css属性很多，则代码繁琐"><a href="#问题：要修改的css属性很多，则代码繁琐" class="headerlink" title="问题：要修改的css属性很多，则代码繁琐"></a>问题：要修改的css属性很多，则代码繁琐</h6><h6 id="解决：今后批量修改css，都要将css集中定义在class中，通过应用class来批量修改css样式"><a href="#解决：今后批量修改css，都要将css集中定义在class中，通过应用class来批量修改css样式" class="headerlink" title="解决：今后批量修改css，都要将css集中定义在class中，通过应用class来批量修改css样式"></a>解决：今后批量修改css，都要将css集中定义在class中，通过应用class来批量修改css样式</h6><h3 id="修改class"><a href="#修改class" class="headerlink" title="修改class:"></a><strong>修改class</strong>:</h3><h6 id="1-为元素添加class-…-addClass-“类名”-…"><a href="#1-为元素添加class-…-addClass-“类名”-…" class="headerlink" title="1. 为元素添加class : $(…).addClass(“类名”,…)"></a>1. 为元素添加class : $(…).addClass(“类名”,…)</h6><h6 id="2-从元素上移除类名-…-removeClass-“类名”"><a href="#2-从元素上移除类名-…-removeClass-“类名”" class="headerlink" title="2. 从元素上移除类名 : $(…).removeClass(“类名”)"></a>2. 从元素上移除类名 : $(…).removeClass(“类名”)</h6><h6 id="3-判断元素是否包含指定class-…-hasClass-“class”"><a href="#3-判断元素是否包含指定class-…-hasClass-“class”" class="headerlink" title="3. 判断元素是否包含指定class  $(…).hasClass(“class”)"></a>3. 判断元素是否包含指定class  $(…).hasClass(“class”)</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>($(...).hasClass(<span class="string">&quot;class&quot;</span>))$(...).removeClass(<span class="string">&quot;class&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span> $(...).addClass(<span class="string">&quot;class&quot;</span>)</span><br></pre></td></tr></table></figure>
<h6 id="4-切换-…-toggleClass-“class”"><a href="#4-切换-…-toggleClass-“class”" class="headerlink" title="4. 切换 $(…).toggleClass(“class”)"></a>4. 切换 $(…).toggleClass(“class”)</h6><h6 id="toggleClass只适合一个按钮切换class"><a href="#toggleClass只适合一个按钮切换class" class="headerlink" title="toggleClass只适合一个按钮切换class"></a>toggleClass只适合一个按钮切换class</h6><p><img src="https://s2.ax1x.com/2019/07/17/ZLu1XD.jpg" alt="我是图片"></p>
<h6 id="如果没有class为-in-的类，则添加in"><a href="#如果没有class为-in-的类，则添加in" class="headerlink" title="如果没有class为 in 的类，则添加in"></a>如果没有class为 in 的类，则添加in</h6><h2 id="添加，删除，替换，复制"><a href="#添加，删除，替换，复制" class="headerlink" title="添加，删除，替换，复制:"></a><strong>添加，删除，替换，复制</strong>:</h2><h4 id="添加-2步"><a href="#添加-2步" class="headerlink" title="添加: 2步:"></a><strong>添加</strong>: 2步:</h4><h6 id="1-使用HTML代码片段创建新元素"><a href="#1-使用HTML代码片段创建新元素" class="headerlink" title="1. 使用HTML代码片段创建新元素"></a><strong>1. 使用HTML代码片段创建新元素</strong></h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> $elem=$(<span class="string">&quot;html代码片段&quot;</span>)</span><br></pre></td></tr></table></figure>
<h6 id="强调：如果代码片段中即包含父元素，又包含子元素，则同时创建"><a href="#强调：如果代码片段中即包含父元素，又包含子元素，则同时创建" class="headerlink" title="强调：如果代码片段中即包含父元素，又包含子元素，则同时创建"></a>强调：如果代码片段中即包含父元素，又包含子元素，则同时创建</h6><h6 id="2-将新元素添加到页面（DOM树）"><a href="#2-将新元素添加到页面（DOM树）" class="headerlink" title="2. 将新元素添加到页面（DOM树）"></a><strong>2. 将新元素添加到页面（DOM树）</strong></h6><h6 id="1-向父元素下添加子元素"><a href="#1-向父元素下添加子元素" class="headerlink" title="1. 向父元素下添加子元素:"></a>1. 向父元素下添加子元素:</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(parent).append($elem) 末尾追加</span><br><span class="line">$(parent).prepend($elem) 开头插入</span><br></pre></td></tr></table></figure>
<h6 id="2-在现有子元素前后插入"><a href="#2-在现有子元素前后插入" class="headerlink" title="2. 在现有子元素前后插入:"></a>2. 在现有子元素前后插入:</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(child).after($elem) 在child之后插入elem</span><br><span class="line">$(child).before($elem) 在child之前插入 elem</span><br></pre></td></tr></table></figure>
<p><img src="https://s2.ax1x.com/2019/07/17/ZLuufx.jpg" alt="我是图片"></p>
<h4 id="删除-…-remove-selector"><a href="#删除-…-remove-selector" class="headerlink" title="删除: $(…).remove([selector])"></a><strong>删除</strong>: $(…).remove([selector])</h4><h4 id="替换"><a href="#替换" class="headerlink" title="替换:"></a><strong>替换</strong>:</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;selector&quot;</span>).replaceWith($elem/<span class="string">&quot;HTML片段&quot;</span>)</span><br><span class="line">    用右侧的$elem或<span class="string">&quot;HTML片段&quot;</span>，替换左侧查找到的元素</span><br><span class="line">$(<span class="string">&quot;HTML片段&quot;</span>).replaceAll(<span class="string">&quot;selector&quot;</span>)</span><br><span class="line">    用左侧的HTML片段替换右侧的selector选中的元素</span><br></pre></td></tr></table></figure>
<h4 id="克隆-复制一个元素"><a href="#克隆-复制一个元素" class="headerlink" title="克隆: 复制一个元素:"></a><strong>克隆: 复制一个元素</strong>:</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> $elem_copy=$(...).clone();</span><br></pre></td></tr></table></figure>
<h6 id="强调-不带参数的clone方法，只能复制样式和属性，不会复制行为-事件"><a href="#强调-不带参数的clone方法，只能复制样式和属性，不会复制行为-事件" class="headerlink" title="强调: 不带参数的clone方法，只能复制样式和属性，不会复制行为(事件)"></a>强调: 不带参数的clone方法，只能复制样式和属性，不会复制行为(事件)</h6><h6 id="如何-即复制属性-样式，又复制行为-…-clone-true"><a href="#如何-即复制属性-样式，又复制行为-…-clone-true" class="headerlink" title="如何:即复制属性/样式，又复制行为: $(…).clone(true)"></a>如何:即复制属性/样式，又复制行为: <strong>$(…).clone(true)</strong></h6><h6 id="练习-elem-is-selector"><a href="#练习-elem-is-selector" class="headerlink" title="练习: $(elem).is(selector)"></a>练习: <strong>$(elem).is(selector)</strong></h6><h6 id="判断elem是否符合selector的条件"><a href="#判断elem是否符合selector的条件" class="headerlink" title="判断elem是否符合selector的条件"></a><strong>判断elem是否符合selector的条件</strong></h6><p><img src="https://s2.ax1x.com/2019/07/17/ZLuQ1K.png" alt="我是图片"></p>
<h4 id="总结-jQuery是对DOM操作的终极简化函数库学jQuery-实际还是学DOM，心里始终想着DOM"><a href="#总结-jQuery是对DOM操作的终极简化函数库学jQuery-实际还是学DOM，心里始终想着DOM" class="headerlink" title="总结: jQuery是对DOM操作的终极简化函数库学jQuery, 实际还是学DOM，心里始终想着DOM"></a><strong>总结</strong>: jQuery是对DOM操作的终极简化函数库学jQuery, 实际还是学DOM，心里始终想着DOM</h4><h6 id="查找元素-1-按选择器查找。2-按节点间关系"><a href="#查找元素-1-按选择器查找。2-按节点间关系" class="headerlink" title="查找元素: 1. 按选择器查找。2. 按节点间关系"></a><strong>查找元素</strong>: 1. 按选择器查找。2. 按节点间关系</h6><h6 id="修改-1-内容-2-属性-3-样式"><a href="#修改-1-内容-2-属性-3-样式" class="headerlink" title="修改: 1. 内容  2. 属性   3. 样式"></a><strong>修改</strong>: 1. 内容  2. 属性   3. 样式</h6><h6 id="添加-2步-1"><a href="#添加-2步-1" class="headerlink" title="添加: 2步 :"></a><strong>添加</strong>: 2步 :</h6><h6 id="1-…-创建新元素-2-将新元素添加到DOM"><a href="#1-…-创建新元素-2-将新元素添加到DOM" class="headerlink" title="1. $(…)创建新元素  2. 将新元素添加到DOM"></a><strong>1</strong>. $(…)创建新元素  <strong>2</strong>. 将新元素添加到DOM</h6><h6 id="删除-…-remove"><a href="#删除-…-remove" class="headerlink" title="删除: $(…).remove();"></a><strong>删除</strong>: $(…).remove();</h6><h6 id="复制-…-clone-true"><a href="#复制-…-clone-true" class="headerlink" title="复制: $(…).clone(true);"></a><strong>复制</strong>: $(…).clone(true);</h6><h6 id="替换-…-replaceWith-…"><a href="#替换-…-replaceWith-…" class="headerlink" title="替换: $(…).replaceWith(…)"></a><strong>替换</strong>: $(…).replaceWith(…)</h6><h6 id="replaceAll"><a href="#replaceAll" class="headerlink" title="replaceAll"></a>replaceAll</h6><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a><strong>事件</strong></h2><h4 id="笔试-jQuery中共有几种事件绑定方式"><a href="#笔试-jQuery中共有几种事件绑定方式" class="headerlink" title="笔试 : jQuery中共有几种事件绑定方式"></a>笔试 : jQuery中共有几种事件绑定方式</h4><h6 id="1、-bind-unbind-gt-单纯代替add-removeEventListener"><a href="#1、-bind-unbind-gt-单纯代替add-removeEventListener" class="headerlink" title="1、.bind/unbind-&gt;单纯代替add/removeEventListener"></a>1、.bind/unbind-&gt;单纯代替add/removeEventListener</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(...).bind(<span class="string">&quot;事件名&quot;</span>,fn)</span><br></pre></td></tr></table></figure>
<h6 id="强调-1"><a href="#强调-1" class="headerlink" title="强调:"></a><strong>强调</strong>:</h6><h6 id="1-多数情况下-fn可使用匿名函数"><a href="#1-多数情况下-fn可使用匿名函数" class="headerlink" title="1. 多数情况下, fn可使用匿名函数"></a>1. 多数情况下, fn可使用匿名函数</h6><h6 id="2-如果可能移除事件绑定-则fn必须用有名的函数"><a href="#2-如果可能移除事件绑定-则fn必须用有名的函数" class="headerlink" title="2. 如果可能移除事件绑定,则fn必须用有名的函数"></a>2. 如果可能移除事件绑定,则fn必须用有名的函数</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(...).unbind(<span class="string">&quot;事件名&quot;</span>,fn)</span><br></pre></td></tr></table></figure>
<h6 id="简写"><a href="#简写" class="headerlink" title="简写:"></a><strong>简写</strong>:</h6><h6 id="1-省略fn-表示移除该事件绑定的所有处理函数"><a href="#1-省略fn-表示移除该事件绑定的所有处理函数" class="headerlink" title="1. 省略fn, 表示移除该事件绑定的所有处理函数"></a>1. 省略fn, 表示移除该事件绑定的所有处理函数</h6><h6 id="2-都省略-表示移除元素的所有事件绑定"><a href="#2-都省略-表示移除元素的所有事件绑定" class="headerlink" title="2. 都省略, 表示移除元素的所有事件绑定"></a>2. 都省略, 表示移除元素的所有事件绑定</h6><p><img src="https://s2.ax1x.com/2019/07/17/ZLuMp6.png" alt="我是图片"></p>
<h6 id="2、-one-…-用法同bind，绑定事件处理函数后，只执行一次，就自动解绑"><a href="#2、-one-…-用法同bind，绑定事件处理函数后，只执行一次，就自动解绑" class="headerlink" title="2、.one(…) : 用法同bind，绑定事件处理函数后，只执行一次，就自动解绑"></a>2、.one(…) : 用法同bind，绑定事件处理函数后，只执行一次，就自动解绑</h6><h6 id="3、简写-jq对部分常用事件的绑定提供了简写的函数"><a href="#3、简写-jq对部分常用事件的绑定提供了简写的函数" class="headerlink" title="3、简写: jq对部分常用事件的绑定提供了简写的函数:"></a>3、<strong>简写</strong>: jq对部分常用事件的绑定提供了简写的函数:</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(...).事件名(funciton()&#123;...&#125;)  -à&gt;&gt;  $(...).click(fn)</span><br></pre></td></tr></table></figure>
<h6 id="比较"><a href="#比较" class="headerlink" title="比较:"></a><strong>比较</strong>:</h6><h6 id="mouseover-moueout-mousemove-mouseenter-mouseleave"><a href="#mouseover-moueout-mousemove-mouseenter-mouseleave" class="headerlink" title="mouseover  moueout  mousemove mouseenter mouseleave"></a>mouseover  moueout  mousemove mouseenter mouseleave</h6><h6 id="mouseover-鼠标进入时触发一次（进入子元素，同样会冒泡触发父元素）"><a href="#mouseover-鼠标进入时触发一次（进入子元素，同样会冒泡触发父元素）" class="headerlink" title="mouseover 鼠标进入时触发一次（进入子元素，同样会冒泡触发父元素）"></a>mouseover 鼠标进入时触发一次（进入子元素，同样会冒泡触发父元素）</h6><h6 id="mouseleave-鼠标移出时触发一次，会触发父元素"><a href="#mouseleave-鼠标移出时触发一次，会触发父元素" class="headerlink" title="mouseleave 鼠标移出时触发一次，会触发父元素"></a>mouseleave 鼠标移出时触发一次，会触发父元素</h6><h6 id="mouseenter-进入子元素，不再触发父元素的事件"><a href="#mouseenter-进入子元素，不再触发父元素的事件" class="headerlink" title="mouseenter 进入子元素，不再触发父元素的事件"></a>mouseenter 进入子元素，不再触发父元素的事件</h6><h6 id="mouseout-鼠标移出时触发一次"><a href="#mouseout-鼠标移出时触发一次" class="headerlink" title="mouseout 鼠标移出时触发一次"></a>mouseout 鼠标移出时触发一次</h6><h3 id="利用冒泡-——事件委托"><a href="#利用冒泡-——事件委托" class="headerlink" title="利用冒泡:——事件委托"></a><strong>利用冒泡:——事件委托</strong></h3><h3 id="难题"><a href="#难题" class="headerlink" title="难题:"></a><strong>难题</strong>:</h3><h5 id="1-获取目标元素-e-target"><a href="#1-获取目标元素-e-target" class="headerlink" title="1.获取目标元素: e.target"></a>1.获取目标元素: e.target</h5><h5 id="2-鉴别目标元素是否想要-if-target-is-selector"><a href="#2-鉴别目标元素是否想要-if-target-is-selector" class="headerlink" title="2.鉴别目标元素是否想要:    if($(target).is(selector))"></a>2.鉴别目标元素是否想要:    if($(target).is(selector))</h5><h3 id="delegate-事件委托-其实就是简化版的利用冒泡"><a href="#delegate-事件委托-其实就是简化版的利用冒泡" class="headerlink" title="delegate: 事件委托 其实就是简化版的利用冒泡"></a><strong>delegate</strong>: 事件委托 其实就是简化版的利用冒泡</h3><h6 id="什么是-将事件处理函数绑定在父元素，所有子元素共用"><a href="#什么是-将事件处理函数绑定在父元素，所有子元素共用" class="headerlink" title="什么是: 将事件处理函数绑定在父元素，所有子元素共用"></a><strong>什么是</strong>: 将事件处理函数绑定在父元素，所有子元素共用</h6><h6 id="何时-只要利用冒泡，就可用delegate"><a href="#何时-只要利用冒泡，就可用delegate" class="headerlink" title="何时: 只要利用冒泡，就可用delegate"></a><strong>何时</strong>: 只要利用冒泡，就可用delegate</h6><h6 id="如何-parent-delegate-“selector”-”事件名”-fn"><a href="#如何-parent-delegate-“selector”-”事件名”-fn" class="headerlink" title="如何: $(parent).delegate(“selector”,”事件名”,fn)"></a><strong>如何</strong>: $(parent).delegate(“selector”,”事件名”,fn)</h6><h6 id="其中-“selector”只有满足selector的元素才能出发事件——本质-用选择器代替了-判断"><a href="#其中-“selector”只有满足selector的元素才能出发事件——本质-用选择器代替了-判断" class="headerlink" title="其中: “selector”只有满足selector的元素才能出发事件——本质: 用选择器代替了### 判断"></a><strong>其中</strong>: “selector”只有满足selector的元素才能出发事件——本质: 用选择器代替了### <strong>判断</strong></h6><h3 id="fn中this-gt-target目标元素"><a href="#fn中this-gt-target目标元素" class="headerlink" title="fn中this-&gt;target目标元素"></a><strong>fn中this-&gt;target目标元素</strong></h3><p><img src="https://s2.ax1x.com/2019/07/17/ZLu8ne.jpg" alt="我是图片"></p>
]]></content>
      <categories>
        <category>jQuery</category>
      </categories>
  </entry>
  <entry>
    <title>分分钟理解闭包</title>
    <url>/2018/06/26/%E5%88%86%E5%88%86%E9%92%9F%E7%90%86%E8%A7%A3%E9%97%AD%E5%8C%85/</url>
    <content><![CDATA[<h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><h5 id="是-Javascript-比较重要的一个概念，对于初学者来讲，闭包是一个特别抽象的概念，特别是ECMAScript-规范给的定义，如果没有实战经验，很难从定义去理解它。因此，本文不会对闭包的概念进行大篇幅描述，直接上干货，让你分分钟理解闭包！"><a href="#是-Javascript-比较重要的一个概念，对于初学者来讲，闭包是一个特别抽象的概念，特别是ECMAScript-规范给的定义，如果没有实战经验，很难从定义去理解它。因此，本文不会对闭包的概念进行大篇幅描述，直接上干货，让你分分钟理解闭包！" class="headerlink" title="是 Javascript 比较重要的一个概念，对于初学者来讲，闭包是一个特别抽象的概念，特别是ECMAScript 规范给的定义，如果没有实战经验，很难从定义去理解它。因此，本文不会对闭包的概念进行大篇幅描述，直接上干货，让你分分钟理解闭包！"></a>是 Javascript 比较重要的一个概念，对于初学者来讲，闭包是一个特别抽象的概念，特别是ECMAScript 规范给的定义，如果没有实战经验，很难从定义去理解它。因此，本文不会对闭包的概念进行大篇幅描述，直接上干货，让你分分钟理解闭包！</h5><h3 id="闭包，一睹为快"><a href="#闭包，一睹为快" class="headerlink" title="闭包，一睹为快"></a>闭包，一睹为快</h3><h5 id="在接触一个新技术的时候，我首先会做的一件事就是找它的-demo。对于我们来说，看代码比自然语言更能理解一个事物的本质。其实，闭包无处不在，比如：jQuery、zepto的核心代码都包含在一个大的闭包中，所以下面我先写一个最简单最原始的闭包，以便让你在大脑里产生闭包的画面："><a href="#在接触一个新技术的时候，我首先会做的一件事就是找它的-demo。对于我们来说，看代码比自然语言更能理解一个事物的本质。其实，闭包无处不在，比如：jQuery、zepto的核心代码都包含在一个大的闭包中，所以下面我先写一个最简单最原始的闭包，以便让你在大脑里产生闭包的画面：" class="headerlink" title="在接触一个新技术的时候，我首先会做的一件事就是找它的 demo。对于我们来说，看代码比自然语言更能理解一个事物的本质。其实，闭包无处不在，比如：jQuery、zepto的核心代码都包含在一个大的闭包中，所以下面我先写一个最简单最原始的闭包，以便让你在大脑里产生闭包的画面："></a>在接触一个新技术的时候，我首先会做的一件事就是找它的 demo。对于我们来说，看代码比自然语言更能理解一个事物的本质。其实，闭包无处不在，比如：jQuery、zepto的核心代码都包含在一个大的闭包中，所以下面我先写一个最简单最原始的闭包，以便让你在大脑里产生闭包的画面：</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>)</span>&#123;   </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params"></span>)</span>&#123;   </span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">&quot;Hello Closure!&quot;</span>);   </span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="keyword">return</span> B;   </span><br><span class="line">&#125;   </span><br><span class="line"><span class="keyword">var</span> C = A();   </span><br><span class="line">C();<span class="comment">//Hello Closure!</span></span><br></pre></td></tr></table></figure>
<h5 id="这是最简单的闭包。"><a href="#这是最简单的闭包。" class="headerlink" title="这是最简单的闭包。"></a>这是最简单的闭包。</h5><h5 id="有了初步认识后，我们简单分析一下它和普通函数有什么不同，上面代码翻译成自然语言如下："><a href="#有了初步认识后，我们简单分析一下它和普通函数有什么不同，上面代码翻译成自然语言如下：" class="headerlink" title="有了初步认识后，我们简单分析一下它和普通函数有什么不同，上面代码翻译成自然语言如下："></a>有了初步认识后，我们简单分析一下它和普通函数有什么不同，上面代码翻译成自然语言如下：</h5><h6 id="（1）定义普通函数-A"><a href="#（1）定义普通函数-A" class="headerlink" title="（1）定义普通函数 A"></a>（1）定义普通函数 A</h6><h6 id="（2）在-A-中定义普通函数-B"><a href="#（2）在-A-中定义普通函数-B" class="headerlink" title="（2）在 A 中定义普通函数 B"></a>（2）在 A 中定义普通函数 B</h6><h6 id="（3）在-A-中返回-B"><a href="#（3）在-A-中返回-B" class="headerlink" title="（3）在 A 中返回 B"></a>（3）在 A 中返回 B</h6><h6 id="（4）执行-A-并把-A-的返回结果赋值给变量-C"><a href="#（4）执行-A-并把-A-的返回结果赋值给变量-C" class="headerlink" title="（4）执行 A, 并把 A 的返回结果赋值给变量 C"></a>（4）执行 A, 并把 A 的返回结果赋值给变量 C</h6><h6 id="（5）执行-C"><a href="#（5）执行-C" class="headerlink" title="（5）执行 C"></a>（5）执行 C</h6><h2 id="把这5步操作总结成一句话就是："><a href="#把这5步操作总结成一句话就是：" class="headerlink" title="把这5步操作总结成一句话就是："></a>把这5步操作总结成一句话就是：</h2><h6 id="函数A的内部函数B被函数A外的一个变量-c-引用。"><a href="#函数A的内部函数B被函数A外的一个变量-c-引用。" class="headerlink" title="函数A的内部函数B被函数A外的一个变量 c 引用。"></a>函数A的内部函数B被函数A外的一个变量 c 引用。</h6><h6 id="把这句话再加工一下就变成了闭包的定义："><a href="#把这句话再加工一下就变成了闭包的定义：" class="headerlink" title="把这句话再加工一下就变成了闭包的定义："></a>把这句话再加工一下就变成了闭包的定义：</h6><h6 id="当一个内部函数被其外部函数之外的变量引用时，就形成了一个闭包。"><a href="#当一个内部函数被其外部函数之外的变量引用时，就形成了一个闭包。" class="headerlink" title="当一个内部函数被其外部函数之外的变量引用时，就形成了一个闭包。"></a>当一个内部函数被其外部函数之外的变量引用时，就形成了一个闭包。</h6><h6 id="因此，当你执行上述5步操作时，就已经定义了一个闭包！"><a href="#因此，当你执行上述5步操作时，就已经定义了一个闭包！" class="headerlink" title="因此，当你执行上述5步操作时，就已经定义了一个闭包！"></a>因此，当你执行上述5步操作时，就已经定义了一个闭包！</h6><h6 id="这就是闭包。"><a href="#这就是闭包。" class="headerlink" title="这就是闭包。"></a>这就是闭包。</h6><h2 id="闭包的用途"><a href="#闭包的用途" class="headerlink" title="闭包的用途"></a>闭包的用途</h2><h5 id="在了解闭包的作用之前，我们先了解一下-Javascript-中的GC机制"><a href="#在了解闭包的作用之前，我们先了解一下-Javascript-中的GC机制" class="headerlink" title="在了解闭包的作用之前，我们先了解一下 Javascript 中的GC机制:"></a>在了解闭包的作用之前，我们先了解一下 Javascript 中的GC机制:</h5><h6 id="在-Javascript-中，如果一个对象不再被引用，那么这个对象就会被-GC-回收，否则这个对象一直会保存在内存中。"><a href="#在-Javascript-中，如果一个对象不再被引用，那么这个对象就会被-GC-回收，否则这个对象一直会保存在内存中。" class="headerlink" title="在 Javascript 中，如果一个对象不再被引用，那么这个对象就会被 GC 回收，否则这个对象一直会保存在内存中。"></a>在 Javascript 中，如果一个对象不再被引用，那么这个对象就会被 GC 回收，否则这个对象一直会保存在内存中。</h6><h6 id="在上述例子中，B-定义在-A-中，因此-B-依赖于-A-而外部变量-C-又引用了-B-所以A间接的被-C-引用。"><a href="#在上述例子中，B-定义在-A-中，因此-B-依赖于-A-而外部变量-C-又引用了-B-所以A间接的被-C-引用。" class="headerlink" title="在上述例子中，B 定义在 A 中，因此 B 依赖于 A ,而外部变量 C 又引用了 B , 所以A间接的被 C 引用。"></a>在上述例子中，B 定义在 A 中，因此 B 依赖于 A ,而外部变量 C 又引用了 B , 所以A间接的被 C 引用。</h6><h6 id="也就是说，A-不会被-GC-回收，会一直保存在内存中。为了证明我们的推理，上面的例子稍作改进："><a href="#也就是说，A-不会被-GC-回收，会一直保存在内存中。为了证明我们的推理，上面的例子稍作改进：" class="headerlink" title="也就是说，A 不会被 GC 回收，会一直保存在内存中。为了证明我们的推理，上面的例子稍作改进："></a>也就是说，A 不会被 GC 回收，会一直保存在内存中。为了证明我们的推理，上面的例子稍作改进：</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>)</span>&#123;   </span><br><span class="line">    <span class="keyword">var</span> count = <span class="number">0</span>;   </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params"></span>)</span>&#123;   </span><br><span class="line">       count ++;   </span><br><span class="line">       <span class="built_in">console</span>.log(count);   </span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="keyword">return</span> B;   </span><br><span class="line">&#125;   </span><br><span class="line"><span class="keyword">var</span> C = A();   </span><br><span class="line">C();<span class="comment">// 1   </span></span><br><span class="line">C();<span class="comment">// 2   </span></span><br><span class="line">C();<span class="comment">// 3</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>count 是函数A 中的一个变量，它的值在函数B 中被改变，函数B 每执行一次，count 的值就在原来的基础上累加 1 。因此，函数A中的 count 变量会一直保存在内存中。</p>
</blockquote>
<h4 id="当我们需要在模块中定义一些变量，并希望这些变量一直保存在内存中但又不会“污染”全局的变量时，就可以用闭包来定义这个模块。"><a href="#当我们需要在模块中定义一些变量，并希望这些变量一直保存在内存中但又不会“污染”全局的变量时，就可以用闭包来定义这个模块。" class="headerlink" title="当我们需要在模块中定义一些变量，并希望这些变量一直保存在内存中但又不会“污染”全局的变量时，就可以用闭包来定义这个模块。"></a>当我们需要在模块中定义一些变量，并希望这些变量一直保存在内存中但又不会“污染”全局的变量时，就可以用闭包来定义这个模块。</h4><h2 id="闭包的高级写法"><a href="#闭包的高级写法" class="headerlink" title="闭包的高级写法"></a>闭包的高级写法</h2><h6 id="上面的写法其实是最原始的写法，而在实际应用中，会将闭包和匿名函数联系在一起使用。下面就是一个闭包常用的写法："><a href="#上面的写法其实是最原始的写法，而在实际应用中，会将闭包和匿名函数联系在一起使用。下面就是一个闭包常用的写法：" class="headerlink" title="上面的写法其实是最原始的写法，而在实际应用中，会将闭包和匿名函数联系在一起使用。下面就是一个闭包常用的写法："></a>上面的写法其实是最原始的写法，而在实际应用中，会将闭包和匿名函数联系在一起使用。下面就是一个闭包常用的写法：</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">document</span>)</span>&#123;   </span><br><span class="line">    <span class="keyword">var</span> viewport;   </span><br><span class="line">    <span class="keyword">var</span> obj = &#123;   </span><br><span class="line">        init:<span class="function"><span class="keyword">function</span>(<span class="params">id</span>)</span>&#123;   </span><br><span class="line">           viewport = <span class="built_in">document</span>.querySelector(<span class="string">&quot;#&quot;</span>+id);   </span><br><span class="line">        &#125;,   </span><br><span class="line">        addChild:<span class="function"><span class="keyword">function</span>(<span class="params">child</span>)</span>&#123;   </span><br><span class="line">            viewport.appendChild(child);   </span><br><span class="line">        &#125;,   </span><br><span class="line">        removeChild:<span class="function"><span class="keyword">function</span>(<span class="params">child</span>)</span>&#123;   </span><br><span class="line">            viewport.removeChild(child);   </span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="built_in">window</span>.jView = obj;   </span><br><span class="line">&#125;)(<span class="built_in">document</span>);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这个组件的作用是：初始化一个容器，然后可以给这个容器添加子容器，也可以移除一个容器。</p>
</blockquote>
<h6 id="功能很简单，但这里涉及到了另外一个概念：立即执行函数。-简单了解一下就行，需要重点理解的是这种写法是如何实现闭包功能的。"><a href="#功能很简单，但这里涉及到了另外一个概念：立即执行函数。-简单了解一下就行，需要重点理解的是这种写法是如何实现闭包功能的。" class="headerlink" title="功能很简单，但这里涉及到了另外一个概念：立即执行函数。 简单了解一下就行，需要重点理解的是这种写法是如何实现闭包功能的。"></a>功能很简单，但这里涉及到了另外一个概念：立即执行函数。 简单了解一下就行，需要重点理解的是这种写法是如何实现闭包功能的。</h6><h6 id="可以将上面的代码拆分成两部分：-function-和-第1个-是一个表达式，而这个表达式本身是一个匿名函数，所以在这个表达式后面加-就表示执行这个匿名函数。"><a href="#可以将上面的代码拆分成两部分：-function-和-第1个-是一个表达式，而这个表达式本身是一个匿名函数，所以在这个表达式后面加-就表示执行这个匿名函数。" class="headerlink" title="可以将上面的代码拆分成两部分：(function(){}) 和 () , 第1个() 是一个表达式，而这个表达式本身是一个匿名函数，所以在这个表达式后面加 () 就表示执行这个匿名函数。"></a>可以将上面的代码拆分成两部分：(function(){}) 和 () , 第1个() 是一个表达式，而这个表达式本身是一个匿名函数，所以在这个表达式后面加 () 就表示执行这个匿名函数。</h6><h6 id="因此这段代码执行执行过程可以分解如下："><a href="#因此这段代码执行执行过程可以分解如下：" class="headerlink" title="因此这段代码执行执行过程可以分解如下："></a>因此这段代码执行执行过程可以分解如下：</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span>(<span class="params">document</span>)</span>&#123;   </span><br><span class="line">    <span class="keyword">var</span> viewport;   </span><br><span class="line">    <span class="keyword">var</span> obj = &#123;   </span><br><span class="line">        init:<span class="function"><span class="keyword">function</span>(<span class="params">id</span>)</span>&#123;   </span><br><span class="line">            viewport = <span class="built_in">document</span>.querySelector(<span class="string">&quot;#&quot;</span>+id);   </span><br><span class="line">        &#125;,   </span><br><span class="line">        addChild:<span class="function"><span class="keyword">function</span>(<span class="params">child</span>)</span>&#123;   </span><br><span class="line">            viewport.appendChild(child);   </span><br><span class="line">        &#125;,   </span><br><span class="line">        removeChild:<span class="function"><span class="keyword">function</span>(<span class="params">child</span>)</span>&#123;   </span><br><span class="line">            viewport.removeChild(child);   </span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="built_in">window</span>.jView = obj;   </span><br><span class="line">&#125;;   </span><br><span class="line">f(<span class="built_in">document</span>);</span><br></pre></td></tr></table></figure>
<h6 id="在这段代码中似乎看到了闭包的影子，但-f-中没有任何返回值，似乎不具备闭包的条件，注意这句代码："><a href="#在这段代码中似乎看到了闭包的影子，但-f-中没有任何返回值，似乎不具备闭包的条件，注意这句代码：" class="headerlink" title="在这段代码中似乎看到了闭包的影子，但 f 中没有任何返回值，似乎不具备闭包的条件，注意这句代码："></a>在这段代码中似乎看到了闭包的影子，但 f 中没有任何返回值，似乎不具备闭包的条件，注意这句代码：</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.jView = obj;;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>obj 是在函数 f 中定义的一个对象，这个对象中定义了一系列方法， 执行window.jView = obj 就是在 window 全局对象定义了一个变量 jView，并将这个变量指向 obj 对象，即全局变量 jView 引用了 obj . 而 obj 对象中的函数又引用了函数 f 中的变量 viewport ,因此函数 f 中的 viewport 不会被 GC 回收，viewport 会一直保存到内存中，所以这种写法满足了闭包的条件。</p>
</blockquote>
<h3 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h3><ol>
<li>逻辑连续，当闭包作为另一个函数调用的参数时，避免你脱离当前逻辑而单独编写额外逻辑。</li>
<li>方便调用上下文的局部变量。</li>
<li>加强封装性，第2点的延伸，可以达到对变量的保护作用。</li>
</ol>
<h3 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h3><ol>
<li><p>由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。</p>
</li>
<li><p>闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。</p>
</li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h4 id="这是对闭包最简单的理解，当然闭包还有其更深层次的理解，这个就涉及的多了，你需要了解JS的执行环境-execution-context-、活动对象-activation-object-以及作用域-scope-和作用域链-scope-chain-的运行机制。但作为初学者，暂时不必了解这些，有了简单的理解之后，一定要在实际项目中用起来，等你用的多了，对于闭包，你自然会有更深层次的理解！"><a href="#这是对闭包最简单的理解，当然闭包还有其更深层次的理解，这个就涉及的多了，你需要了解JS的执行环境-execution-context-、活动对象-activation-object-以及作用域-scope-和作用域链-scope-chain-的运行机制。但作为初学者，暂时不必了解这些，有了简单的理解之后，一定要在实际项目中用起来，等你用的多了，对于闭包，你自然会有更深层次的理解！" class="headerlink" title="这是对闭包最简单的理解，当然闭包还有其更深层次的理解，这个就涉及的多了，你需要了解JS的执行环境(execution context)、活动对象(activation object)以及作用域(scope)和作用域链(scope chain)的运行机制。但作为初学者，暂时不必了解这些，有了简单的理解之后，一定要在实际项目中用起来，等你用的多了，对于闭包，你自然会有更深层次的理解！"></a>这是对闭包最简单的理解，当然闭包还有其更深层次的理解，这个就涉及的多了，你需要了解JS的执行环境(execution context)、活动对象(activation object)以及作用域(scope)和作用域链(scope chain)的运行机制。但作为初学者，暂时不必了解这些，有了简单的理解之后，一定要在实际项目中用起来，等你用的多了，对于闭包，你自然会有更深层次的理解！</h4>]]></content>
      <categories>
        <category>js高级</category>
      </categories>
  </entry>
  <entry>
    <title>电商网站构图思想之公共样式</title>
    <url>/2020/10/20/%E7%94%B5%E5%95%86%E7%BD%91%E7%AB%99%E6%80%9D%E6%83%B3/</url>
    <content><![CDATA[<h3 id="公共样式开始之前，就品优购网站思想来说-代码多的雅痞-但是只要思想在-所有都是浮云"><a href="#公共样式开始之前，就品优购网站思想来说-代码多的雅痞-但是只要思想在-所有都是浮云" class="headerlink" title="公共样式开始之前，就品优购网站思想来说  代码多的雅痞  但是只要思想在  所有都是浮云"></a>公共样式开始之前，就品优购网站思想来说  代码多的雅痞  但是只要思想在  所有都是浮云</h3><p><img src="https://s1.ax1x.com/2020/11/01/B0FJYQ.png" alt="我是图片"></p>
<hr>
<h3 id="我们先从头部说起网页的三大部件"><a href="#我们先从头部说起网页的三大部件" class="headerlink" title="我们先从头部说起网页的三大部件"></a>我们先从头部说起网页的三大部件</h3><p><img src="https://s1.ax1x.com/2020/11/01/B0F2lR.png" alt="我是图片"></p>
<h3 id="facicon-ico网页图标"><a href="#facicon-ico网页图标" class="headerlink" title="facicon.ico网页图标"></a>facicon.ico网页图标</h3><h4 id="这里需要注意的是rel-后面必须跟“shortcut-icon”"><a href="#这里需要注意的是rel-后面必须跟“shortcut-icon”" class="headerlink" title="这里需要注意的是rel  后面必须跟“shortcut icon”"></a>这里需要注意的是rel  后面必须跟“shortcut icon”</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;shortcut icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;favicon.ico&quot;</span>  <span class="attr">type</span>=<span class="string">&quot;image/x-icon&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>




<h3 id="顶部最上面的快捷标签栏shortcut"><a href="#顶部最上面的快捷标签栏shortcut" class="headerlink" title="顶部最上面的快捷标签栏shortcut"></a>顶部最上面的快捷标签栏shortcut</h3><p><img src="https://s1.ax1x.com/2020/11/01/B0kw3d.png" alt="我是图片"></p>
<h4 id="左边两个盒子浮动"><a href="#左边两个盒子浮动" class="headerlink" title="左边两个盒子浮动"></a>左边两个盒子浮动</h4><p><img src="https://s1.ax1x.com/2020/11/01/B0EgpQ.png" alt="我是图片"></p>
<h4 id="右边成几个ul-gt-li-数字"><a href="#右边成几个ul-gt-li-数字" class="headerlink" title="右边成几个ul&gt;li*数字"></a>右边成几个ul&gt;li*数字</h4><h5 id="距离使用padding挤开"><a href="#距离使用padding挤开" class="headerlink" title="距离使用padding挤开"></a>距离使用padding挤开</h5><h5 id="使用nth：even偶数形成竖杠"><a href="#使用nth：even偶数形成竖杠" class="headerlink" title="使用nth：even偶数形成竖杠"></a>使用nth：even偶数形成竖杠</h5><p><img src="https://s1.ax1x.com/2020/11/01/B0Z1PO.png" alt="我是图片"><br><img src="https://s1.ax1x.com/2020/11/01/B0Z3GD.png" alt="我是图片"></p>
<h4 id="小三角通过字体图标"><a href="#小三角通过字体图标" class="headerlink" title="小三角通过字体图标"></a>小三角通过字体图标</h4><h5 id="现在需要倒三角的li加一个class"><a href="#现在需要倒三角的li加一个class" class="headerlink" title="现在需要倒三角的li加一个class"></a>现在需要倒三角的li加一个class</h5><h5 id="其次就是用伪类-after里面的content测试一下"><a href="#其次就是用伪类-after里面的content测试一下" class="headerlink" title="其次就是用伪类::after里面的content测试一下"></a>其次就是用伪类::after里面的content测试一下</h5><h5 id="最后在使用字体图标CSS样式修改就OK了"><a href="#最后在使用字体图标CSS样式修改就OK了" class="headerlink" title="最后在使用字体图标CSS样式修改就OK了"></a>最后在使用字体图标CSS样式修改就OK了</h5><p><img src="https://s1.ax1x.com/2020/11/01/B0n8RU.png" alt="我是图片"><br><img src="https://s1.ax1x.com/2020/11/01/B0nNL9.png" alt="我是图片"><br><img src="https://s1.ax1x.com/2020/11/01/B0u3TI.png" alt="我是图片"></p>
<hr>
<h3 id="header制作"><a href="#header制作" class="headerlink" title="header制作"></a>header制作</h3><p><img src="https://s1.ax1x.com/2020/11/01/B0K0gO.png" alt="我是图片"></p>
<h4 id="Logo-SEO优化"><a href="#Logo-SEO优化" class="headerlink" title="Logo SEO优化"></a>Logo SEO优化</h4><p><img src="https://s1.ax1x.com/2020/11/01/B0GbOf.png" alt="我是图片"></p>
<h4 id="搜索栏"><a href="#搜索栏" class="headerlink" title="搜索栏"></a>搜索栏</h4><h5 id="两个盒子-里面包含一个input-和一个button"><a href="#两个盒子-里面包含一个input-和一个button" class="headerlink" title="两个盒子 里面包含一个input 和一个button"></a>两个盒子 里面包含一个input 和一个button</h5><p><img src="https://s1.ax1x.com/2020/11/01/B0JJtH.png" alt="我是图片"></p>
<h4 id="购物车模块"><a href="#购物车模块" class="headerlink" title="购物车模块"></a>购物车模块</h4><h5 id="一个大盒子-首先给一个边框，然后中间放一个文字-利用中间文字的伪类-befor＆-after实现购物车图标和倒立三角"><a href="#一个大盒子-首先给一个边框，然后中间放一个文字-利用中间文字的伪类-befor＆-after实现购物车图标和倒立三角" class="headerlink" title="一个大盒子 首先给一个边框，然后中间放一个文字  利用中间文字的伪类::befor＆::after实现购物车图标和倒立三角"></a>一个大盒子 首先给一个边框，然后中间放一个文字  利用中间文字的伪类::befor＆::after实现购物车图标和倒立三角</h5><h5 id="然后上面的消息框用定位定上去"><a href="#然后上面的消息框用定位定上去" class="headerlink" title="然后上面的消息框用定位定上去"></a>然后上面的消息框用定位定上去</h5><p><img src="https://s1.ax1x.com/2020/11/01/B0NN9J.png" alt="我是图片"></p>
<hr>
<h3 id="nav导航制作"><a href="#nav导航制作" class="headerlink" title="nav导航制作"></a>nav导航制作</h3><h5 id="首先-画两个盒子-一个左浮动-一又浮动"><a href="#首先-画两个盒子-一个左浮动-一又浮动" class="headerlink" title="首先  画两个盒子 一个左浮动 一又浮动"></a>首先  画两个盒子 一个左浮动 一又浮动</h5><h5 id="其次-nav左浮动的盒子是一个无序列表-dt-dd"><a href="#其次-nav左浮动的盒子是一个无序列表-dt-dd" class="headerlink" title="其次  nav左浮动的盒子是一个无序列表 dt dd"></a>其次  nav左浮动的盒子是一个无序列表 dt dd</h5><h5 id="dd下面放个ul下的几个li-最后边用伪类-after完成"><a href="#dd下面放个ul下的几个li-最后边用伪类-after完成" class="headerlink" title="dd下面放个ul下的几个li  最后边用伪类::after完成"></a>dd下面放个ul下的几个li  最后边用伪类::after完成</h5><p><img src="https://s1.ax1x.com/2020/11/02/BDoPWF.png" alt="我是图片"><br><img src="https://s1.ax1x.com/2020/11/02/BDTUBR.png" alt="我是图片"><br><a href="https://imgchr.com/i/BDTv5V"><img src="https://s1.ax1x.com/2020/11/02/BDTv5V.png" alt="BDTv5V.png"></a></p>
<h4 id="navitems制作"><a href="#navitems制作" class="headerlink" title="navitems制作"></a>navitems制作</h4><h5 id="放一个盒子-靠右浮动-然后把li在浮动-padding撑开距离"><a href="#放一个盒子-靠右浮动-然后把li在浮动-padding撑开距离" class="headerlink" title="放一个盒子  靠右浮动 然后把li在浮动 padding撑开距离"></a>放一个盒子  靠右浮动 然后把li在浮动 padding撑开距离</h5><p><a href="https://imgchr.com/i/BD7WM4"><img src="https://s1.ax1x.com/2020/11/02/BD7WM4.png" alt="BD7WM4.png"></a></p>
<h3 id="footer制作"><a href="#footer制作" class="headerlink" title="footer制作"></a>footer制作</h3><h5 id="一个大盒子包含3个小盒子"><a href="#一个大盒子包含3个小盒子" class="headerlink" title="一个大盒子包含3个小盒子"></a>一个大盒子包含3个小盒子</h5><p><img src="https://s1.ax1x.com/2020/11/02/BDHuF0.png" alt="我是图片"></p>
<h4 id="footer-top盒子制作"><a href="#footer-top盒子制作" class="headerlink" title="footer_top盒子制作"></a>footer_top盒子制作</h4><h5 id="首先是一个ul包含四个li-其次就是给每个li放俩盒子"><a href="#首先是一个ul包含四个li-其次就是给每个li放俩盒子" class="headerlink" title="首先是一个ul包含四个li 其次就是给每个li放俩盒子"></a>首先是一个ul包含四个li 其次就是给每个li放俩盒子</h5><h5 id="左边是h5为图标-右边盒子h4是上面字体下面放一个p-然后左右浮动"><a href="#左边是h5为图标-右边盒子h4是上面字体下面放一个p-然后左右浮动" class="headerlink" title="左边是h5为图标 右边盒子h4是上面字体下面放一个p 然后左右浮动"></a>左边是h5为图标 右边盒子h4是上面字体下面放一个p 然后左右浮动</h5><p><img src="https://s1.ax1x.com/2020/11/02/BDbuBd.png" alt="我是图片"></p>
<p><img src="https://s1.ax1x.com/2020/11/02/BDb2DJ.png" alt="我是图片"></p>
<h4 id="footer-mid盒子制作"><a href="#footer-mid盒子制作" class="headerlink" title="footer_mid盒子制作"></a>footer_mid盒子制作</h4><h5 id="首先放一个dl-dl里有一个dd和dt"><a href="#首先放一个dl-dl里有一个dd和dt" class="headerlink" title="首先放一个dl  dl里有一个dd和dt"></a>首先放一个dl  dl里有一个dd和dt</h5><h5 id="然后整修饰玩样式之后-就开始复制粘贴5个-最后一个修成图片就行"><a href="#然后整修饰玩样式之后-就开始复制粘贴5个-最后一个修成图片就行" class="headerlink" title="然后整修饰玩样式之后  就开始复制粘贴5个 最后一个修成图片就行"></a>然后整修饰玩样式之后  就开始复制粘贴5个 最后一个修成图片就行</h5><p><img src="https://s1.ax1x.com/2020/11/02/BDqDZd.png" alt="我是图片"></p>
<h4 id="footer-bot盒子制作"><a href="#footer-bot盒子制作" class="headerlink" title="footer_bot盒子制作"></a>footer_bot盒子制作</h4><h5 id="放两个class-一上一下-最后都用css修饰text-aglin-center"><a href="#放两个class-一上一下-最后都用css修饰text-aglin-center" class="headerlink" title="放两个class  一上一下  最后都用css修饰text-aglin center"></a>放两个class  一上一下  最后都用css修饰text-aglin center</h5><p><img src="https://s1.ax1x.com/2020/11/02/BDLAyD.png" alt="我是图片"></p>
<h2 id="至此-公共样式已完结-接下来是分页样式"><a href="#至此-公共样式已完结-接下来是分页样式" class="headerlink" title="至此 公共样式已完结  接下来是分页样式"></a>至此 公共样式已完结  接下来是分页样式</h2>]]></content>
      <categories>
        <category>电商网站构图思想</category>
      </categories>
      <tags>
        <tag>项目</tag>
      </tags>
  </entry>
  <entry>
    <title>前端面试题系列1</title>
    <url>/2018/08/04/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E7%B3%BB%E5%88%97/</url>
    <content><![CDATA[<h3 id="1-如何理解移动端上的点击穿透？"><a href="#1-如何理解移动端上的点击穿透？" class="headerlink" title="1. 如何理解移动端上的点击穿透？"></a>1. 如何理解移动端上的点击穿透？</h3><h4 id="点击穿透现象有3种："><a href="#点击穿透现象有3种：" class="headerlink" title="点击穿透现象有3种："></a>点击穿透现象有3种：</h4><ol>
<li>点击蒙层（mask）上的关闭按钮，蒙层消失后发现触发了按钮下面元素的click事件；</li>
<li>（跨页面）如果按钮下面恰好是一个有href属性的a标签，那么页面就会发生跳转；</li>
<li>（跨页面）这次没有mask了，直接点击页内按钮跳转至新页，然后发现新页面中对应位置元素的click事件被触发了</li>
</ol>
<p>解决方案：</p>
<ol>
<li><p>只用touch<br>最简单的解决方案，完美解决点击穿透问题<br>把页面内所有click全部换成touch事件（ touchstart 、’touchend’、’tap’）；</p>
</li>
<li><p>只用click<br>下下策，因为会带来300ms延迟，页面内任何一个自定义交互都将增加300毫秒延迟；</p>
</li>
<li><p>tap后延迟350ms再隐藏mask<br>改动最小，缺点是隐藏mask变慢了，350ms还是能感觉到慢的；</p>
</li>
<li><p>pointer-events<br>比较麻烦且有缺陷， 不建议使用mask隐藏后，给按钮下面元素添上 pointer-events: none; 样式，让click穿过去，350ms后去掉这个样式，恢复响应缺陷是mask消失后的的350ms内，用户可以看到按钮下面的元素点着没反应，如果用户手速很快的话一定会发现。</p>
</li>
</ol>
<h3 id="2-尝试实现-双向绑定"><a href="#2-尝试实现-双向绑定" class="headerlink" title="2. 尝试实现 双向绑定"></a>2. 尝试实现 双向绑定</h3><p>HTML 部分：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;txt&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;show-txt&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>JS 部分：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">&#x27;txt&#x27;</span>, &#123;</span><br><span class="line">  get: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> obj</span><br><span class="line">  &#125;,</span><br><span class="line">  set: <span class="function"><span class="keyword">function</span> (<span class="params">newValue</span>) </span>&#123;</span><br><span class="line">     <span class="built_in">document</span>.getElementById(<span class="string">&#x27;txt&#x27;</span>).value = newValue</span><br><span class="line">     <span class="built_in">document</span>.getElementById(<span class="string">&#x27;show-txt&#x27;</span>).innerHTML = newValue</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">&#x27;keyup&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  obj.txt = e.target.value</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="3-简述-AJAX-执行流程"><a href="#3-简述-AJAX-执行流程" class="headerlink" title="3.简述 AJAX 执行流程"></a>3.简述 AJAX 执行流程</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr =<span class="literal">null</span>; <span class="comment">// 创建对象 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">window</span>.XMLHttpRequest)&#123;</span><br><span class="line">  xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  xhr = <span class="keyword">new</span> ActiveXObject(<span class="string">&quot;Microsoft.XMLHTTP&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">xhr.open(<span class="string">&quot;method&quot;</span>, <span class="string">&quot;url&quot;</span>, <span class="string">&quot;async&quot;</span>); <span class="comment">// 初始化请求 </span></span><br><span class="line">xhr.setRequestHeader(<span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>); <span class="comment">// 设置http头信息 </span></span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;; <span class="comment">// 指定回调函数 </span></span><br><span class="line">xhr.send();<span class="comment">//发送请求</span></span><br></pre></td></tr></table></figure>


<h3 id="4-写出下列代码运行结果"><a href="#4-写出下列代码运行结果" class="headerlink" title="4.写出下列代码运行结果"></a>4.写出下列代码运行结果</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">alert(<span class="number">1</span> &amp;&amp; <span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<h3 id="5-写出下列代码运行结果"><a href="#5-写出下列代码运行结果" class="headerlink" title="5.写出下列代码运行结果"></a>5.写出下列代码运行结果</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>].map(<span class="built_in">parseInt</span>)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>面试题</category>
      </categories>
  </entry>
  <entry>
    <title>盒模型</title>
    <url>/2018/03/18/%E7%9B%92%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<h1 id="盒模型"><a href="#盒模型" class="headerlink" title="盒模型"></a>盒模型</h1><hr>
<h2 id="什么是盒模型"><a href="#什么是盒模型" class="headerlink" title="什么是盒模型"></a>什么是盒模型</h2><blockquote>
<p>盒模型指css布局中html中的每个元素在浏览器中的解析都可以被看作一个盒子，拥有盒子一样的外形和平面空间。</p>
</blockquote>
<p><img src="https://s2.ax1x.com/2019/07/17/ZLEQl4.jpg"></p>
<h3 id="content-内容"><a href="#content-内容" class="headerlink" title="content - 内容"></a>content - 内容</h3><blockquote>
<p>元素大小一般有内容撑开，也可以通过width/height-宽高样式设置大小</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">width：100px;//宽度</span><br><span class="line">height：100px;//高度</span><br><span class="line">min-width：100px;//最小宽度 </span><br><span class="line">max-width：100px;//最小高度</span><br></pre></td></tr></table></figure>

<h3 id="margin-外边距"><a href="#margin-外边距" class="headerlink" title="margin - 外边距"></a>margin - 外边距</h3><blockquote>
<p>设置元素的外边距，有上、右、下、左四个方位的外边距。</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">margin-top:10px;//设置上边距10px</span><br><span class="line">margin-right:20px;//设置右边距10px</span><br><span class="line">margin-bottom:10px;//设置底边距10px</span><br><span class="line">margin-left:20px;//设置左边距10px</span><br><span class="line">//简写</span><br><span class="line"><span class="selector-tag">margin</span><span class="selector-pseudo">:10px</span> 20<span class="selector-tag">px</span> 10<span class="selector-tag">px</span> 20<span class="selector-tag">px</span>;</span><br><span class="line">//如果上下值相等，和左右值相等，还可以简</span><br><span class="line"><span class="selector-tag">margin</span><span class="selector-pseudo">:10px</span> 20<span class="selector-tag">px</span>;</span><br><span class="line">//如果四个边值相等，还可以再简</span><br><span class="line"><span class="selector-tag">margin</span><span class="selector-pseudo">:10px</span>;</span><br></pre></td></tr></table></figure>
<h3 id="border-边框"><a href="#border-边框" class="headerlink" title="border - 边框"></a>border - 边框</h3><blockquote>
<p>设置元素的边框线</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">//设置边框样式solid-实线 dashed-虚线</span><br><span class="line"><span class="selector-tag">border-style</span><span class="selector-pseudo">:solid</span>;</span><br><span class="line">//设置边框粗细,也分四个边设置，也可简写</span><br><span class="line"><span class="selector-tag">border-width</span><span class="selector-pseudo">:1px</span> 1<span class="selector-tag">px</span> 1<span class="selector-tag">px</span> 1<span class="selector-tag">px</span>;</span><br><span class="line">//设置边框颜色,也分四个边设置，也可简写</span><br><span class="line"><span class="selector-tag">border-color</span><span class="selector-pseudo">:black</span> <span class="selector-tag">black</span> <span class="selector-tag">black</span> <span class="selector-tag">black</span>;</span><br><span class="line">//一边这样简写</span><br><span class="line"><span class="selector-tag">border</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-tag">black</span>;</span><br><span class="line">//可以单独设置每一条边</span><br><span class="line"><span class="selector-tag">border-left</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-tag">black</span>;</span><br><span class="line"><span class="selector-tag">border-right</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-tag">black</span>;</span><br><span class="line"><span class="selector-tag">border-top</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-tag">black</span>;</span><br><span class="line"><span class="selector-tag">border-bottom</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-tag">black</span>;</span><br></pre></td></tr></table></figure>
<h3 id="padding-内边距"><a href="#padding-内边距" class="headerlink" title="padding - 内边距"></a>padding - 内边距</h3><blockquote>
<p>设置元素的内边距，有上、右、下、左四个方位的内边距。</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">padding-top:10px;//设置上内边距10px</span><br><span class="line">padding-right:20px;//设置右内边距10px</span><br><span class="line">padding-bottom:10px;//设置底内边距10px</span><br><span class="line">padding-left:20px;//设置左内边距10px</span><br><span class="line">//简写</span><br><span class="line"><span class="selector-tag">padding</span><span class="selector-pseudo">:10px</span> 20<span class="selector-tag">px</span> 10<span class="selector-tag">px</span> 20<span class="selector-tag">px</span>;</span><br><span class="line">//如果上下值相等，和左右值相等，还可以简</span><br><span class="line"><span class="selector-tag">padding</span><span class="selector-pseudo">:10px</span> 20<span class="selector-tag">px</span>;</span><br><span class="line">//如果四个内边值相等，还可以再简</span><br><span class="line"><span class="selector-tag">padding</span><span class="selector-pseudo">:10px</span>;</span><br></pre></td></tr></table></figure>
<h3 id="box-sizing"><a href="#box-sizing" class="headerlink" title="box-sizing"></a>box-sizing</h3><blockquote>
<p>设置盒模型实际大小的计算方式</p>
</blockquote>
<ul>
<li>content:内容</li>
<li>border:边框</li>
<li>margin:外边距 - 实际大小不包括margin-外边距</li>
<li>padding:内边距</li>
</ul>
<h3 id="标准模式"><a href="#标准模式" class="headerlink" title="标准模式"></a>标准模式</h3><blockquote>
<p>标准模式是指，浏览器按W3C标准解析执行代码；</p>
</blockquote>
<blockquote>
<p>box-sizing默认属性是content-box，就是标准模式;</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">box-sizing: content-box;</span></span><br><span class="line"><span class="comment">标准模式计算方式</span></span><br><span class="line"><span class="comment">实际大小=border + padding + width</span></span><br><span class="line"><span class="comment">content = width</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h3 id="怪异模式"><a href="#怪异模式" class="headerlink" title="怪异模式"></a>怪异模式</h3><blockquote>
<p>怪异模式则是使用浏览器自己的方式解析执行代码，因为不同浏览器解析执行的方式不一样，所以我们称之为怪异模式。</p>
</blockquote>
<blockquote>
<p>如果在ie6，ie7，ie8下缺少头部声明DOCTYPE将会触发怪异模式</p>
</blockquote>
<blockquote>
<p>某些地方适合使用怪异模式，可以同过box-sizing设置属性为border-box</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">box-sizing</span>: <span class="selector-tag">border-box</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">怪异模式计算方式</span></span><br><span class="line"><span class="comment">实际大小 =  width</span></span><br><span class="line"><span class="comment">content = width - padding - border</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h3 id="display"><a href="#display" class="headerlink" title="display"></a>display</h3><blockquote>
<p>元素生成的框类型,块元素或行元素等</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">//设置为块元素属性</span><br><span class="line"><span class="selector-tag">display</span><span class="selector-pseudo">:block</span>;</span><br><span class="line">//设置为行元素属性</span><br><span class="line"><span class="selector-tag">display</span><span class="selector-pseudo">:inline</span>;</span><br><span class="line">//none-没有属性，所以不会在页面上显示，可以作为隐藏的方法</span><br><span class="line"><span class="selector-tag">display</span><span class="selector-pseudo">:none</span>;</span><br><span class="line">//inline-block：以行元素的排列方式，同时也有块元素特点</span><br><span class="line"><span class="selector-tag">display</span><span class="selector-pseudo">:inline-block</span>;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CSS</category>
      </categories>
  </entry>
  <entry>
    <title>电商网站构图思想之其他</title>
    <url>/2020/10/21/%E7%94%B5%E5%95%86%E7%BD%91%E7%AB%99%E6%80%9D%E6%83%B32/</url>
    <content><![CDATA[<h2 id="main模块制作"><a href="#main模块制作" class="headerlink" title="main模块制作"></a>main模块制作</h2><p><img src="https://s1.ax1x.com/2020/11/03/BsmHPI.png" alt="我是图片"></p>
<h3 id="焦点图focus"><a href="#焦点图focus" class="headerlink" title="焦点图focus"></a>焦点图focus</h3><h4 id="要知道轮播图的原理"><a href="#要知道轮播图的原理" class="headerlink" title="要知道轮播图的原理"></a>要知道轮播图的原理</h4><p><img src="https://s1.ax1x.com/2020/11/03/BsuFkd.png" alt="我是图片"><br><img src="https://s1.ax1x.com/2020/11/03/BsnHw4.png" alt="我是图片"></p>
<h3 id="快报模块"><a href="#快报模块" class="headerlink" title="快报模块"></a>快报模块</h3><h4 id="三个盒子-上中下-最后一个盒子做图片填充"><a href="#三个盒子-上中下-最后一个盒子做图片填充" class="headerlink" title="三个盒子  上中下 最后一个盒子做图片填充"></a>三个盒子  上中下 最后一个盒子做图片填充</h4><p><img src="https://s1.ax1x.com/2020/11/03/Bsud74.png" alt="我是图片"></p>
<h4 id="快报模块之上盒子篇"><a href="#快报模块之上盒子篇" class="headerlink" title="快报模块之上盒子篇"></a>快报模块之上盒子篇</h4><h5 id="上盒子分为两个盒-一个是头部-一个是身体"><a href="#上盒子分为两个盒-一个是头部-一个是身体" class="headerlink" title="上盒子分为两个盒 一个是头部 一个是身体"></a>上盒子分为两个盒 一个是头部 一个是身体</h5><h5 id="头部：左浮动-右边右浮动-记得还有伪类-after做三角"><a href="#头部：左浮动-右边右浮动-记得还有伪类-after做三角" class="headerlink" title="头部：左浮动  右边右浮动  记得还有伪类::after做三角"></a>头部：左浮动  右边右浮动  记得还有伪类::after做三角</h5><h5 id="身体：ul-gt-li-记得到时候用strong加粗"><a href="#身体：ul-gt-li-记得到时候用strong加粗" class="headerlink" title="身体：ul&gt;li 记得到时候用strong加粗"></a>身体：ul&gt;li 记得到时候用strong加粗</h5><p><img src="https://s1.ax1x.com/2020/11/03/BsK9g0.png" alt="我是图片"></p>
<h4 id="快报模块之中盒子篇"><a href="#快报模块之中盒子篇" class="headerlink" title="快报模块之中盒子篇"></a>快报模块之中盒子篇</h4><h5 id="形成之后ul和几个li-然后给一个宽度-盒子会自动挤到下面"><a href="#形成之后ul和几个li-然后给一个宽度-盒子会自动挤到下面" class="headerlink" title="形成之后ul和几个li  然后给一个宽度 盒子会自动挤到下面"></a>形成之后ul和几个li  然后给一个宽度 盒子会自动挤到下面</h5><p><img src="https://s1.ax1x.com/2020/11/03/BsKLxx.png" alt="我是图片"></p>
<h4 id="由于最低下盒子是一个图片填充"><a href="#由于最低下盒子是一个图片填充" class="headerlink" title="由于最低下盒子是一个图片填充"></a>由于最低下盒子是一个图片填充</h4><h4 id="所以只需要看自己的盒子距离底部和左边距离"><a href="#所以只需要看自己的盒子距离底部和左边距离" class="headerlink" title="所以只需要看自己的盒子距离底部和左边距离"></a>所以只需要看自己的盒子距离底部和左边距离</h4><h4 id="推荐模块制作"><a href="#推荐模块制作" class="headerlink" title="推荐模块制作"></a>推荐模块制作</h4><h5 id="第一个是一个图片填充-第二个是ul-gt-li-最后一个没有右边框"><a href="#第一个是一个图片填充-第二个是ul-gt-li-最后一个没有右边框" class="headerlink" title="第一个是一个图片填充 第二个是ul&gt;li 最后一个没有右边框"></a>第一个是一个图片填充 第二个是ul&gt;li 最后一个没有右边框</h5><p><img src="https://s1.ax1x.com/2020/11/03/BsQmX6.png" alt="我是图片"></p>
<h4 id="家用电器模块制作"><a href="#家用电器模块制作" class="headerlink" title="家用电器模块制作"></a>家用电器模块制作</h4><p><img src="https://s1.ax1x.com/2020/11/03/BsltPJ.png" alt="我是图片"><br><img src="https://s1.ax1x.com/2020/11/03/Bs1PJJ.png" alt="我是图片"></p>
<h4 id="第一个li样式红字"><a href="#第一个li样式红字" class="headerlink" title="第一个li样式红字"></a>第一个li样式红字</h4><p><img src="https://s1.ax1x.com/2020/11/03/Bs1mdO.png" alt="我是图片"></p>
<h4 id="tab布局样式注意"><a href="#tab布局样式注意" class="headerlink" title="tab布局样式注意"></a>tab布局样式注意</h4><p><img src="https://s1.ax1x.com/2020/11/03/Bs1Ote.png" alt="我是图片"></p>
<h4 id="以至于-tab-concent其实就是几个一个大盒子包含着几个小盒子"><a href="#以至于-tab-concent其实就是几个一个大盒子包含着几个小盒子" class="headerlink" title="以至于 tab-concent其实就是几个一个大盒子包含着几个小盒子"></a>以至于 tab-concent其实就是几个一个大盒子包含着几个小盒子</h4><p><img src="https://s1.ax1x.com/2020/11/03/Bs3YcR.png" alt="我是图片"></p>
<h2 id="注册页布局"><a href="#注册页布局" class="headerlink" title="注册页布局"></a>注册页布局</h2><h4 id="注册页面分3个部分"><a href="#注册页面分3个部分" class="headerlink" title="注册页面分3个部分"></a>注册页面分3个部分</h4><p><img src="https://s1.ax1x.com/2020/11/03/ByrfJA.png" alt="我是图片"></p>
<h3 id="header"><a href="#header" class="headerlink" title="header"></a>header</h3><h4 id="左浮动一个盒子-填充图片"><a href="#左浮动一个盒子-填充图片" class="headerlink" title="左浮动一个盒子  填充图片"></a>左浮动一个盒子  填充图片</h4><p><img src="https://s1.ax1x.com/2020/11/03/ByskFJ.png" alt="我是图片"></p>
<h3 id="registerarea布局"><a href="#registerarea布局" class="headerlink" title="registerarea布局"></a>registerarea布局</h3><h4 id="布局使用ul几个li"><a href="#布局使用ul几个li" class="headerlink" title="布局使用ul几个li"></a>布局使用ul几个li</h4><p><img src="https://s1.ax1x.com/2020/11/03/BysQTe.png" alt="我是图片"><br><img src="https://s1.ax1x.com/2020/11/03/Byyu3n.png" alt="我是图片"></p>
<h2 id="商品列表页"><a href="#商品列表页" class="headerlink" title="商品列表页"></a>商品列表页</h2><h3 id="1-列表页准备工作"><a href="#1-列表页准备工作" class="headerlink" title="1). 列表页准备工作"></a>1). 列表页准备工作</h3><ul>
<li><p>列表页面是新的页面，我们需要新建 list.html    </p>
</li>
<li><p>因为 列表页的 头部 和 底部 基本一致， 我们需要 把首页中的 头部  和 底部的  结构复制过去</p>
</li>
<li><p>头部和底部的 样式 ，列表也需要， 因此 list.html  也需要 引入   common.css  </p>
</li>
<li><p>同时 需要新的 list.css 文件   这个 样式文件，里面只写  list.html  结构里面的内容就好了</p>
<h3 id="2-列表页-header-和-nav-修改"><a href="#2-列表页-header-和-nav-修改" class="headerlink" title="2). 列表页 header 和  nav 修改"></a>2). 列表页 header 和  nav 修改</h3></li>
</ul>
<p><img src="https://s1.ax1x.com/2020/11/06/Bf8Roj.png" alt="我是图片"></p>
<ul>
<li>秒杀盒子 sk  定位 即可  second  kill </li>
<li>1 号 盒子 左侧浮动  sk_list   里面包含 ul  和  li </li>
<li>2 号盒子  左侧浮动   sk_con  里面 包含 ul  和  li</li>
</ul>
<h3 id="3-列表页主体盒子-sk-container"><a href="#3-列表页主体盒子-sk-container" class="headerlink" title="3). 列表页主体盒子 sk _container"></a>3). 列表页主体盒子 sk _container</h3><p>这个盒子里面包含了 所有的 列表页的所有主体内容<br><img src="https://s1.ax1x.com/2020/11/06/BfG2jK.png" alt="我是图片"></p>
<ul>
<li>1号盒子  sk _container    给宽度 1200  不要给高度 </li>
<li>2号盒子  sk_hd   插入图片即可  </li>
<li>3号盒子   sk_bd  里面包含 很多的 ul 和  li </li>
</ul>
<h3 id="4-sk-goods-布局"><a href="#4-sk-goods-布局" class="headerlink" title="4).  sk_goods  布局"></a>4).  sk_goods  布局</h3><p><img src="https://s1.ax1x.com/2020/11/06/BfGOu8.png" alt="我是图片"></p>
<ul>
<li>此li 我们命名为 sk_goods  </li>
<li>1号位置   有 a 包含 本图片 和下面的 标题    插入 图片即可   seckill_mod_goods_img  可以做一个 鼠标放入 图片 上滑动的效果</li>
<li>2号位置  标题  H5  命名为  sk_goods_title  </li>
<li>3号 位置 为 价格 div  命名为  sk_goods_price    </li>
<li>4号位置  为  div  命名为  sk_goods_progress    此处，我们 采取 代码的形式 写出 这个 导航条</li>
<li>5号位置  为 a  链接   命名为  sk_goods_buy   此处注意， 因为父盒子已经有左右padding   我们这里用定位合适。</li>
</ul>
<h3 id="5-分页制作-page"><a href="#5-分页制作-page" class="headerlink" title="5). 分页制作 page"></a>5). 分页制作 page</h3><p><img src="https://s1.ax1x.com/2020/11/06/BfJZE4.png" alt="我是图片"></p>
<ul>
<li>最大的盒子  我们div  命名为  page   注意里面的盒子 全部用 行内块 </li>
<li>1号盒子 用 span  命名为 page_num ( 页码的意思 )  里面 放 a      把a 转换为 行内块  设置样式 <ul>
<li>pn_prev  上一页     pn_next  下一页</li>
</ul>
</li>
<li>2号盒子 用 span 命名为  page_skip    ( skip 跳转 转移的意思 )    里面注意 有 input  和  button  </li>
</ul>
<h3 id="6-知识点-获得焦点元素"><a href="#6-知识点-获得焦点元素" class="headerlink" title="6). 知识点 -获得焦点元素"></a>6). 知识点 -获得焦点元素</h3><h4 id="focus-伪类-选择器用于选取获得焦点的元素-。-我们这里主要针对的是-表单元素"><a href="#focus-伪类-选择器用于选取获得焦点的元素-。-我们这里主要针对的是-表单元素" class="headerlink" title=":focus 伪类 选择器用于选取获得焦点的元素 。 我们这里主要针对的是 表单元素"></a>:focus 伪类 选择器用于选取获得焦点的元素 。 我们这里主要针对的是 表单元素</h4><h4 id="hover"><a href="#hover" class="headerlink" title=":hover"></a>:hover</h4><p>语法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="selector-class">.total</span> <span class="selector-tag">input</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">transition</span>: all .<span class="number">5s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*这个input 获得了焦点*/</span></span><br><span class="line"><span class="selector-class">.total</span> <span class="selector-tag">input</span><span class="selector-pseudo">:focus</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid skyblue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>










]]></content>
      <categories>
        <category>电商网站构图思想</category>
      </categories>
      <tags>
        <tag>项目</tag>
      </tags>
  </entry>
  <entry>
    <title>电商网站构图之商品详情</title>
    <url>/2020/10/25/%E7%94%B5%E5%95%86%E7%BD%91%E7%AB%99%E6%80%9D%E6%83%B33/</url>
    <content><![CDATA[<h1 id="1-品优购项目-四"><a href="#1-品优购项目-四" class="headerlink" title="1. 品优购项目(四)"></a>1. 品优购项目(四)</h1><h2 id="1-详情页-detail-html-常用单词"><a href="#1-详情页-detail-html-常用单词" class="headerlink" title="1). 详情页 detail.html  常用单词"></a>1). 详情页 detail.html  常用单词</h2><table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>主体</td>
<td>de_container</td>
</tr>
<tr>
<td>面包屑导航</td>
<td>crumb_wrap</td>
</tr>
<tr>
<td>产品介绍</td>
<td>product_intro   （ introduction介绍）</td>
</tr>
<tr>
<td>预览包</td>
<td>preview_wrap（左侧部分）</td>
</tr>
<tr>
<td>预览缩略图</td>
<td>preview_img</td>
</tr>
<tr>
<td>预览列表</td>
<td>preview_list</td>
</tr>
<tr>
<td>左按钮</td>
<td>arrow_prev</td>
</tr>
<tr>
<td>右按钮</td>
<td>arrow_next</td>
</tr>
<tr>
<td>小图列表</td>
<td>preview_items</td>
</tr>
<tr>
<td>产品详细信息区域</td>
<td>itemInfo_wrap （右侧部分）</td>
</tr>
<tr>
<td>头部名称</td>
<td>sku_name       skull  头骨</td>
</tr>
<tr>
<td>新闻</td>
<td>news</td>
</tr>
<tr>
<td>摘要</td>
<td>summary</td>
</tr>
<tr>
<td>评价</td>
<td>remark</td>
</tr>
<tr>
<td>价格摘要</td>
<td>summary_price</td>
</tr>
<tr>
<td>配送至</td>
<td>summary_stock</td>
</tr>
<tr>
<td>支持</td>
<td>summary_support</td>
</tr>
<tr>
<td>选择</td>
<td>choose</td>
</tr>
<tr>
<td>选择按钮组</td>
<td>choose_btns</td>
</tr>
<tr>
<td>选择数量</td>
<td>choose_amount</td>
</tr>
<tr>
<td>减去</td>
<td>reduce</td>
</tr>
<tr>
<td>加入购物车</td>
<td>addshopcar</td>
</tr>
<tr>
<td>产品细节</td>
<td>product_detail      （   detail描述）</td>
</tr>
<tr>
<td>左侧边</td>
<td>aside</td>
</tr>
<tr>
<td>详细描述</td>
<td>detail</td>
</tr>
</tbody></table>
<h2 id="2-面包屑导航"><a href="#2-面包屑导航" class="headerlink" title="2). 面包屑导航"></a>2). 面包屑导航</h2><p><img src="https://s1.ax1x.com/2020/11/06/BfJfx0.png" alt="我是图片"></p>
<ul>
<li>crumb_wrap   面包屑导航</li>
<li>关于面包屑导航的由来是源于一则童话故事的一个词语：汉泽尔和格蕾特尔两个人在穿过森林是，为了避免找不到回家的路，他们在沿途走过的地方都会撒下面包屑以便于根据这些面包屑找到回家的路。</li>
</ul>
<h2 id="3-产品介绍-模块"><a href="#3-产品介绍-模块" class="headerlink" title="3). 产品介绍 模块"></a>3). 产品介绍 模块</h2><p><img src="https://s1.ax1x.com/2020/11/06/BfJ5rT.png" alt="我是图片"></p>
<ul>
<li>1号盒子 本模块 命名为产品模块   product_intro   （ introduction介绍）</li>
<li>此模块不要给高度  因为右侧的模块内容高度不固定</li>
<li>里面有2个盒子  分为是2号盒子 和  3号盒子  </li>
<li>2号盒子为  预览区域  preview_wrap   给宽度，给高度， 左浮动</li>
<li>3号盒子为  产品详细信息区域  itemInfo_wrap 给宽度 ，不要给高度  左侧浮动 </li>
</ul>
<h3 id="3-1-preview-list-制作"><a href="#3-1-preview-list-制作" class="headerlink" title="3.1 preview_list 制作"></a>3.1 preview_list 制作</h3><p><img src="https://s1.ax1x.com/2020/11/06/BftxED.png" alt="我是图片"></p>
<ul>
<li>盒子 有左右按钮   arrow_prev   arrow_next  用定位即可 </li>
<li>中间 用 ul  命名为    list-item    给宽度和高度 然后  margin: 0 auto;  水平居中对齐即可</li>
</ul>
<h2 id="4-预览区域制作"><a href="#4-预览区域制作" class="headerlink" title="4).  预览区域制作"></a>4).  预览区域制作</h2><p><img src="https://s1.ax1x.com/2020/11/06/BfJ4MV.png" alt="我是图片"></p>
<ul>
<li>1号盒子 为  图片预览   命名为   preview_img    注意里面的图片，我们切图的时候是 398*398 像素的</li>
<li>2号盒子 为 预览列表   命名为  preview_list</li>
</ul>
<h2 id="5-产品详细信息区域制作-itemInfo-wrap"><a href="#5-产品详细信息区域制作-itemInfo-wrap" class="headerlink" title="5). 产品详细信息区域制作 itemInfo_wrap"></a>5). 产品详细信息区域制作 itemInfo_wrap</h2><p><img src="https://s1.ax1x.com/2020/11/06/BfJTZF.png" alt="我是图片"></p>
<ul>
<li><p>此盒子命名为 itemInfo</p>
</li>
<li><p>1 号盒子 为 头部 sku_name    </p>
</li>
<li><p>2 号盒子 为 最新新闻  news  </p>
</li>
<li><p>3号盒子 为  产品详细摘要  我们命名为  summary （摘要的意思）   之所以下面都是摘要部分，因为里面格式基本相同。</p>
</li>
<li><p>下面为详细命名</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>头部名称</td>
<td>sku_name       skull  头骨</td>
</tr>
<tr>
<td>新闻</td>
<td>news</td>
</tr>
<tr>
<td>摘要</td>
<td>summary</td>
</tr>
<tr>
<td>评价</td>
<td>remark</td>
</tr>
<tr>
<td>价格摘要</td>
<td>summary_price</td>
</tr>
<tr>
<td>促销摘要</td>
<td>summary_promotion</td>
</tr>
<tr>
<td>配送至</td>
<td>summary_stock</td>
</tr>
<tr>
<td>支持</td>
<td>summary_support</td>
</tr>
<tr>
<td>选择</td>
<td>choose</td>
</tr>
<tr>
<td>选择版本</td>
<td>choose_version</td>
</tr>
<tr>
<td>选择类型</td>
<td>choose_type</td>
</tr>
<tr>
<td>选择按钮组</td>
<td>choose_btns</td>
</tr>
<tr>
<td>选择数量</td>
<td>choose_amount        add 是加的意思</td>
</tr>
<tr>
<td>减去</td>
<td>reduce     cursor: not-allowed;  禁止符号</td>
</tr>
<tr>
<td>加入购物车</td>
<td>addshopcar</td>
</tr>
</tbody></table>
</li>
</ul>
<h2 id="6-产品细节模块-product-detail"><a href="#6-产品细节模块-product-detail" class="headerlink" title="6).  产品细节模块 product_detail"></a>6).  产品细节模块 product_detail</h2><p><img src="https://s1.ax1x.com/2020/11/06/BfJIqU.png" alt="我是图片"></p>
<ul>
<li>大盒子为 product_detail 模块 不要给高度 ，别忘记清除浮动</li>
<li>1号盒子 左侧浮动 命名为 aside  有宽度 不给高度</li>
<li>2号盒子 右侧浮动  命名为 detail   有宽度不给高度</li>
</ul>
<h3 id="6-1-aside-布局"><a href="#6-1-aside-布局" class="headerlink" title="6.1) aside 布局"></a>6.1) aside 布局</h3><p><img src="https://s1.ax1x.com/2020/11/06/BfJzqO.png" alt="我是图片"><br><img src="https://s1.ax1x.com/2020/11/06/BftwB8.png" alt="我是图片"></p>
<ul>
<li>1 号盒子 命名为 tab_list   给高度就好了 ，里面 放 ul 和 li   注意这是 tab栏切换布局</li>
<li>2 号盒子  命名为  tab_con    里面还包含 很多个ul.item 和 上面的 tab_list 里面的li一一对应。   </li>
</ul>
<h3 id="6-2-detail-布局"><a href="#6-2-detail-布局" class="headerlink" title="6.2) detail 布局"></a>6.2) detail 布局</h3><p><img src="https://s1.ax1x.com/2020/11/06/Bftdnf.png" alt="我是图片"></p>
<ul>
<li>1 号盒子 命名为 detail_tab_list   给高度就好了 ，里面 放 ul 和 li   注意这是 tab栏切换布局</li>
<li>2 号盒子  命名为  detail_tab_con    里面还包含 很多个ul.item 和 上面的 tab_list 里面的li一一对应。   </li>
</ul>
<h2 id="1-html-我们学的就是常用标签，-就是基本盒子"><a href="#1-html-我们学的就是常用标签，-就是基本盒子" class="headerlink" title="1. html 我们学的就是常用标签， 就是基本盒子"></a>1. html 我们学的就是常用标签， 就是基本盒子</h2><h2 id="2-css-就是用来美化布局网页。"><a href="#2-css-就是用来美化布局网页。" class="headerlink" title="2. css 就是用来美化布局网页。"></a>2. css 就是用来美化布局网页。</h2><h2 id="3-html-css-是没有逻辑可言的，基本就是搭积木摆放盒子的过程，你需要的是耐心。"><a href="#3-html-css-是没有逻辑可言的，基本就是搭积木摆放盒子的过程，你需要的是耐心。" class="headerlink" title="3. html+css 是没有逻辑可言的，基本就是搭积木摆放盒子的过程，你需要的是耐心。"></a>3. html+css 是没有逻辑可言的，基本就是搭积木摆放盒子的过程，你需要的是耐心。</h2><h2 id="4-对同学们来说，现在最困难的是-布局结构-。欠缺分析页面布局的能力"><a href="#4-对同学们来说，现在最困难的是-布局结构-。欠缺分析页面布局的能力" class="headerlink" title="4. 对同学们来说，现在最困难的是 布局结构 。欠缺分析页面布局的能力"></a>4. 对同学们来说，现在最困难的是 布局结构 。欠缺分析页面布局的能力</h2><h2 id="5-多看别人写的页面，模仿人家的布局，每次写页面总会有新的收获。"><a href="#5-多看别人写的页面，模仿人家的布局，每次写页面总会有新的收获。" class="headerlink" title="5. 多看别人写的页面，模仿人家的布局，每次写页面总会有新的收获。"></a>5. 多看别人写的页面，模仿人家的布局，每次写页面总会有新的收获。</h2><h2 id="6-错误总是在所难免，一定要学会利用chrome-调试工具，-他们能快速帮我们排查错误。你还需要细心。"><a href="#6-错误总是在所难免，一定要学会利用chrome-调试工具，-他们能快速帮我们排查错误。你还需要细心。" class="headerlink" title="6. 错误总是在所难免，一定要学会利用chrome 调试工具， 他们能快速帮我们排查错误。你还需要细心。"></a>6. 错误总是在所难免，一定要学会利用chrome 调试工具， 他们能快速帮我们排查错误。你还需要细心。</h2><h2 id="7-学好定位，对后面学习JavaScript-有很大的帮助。"><a href="#7-学好定位，对后面学习JavaScript-有很大的帮助。" class="headerlink" title="7. 学好定位，对后面学习JavaScript 有很大的帮助。"></a>7. 学好定位，对后面学习JavaScript 有很大的帮助。</h2>]]></content>
      <categories>
        <category>电商网站构图思想</category>
      </categories>
      <tags>
        <tag>项目</tag>
      </tags>
  </entry>
  <entry>
    <title>移动端web开发之基础</title>
    <url>/2020/03/18/%E7%A7%BB%E5%8A%A8web1/</url>
    <content><![CDATA[<h1 id="什么是移动端？"><a href="#什么是移动端？" class="headerlink" title="什么是移动端？"></a>什么是移动端？</h1><h3 id="手机-平板电脑"><a href="#手机-平板电脑" class="headerlink" title="手机   平板电脑"></a>手机   平板电脑</h3><h2 id=""><a href="#" class="headerlink" title=""></a><img src="https://iknow-pic.cdn.bcebos.com/0ff41bd5ad6eddc44bf32e9a37dbb6fd526633be?x-bce-process=image/resize,m_lfit,w_600,h_800,limit_1"></h2><h1 id="移动端web要点"><a href="#移动端web要点" class="headerlink" title="移动端web要点"></a>移动端web要点</h1><h2 id="1-移动端事件"><a href="#1-移动端事件" class="headerlink" title="1.移动端事件"></a>1.移动端事件</h2><h2 id="2-移动端调试"><a href="#2-移动端调试" class="headerlink" title="2.移动端调试"></a>2.移动端调试</h2><h2 id="3-终端检测"><a href="#3-终端检测" class="headerlink" title="3.终端检测"></a>3.终端检测</h2><h2 id="4-移动端常见问题"><a href="#4-移动端常见问题" class="headerlink" title="4.移动端常见问题"></a>4.移动端常见问题</h2><h2 id="5-移动性能优化"><a href="#5-移动性能优化" class="headerlink" title="5.移动性能优化"></a>5.移动性能优化</h2><hr>
<h1 id="CSS像素"><a href="#CSS像素" class="headerlink" title="CSS像素"></a>CSS像素</h1><h2 id="CSS像素-1"><a href="#CSS像素-1" class="headerlink" title="CSS像素"></a>CSS像素</h2><h2 id="逻辑像素-logical-pixel"><a href="#逻辑像素-logical-pixel" class="headerlink" title="逻辑像素(logical pixel)"></a>逻辑像素(logical pixel)</h2><h2 id="设备独立像素-dpi-device-independent-pixel"><a href="#设备独立像素-dpi-device-independent-pixel" class="headerlink" title="设备独立像素(dpi:device independent pixel)"></a>设备独立像素(dpi:device independent pixel)</h2><hr>
<h1 id="视口-viewport"><a href="#视口-viewport" class="headerlink" title="视口-viewport"></a>视口-viewport</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meat</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="缩放比"><a href="#缩放比" class="headerlink" title="缩放比"></a>缩放比</h2><h3 id="1不需要缩放-宽和设备的宽相等不需要缩放"><a href="#1不需要缩放-宽和设备的宽相等不需要缩放" class="headerlink" title="=1不需要缩放  宽和设备的宽相等不需要缩放"></a>=1不需要缩放  宽和设备的宽相等不需要缩放</h3><h3 id="0-5倍缩放时-物理像素会变大-保证总数不变"><a href="#0-5倍缩放时-物理像素会变大-保证总数不变" class="headerlink" title="0.5倍缩放时  物理像素会变大 保证总数不变"></a>0.5倍缩放时  物理像素会变大 保证总数不变</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meat</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;initial-scale=1&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="兼容各个浏览器"><a href="#兼容各个浏览器" class="headerlink" title="兼容各个浏览器"></a>兼容各个浏览器</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meat</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width,initial-scale=1&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="user-scalable-用户是否可以缩放-yes是可以-no是不可以"><a href="#user-scalable-用户是否可以缩放-yes是可以-no是不可以" class="headerlink" title="user-scalable 用户是否可以缩放 yes是可以  no是不可以"></a>user-scalable 用户是否可以缩放 yes是可以  no是不可以</h3><h3 id="user-scalable-no-maximum-scale-1-minimum-scale-1"><a href="#user-scalable-no-maximum-scale-1-minimum-scale-1" class="headerlink" title="user-scalable=no === maximum-scale=1,minimum-scale=1"></a>user-scalable=no === maximum-scale=1,minimum-scale=1</h3><h3 id="兼容各个浏览器-1"><a href="#兼容各个浏览器-1" class="headerlink" title="兼容各个浏览器"></a>兼容各个浏览器</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meat</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width,initial-scale=1,user-scalable=no,maximum-scale=1,minimum-scale=1&quot;</span> &gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="如何获取用户视口？"><a href="#如何获取用户视口？" class="headerlink" title="如何获取用户视口？"></a>如何获取用户视口？</h2><h2 id="-1"><a href="#-1" class="headerlink" title=""></a><img src="https://s1.ax1x.com/2020/10/05/0tdIPg.png"></h2><h1 id="box-sizing"><a href="#box-sizing" class="headerlink" title="box-sizing"></a>box-sizing</h1><h2 id="PC端会考虑兼容性-移动端不会考虑兼容性"><a href="#PC端会考虑兼容性-移动端不会考虑兼容性" class="headerlink" title="PC端会考虑兼容性  移动端不会考虑兼容性"></a>PC端会考虑兼容性  移动端不会考虑兼容性</h2><h2 id="box-sizing-content-box-内容的宽高表示不变-向外扩张"><a href="#box-sizing-content-box-内容的宽高表示不变-向外扩张" class="headerlink" title="box-sizing:content-box 内容的宽高表示不变 (向外扩张)"></a>box-sizing:content-box 内容的宽高表示不变 (向外扩张)</h2><h2 id="box-sizing-border-box-内容的宽高开始从内容border开始计算，简而言之是把border包括在里面了-向内压缩"><a href="#box-sizing-border-box-内容的宽高开始从内容border开始计算，简而言之是把border包括在里面了-向内压缩" class="headerlink" title="box-sizing:border-box 内容的宽高开始从内容border开始计算，简而言之是把border包括在里面了(向内压缩)"></a>box-sizing:border-box 内容的宽高开始从内容border开始计算，简而言之是把border包括在里面了(向内压缩)</h2><p><img src="https://s1.ax1x.com/2020/10/05/0twwyn.png"></p>
]]></content>
      <categories>
        <category>移动端web</category>
      </categories>
  </entry>
  <entry>
    <title>移动端web开发之Flex</title>
    <url>/2020/03/19/%E7%A7%BB%E5%8A%A8web2/</url>
    <content><![CDATA[<h1 id="什么是Flex布局"><a href="#什么是Flex布局" class="headerlink" title="什么是Flex布局"></a>什么是Flex布局</h1><h2 id="Flex是Flexible-Box的缩写，意为“灵活的盒子”或者“弹性的盒子”，所以flex布局也叫弹性布局"><a href="#Flex是Flexible-Box的缩写，意为“灵活的盒子”或者“弹性的盒子”，所以flex布局也叫弹性布局" class="headerlink" title="Flex是Flexible Box的缩写，意为“灵活的盒子”或者“弹性的盒子”，所以flex布局也叫弹性布局"></a>Flex是Flexible Box的缩写，意为“灵活的盒子”或者“弹性的盒子”，所以flex布局也叫弹性布局</h2><hr>
<h2 id="什么是flex容器"><a href="#什么是flex容器" class="headerlink" title="什么是flex容器"></a>什么是flex容器</h2><h3 id="采用flex布局的元素，称之为flex容器"><a href="#采用flex布局的元素，称之为flex容器" class="headerlink" title="采用flex布局的元素，称之为flex容器"></a>采用flex布局的元素，称之为flex容器</h3><h3 id="box-dispaly：flex-inline-flex"><a href="#box-dispaly：flex-inline-flex" class="headerlink" title=".box{dispaly：flex|inline-flex}"></a>.box{dispaly：flex|inline-flex}</h3><hr>
<h1 id="容器的属性"><a href="#容器的属性" class="headerlink" title="容器的属性"></a>容器的属性</h1><h2 id="display-决定使用flex布局"><a href="#display-决定使用flex布局" class="headerlink" title="display 决定使用flex布局"></a>display 决定使用flex布局</h2><h3 id="display：flex-与inline-flex"><a href="#display：flex-与inline-flex" class="headerlink" title="display：flex|与inline-flex"></a>display：flex|与inline-flex</h3><p><img src="https://s1.ax1x.com/2020/10/06/0U5NUU.png"></p>
<h3 id="设置成flex这个父容器是有固定宽度的"><a href="#设置成flex这个父容器是有固定宽度的" class="headerlink" title="设置成flex这个父容器是有固定宽度的"></a>设置成flex这个父容器是有固定宽度的</h3><h3 id="设置成inline-flex呢-是里面内容撑开的"><a href="#设置成inline-flex呢-是里面内容撑开的" class="headerlink" title="设置成inline-flex呢  是里面内容撑开的"></a>设置成inline-flex呢  是里面内容撑开的</h3><p><img src="https://s1.ax1x.com/2020/10/06/0U5cVK.png"></p>
<hr>
<h2 id="flex-direction属性"><a href="#flex-direction属性" class="headerlink" title="flex-direction属性"></a>flex-direction属性</h2><h2 id="flex-direction-row-默认值-row-reverse-倒着排序-column上下正序-column-reseverse上下倒叙"><a href="#flex-direction-row-默认值-row-reverse-倒着排序-column上下正序-column-reseverse上下倒叙" class="headerlink" title="flex-direction:row 默认值|row-reverse 倒着排序|column上下正序|column-reseverse上下倒叙;"></a>flex-direction:row 默认值|row-reverse 倒着排序|column上下正序|column-reseverse上下倒叙;</h2><p><img src="https://s1.ax1x.com/2020/10/06/0UIOw6.png"><br><img src="https://s1.ax1x.com/2020/10/06/0UonpQ.png"><br><img src="https://s1.ax1x.com/2020/10/06/0Uo37V.png"></p>
<hr>
<h2 id="flex-wrap属性"><a href="#flex-wrap属性" class="headerlink" title="flex-wrap属性"></a>flex-wrap属性</h2><h2 id="flex-wrap：nowrap-默认值-wrap-换行在第一行上方-wrap-reverse-换行-在第一行下方"><a href="#flex-wrap：nowrap-默认值-wrap-换行在第一行上方-wrap-reverse-换行-在第一行下方" class="headerlink" title="flex-wrap：nowrap 默认值|wrap 换行在第一行上方|wrap-reverse 换行 在第一行下方"></a>flex-wrap：nowrap 默认值|wrap 换行在第一行上方|wrap-reverse 换行 在第一行下方</h2><p><img src="https://s1.ax1x.com/2020/10/07/0UTQ8e.png"></p>
<hr>
<h2 id="justify-content属性"><a href="#justify-content属性" class="headerlink" title="justify-content属性"></a>justify-content属性</h2><h2 id="justify-content属性定义了项目在主轴上的对其方式"><a href="#justify-content属性定义了项目在主轴上的对其方式" class="headerlink" title="justify-content属性定义了项目在主轴上的对其方式"></a>justify-content属性定义了项目在主轴上的对其方式</h2><h2 id="justify-content属性值分别是flex-start左对齐-felx-end右对齐-center居中-space-between两端对齐项目之间间隔相等-space-around每个项目两侧间隔相等。"><a href="#justify-content属性值分别是flex-start左对齐-felx-end右对齐-center居中-space-between两端对齐项目之间间隔相等-space-around每个项目两侧间隔相等。" class="headerlink" title="justify-content属性值分别是flex-start左对齐|felx-end右对齐|center居中|space-between两端对齐项目之间间隔相等|space-around每个项目两侧间隔相等。"></a>justify-content属性值分别是flex-start左对齐|felx-end右对齐|center居中|space-between两端对齐项目之间间隔相等|space-around每个项目两侧间隔相等。</h2><p><img src="https://s1.ax1x.com/2020/10/07/0dxQFH.png"></p>
<hr>
<h2 id="align-items属性"><a href="#align-items属性" class="headerlink" title="align-items属性"></a>align-items属性</h2><h2 id="align-items属性定义项目在交叉轴上如何对齐"><a href="#align-items属性定义项目在交叉轴上如何对齐" class="headerlink" title="align-items属性定义项目在交叉轴上如何对齐"></a>align-items属性定义项目在交叉轴上如何对齐</h2><h2 id="align-items属性flex-start交叉轴起点对齐-felx-end交叉轴终点对齐-center交叉轴中点对齐-baseline项目的文字基线对齐-stretch每个字将沾满容器高度"><a href="#align-items属性flex-start交叉轴起点对齐-felx-end交叉轴终点对齐-center交叉轴中点对齐-baseline项目的文字基线对齐-stretch每个字将沾满容器高度" class="headerlink" title="align-items属性flex-start交叉轴起点对齐|felx-end交叉轴终点对齐|center交叉轴中点对齐|baseline项目的文字基线对齐|stretch每个字将沾满容器高度"></a>align-items属性flex-start交叉轴起点对齐|felx-end交叉轴终点对齐|center交叉轴中点对齐|baseline项目的文字基线对齐|stretch每个字将沾满容器高度</h2><p><img src="https://s1.ax1x.com/2020/10/07/0dzt3R.png"><br><img src="https://s1.ax1x.com/2020/10/07/0dzwDK.png"><br><img src="https://s1.ax1x.com/2020/10/07/0dzDED.png"><br><img src="https://s1.ax1x.com/2020/10/07/0dzrUe.png"><br><img src="https://s1.ax1x.com/2020/10/07/0dzc8A.png"></p>
<hr>
<h2 id="align-content属性"><a href="#align-content属性" class="headerlink" title="align-content属性"></a>align-content属性</h2><h2 id="align-items属性定义多根轴线的对齐方式"><a href="#align-items属性定义多根轴线的对齐方式" class="headerlink" title="align-items属性定义多根轴线的对齐方式"></a>align-items属性定义多根轴线的对齐方式</h2><h2 id="align-items属性flex-start交叉轴起点对齐-felx-end交叉轴终点对齐-center交叉轴中点对齐-space-between上下平均分布-space-around每根轴线两端距离相等-stretch每个字将沾满容器高度"><a href="#align-items属性flex-start交叉轴起点对齐-felx-end交叉轴终点对齐-center交叉轴中点对齐-space-between上下平均分布-space-around每根轴线两端距离相等-stretch每个字将沾满容器高度" class="headerlink" title="align-items属性flex-start交叉轴起点对齐|felx-end交叉轴终点对齐|center交叉轴中点对齐|space-between上下平均分布|space-around每根轴线两端距离相等|stretch每个字将沾满容器高度"></a>align-items属性flex-start交叉轴起点对齐|felx-end交叉轴终点对齐|center交叉轴中点对齐|space-between上下平均分布|space-around每根轴线两端距离相等|stretch每个字将沾满容器高度</h2><p><img src="https://s1.ax1x.com/2020/10/07/0wSuPH.png"><br><img src="https://s1.ax1x.com/2020/10/07/0wS1Mt.png"><br><img src="https://s1.ax1x.com/2020/10/07/0wSaGj.png"><br><img src="https://s1.ax1x.com/2020/10/07/0wSrLV.png"><br><img src="https://s1.ax1x.com/2020/10/07/0wSWW9.png"><br><img src="https://s1.ax1x.com/2020/10/08/0wSLJH.png"></p>
]]></content>
      <categories>
        <category>移动端web</category>
      </categories>
  </entry>
  <entry>
    <title>移动端web开发之项目的属性</title>
    <url>/2020/03/20/%E7%A7%BB%E5%8A%A8web3/</url>
    <content><![CDATA[<h1 id="order"><a href="#order" class="headerlink" title="order"></a>order</h1><h2 id="order定义项目排序"><a href="#order定义项目排序" class="headerlink" title="order定义项目排序"></a>order定义项目排序</h2><h2 id="数值越小，排列越靠前，默认为0"><a href="#数值越小，排列越靠前，默认为0" class="headerlink" title="数值越小，排列越靠前，默认为0"></a>数值越小，排列越靠前，默认为0</h2><p><img src="https://s1.ax1x.com/2020/10/08/0wpXAU.png"></p>
<hr>
<h1 id="flex-grow"><a href="#flex-grow" class="headerlink" title="flex-grow"></a>flex-grow</h1><h2 id="定义项目放大比例，默认都为0，如果剩余空间大，也不放大"><a href="#定义项目放大比例，默认都为0，如果剩余空间大，也不放大" class="headerlink" title="定义项目放大比例，默认都为0，如果剩余空间大，也不放大"></a>定义项目放大比例，默认都为0，如果剩余空间大，也不放大</h2><h2 id="数值越小，排列越靠前，默认为0-1"><a href="#数值越小，排列越靠前，默认为0-1" class="headerlink" title="数值越小，排列越靠前，默认为0"></a>数值越小，排列越靠前，默认为0</h2><p><img src="https://s1.ax1x.com/2020/10/08/0w9ngA.png"><br><img src="https://s1.ax1x.com/2020/10/08/0w9Mut.png"><br><img src="https://s1.ax1x.com/2020/10/08/0w93E8.png"></p>
<hr>
<h1 id="flex-shrink"><a href="#flex-shrink" class="headerlink" title="flex-shrink"></a>flex-shrink</h1><h2 id="定义项目的缩小比例，默认为1，如果空间不足，该项目会缩小。"><a href="#定义项目的缩小比例，默认为1，如果空间不足，该项目会缩小。" class="headerlink" title="定义项目的缩小比例，默认为1，如果空间不足，该项目会缩小。"></a>定义项目的缩小比例，默认为1，如果空间不足，该项目会缩小。</h2><p><img src="https://s1.ax1x.com/2020/10/08/0w9wD0.png"></p>
<hr>
<h1 id="flex-basis"><a href="#flex-basis" class="headerlink" title="flex-basis"></a>flex-basis</h1><h2 id="定义项目的在分配多余空间之前，项目沾主轴空间，浏览器根据这个属性计算是否有多余空间"><a href="#定义项目的在分配多余空间之前，项目沾主轴空间，浏览器根据这个属性计算是否有多余空间" class="headerlink" title="定义项目的在分配多余空间之前，项目沾主轴空间，浏览器根据这个属性计算是否有多余空间"></a>定义项目的在分配多余空间之前，项目沾主轴空间，浏览器根据这个属性计算是否有多余空间</h2><p><img src="https://s1.ax1x.com/2020/10/08/0wC6df.png"></p>
<hr>
<h1 id="align-self"><a href="#align-self" class="headerlink" title="align-self"></a>align-self</h1><h2 id="定义项目单个项目与其他不一样的对齐方式，可覆盖align-item属性"><a href="#定义项目单个项目与其他不一样的对齐方式，可覆盖align-item属性" class="headerlink" title="定义项目单个项目与其他不一样的对齐方式，可覆盖align-item属性"></a>定义项目单个项目与其他不一样的对齐方式，可覆盖align-item属性</h2><p><img src="https://s1.ax1x.com/2020/10/08/0wCILq.png"></p>
]]></content>
      <categories>
        <category>移动端web</category>
      </categories>
  </entry>
  <entry>
    <title>JS红宝书之对象与数组</title>
    <url>/2020/10/27/%E7%BA%A2%E5%AE%9D%E4%B9%A610/</url>
    <content><![CDATA[<h1 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h1><h5 id="到目前为止，大多数引用值的示例使用的是-Object-类型。Object-是-ECMAScript-中最常用的类型之一。虽然-Object-的实例没有多少功能，但很适合存储和在应用程序间交换数据。"><a href="#到目前为止，大多数引用值的示例使用的是-Object-类型。Object-是-ECMAScript-中最常用的类型之一。虽然-Object-的实例没有多少功能，但很适合存储和在应用程序间交换数据。" class="headerlink" title="到目前为止，大多数引用值的示例使用的是 Object 类型。Object 是 ECMAScript 中最常用的类型之一。虽然 Object 的实例没有多少功能，但很适合存储和在应用程序间交换数据。"></a>到目前为止，大多数引用值的示例使用的是 Object 类型。Object 是 ECMAScript 中最常用的类型之一。虽然 Object 的实例没有多少功能，但很适合存储和在应用程序间交换数据。</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> decade = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">decade.name = <span class="string">&quot;MSS&quot;</span>;</span><br><span class="line">decade.age = <span class="number">29</span>; </span><br></pre></td></tr></table></figure>
<h5 id="另一种方式是使用对象字面量（object-literal）表示法。对象字面量是对象定义的简写形式，目的是为了简化包含大量属性的对象的创建。"><a href="#另一种方式是使用对象字面量（object-literal）表示法。对象字面量是对象定义的简写形式，目的是为了简化包含大量属性的对象的创建。" class="headerlink" title="另一种方式是使用对象字面量（object literal）表示法。对象字面量是对象定义的简写形式，目的是为了简化包含大量属性的对象的创建。"></a>另一种方式是使用对象字面量（object literal）表示法。对象字面量是对象定义的简写形式，目的是为了简化包含大量属性的对象的创建。</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;  <span class="comment">// 与 new Object()相同</span></span><br><span class="line"> name: <span class="string">&quot;Nicholas&quot;</span>,</span><br><span class="line"> age: <span class="number">29</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h1 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h1><h2 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h2><h5 id="有几种基本的方式可以创建数组。一种是使用-Array-构造函数，比如："><a href="#有几种基本的方式可以创建数组。一种是使用-Array-构造函数，比如：" class="headerlink" title="有几种基本的方式可以创建数组。一种是使用 Array 构造函数，比如："></a>有几种基本的方式可以创建数组。一种是使用 Array 构造函数，比如：</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> colors = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> colors = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">20</span>); <span class="comment">//创建一个初始 length 为 20 的数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> colors = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">&quot;red&quot;</span>, <span class="string">&quot;blue&quot;</span>, <span class="string">&quot;green&quot;</span>); <span class="comment">//创建一个包含 3 个元素的数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> names = []; <span class="comment">// 创建一个空数组</span></span><br><span class="line"><span class="keyword">let</span> values = [<span class="number">1</span>,<span class="number">2</span>,]; <span class="comment">// 创建一个包含 2 个元素的数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> colors = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">3</span>); <span class="comment">// 创建一个包含 3 个元素的数组</span></span><br><span class="line"><span class="keyword">let</span> names = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">&quot;Greg&quot;</span>); <span class="comment">// 创建一个只包含一个元素，即字符串&quot;Greg&quot;的数组</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="数组空位"><a href="#数组空位" class="headerlink" title="数组空位"></a>数组空位</h2><h4 id="使用数组字面量初始化数组时，可以使用一串逗号来创建空位（hole）。ECMAScript-会将逗号之间相应索引位置的值当成空位，ES6-规范重新定义了该如何处理这些空位。"><a href="#使用数组字面量初始化数组时，可以使用一串逗号来创建空位（hole）。ECMAScript-会将逗号之间相应索引位置的值当成空位，ES6-规范重新定义了该如何处理这些空位。" class="headerlink" title="使用数组字面量初始化数组时，可以使用一串逗号来创建空位（hole）。ECMAScript 会将逗号之间相应索引位置的值当成空位，ES6 规范重新定义了该如何处理这些空位。"></a>使用数组字面量初始化数组时，可以使用一串逗号来创建空位（hole）。ECMAScript 会将逗号之间相应索引位置的值当成空位，ES6 规范重新定义了该如何处理这些空位。</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> options = [,,,,,]; <span class="comment">// 创建包含 5 个元素的数组</span></span><br><span class="line"><span class="built_in">console</span>.log(options.length); <span class="comment">// 5</span></span><br><span class="line"><span class="built_in">console</span>.log(options); <span class="comment">// [,,,,,] </span></span><br></pre></td></tr></table></figure>


<h2 id="数组索引"><a href="#数组索引" class="headerlink" title="数组索引"></a>数组索引</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> colors = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;blue&quot;</span>, <span class="string">&quot;green&quot;</span>]; <span class="comment">// 定义一个字符串数组</span></span><br><span class="line">alert(colors[<span class="number">0</span>]); <span class="comment">// 显示第一项</span></span><br><span class="line">colors[<span class="number">2</span>] = <span class="string">&quot;black&quot;</span>; <span class="comment">// 修改第三项</span></span><br><span class="line">colors[<span class="number">3</span>] = <span class="string">&quot;brown&quot;</span>; <span class="comment">// 添加第四项</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h3 id="数组-length-属性的独特之处在于，它不是只读的。通过修改-length-属性，可以从数组末尾删除或添加元素。"><a href="#数组-length-属性的独特之处在于，它不是只读的。通过修改-length-属性，可以从数组末尾删除或添加元素。" class="headerlink" title="数组 length 属性的独特之处在于，它不是只读的。通过修改 length 属性，可以从数组末尾删除或添加元素。"></a>数组 length 属性的独特之处在于，它不是只读的。通过修改 length 属性，可以从数组末尾删除或添加元素。</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> colors = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;blue&quot;</span>, <span class="string">&quot;green&quot;</span>]; <span class="comment">// 创建一个包含 3 个字符串的数组</span></span><br><span class="line">colors.length = <span class="number">2</span>;</span><br><span class="line">alert(colors[<span class="number">2</span>]); <span class="comment">// undefined </span></span><br></pre></td></tr></table></figure>

<h2 id="检测数组"><a href="#检测数组" class="headerlink" title="检测数组"></a>检测数组</h2><h4 id="一个经典的-ECMAScript-问题是判断一个对象是不是数组。在只有一个网页（因而只有一个全局作用域）的情况下，使用-instanceof-操作符就足矣"><a href="#一个经典的-ECMAScript-问题是判断一个对象是不是数组。在只有一个网页（因而只有一个全局作用域）的情况下，使用-instanceof-操作符就足矣" class="headerlink" title="一个经典的 ECMAScript 问题是判断一个对象是不是数组。在只有一个网页（因而只有一个全局作用域）的情况下，使用 instanceof 操作符就足矣"></a>一个经典的 ECMAScript 问题是判断一个对象是不是数组。在只有一个网页（因而只有一个全局作用域）的情况下，使用 instanceof 操作符就足矣</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (value <span class="keyword">instanceof</span> <span class="built_in">Array</span>)&#123;</span><br><span class="line"> <span class="comment">// 操作数组</span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>



<h4 id="Array-isArray-方法这个方法的目的就是确定一个值是否为数组，而不用管它是在哪个全局执行上下文中创建的。"><a href="#Array-isArray-方法这个方法的目的就是确定一个值是否为数组，而不用管它是在哪个全局执行上下文中创建的。" class="headerlink" title="Array.isArray()方法这个方法的目的就是确定一个值是否为数组，而不用管它是在哪个全局执行上下文中创建的。"></a>Array.isArray()方法这个方法的目的就是确定一个值是否为数组，而不用管它是在哪个全局执行上下文中创建的。</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(value))&#123;</span><br><span class="line"> <span class="comment">// 操作数组</span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>



<h2 id="迭代器方法"><a href="#迭代器方法" class="headerlink" title="迭代器方法"></a>迭代器方法</h2><h4 id="在-ES6-中，Array-的原型上暴露了-3-个用于检索数组内容的方法：keys-、values-和entries-。keys-返回数组索引的迭代器，values-返回数组元素的迭代器，而-entries-返回索引-值对的迭代器"><a href="#在-ES6-中，Array-的原型上暴露了-3-个用于检索数组内容的方法：keys-、values-和entries-。keys-返回数组索引的迭代器，values-返回数组元素的迭代器，而-entries-返回索引-值对的迭代器" class="headerlink" title="在 ES6 中，Array 的原型上暴露了 3 个用于检索数组内容的方法：keys()、values()和entries()。keys()返回数组索引的迭代器，values()返回数组元素的迭代器，而 entries()返回索引/值对的迭代器"></a>在 ES6 中，Array 的原型上暴露了 3 个用于检索数组内容的方法：keys()、values()和entries()。keys()返回数组索引的迭代器，values()返回数组元素的迭代器，而 entries()返回索引/值对的迭代器</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> a = [<span class="string">&quot;foo&quot;</span>, <span class="string">&quot;bar&quot;</span>, <span class="string">&quot;baz&quot;</span>, <span class="string">&quot;qux&quot;</span>];</span><br><span class="line"><span class="comment">// 因为这些方法都返回迭代器，所以可以将它们的内容</span></span><br><span class="line"><span class="comment">// 通过 Array.from()直接转换为数组实例</span></span><br><span class="line"><span class="keyword">const</span> aKeys = <span class="built_in">Array</span>.from(a.keys());</span><br><span class="line"><span class="keyword">const</span> aValues = <span class="built_in">Array</span>.from(a.values());</span><br><span class="line"><span class="keyword">const</span> aEntries = <span class="built_in">Array</span>.from(a.entries());</span><br><span class="line"><span class="built_in">console</span>.log(aKeys); <span class="comment">// [0, 1, 2, 3]</span></span><br><span class="line"><span class="built_in">console</span>.log(aValues); <span class="comment">// [&quot;foo&quot;, &quot;bar&quot;, &quot;baz&quot;, &quot;qux&quot;]</span></span><br><span class="line"><span class="built_in">console</span>.log(aEntries); <span class="comment">// [[0, &quot;foo&quot;], [1, &quot;bar&quot;], [2, &quot;baz&quot;], [3, &quot;qux&quot;]]</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="复制和填充方法"><a href="#复制和填充方法" class="headerlink" title="复制和填充方法"></a>复制和填充方法</h2><h4 id="ES6-新增了两个方法：批量复制方法-copyWithin-，以及填充数组方法-fill-。这两个方法的函数签名类似，都需要指定既有数组实例上的一个范围，包含开始索引，不包含结束索引。使用这个方法不会改变数组的大小。"><a href="#ES6-新增了两个方法：批量复制方法-copyWithin-，以及填充数组方法-fill-。这两个方法的函数签名类似，都需要指定既有数组实例上的一个范围，包含开始索引，不包含结束索引。使用这个方法不会改变数组的大小。" class="headerlink" title="ES6 新增了两个方法：批量复制方法 copyWithin()，以及填充数组方法 fill()。这两个方法的函数签名类似，都需要指定既有数组实例上的一个范围，包含开始索引，不包含结束索引。使用这个方法不会改变数组的大小。"></a>ES6 新增了两个方法：批量复制方法 copyWithin()，以及填充数组方法 fill()。这两个方法的函数签名类似，都需要指定既有数组实例上的一个范围，包含开始索引，不包含结束索引。使用这个方法不会改变数组的大小。</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> zeroes = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>];</span><br><span class="line"><span class="comment">// 用 5 填充整个数组</span></span><br><span class="line">zeroes.fill(<span class="number">5</span>);</span><br><span class="line"><span class="built_in">console</span>.log(zeroes); <span class="comment">// [5, 5, 5, 5, 5]</span></span><br><span class="line">zeroes.fill(<span class="number">0</span>); <span class="comment">// 重置</span></span><br><span class="line"><span class="comment">// 用 6 填充索引大于等于 3 的元素</span></span><br><span class="line">zeroes.fill(<span class="number">6</span>, <span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(zeroes); <span class="comment">// [0, 0, 0, 6, 6]</span></span><br><span class="line">zeroes.fill(<span class="number">0</span>); <span class="comment">// 重置</span></span><br><span class="line"><span class="comment">// 用 7 填充索引大于等于 1 且小于 3 的元素</span></span><br><span class="line">zeroes.fill(<span class="number">7</span>, <span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(zeroes); <span class="comment">// [0, 7, 7, 0, 0];</span></span><br><span class="line">zeroes.fill(<span class="number">0</span>); <span class="comment">// 重置</span></span><br><span class="line"><span class="comment">// 用 8 填充索引大于等于 1 且小于 4 的元素</span></span><br><span class="line"><span class="comment">// (-4 + zeroes.length = 1)</span></span><br><span class="line"><span class="comment">// (-1 + zeroes.length = 4)</span></span><br><span class="line">zeroes.fill(<span class="number">8</span>, <span class="number">-4</span>, <span class="number">-1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(zeroes); <span class="comment">// [0, 8, 8, 8, 0]; </span></span><br></pre></td></tr></table></figure>

<h4 id="与-fill-不同，copyWithin-会按照指定范围浅复制数组中的部分内容，然后将它们插入到指定索引开始的位置。开始索引和结束索引则与-fill-使用同样的计算方法"><a href="#与-fill-不同，copyWithin-会按照指定范围浅复制数组中的部分内容，然后将它们插入到指定索引开始的位置。开始索引和结束索引则与-fill-使用同样的计算方法" class="headerlink" title="与 fill()不同，copyWithin()会按照指定范围浅复制数组中的部分内容，然后将它们插入到指定索引开始的位置。开始索引和结束索引则与 fill()使用同样的计算方法"></a>与 fill()不同，copyWithin()会按照指定范围浅复制数组中的部分内容，然后将它们插入到指定索引开始的位置。开始索引和结束索引则与 fill()使用同样的计算方法</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> ints,</span><br><span class="line"> reset = <span class="function">() =&gt;</span> ints = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>];</span><br><span class="line">reset();</span><br><span class="line"><span class="comment">// 从 ints 中复制索引 0 开始的内容，插入到索引 5 开始的位置</span></span><br><span class="line"><span class="comment">// 在源索引或目标索引到达数组边界时停止</span></span><br><span class="line">ints.copyWithin(<span class="number">5</span>);</span><br><span class="line"><span class="built_in">console</span>.log(ints); <span class="comment">// [0, 1, 2, 3, 4, 0, 1, 2, 3, 4]</span></span><br><span class="line">reset();</span><br><span class="line"><span class="comment">// 从 ints 中复制索引 5 开始的内容，插入到索引 0 开始的位置</span></span><br><span class="line">ints.copyWithin(<span class="number">0</span>, <span class="number">5</span>);</span><br><span class="line"><span class="built_in">console</span>.log(ints); <span class="comment">// [5, 6, 7, 8, 9, 5, 6, 7, 8, 9] </span></span><br><span class="line">reset();</span><br><span class="line"><span class="comment">// 从 ints 中复制索引 0 开始到索引 3 结束的内容</span></span><br><span class="line"><span class="comment">// 插入到索引 4 开始的位置</span></span><br><span class="line">ints.copyWithin(<span class="number">4</span>, <span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">alert(ints); <span class="comment">// [0, 1, 2, 3, 0, 1, 2, 7, 8, 9]</span></span><br><span class="line">reset();</span><br><span class="line"><span class="comment">// JavaScript 引擎在插值前会完整复制范围内的值</span></span><br><span class="line"><span class="comment">// 因此复制期间不存在重写的风险</span></span><br><span class="line">ints.copyWithin(<span class="number">2</span>, <span class="number">0</span>, <span class="number">6</span>);</span><br><span class="line">alert(ints); <span class="comment">// [0, 1, 0, 1, 2, 3, 4, 5, 8, 9]</span></span><br><span class="line">reset();</span><br><span class="line"><span class="comment">// 支持负索引值，与 fill()相对于数组末尾计算正向索引的过程是一样的</span></span><br><span class="line">ints.copyWithin(<span class="number">-4</span>, <span class="number">-7</span>, <span class="number">-3</span>);</span><br><span class="line">alert(ints); <span class="comment">// [0, 1, 2, 3, 4, 5, 3, 4, 5, 6]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="转换方法"><a href="#转换方法" class="headerlink" title="转换方法"></a>转换方法</h2><h4 id="前面提到过，所有对象都有-toLocaleString-、toString-和-valueOf-方法。其中，valueOf-返回的还是数组本身。而-toString-返回由数组中每个值的等效字符串拼接而成的一个逗号分隔的字符串。也就是说，对数组的每个值都会调用其-toString-方法，以得到最终的字符串。"><a href="#前面提到过，所有对象都有-toLocaleString-、toString-和-valueOf-方法。其中，valueOf-返回的还是数组本身。而-toString-返回由数组中每个值的等效字符串拼接而成的一个逗号分隔的字符串。也就是说，对数组的每个值都会调用其-toString-方法，以得到最终的字符串。" class="headerlink" title="前面提到过，所有对象都有 toLocaleString()、toString()和 valueOf()方法。其中，valueOf()返回的还是数组本身。而 toString()返回由数组中每个值的等效字符串拼接而成的一个逗号分隔的字符串。也就是说，对数组的每个值都会调用其 toString()方法，以得到最终的字符串。"></a>前面提到过，所有对象都有 toLocaleString()、toString()和 valueOf()方法。其中，valueOf()返回的还是数组本身。而 toString()返回由数组中每个值的等效字符串拼接而成的一个逗号分隔的字符串。也就是说，对数组的每个值都会调用其 toString()方法，以得到最终的字符串。</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> colors = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;blue&quot;</span>, <span class="string">&quot;green&quot;</span>]; <span class="comment">// 创建一个包含 3 个字符串的数组</span></span><br><span class="line">alert(colors.toString()); <span class="comment">// red,blue,green</span></span><br><span class="line">alert(colors.valueOf()); <span class="comment">// red,blue,green</span></span><br><span class="line">alert(colors); <span class="comment">// red,blue,green </span></span><br></pre></td></tr></table></figure>




<h2 id="join"><a href="#join" class="headerlink" title="join()"></a>join()</h2><h4 id="join-方法接收一个参数，即字符串分隔符，返回包含所有项的字符串。"><a href="#join-方法接收一个参数，即字符串分隔符，返回包含所有项的字符串。" class="headerlink" title="join()方法接收一个参数，即字符串分隔符，返回包含所有项的字符串。"></a>join()方法接收一个参数，即字符串分隔符，返回包含所有项的字符串。</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> colors = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>, <span class="string">&quot;blue&quot;</span>];</span><br><span class="line">alert(colors.join(<span class="string">&quot;,&quot;</span>)); <span class="comment">// red,green,blue</span></span><br><span class="line">alert(colors.join(<span class="string">&quot;||&quot;</span>)); <span class="comment">// red||green||blue </span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="push"><a href="#push" class="headerlink" title="push()"></a>push()</h2><h4 id="push-方法接收任意数量的参数，并将它们添加到数组末尾，返回数组的最新长度。"><a href="#push-方法接收任意数量的参数，并将它们添加到数组末尾，返回数组的最新长度。" class="headerlink" title="push()方法接收任意数量的参数，并将它们添加到数组末尾，返回数组的最新长度。"></a>push()方法接收任意数量的参数，并将它们添加到数组末尾，返回数组的最新长度。</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr.push(<span class="number">4</span>, <span class="string">&#x27;pink&#x27;</span>)); <span class="comment">// 5;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr);<span class="comment">//[1, 2, 3,4, &#x27;pink&#x27;];</span></span><br></pre></td></tr></table></figure>
<hr>
<h2 id="pop"><a href="#pop" class="headerlink" title="pop()"></a>pop()</h2><h4 id="pop-方法则用于删除数组的最后一项，同时减少数组的-length-值，返回被删除的项。"><a href="#pop-方法则用于删除数组的最后一项，同时减少数组的-length-值，返回被删除的项。" class="headerlink" title="pop()方法则用于删除数组的最后一项，同时减少数组的 length 值，返回被删除的项。"></a>pop()方法则用于删除数组的最后一项，同时减少数组的 length 值，返回被删除的项。</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.pop()); <span class="comment">//3</span></span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">//[1,2]</span></span><br></pre></td></tr></table></figure>
<hr>
<h2 id="shift"><a href="#shift" class="headerlink" title="shift()"></a>shift()</h2><h4 id="它会删除数组的第一项并返回它，然后数组长度减-1。"><a href="#它会删除数组的第一项并返回它，然后数组长度减-1。" class="headerlink" title="它会删除数组的第一项并返回它，然后数组长度减 1。"></a>它会删除数组的第一项并返回它，然后数组长度减 1。</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.shift()); <span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(arr);<span class="comment">//[2，3]</span></span><br></pre></td></tr></table></figure>
<hr>
<h2 id="unshift"><a href="#unshift" class="headerlink" title="unshift()"></a>unshift()</h2><h4 id="在数组开头添加任意多个值，然后返回新的数组长度。"><a href="#在数组开头添加任意多个值，然后返回新的数组长度。" class="headerlink" title="在数组开头添加任意多个值，然后返回新的数组长度。"></a>在数组开头添加任意多个值，然后返回新的数组长度。</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.unshift(<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;purple&#x27;</span>));<span class="comment">//5</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr);<span class="comment">//[&#x27;red&#x27;, &#x27;purple&#x27;,1, 2, 3]</span></span><br></pre></td></tr></table></figure>


<h2 id="concat"><a href="#concat" class="headerlink" title="concat()"></a>concat()</h2><h4 id="用于连接两个或多个数组"><a href="#用于连接两个或多个数组" class="headerlink" title="用于连接两个或多个数组"></a>用于连接两个或多个数组</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr1=[<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>],</span><br><span class="line"> arr2=[<span class="string">&quot;d&quot;</span>,<span class="string">&quot;e&quot;</span>,<span class="number">1</span>,<span class="number">3</span>],</span><br><span class="line"> arr3;</span><br><span class="line"><span class="comment">// concat</span></span><br><span class="line">arr3=arr1.concat(arr2,[<span class="string">&quot;m&quot;</span>,<span class="number">99</span>,<span class="number">8</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(arr3);</span><br></pre></td></tr></table></figure>


<h2 id="slice"><a href="#slice" class="headerlink" title="slice()"></a>slice()</h2><h4 id="从已有的数组返回选定元素"><a href="#从已有的数组返回选定元素" class="headerlink" title="从已有的数组返回选定元素"></a>从已有的数组返回选定元素</h4><h4 id="如果没有指定end，那么切分的数组包含从start到数组结束的所有元素"><a href="#如果没有指定end，那么切分的数组包含从start到数组结束的所有元素" class="headerlink" title="如果没有指定end，那么切分的数组包含从start到数组结束的所有元素"></a>如果没有指定end，那么切分的数组包含从start到数组结束的所有元素</h4><h4 id="如果slice-方法的参数有一个负数，则用数组长度加上该数确定相应位置"><a href="#如果slice-方法的参数有一个负数，则用数组长度加上该数确定相应位置" class="headerlink" title="如果slice()方法的参数有一个负数，则用数组长度加上该数确定相应位置"></a>如果slice()方法的参数有一个负数，则用数组长度加上该数确定相应位置</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// slice(start,end) end下标</span></span><br><span class="line"><span class="keyword">var</span> colors=[<span class="string">&quot;red&quot;</span>,<span class="string">&quot;green&quot;</span>,<span class="string">&quot;blue&quot;</span>,<span class="string">&quot;yellow&quot;</span>,<span class="string">&quot;orange&quot;</span>];</span><br><span class="line"><span class="comment">//var newColors=colors.slice(1,3);   //[&quot;green&quot;,&quot;blue&quot;]</span></span><br><span class="line"><span class="comment">//var newColors2=colors.slice(2,4);   //[&quot;blue&quot;,&quot;yellow&quot;]</span></span><br><span class="line"><span class="keyword">var</span> newColors3=colors.slice(<span class="number">-4</span>,<span class="number">3</span>); <span class="comment">// 1,3 [&quot;green&quot;,&quot;blue&quot;]</span></span><br><span class="line"><span class="built_in">console</span>.log(newColors3);</span><br></pre></td></tr></table></figure>


<h2 id="splice"><a href="#splice" class="headerlink" title="splice()"></a>splice()</h2><h4 id="删除从index处开始的零个或多个元素"><a href="#删除从index处开始的零个或多个元素" class="headerlink" title="删除从index处开始的零个或多个元素"></a>删除从index处开始的零个或多个元素</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>, <span class="string">&quot;e&quot;</span>, <span class="string">&quot;f&quot;</span>];</span><br><span class="line">  <span class="comment">// 删除</span></span><br><span class="line">  <span class="keyword">var</span> delArr = arr.splice(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(arr); <span class="comment">// [a,b,f]</span></span><br><span class="line">  <span class="comment">// 插入</span></span><br><span class="line">  <span class="keyword">var</span> insertArr = arr.splice(<span class="number">3</span>, <span class="number">0</span>, <span class="string">&quot;m&quot;</span>, <span class="string">&quot;n&quot;</span>, <span class="number">88</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(arr); <span class="comment">//[&quot;a&quot;, &quot;b&quot;, &quot;f&quot;, &quot;m&quot;, &quot;n&quot;, 88]</span></span><br><span class="line">  <span class="comment">// 替换</span></span><br><span class="line">  <span class="keyword">var</span> replaceArr = arr.splice(<span class="number">1</span>, <span class="number">2</span>, <span class="string">&quot;x&quot;</span>, <span class="string">&quot;y&quot;</span>, <span class="string">&quot;z&quot;</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(arr); <span class="comment">//[&quot;a&quot;, &quot;x&quot;, &quot;y&quot;, &quot;z&quot;, &quot;m&quot;, &quot;n&quot;, 88]</span></span><br></pre></td></tr></table></figure>


<hr>
<h2 id="reverse"><a href="#reverse" class="headerlink" title="reverse()"></a>reverse()</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> values = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">values.reverse();</span><br><span class="line">alert(values); <span class="comment">// 5,4,3,2,1 </span></span><br></pre></td></tr></table></figure>
<hr>
<h2 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> values = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>];</span><br><span class="line">values.sort();</span><br><span class="line">alert(values); <span class="comment">// 0,1,10,15,5 </span></span><br></pre></td></tr></table></figure>


<h2 id="indexOf-、"><a href="#indexOf-、" class="headerlink" title="indexOf()、"></a>indexOf()、</h2><h4 id="接收两个参数：要查找的元素和一个可选的起始搜索位置。从数组前头（第一项）开始向后搜索"><a href="#接收两个参数：要查找的元素和一个可选的起始搜索位置。从数组前头（第一项）开始向后搜索" class="headerlink" title="接收两个参数：要查找的元素和一个可选的起始搜索位置。从数组前头（第一项）开始向后搜索"></a>接收两个参数：要查找的元素和一个可选的起始搜索位置。从数组前头（第一项）开始向后搜索</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]; </span><br><span class="line">alert(numbers.indexOf(<span class="number">4</span>)); <span class="comment">// 3</span></span><br><span class="line">alert(numbers.indexOf(<span class="number">4</span>, <span class="number">4</span>)); <span class="comment">// 5 </span></span><br></pre></td></tr></table></figure>


<h2 id="lastIndexOf"><a href="#lastIndexOf" class="headerlink" title="lastIndexOf()"></a>lastIndexOf()</h2><h4 id="接收两个参数：要查找的元素和一个可选的起始搜索位置。lastIndexOf-从数组末尾（最后一项）开始向前搜索。"><a href="#接收两个参数：要查找的元素和一个可选的起始搜索位置。lastIndexOf-从数组末尾（最后一项）开始向前搜索。" class="headerlink" title="接收两个参数：要查找的元素和一个可选的起始搜索位置。lastIndexOf()从数组末尾（最后一项）开始向前搜索。"></a>接收两个参数：要查找的元素和一个可选的起始搜索位置。lastIndexOf()从数组末尾（最后一项）开始向前搜索。</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]; </span><br><span class="line">alert(numbers.lastIndexOf(<span class="number">4</span>)); <span class="comment">// 5</span></span><br><span class="line">alert(numbers.lastIndexOf(<span class="number">4</span>, <span class="number">4</span>)); <span class="comment">// 3 </span></span><br></pre></td></tr></table></figure>

<h2 id="includes"><a href="#includes" class="headerlink" title="includes()"></a>includes()</h2><h4 id="接收两个参数：要查找的元素和一个可选的起始搜索位置。从数组前头（第一项）开始向后搜索-1"><a href="#接收两个参数：要查找的元素和一个可选的起始搜索位置。从数组前头（第一项）开始向后搜索-1" class="headerlink" title="接收两个参数：要查找的元素和一个可选的起始搜索位置。从数组前头（第一项）开始向后搜索"></a>接收两个参数：要查找的元素和一个可选的起始搜索位置。从数组前头（第一项）开始向后搜索</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]; </span><br><span class="line">alert(numbers.includes(<span class="number">4</span>)); <span class="comment">// true </span></span><br><span class="line">alert(numbers.includes(<span class="number">4</span>, <span class="number">7</span>)); <span class="comment">// false </span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaScript红宝书</category>
      </categories>
      <tags>
        <tag>数组与对象</tag>
      </tags>
  </entry>
  <entry>
    <title>JS红宝书之变量</title>
    <url>/2020/10/14/%E7%BA%A2%E5%AE%9D%E4%B9%A62/</url>
    <content><![CDATA[<h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><h3 id="ECMAScript-变量是松散类型的，意思是变量可以用于保存任何类型的数据。每个变量只不过是一个用于保存任意值的命名占位符。有-3-个关键字可以声明变量：var、const-和-let。其中，var-在"><a href="#ECMAScript-变量是松散类型的，意思是变量可以用于保存任何类型的数据。每个变量只不过是一个用于保存任意值的命名占位符。有-3-个关键字可以声明变量：var、const-和-let。其中，var-在" class="headerlink" title="ECMAScript 变量是松散类型的，意思是变量可以用于保存任何类型的数据。每个变量只不过是一个用于保存任意值的命名占位符。有 3 个关键字可以声明变量：var、const 和 let。其中，var 在"></a>ECMAScript 变量是松散类型的，意思是变量可以用于保存任何类型的数据。每个变量只不过是一个用于保存任意值的命名占位符。有 3 个关键字可以声明变量：var、const 和 let。其中，var 在</h3><h3 id="ECMAScript-的所有版本中都可以使用，而-const-和-let-只能在-ECMAScript-6-及更晚的版本中使用。"><a href="#ECMAScript-的所有版本中都可以使用，而-const-和-let-只能在-ECMAScript-6-及更晚的版本中使用。" class="headerlink" title="ECMAScript 的所有版本中都可以使用，而 const 和 let 只能在 ECMAScript 6 及更晚的版本中使用。"></a>ECMAScript 的所有版本中都可以使用，而 const 和 let 只能在 ECMAScript 6 及更晚的版本中使用。</h3><hr>
<h2 id="var-关键字"><a href="#var-关键字" class="headerlink" title="var 关键字"></a>var 关键字</h2><h4 id="要定义变量，可以使用-var-操作符（注意-var-是一个关键字），后跟变量名（即标识符，如前所述）："><a href="#要定义变量，可以使用-var-操作符（注意-var-是一个关键字），后跟变量名（即标识符，如前所述）：" class="headerlink" title="要定义变量，可以使用 var 操作符（注意 var 是一个关键字），后跟变量名（即标识符，如前所述）："></a>要定义变量，可以使用 var 操作符（注意 var 是一个关键字），后跟变量名（即标识符，如前所述）：</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> message; </span><br></pre></td></tr></table></figure>
<h3 id="var-声明作用域"><a href="#var-声明作用域" class="headerlink" title="var 声明作用域"></a>var 声明作用域</h3><h4 id="关键的问题在于，使用-var-操作符定义的变量会成为包含它的函数的局部变量。比如，使用-var在一个函数内部定义一个变量，就意味着该变量将在函数退出时被销毁："><a href="#关键的问题在于，使用-var-操作符定义的变量会成为包含它的函数的局部变量。比如，使用-var在一个函数内部定义一个变量，就意味着该变量将在函数退出时被销毁：" class="headerlink" title="关键的问题在于，使用 var 操作符定义的变量会成为包含它的函数的局部变量。比如，使用 var在一个函数内部定义一个变量，就意味着该变量将在函数退出时被销毁："></a>关键的问题在于，使用 var 操作符定义的变量会成为包含它的函数的局部变量。比如，使用 var在一个函数内部定义一个变量，就意味着该变量将在函数退出时被销毁：</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> message = <span class="string">&quot;hi&quot;</span>; <span class="comment">// 局部变量</span></span><br><span class="line">&#125;</span><br><span class="line">test();</span><br><span class="line"><span class="built_in">console</span>.log(message); <span class="comment">// 出错！</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> message = <span class="string">&quot;hi&quot;</span>; <span class="comment">// 全局变量</span></span><br><span class="line">&#125;</span><br><span class="line">test();</span><br><span class="line"><span class="built_in">console</span>.log(message); <span class="comment">// &quot;hi&quot; </span></span><br></pre></td></tr></table></figure>
<h3 id="var-声明提升"><a href="#var-声明提升" class="headerlink" title="var 声明提升"></a>var 声明提升</h3><h4 id="使用-var-时，下面的代码不会报错。这是因为使用这个关键字声明的变量会自动提升到函数作用域顶部："><a href="#使用-var-时，下面的代码不会报错。这是因为使用这个关键字声明的变量会自动提升到函数作用域顶部：" class="headerlink" title="使用 var 时，下面的代码不会报错。这是因为使用这个关键字声明的变量会自动提升到函数作用域顶部："></a>使用 var 时，下面的代码不会报错。这是因为使用这个关键字声明的变量会自动提升到函数作用域顶部：</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(age);</span><br><span class="line"> <span class="keyword">var</span> age = <span class="number">26</span>;</span><br><span class="line">&#125;</span><br><span class="line">foo(); <span class="comment">// undefined </span></span><br></pre></td></tr></table></figure>
<h4 id="之所以不会报错，是因为-ECMAScript-运行时把它看成等价于如下代码："><a href="#之所以不会报错，是因为-ECMAScript-运行时把它看成等价于如下代码：" class="headerlink" title="之所以不会报错，是因为 ECMAScript 运行时把它看成等价于如下代码："></a>之所以不会报错，是因为 ECMAScript 运行时把它看成等价于如下代码：</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> age;</span><br><span class="line"> <span class="built_in">console</span>.log(age);</span><br><span class="line"> age = <span class="number">26</span>;</span><br><span class="line">&#125;</span><br><span class="line">foo(); <span class="comment">// undefined </span></span><br></pre></td></tr></table></figure>
<h4 id="这就是所谓的“提升”（hoist），也就是把所有变量声明都拉到函数作用域的顶部。此外，反复多次使用-var-声明同一个变量也没有问题："><a href="#这就是所谓的“提升”（hoist），也就是把所有变量声明都拉到函数作用域的顶部。此外，反复多次使用-var-声明同一个变量也没有问题：" class="headerlink" title="这就是所谓的“提升”（hoist），也就是把所有变量声明都拉到函数作用域的顶部。此外，反复多次使用 var 声明同一个变量也没有问题："></a>这就是所谓的“提升”（hoist），也就是把所有变量声明都拉到函数作用域的顶部。此外，反复多次使用 var 声明同一个变量也没有问题：</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> age = <span class="number">16</span>;</span><br><span class="line"> <span class="keyword">var</span> age = <span class="number">26</span>;</span><br><span class="line"> <span class="keyword">var</span> age = <span class="number">36</span>;</span><br><span class="line"> <span class="built_in">console</span>.log(age);</span><br><span class="line">&#125;</span><br><span class="line">foo(); <span class="comment">// 36</span></span><br></pre></td></tr></table></figure>

<h2 id="let-声明"><a href="#let-声明" class="headerlink" title="let 声明"></a>let 声明</h2><h4 id="let-跟-var-的作用差不多，但有着非常重要的区别。最明显的区别是，let-声明的范围是块作用域，而-var-声明的范围是函数作用域。"><a href="#let-跟-var-的作用差不多，但有着非常重要的区别。最明显的区别是，let-声明的范围是块作用域，而-var-声明的范围是函数作用域。" class="headerlink" title="let 跟 var 的作用差不多，但有着非常重要的区别。最明显的区别是，let 声明的范围是块作用域，而 var 声明的范围是函数作用域。"></a>let 跟 var 的作用差不多，但有着非常重要的区别。最明显的区别是，let 声明的范围是块作用域，而 var 声明的范围是函数作用域。</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"> <span class="keyword">var</span> name = <span class="string">&#x27;Matt&#x27;</span>;</span><br><span class="line"> <span class="built_in">console</span>.log(name); <span class="comment">// Matt</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(name); <span class="comment">// Matt </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"> <span class="keyword">let</span> age = <span class="number">26</span>;</span><br><span class="line"> <span class="built_in">console</span>.log(age); <span class="comment">// 26</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(age); <span class="comment">// ReferenceError: age 没有定义</span></span><br></pre></td></tr></table></figure>
<h3 id="var-和-let区别"><a href="#var-和-let区别" class="headerlink" title="var 和 let区别"></a>var 和 let区别</h3><h4 id="暂时性死区"><a href="#暂时性死区" class="headerlink" title="暂时性死区"></a>暂时性死区</h4><h5 id="let-与-var-的另一个重要的区别，就是-let-声明的变量不会在作用域中被提升。"><a href="#let-与-var-的另一个重要的区别，就是-let-声明的变量不会在作用域中被提升。" class="headerlink" title="let 与 var 的另一个重要的区别，就是 let 声明的变量不会在作用域中被提升。"></a>let 与 var 的另一个重要的区别，就是 let 声明的变量不会在作用域中被提升。</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// name 会被提升</span></span><br><span class="line"><span class="built_in">console</span>.log(name); <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;Matt&#x27;</span>;</span><br><span class="line"><span class="comment">// age 不会被提升</span></span><br><span class="line"><span class="built_in">console</span>.log(age); <span class="comment">// ReferenceError：age 没有定义</span></span><br><span class="line"><span class="keyword">let</span> age = <span class="number">26</span>; </span><br></pre></td></tr></table></figure>
<h4 id="全局声明"><a href="#全局声明" class="headerlink" title="全局声明"></a>全局声明</h4><h5 id="与-var-关键字不同，使用-let-在全局作用域中声明的变量不会成为-window-对象的属性（var-声明的变量则会）。"><a href="#与-var-关键字不同，使用-let-在全局作用域中声明的变量不会成为-window-对象的属性（var-声明的变量则会）。" class="headerlink" title="与 var 关键字不同，使用 let 在全局作用域中声明的变量不会成为 window 对象的属性（var 声明的变量则会）。"></a>与 var 关键字不同，使用 let 在全局作用域中声明的变量不会成为 window 对象的属性（var 声明的变量则会）。</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;Matt&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.name); <span class="comment">// &#x27;Matt&#x27;</span></span><br><span class="line"><span class="keyword">let</span> age = <span class="number">26</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.age); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>
<h4 id="条件声明"><a href="#条件声明" class="headerlink" title="条件声明"></a>条件声明</h4><h5 id="在使用-var-声明变量时，由于声明会被提升，JavaScript-引擎会自动将多余的声明在作用域顶部合并为一个声明。因为-let-的作用域是块，所以不可能检查前面是否已经使用-let-声明过同名变量，同时也就不可能在没有声明的情况下声明它。"><a href="#在使用-var-声明变量时，由于声明会被提升，JavaScript-引擎会自动将多余的声明在作用域顶部合并为一个声明。因为-let-的作用域是块，所以不可能检查前面是否已经使用-let-声明过同名变量，同时也就不可能在没有声明的情况下声明它。" class="headerlink" title="在使用 var 声明变量时，由于声明会被提升，JavaScript 引擎会自动将多余的声明在作用域顶部合并为一个声明。因为 let 的作用域是块，所以不可能检查前面是否已经使用 let 声明过同名变量，同时也就不可能在没有声明的情况下声明它。"></a>在使用 var 声明变量时，由于声明会被提升，JavaScript 引擎会自动将多余的声明在作用域顶部合并为一个声明。因为 let 的作用域是块，所以不可能检查前面是否已经使用 let 声明过同名变量，同时也就不可能在没有声明的情况下声明它。</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"> <span class="keyword">var</span> name = <span class="string">&#x27;Nicholas&#x27;</span>;</span><br><span class="line"> <span class="keyword">let</span> age = <span class="number">26</span>;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"> <span class="comment">// 假设脚本不确定页面中是否已经声明了同名变量</span></span><br><span class="line"> <span class="comment">// 那它可以假设还没有声明过</span></span><br><span class="line"> <span class="keyword">var</span> name = <span class="string">&#x27;Matt&#x27;</span>;</span><br><span class="line"> <span class="comment">// 这里没问题，因为可以被作为一个提升声明来处理</span></span><br><span class="line"> <span class="comment">// 不需要检查之前是否声明过同名变量</span></span><br><span class="line"> <span class="keyword">let</span> age = <span class="number">36</span>;</span><br><span class="line"> <span class="comment">// 如果 age 之前声明过，这里会报错</span></span><br><span class="line">&lt;/script&gt; </span><br></pre></td></tr></table></figure>
<h4 id="for-循环中的-let-声明"><a href="#for-循环中的-let-声明" class="headerlink" title="for 循环中的 let 声明"></a>for 循环中的 let 声明</h4><h5 id="在-let-出现之前，for-循环定义的迭代变量会渗透到循环体外部："><a href="#在-let-出现之前，for-循环定义的迭代变量会渗透到循环体外部：" class="headerlink" title="在 let 出现之前，for 循环定义的迭代变量会渗透到循环体外部："></a>在 let 出现之前，for 循环定义的迭代变量会渗透到循环体外部：</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i) &#123;</span><br><span class="line"> <span class="comment">// 循环逻辑</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(i); <span class="comment">// 5 </span></span><br></pre></td></tr></table></figure>
<h5 id="改成使用-let-之后，这个问题就消失了，因为迭代变量的作用域仅限于-for-循环块内部："><a href="#改成使用-let-之后，这个问题就消失了，因为迭代变量的作用域仅限于-for-循环块内部：" class="headerlink" title="改成使用 let 之后，这个问题就消失了，因为迭代变量的作用域仅限于 for 循环块内部："></a>改成使用 let 之后，这个问题就消失了，因为迭代变量的作用域仅限于 for 循环块内部：</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i) &#123;</span><br><span class="line"> <span class="comment">// 循环逻辑</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(i); <span class="comment">// ReferenceError: i 没有定义</span></span><br></pre></td></tr></table></figure>
<h5 id="在使用-var-的时候，最常见的问题就是对迭代变量的奇特声明和修改："><a href="#在使用-var-的时候，最常见的问题就是对迭代变量的奇特声明和修改：" class="headerlink" title="在使用 var 的时候，最常见的问题就是对迭代变量的奇特声明和修改："></a>在使用 var 的时候，最常见的问题就是对迭代变量的奇特声明和修改：</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i) &#123;</span><br><span class="line"> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(i), <span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 你可能以为会输出 0、1、2、3、4</span></span><br><span class="line"><span class="comment">// 实际上会输出 5、5、5、5、5 </span></span><br></pre></td></tr></table></figure>
<h5 id="之所以会这样，是因为在退出循环时，迭代变量保存的是导致循环退出的值：5。在之后执行超时逻辑时，所有的-i-都是同一个变量，因而输出的都是同一个最终值。而在使用-let-声明迭代变量时，JavaScript-引擎在后台会为每个迭代循环声明一个新的迭代变量。每个-setTimeout-引用的都是不同的变量实例，所以-console-log-输出的是我们期望的值，也就是循环执行过程中每个迭代变量的值。"><a href="#之所以会这样，是因为在退出循环时，迭代变量保存的是导致循环退出的值：5。在之后执行超时逻辑时，所有的-i-都是同一个变量，因而输出的都是同一个最终值。而在使用-let-声明迭代变量时，JavaScript-引擎在后台会为每个迭代循环声明一个新的迭代变量。每个-setTimeout-引用的都是不同的变量实例，所以-console-log-输出的是我们期望的值，也就是循环执行过程中每个迭代变量的值。" class="headerlink" title="之所以会这样，是因为在退出循环时，迭代变量保存的是导致循环退出的值：5。在之后执行超时逻辑时，所有的 i 都是同一个变量，因而输出的都是同一个最终值。而在使用 let 声明迭代变量时，JavaScript 引擎在后台会为每个迭代循环声明一个新的迭代变量。每个 setTimeout 引用的都是不同的变量实例，所以 console.log 输出的是我们期望的值，也就是循环执行过程中每个迭代变量的值。"></a>之所以会这样，是因为在退出循环时，迭代变量保存的是导致循环退出的值：5。在之后执行超时逻辑时，所有的 i 都是同一个变量，因而输出的都是同一个最终值。而在使用 let 声明迭代变量时，JavaScript 引擎在后台会为每个迭代循环声明一个新的迭代变量。每个 setTimeout 引用的都是不同的变量实例，所以 console.log 输出的是我们期望的值，也就是循环执行过程中每个迭代变量的值。</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i) &#123;</span><br><span class="line"> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(i), <span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 会输出 0、1、2、3、4</span></span><br></pre></td></tr></table></figure>
<h5 id="这种每次迭代声明一个独立变量实例的行为适用于所有风格的-for-循环，包括-for-in-和-for-of循环。"><a href="#这种每次迭代声明一个独立变量实例的行为适用于所有风格的-for-循环，包括-for-in-和-for-of循环。" class="headerlink" title="这种每次迭代声明一个独立变量实例的行为适用于所有风格的 for 循环，包括 for-in 和 for-of循环。"></a>这种每次迭代声明一个独立变量实例的行为适用于所有风格的 for 循环，包括 for-in 和 for-of循环。</h5><hr>
<h2 id="const-声明"><a href="#const-声明" class="headerlink" title="const 声明"></a>const 声明</h2><h4 id="const-的行为与-let-基本相同，唯一一个重要的区别是用它声明变量时必须同时初始化变量，且尝试修改-const-声明的变量会导致运行时错误。"><a href="#const-的行为与-let-基本相同，唯一一个重要的区别是用它声明变量时必须同时初始化变量，且尝试修改-const-声明的变量会导致运行时错误。" class="headerlink" title="const 的行为与 let 基本相同，唯一一个重要的区别是用它声明变量时必须同时初始化变量，且尝试修改 const 声明的变量会导致运行时错误。"></a>const 的行为与 let 基本相同，唯一一个重要的区别是用它声明变量时必须同时初始化变量，且尝试修改 const 声明的变量会导致运行时错误。</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> age = <span class="number">26</span>;</span><br><span class="line">age = <span class="number">36</span>; <span class="comment">// TypeError: 给常量赋值</span></span><br><span class="line"><span class="comment">// const 也不允许重复声明</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;Matt&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;Nicholas&#x27;</span>; <span class="comment">// SyntaxError</span></span><br><span class="line"><span class="comment">// const 声明的作用域也是块</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;Matt&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"> <span class="keyword">const</span> name = <span class="string">&#x27;Nicholas&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(name); <span class="comment">// Matt</span></span><br></pre></td></tr></table></figure>
<h4 id="const-声明的限制只适用于它指向的变量的引用。换句话说，如果-const-变量引用的是一个对象，那么修改这个对象内部的属性并不违反-const-的限制。"><a href="#const-声明的限制只适用于它指向的变量的引用。换句话说，如果-const-变量引用的是一个对象，那么修改这个对象内部的属性并不违反-const-的限制。" class="headerlink" title="const 声明的限制只适用于它指向的变量的引用。换句话说，如果 const 变量引用的是一个对象，那么修改这个对象内部的属性并不违反 const 的限制。"></a>const 声明的限制只适用于它指向的变量的引用。换句话说，如果 const 变量引用的是一个对象，那么修改这个对象内部的属性并不违反 const 的限制。</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;&#125;;</span><br><span class="line">person.name = <span class="string">&#x27;Matt&#x27;</span>; <span class="comment">// ok </span></span><br></pre></td></tr></table></figure>
<h4 id="JavaScript-引擎会为-for-循环中的-let-声明分别创建独立的变量实例，虽然-const-变量跟-let-变量很相似，但是不能用-const-来声明迭代变量（因为迭代变量会自增）："><a href="#JavaScript-引擎会为-for-循环中的-let-声明分别创建独立的变量实例，虽然-const-变量跟-let-变量很相似，但是不能用-const-来声明迭代变量（因为迭代变量会自增）：" class="headerlink" title="JavaScript 引擎会为 for 循环中的 let 声明分别创建独立的变量实例，虽然 const 变量跟 let 变量很相似，但是不能用 const 来声明迭代变量（因为迭代变量会自增）："></a>JavaScript 引擎会为 for 循环中的 let 声明分别创建独立的变量实例，虽然 const 变量跟 let 变量很相似，但是不能用 const 来声明迭代变量（因为迭代变量会自增）：</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;&#125; <span class="comment">// TypeError：给常量赋值</span></span><br></pre></td></tr></table></figure>
<h4 id="不过，如果你只想用-const-声明一个不会被修改的-for-循环变量，那也是可以的。也就是说，每次迭代只是创建一个新变量。这对-for-of-和-for-in-循环特别有意义"><a href="#不过，如果你只想用-const-声明一个不会被修改的-for-循环变量，那也是可以的。也就是说，每次迭代只是创建一个新变量。这对-for-of-和-for-in-循环特别有意义" class="headerlink" title="不过，如果你只想用 const 声明一个不会被修改的 for 循环变量，那也是可以的。也就是说，每次迭代只是创建一个新变量。这对 for-of 和 for-in 循环特别有意义"></a>不过，如果你只想用 const 声明一个不会被修改的 for 循环变量，那也是可以的。也就是说，每次迭代只是创建一个新变量。这对 for-of 和 for-in 循环特别有意义</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> j = <span class="number">7</span>; i &lt; <span class="number">5</span>; ++i) &#123;</span><br><span class="line"> <span class="built_in">console</span>.log(j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 7, 7, 7, 7, 7</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>&#125;) &#123;</span><br><span class="line"> <span class="built_in">console</span>.log(key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// a, b</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> value <span class="keyword">of</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]) &#123;</span><br><span class="line"> <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1, 2, 3, 4, 5 </span></span><br></pre></td></tr></table></figure>
<h2 id="声明风格及最佳实践"><a href="#声明风格及最佳实践" class="headerlink" title="声明风格及最佳实践"></a>声明风格及最佳实践</h2><h3 id="1-不使用-var"><a href="#1-不使用-var" class="headerlink" title="1.不使用 var"></a>1.不使用 var</h3><h4 id="有了-let-和-const，大多数开发者会发现自己不再需要-var-了。限制自己只使用-let-和-const有助于提升代码质量，因为变量有了明确的作用域、声明位置，以及不变的值。"><a href="#有了-let-和-const，大多数开发者会发现自己不再需要-var-了。限制自己只使用-let-和-const有助于提升代码质量，因为变量有了明确的作用域、声明位置，以及不变的值。" class="headerlink" title="有了 let 和 const，大多数开发者会发现自己不再需要 var 了。限制自己只使用 let 和 const有助于提升代码质量，因为变量有了明确的作用域、声明位置，以及不变的值。"></a>有了 let 和 const，大多数开发者会发现自己不再需要 var 了。限制自己只使用 let 和 const有助于提升代码质量，因为变量有了明确的作用域、声明位置，以及不变的值。</h4><h3 id="2-const-优先，let-次之"><a href="#2-const-优先，let-次之" class="headerlink" title="2.const 优先，let 次之"></a>2.const 优先，let 次之</h3><h4 id="使用-const-声明可以让浏览器运行时强制保持变量不变，也可以让静态代码分析工具提前发现不合法的赋值操作。因此，很多开发者认为应该优先使用-const-来声明变量，只在提前知道未来会有修改时，再使用-let。这样可以让开发者更有信心地推断某些变量的值永远不会变，同时也能迅速发现因意外赋值导致的非预期行为。"><a href="#使用-const-声明可以让浏览器运行时强制保持变量不变，也可以让静态代码分析工具提前发现不合法的赋值操作。因此，很多开发者认为应该优先使用-const-来声明变量，只在提前知道未来会有修改时，再使用-let。这样可以让开发者更有信心地推断某些变量的值永远不会变，同时也能迅速发现因意外赋值导致的非预期行为。" class="headerlink" title="使用 const 声明可以让浏览器运行时强制保持变量不变，也可以让静态代码分析工具提前发现不合法的赋值操作。因此，很多开发者认为应该优先使用 const 来声明变量，只在提前知道未来会有修改时，再使用 let。这样可以让开发者更有信心地推断某些变量的值永远不会变，同时也能迅速发现因意外赋值导致的非预期行为。"></a>使用 const 声明可以让浏览器运行时强制保持变量不变，也可以让静态代码分析工具提前发现不合法的赋值操作。因此，很多开发者认为应该优先使用 const 来声明变量，只在提前知道未来会有修改时，再使用 let。这样可以让开发者更有信心地推断某些变量的值永远不会变，同时也能迅速发现因意外赋值导致的非预期行为。</h4>]]></content>
      <categories>
        <category>JavaScript红宝书</category>
      </categories>
      <tags>
        <tag>变量</tag>
      </tags>
  </entry>
  <entry>
    <title>JS红宝书之简介</title>
    <url>/2020/10/13/%E7%BA%A2%E5%AE%9D%E4%B9%A61/</url>
    <content><![CDATA[<h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><h2 id="虽然-JavaScript和-ECMAScript-基本上是同义词，但-JavaScript远远不限于-ECMA-262-所定义的那样。没错，完整的-JavaScript"><a href="#虽然-JavaScript和-ECMAScript-基本上是同义词，但-JavaScript远远不限于-ECMA-262-所定义的那样。没错，完整的-JavaScript" class="headerlink" title="虽然 JavaScript和 ECMAScript 基本上是同义词，但 JavaScript远远不限于 ECMA-262 所定义的那样。没错，完整的 JavaScript"></a>虽然 JavaScript和 ECMAScript 基本上是同义词，但 JavaScript远远不限于 ECMA-262 所定义的那样。没错，完整的 JavaScript</h2><h5 id="1-核心（ECMAScript）"><a href="#1-核心（ECMAScript）" class="headerlink" title="1. 核心（ECMAScript）"></a>1. 核心（ECMAScript）</h5><h5 id="2-文档对象模型（DOM）"><a href="#2-文档对象模型（DOM）" class="headerlink" title="2. 文档对象模型（DOM）"></a>2. 文档对象模型（DOM）</h5><h5 id="3-浏览器对象模型（BOM）"><a href="#3-浏览器对象模型（BOM）" class="headerlink" title="3. 浏览器对象模型（BOM）"></a>3. 浏览器对象模型（BOM）</h5><hr>
<h2 id="ECMAScript"><a href="#ECMAScript" class="headerlink" title="ECMAScript"></a>ECMAScript</h2><h4 id="ECMAScript，即-ECMA-262-定义的语言，并不局限于-Web-浏览器。"><a href="#ECMAScript，即-ECMA-262-定义的语言，并不局限于-Web-浏览器。" class="headerlink" title="ECMAScript，即 ECMA-262 定义的语言，并不局限于 Web 浏览器。"></a>ECMAScript，即 ECMA-262 定义的语言，并不局限于 Web 浏览器。</h4><h4 id="ECMA-262-将这门语言作为一个基准来定义，以便在它之上再构建更稳健的脚本语言。"><a href="#ECMA-262-将这门语言作为一个基准来定义，以便在它之上再构建更稳健的脚本语言。" class="headerlink" title="ECMA-262 将这门语言作为一个基准来定义，以便在它之上再构建更稳健的脚本语言。"></a>ECMA-262 将这门语言作为一个基准来定义，以便在它之上再构建更稳健的脚本语言。</h4><h4 id="Web-浏览器只是-ECMAScript-实现可能存在的一种宿主环境（host-environment）。宿主环境提供"><a href="#Web-浏览器只是-ECMAScript-实现可能存在的一种宿主环境（host-environment）。宿主环境提供" class="headerlink" title="Web 浏览器只是 ECMAScript 实现可能存在的一种宿主环境（host environment）。宿主环境提供"></a>Web 浏览器只是 ECMAScript 实现可能存在的一种宿主环境（host environment）。宿主环境提供</h4><h4 id="ECMAScript-的基准实现和与环境自身交互必需的扩展。"><a href="#ECMAScript-的基准实现和与环境自身交互必需的扩展。" class="headerlink" title="ECMAScript 的基准实现和与环境自身交互必需的扩展。"></a>ECMAScript 的基准实现和与环境自身交互必需的扩展。</h4><hr>
<h2 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h2><h4 id="文档对象模型（DOM，Document-Object-Model）是一个应用编程接口（API），用于在-HTML-中使"><a href="#文档对象模型（DOM，Document-Object-Model）是一个应用编程接口（API），用于在-HTML-中使" class="headerlink" title="文档对象模型（DOM，Document Object Model）是一个应用编程接口（API），用于在 HTML 中使"></a>文档对象模型（DOM，Document Object Model）是一个应用编程接口（API），用于在 HTML 中使</h4><h4 id="用扩展的-XML。DOM-将整个页面抽象为一组分层节点。"><a href="#用扩展的-XML。DOM-将整个页面抽象为一组分层节点。" class="headerlink" title="用扩展的 XML。DOM 将整个页面抽象为一组分层节点。"></a>用扩展的 XML。DOM 将整个页面抽象为一组分层节点。</h4><hr>
<h2 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h2><h4 id="浏览器对象模型（BOM）-API，用于支持访问和操作浏览器的窗口。"><a href="#浏览器对象模型（BOM）-API，用于支持访问和操作浏览器的窗口。" class="headerlink" title="浏览器对象模型（BOM） API，用于支持访问和操作浏览器的窗口。"></a>浏览器对象模型（BOM） API，用于支持访问和操作浏览器的窗口。</h4><h4 id="使用-BOM，开发者可以操控浏览器显示页面之外的部分。而-BOM-真正独一无二的地方，当然也是"><a href="#使用-BOM，开发者可以操控浏览器显示页面之外的部分。而-BOM-真正独一无二的地方，当然也是" class="headerlink" title="使用 BOM，开发者可以操控浏览器显示页面之外的部分。而 BOM 真正独一无二的地方，当然也是"></a>使用 BOM，开发者可以操控浏览器显示页面之外的部分。而 BOM 真正独一无二的地方，当然也是</h4><h4 id="问题最多的地方，就是它是唯一一个没有相关标准的-JavaScript-实现。"><a href="#问题最多的地方，就是它是唯一一个没有相关标准的-JavaScript-实现。" class="headerlink" title="问题最多的地方，就是它是唯一一个没有相关标准的 JavaScript 实现。"></a>问题最多的地方，就是它是唯一一个没有相关标准的 JavaScript 实现。</h4><hr>
<h1 id="HTML-中的-JavaScript"><a href="#HTML-中的-JavaScript" class="headerlink" title="HTML 中的 JavaScript"></a>HTML 中的 JavaScript</h1><h2 id="script元素"><a href="#script元素" class="headerlink" title="script元素"></a>script元素</h2><h4 id="将JavaScript-插入-HTML-的主要方法是使用script元素。这个元素是由网景公司创造出来，并最早在-Netscape-Navigator-2-中实现的。后来，这个元素被正式加入到-HTML-规范。script元素有下列-8-个属性。"><a href="#将JavaScript-插入-HTML-的主要方法是使用script元素。这个元素是由网景公司创造出来，并最早在-Netscape-Navigator-2-中实现的。后来，这个元素被正式加入到-HTML-规范。script元素有下列-8-个属性。" class="headerlink" title="将JavaScript 插入 HTML 的主要方法是使用script元素。这个元素是由网景公司创造出来，并最早在 Netscape Navigator 2 中实现的。后来，这个元素被正式加入到 HTML 规范。script元素有下列 8 个属性。"></a>将JavaScript 插入 HTML 的主要方法是使用script元素。这个元素是由网景公司创造出来，并最早在 Netscape Navigator 2 中实现的。后来，这个元素被正式加入到 HTML 规范。script元素有下列 8 个属性。</h4><h5 id="1-async：可选。表示应该立即开始下载脚本，但不能阻止其他页面动作，比如下载资源或等待其他脚本加载。只对外部脚本文件有效。"><a href="#1-async：可选。表示应该立即开始下载脚本，但不能阻止其他页面动作，比如下载资源或等待其他脚本加载。只对外部脚本文件有效。" class="headerlink" title="1. async：可选。表示应该立即开始下载脚本，但不能阻止其他页面动作，比如下载资源或等待其他脚本加载。只对外部脚本文件有效。"></a>1. async：可选。表示应该立即开始下载脚本，但不能阻止其他页面动作，比如下载资源或等待其他脚本加载。只对外部脚本文件有效。</h5><h5 id="2-charset：可选。使用-src-属性指定的代码字符集。这个属性很少使用，因为大多数浏览器不在乎它的值。"><a href="#2-charset：可选。使用-src-属性指定的代码字符集。这个属性很少使用，因为大多数浏览器不在乎它的值。" class="headerlink" title="2. charset：可选。使用 src 属性指定的代码字符集。这个属性很少使用，因为大多数浏览器不在乎它的值。"></a>2. charset：可选。使用 src 属性指定的代码字符集。这个属性很少使用，因为大多数浏览器不在乎它的值。</h5><h5 id="3-crossorigin：可选。配置相关请求的CORS（跨源资源共享）设置。默认不使用CORS。crossorigin-”anonymous”配置文件请求不必设置凭据标志。crossorigin-”use-credentials”设置凭据标志，意味着出站请求会包含凭据。"><a href="#3-crossorigin：可选。配置相关请求的CORS（跨源资源共享）设置。默认不使用CORS。crossorigin-”anonymous”配置文件请求不必设置凭据标志。crossorigin-”use-credentials”设置凭据标志，意味着出站请求会包含凭据。" class="headerlink" title="3. crossorigin：可选。配置相关请求的CORS（跨源资源共享）设置。默认不使用CORS。crossorigin=”anonymous”配置文件请求不必设置凭据标志。crossorigin=”use-credentials”设置凭据标志，意味着出站请求会包含凭据。"></a>3. crossorigin：可选。配置相关请求的CORS（跨源资源共享）设置。默认不使用CORS。crossorigin=”anonymous”配置文件请求不必设置凭据标志。crossorigin=”use-credentials”设置凭据标志，意味着出站请求会包含凭据。</h5><h5 id="4-defer：可选。表示脚本可以延迟到文档完全被解析和显示之后再执行。只对外部脚本文件有效。在-IE7-及更早的版本中，对行内脚本也可以指定这个属性。"><a href="#4-defer：可选。表示脚本可以延迟到文档完全被解析和显示之后再执行。只对外部脚本文件有效。在-IE7-及更早的版本中，对行内脚本也可以指定这个属性。" class="headerlink" title="4. defer：可选。表示脚本可以延迟到文档完全被解析和显示之后再执行。只对外部脚本文件有效。在 IE7 及更早的版本中，对行内脚本也可以指定这个属性。"></a>4. defer：可选。表示脚本可以延迟到文档完全被解析和显示之后再执行。只对外部脚本文件有效。在 IE7 及更早的版本中，对行内脚本也可以指定这个属性。</h5><h5 id="5-integrity：可选。允许比对接收到的资源和指定的加密签名以验证子资源完整性（SRI，Subresource-Integrity）。如果接收到的资源的签名与这个属性指定的签名不匹配，则页面会报错，脚本不会执行。这个属性可以用于确保内容分发网络（CDN，Content-Delivery-Network）不会提供恶意内容。"><a href="#5-integrity：可选。允许比对接收到的资源和指定的加密签名以验证子资源完整性（SRI，Subresource-Integrity）。如果接收到的资源的签名与这个属性指定的签名不匹配，则页面会报错，脚本不会执行。这个属性可以用于确保内容分发网络（CDN，Content-Delivery-Network）不会提供恶意内容。" class="headerlink" title="5. integrity：可选。允许比对接收到的资源和指定的加密签名以验证子资源完整性（SRI，Subresource Integrity）。如果接收到的资源的签名与这个属性指定的签名不匹配，则页面会报错，脚本不会执行。这个属性可以用于确保内容分发网络（CDN，Content Delivery Network）不会提供恶意内容。"></a>5. integrity：可选。允许比对接收到的资源和指定的加密签名以验证子资源完整性（SRI，Subresource Integrity）。如果接收到的资源的签名与这个属性指定的签名不匹配，则页面会报错，脚本不会执行。这个属性可以用于确保内容分发网络（CDN，Content Delivery Network）不会提供恶意内容。</h5><h5 id="6-language：废弃。最初用于表示代码块中的脚本语言（如”JavaScript”、”JavaScript-1-2”或”VBScript”）。大多数浏览器都会忽略这个属性，不应该再使用它。"><a href="#6-language：废弃。最初用于表示代码块中的脚本语言（如”JavaScript”、”JavaScript-1-2”或”VBScript”）。大多数浏览器都会忽略这个属性，不应该再使用它。" class="headerlink" title="6. language：废弃。最初用于表示代码块中的脚本语言（如”JavaScript”、”JavaScript 1.2”或”VBScript”）。大多数浏览器都会忽略这个属性，不应该再使用它。"></a>6. language：废弃。最初用于表示代码块中的脚本语言（如”JavaScript”、”JavaScript 1.2”或”VBScript”）。大多数浏览器都会忽略这个属性，不应该再使用它。</h5><h5 id="7-src：可选。表示包含要执行的代码的外部文件。"><a href="#7-src：可选。表示包含要执行的代码的外部文件。" class="headerlink" title="7. src：可选。表示包含要执行的代码的外部文件。"></a>7. src：可选。表示包含要执行的代码的外部文件。</h5><h5 id="8-type：可选。代替-language，表示代码块中脚本语言的内容类型（也称-MIME-类型）。按照惯例，这个值始终都是”text-javascript”，尽管”text-javascript”和”text-ecmascript”都已经废弃了。JavaScript-文件的-MIME-类型通常是”application-x-javascript”，不过给type-属性这个值有可能导致脚本被忽略。在非-IE-的浏览器中有效的其他值还有”application-javascript”和”application-ecmascript”。如果这个值是-module，则代码会被当成-ES6-模块，而且只有这时候代码中才能出现-import-和-export-关键字。使用script的方式有两种：通过它直接在网页中嵌入-JavaScript-代码，以及通过它在网页中包含外部-JavaScript-文件。"><a href="#8-type：可选。代替-language，表示代码块中脚本语言的内容类型（也称-MIME-类型）。按照惯例，这个值始终都是”text-javascript”，尽管”text-javascript”和”text-ecmascript”都已经废弃了。JavaScript-文件的-MIME-类型通常是”application-x-javascript”，不过给type-属性这个值有可能导致脚本被忽略。在非-IE-的浏览器中有效的其他值还有”application-javascript”和”application-ecmascript”。如果这个值是-module，则代码会被当成-ES6-模块，而且只有这时候代码中才能出现-import-和-export-关键字。使用script的方式有两种：通过它直接在网页中嵌入-JavaScript-代码，以及通过它在网页中包含外部-JavaScript-文件。" class="headerlink" title="8. type：可选。代替 language，表示代码块中脚本语言的内容类型（也称 MIME 类型）。按照惯例，这个值始终都是”text/javascript”，尽管”text/javascript”和”text/ecmascript”都已经废弃了。JavaScript 文件的 MIME 类型通常是”application/x-javascript”，不过给type 属性这个值有可能导致脚本被忽略。在非 IE 的浏览器中有效的其他值还有”application/javascript”和”application/ecmascript”。如果这个值是 module，则代码会被当成 ES6 模块，而且只有这时候代码中才能出现 import 和 export 关键字。使用script的方式有两种：通过它直接在网页中嵌入 JavaScript 代码，以及通过它在网页中包含外部 JavaScript 文件。"></a>8. type：可选。代替 language，表示代码块中脚本语言的内容类型（也称 MIME 类型）。按照惯例，这个值始终都是”text/javascript”，尽管”text/javascript”和”text/ecmascript”都已经废弃了。JavaScript 文件的 MIME 类型通常是”application/x-javascript”，不过给type 属性这个值有可能导致脚本被忽略。在非 IE 的浏览器中有效的其他值还有”application/javascript”和”application/ecmascript”。如果这个值是 module，则代码会被当成 ES6 模块，而且只有这时候代码中才能出现 import 和 export 关键字。使用script的方式有两种：通过它直接在网页中嵌入 JavaScript 代码，以及通过它在网页中包含外部 JavaScript 文件。</h5><hr>
<h1 id="语言基础"><a href="#语言基础" class="headerlink" title="语言基础"></a>语言基础</h1><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><h5 id="ECMAScript-的语法很大程度上借鉴了-C-语言和其他类-C-语言，如-Java-和-Perl。熟悉这些语言的开发者，应该很容易理解-ECMAScript-宽松的语法"><a href="#ECMAScript-的语法很大程度上借鉴了-C-语言和其他类-C-语言，如-Java-和-Perl。熟悉这些语言的开发者，应该很容易理解-ECMAScript-宽松的语法" class="headerlink" title="ECMAScript 的语法很大程度上借鉴了 C 语言和其他类 C 语言，如 Java 和 Perl。熟悉这些语言的开发者，应该很容易理解 ECMAScript 宽松的语法"></a>ECMAScript 的语法很大程度上借鉴了 C 语言和其他类 C 语言，如 Java 和 Perl。熟悉这些语言的开发者，应该很容易理解 ECMAScript 宽松的语法</h5><h3 id="区分大小写"><a href="#区分大小写" class="headerlink" title="区分大小写"></a>区分大小写</h3><h5 id="首先要知道的是，ECMAScript-中一切都区分大小写。无论是变量、函数名还是操作符，都区分大小写。换句话说，变量-test-和变量-Test-是两个不同的变量。类似地，typeof-不能作为函数名，因为它是一个关键字（后面会介绍）。但-Typeof-是一个完全有效的函数名。"><a href="#首先要知道的是，ECMAScript-中一切都区分大小写。无论是变量、函数名还是操作符，都区分大小写。换句话说，变量-test-和变量-Test-是两个不同的变量。类似地，typeof-不能作为函数名，因为它是一个关键字（后面会介绍）。但-Typeof-是一个完全有效的函数名。" class="headerlink" title="首先要知道的是，ECMAScript 中一切都区分大小写。无论是变量、函数名还是操作符，都区分大小写。换句话说，变量 test 和变量 Test 是两个不同的变量。类似地，typeof 不能作为函数名，因为它是一个关键字（后面会介绍）。但 Typeof 是一个完全有效的函数名。"></a>首先要知道的是，ECMAScript 中一切都区分大小写。无论是变量、函数名还是操作符，都区分大小写。换句话说，变量 test 和变量 Test 是两个不同的变量。类似地，typeof 不能作为函数名，因为它是一个关键字（后面会介绍）。但 Typeof 是一个完全有效的函数名。</h5><h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><h5 id="第一个字符必须是一个字母、下划线（-）或美元符号（-）；"><a href="#第一个字符必须是一个字母、下划线（-）或美元符号（-）；" class="headerlink" title="第一个字符必须是一个字母、下划线（_）或美元符号（$）；"></a>第一个字符必须是一个字母、下划线（_）或美元符号（$）；</h5><h5 id="剩下的其他字符可以是字母、下划线、美元符号或数字。"><a href="#剩下的其他字符可以是字母、下划线、美元符号或数字。" class="headerlink" title="剩下的其他字符可以是字母、下划线、美元符号或数字。"></a>剩下的其他字符可以是字母、下划线、美元符号或数字。</h5><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><h5 id="ECMAScript-采用-C-语言风格的注释，包括单行注释和块注释。单行注释以两个斜杠字符开头，如：-单行注释"><a href="#ECMAScript-采用-C-语言风格的注释，包括单行注释和块注释。单行注释以两个斜杠字符开头，如：-单行注释" class="headerlink" title="ECMAScript 采用 C 语言风格的注释，包括单行注释和块注释。单行注释以两个斜杠字符开头，如：// 单行注释"></a>ECMAScript 采用 C 语言风格的注释，包括单行注释和块注释。单行注释以两个斜杠字符开头，如：// 单行注释</h5><h5 id="块注释以一个斜杠和一个星号（-）开头，以它们的反向组合（-）结尾，如：-这是多行注释"><a href="#块注释以一个斜杠和一个星号（-）开头，以它们的反向组合（-）结尾，如：-这是多行注释" class="headerlink" title="块注释以一个斜杠和一个星号（/）开头，以它们的反向组合（/）结尾，如：/* 这是多行注释 */"></a>块注释以一个斜杠和一个星号（/<em>）开头，以它们的反向组合（</em>/）结尾，如：/* 这是多行注释 */</h5><h3 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h3><h5 id="ECMAScript-5-增加了严格模式（strict-mode）的概念。严格模式是一种不同的-JavaScript-解析和执行模型，ECMAScript-3-的一些不规范写法在这种模式下会被处理，对于不安全的活动将抛出错误。"><a href="#ECMAScript-5-增加了严格模式（strict-mode）的概念。严格模式是一种不同的-JavaScript-解析和执行模型，ECMAScript-3-的一些不规范写法在这种模式下会被处理，对于不安全的活动将抛出错误。" class="headerlink" title="ECMAScript 5 增加了严格模式（strict mode）的概念。严格模式是一种不同的 JavaScript 解析和执行模型，ECMAScript 3 的一些不规范写法在这种模式下会被处理，对于不安全的活动将抛出错误。"></a>ECMAScript 5 增加了严格模式（strict mode）的概念。严格模式是一种不同的 JavaScript 解析和执行模型，ECMAScript 3 的一些不规范写法在这种模式下会被处理，对于不安全的活动将抛出错误。</h5><h5 id="严格模式会影响-JavaScript-执行的很多方面，因此本书在用到它时会明确指出来。所有现代浏览器都支持严格模式。"><a href="#严格模式会影响-JavaScript-执行的很多方面，因此本书在用到它时会明确指出来。所有现代浏览器都支持严格模式。" class="headerlink" title="严格模式会影响 JavaScript 执行的很多方面，因此本书在用到它时会明确指出来。所有现代浏览器都支持严格模式。"></a>严格模式会影响 JavaScript 执行的很多方面，因此本书在用到它时会明确指出来。所有现代浏览器都支持严格模式。</h5><h3 id="noscript元素"><a href="#noscript元素" class="headerlink" title="noscript元素"></a>noscript元素</h3><h5 id="针对早期浏览器不支持-JavaScript-的问题，需要一个页面优雅降级的处理方案。最终，noscript元素出现，被用于给不支持-JavaScript-的浏览器提供替代内容。虽然如今的浏览器已经-100-支持JavaScript，但对于禁用-JavaScript-的浏览器来说，这个元素仍然有它的用处。"><a href="#针对早期浏览器不支持-JavaScript-的问题，需要一个页面优雅降级的处理方案。最终，noscript元素出现，被用于给不支持-JavaScript-的浏览器提供替代内容。虽然如今的浏览器已经-100-支持JavaScript，但对于禁用-JavaScript-的浏览器来说，这个元素仍然有它的用处。" class="headerlink" title="针对早期浏览器不支持 JavaScript 的问题，需要一个页面优雅降级的处理方案。最终，noscript元素出现，被用于给不支持 JavaScript 的浏览器提供替代内容。虽然如今的浏览器已经 100%支持JavaScript，但对于禁用 JavaScript 的浏览器来说，这个元素仍然有它的用处。"></a>针对早期浏览器不支持 JavaScript 的问题，需要一个页面优雅降级的处理方案。最终，noscript元素出现，被用于给不支持 JavaScript 的浏览器提供替代内容。虽然如今的浏览器已经 100%支持JavaScript，但对于禁用 JavaScript 的浏览器来说，这个元素仍然有它的用处。</h5><h5 id="noscript元素可以包含任何可以出现在body中的-HTML-元素，script除外。在下列两种情况下，浏览器将显示包含在noscript中的内容："><a href="#noscript元素可以包含任何可以出现在body中的-HTML-元素，script除外。在下列两种情况下，浏览器将显示包含在noscript中的内容：" class="headerlink" title="noscript元素可以包含任何可以出现在body中的 HTML 元素，script除外。在下列两种情况下，浏览器将显示包含在noscript中的内容："></a>noscript元素可以包含任何可以出现在body中的 HTML 元素，script除外。在下列两种情况下，浏览器将显示包含在noscript中的内容：</h5><h6 id="-浏览器不支持脚本；"><a href="#-浏览器不支持脚本；" class="headerlink" title=" 浏览器不支持脚本；"></a> 浏览器不支持脚本；</h6><h6 id="-浏览器对脚本的支持被关闭。"><a href="#-浏览器对脚本的支持被关闭。" class="headerlink" title=" 浏览器对脚本的支持被关闭。"></a> 浏览器对脚本的支持被关闭。</h6><h5 id="任何一个条件被满足，包含在noscript中的内容就会被渲染。否则，浏览器不会渲染noscript中的内容。"><a href="#任何一个条件被满足，包含在noscript中的内容就会被渲染。否则，浏览器不会渲染noscript中的内容。" class="headerlink" title="任何一个条件被满足，包含在noscript中的内容就会被渲染。否则，浏览器不会渲染noscript中的内容。"></a>任何一个条件被满足，包含在noscript中的内容就会被渲染。否则，浏览器不会渲染noscript中的内容。</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">title</span>&gt;</span>Example HTML Page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">defer</span>=<span class="string">&quot;defer&quot;</span> <span class="attr">src</span>=<span class="string">&quot;example1.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">defer</span>=<span class="string">&quot;defer&quot;</span> <span class="attr">src</span>=<span class="string">&quot;example2.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">noscript</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">p</span>&gt;</span>This page requires a JavaScript-enabled browser.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="这个例子是在脚本不可用时让浏览器显示一段话。如果浏览器支持脚本，则用户永远不会看到它。"><a href="#这个例子是在脚本不可用时让浏览器显示一段话。如果浏览器支持脚本，则用户永远不会看到它。" class="headerlink" title="这个例子是在脚本不可用时让浏览器显示一段话。如果浏览器支持脚本，则用户永远不会看到它。"></a>这个例子是在脚本不可用时让浏览器显示一段话。如果浏览器支持脚本，则用户永远不会看到它。</h5>]]></content>
      <categories>
        <category>JavaScript红宝书</category>
      </categories>
      <tags>
        <tag>JavaScript简介</tag>
      </tags>
  </entry>
  <entry>
    <title>JS红宝书之操作符</title>
    <url>/2020/10/16/%E7%BA%A2%E5%AE%9D%E4%B9%A64/</url>
    <content><![CDATA[<h4 id="ECMA-262-描述了一组可用于操作数据值的操作符，包括数学操作符（如加、减）、位操作符、关系操作符和相等操作符等。ECMAScript-中的操作符是独特的，因为它们可用于各种值，包括字符串、数值、布尔值，甚至还有对象。在应用给对象时，操作符通常会调用-valueOf-和-或-toString-方法来取得可以计算的值"><a href="#ECMA-262-描述了一组可用于操作数据值的操作符，包括数学操作符（如加、减）、位操作符、关系操作符和相等操作符等。ECMAScript-中的操作符是独特的，因为它们可用于各种值，包括字符串、数值、布尔值，甚至还有对象。在应用给对象时，操作符通常会调用-valueOf-和-或-toString-方法来取得可以计算的值" class="headerlink" title="ECMA-262 描述了一组可用于操作数据值的操作符，包括数学操作符（如加、减）、位操作符、关系操作符和相等操作符等。ECMAScript 中的操作符是独特的，因为它们可用于各种值，包括字符串、数值、布尔值，甚至还有对象。在应用给对象时，操作符通常会调用 valueOf()和/或 toString()方法来取得可以计算的值"></a>ECMA-262 描述了一组可用于操作数据值的操作符，包括数学操作符（如加、减）、位操作符、关系操作符和相等操作符等。ECMAScript 中的操作符是独特的，因为它们可用于各种值，包括字符串、数值、布尔值，甚至还有对象。在应用给对象时，操作符通常会调用 valueOf()和/或 toString()方法来取得可以计算的值</h4><h2 id="一元操作符"><a href="#一元操作符" class="headerlink" title="一元操作符"></a>一元操作符</h2><h4 id="只操作一个值的操作符叫一元操作符（unary-operator）。一元操作符是-ECMAScript中最简单的操作符。"><a href="#只操作一个值的操作符叫一元操作符（unary-operator）。一元操作符是-ECMAScript中最简单的操作符。" class="headerlink" title="只操作一个值的操作符叫一元操作符（unary operator）。一元操作符是 ECMAScript中最简单的操作符。"></a>只操作一个值的操作符叫一元操作符（unary operator）。一元操作符是 ECMAScript中最简单的操作符。</h4><h3 id="1-递增-递减操作符"><a href="#1-递增-递减操作符" class="headerlink" title="1. 递增/递减操作符"></a>1. 递增/递减操作符</h3><h5 id="递增和递减操作符直接照搬自-C-语言，但有两个版本：前缀版和后缀版。顾名思义，前缀版就是位于要操作的变量前头，后缀版就是位于要操作的变量后头。前缀递增操作符会给数值加-1，把两个加号（-）放到变量前头即可"><a href="#递增和递减操作符直接照搬自-C-语言，但有两个版本：前缀版和后缀版。顾名思义，前缀版就是位于要操作的变量前头，后缀版就是位于要操作的变量后头。前缀递增操作符会给数值加-1，把两个加号（-）放到变量前头即可" class="headerlink" title="递增和递减操作符直接照搬自 C 语言，但有两个版本：前缀版和后缀版。顾名思义，前缀版就是位于要操作的变量前头，后缀版就是位于要操作的变量后头。前缀递增操作符会给数值加 1，把两个加号（++）放到变量前头即可"></a>递增和递减操作符直接照搬自 C 语言，但有两个版本：前缀版和后缀版。顾名思义，前缀版就是位于要操作的变量前头，后缀版就是位于要操作的变量后头。前缀递增操作符会给数值加 1，把两个加号（++）放到变量前头即可</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">：<span class="keyword">let</span> age = <span class="number">29</span>;</span><br><span class="line">++age; </span><br></pre></td></tr></table></figure>
<h5 id="在这个例子中，前缀递增操作符把-age-的值变成了-30（给之前的值-29-加-1）。因此，它实际上等于如下表达式："><a href="#在这个例子中，前缀递增操作符把-age-的值变成了-30（给之前的值-29-加-1）。因此，它实际上等于如下表达式：" class="headerlink" title="在这个例子中，前缀递增操作符把 age 的值变成了 30（给之前的值 29 加 1）。因此，它实际上等于如下表达式："></a>在这个例子中，前缀递增操作符把 age 的值变成了 30（给之前的值 29 加 1）。因此，它实际上等于如下表达式：</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> age = <span class="number">29</span>;</span><br><span class="line">age = age + <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<h5 id="前缀递减操作符也类似，只不过是从一个数值减-1。使用前缀递减操作符，只要把两个减号（–）放到变量前头即可："><a href="#前缀递减操作符也类似，只不过是从一个数值减-1。使用前缀递减操作符，只要把两个减号（–）放到变量前头即可：" class="headerlink" title="前缀递减操作符也类似，只不过是从一个数值减 1。使用前缀递减操作符，只要把两个减号（–）放到变量前头即可："></a>前缀递减操作符也类似，只不过是从一个数值减 1。使用前缀递减操作符，只要把两个减号（–）放到变量前头即可：</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> age = <span class="number">29</span>;</span><br><span class="line">--age;</span><br></pre></td></tr></table></figure>
<h5 id="执行操作后，变量-age-的值变成了-28（从-29-减-1）。"><a href="#执行操作后，变量-age-的值变成了-28（从-29-减-1）。" class="headerlink" title="执行操作后，变量 age 的值变成了 28（从 29 减 1）。"></a>执行操作后，变量 age 的值变成了 28（从 29 减 1）。</h5><h5 id="无论使用前缀递增还是前缀递减操作符，变量的值都会在语句被求值之前改变。（在计算机科学中，这通常被称为具有副作用。）请看下面的例子："><a href="#无论使用前缀递增还是前缀递减操作符，变量的值都会在语句被求值之前改变。（在计算机科学中，这通常被称为具有副作用。）请看下面的例子：" class="headerlink" title="无论使用前缀递增还是前缀递减操作符，变量的值都会在语句被求值之前改变。（在计算机科学中，这通常被称为具有副作用。）请看下面的例子："></a>无论使用前缀递增还是前缀递减操作符，变量的值都会在语句被求值之前改变。（在计算机科学中，这通常被称为具有副作用。）请看下面的例子：</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> age = <span class="number">29</span>;</span><br><span class="line"><span class="keyword">let</span> anotherAge = --age + <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(age); <span class="comment">// 28</span></span><br><span class="line"><span class="built_in">console</span>.log(anotherAge); <span class="comment">// 30 </span></span><br></pre></td></tr></table></figure>
<h5 id="在这个例子中，变量-anotherAge-以-age-减-1-后的值再加-2-进行初始化。因为递减操作先发生，所以-age-的值先变成-28，然后再加-2，结果是-30。前缀递增和递减在语句中的优先级是相等的，因此会从左到右依次求值。比如："><a href="#在这个例子中，变量-anotherAge-以-age-减-1-后的值再加-2-进行初始化。因为递减操作先发生，所以-age-的值先变成-28，然后再加-2，结果是-30。前缀递增和递减在语句中的优先级是相等的，因此会从左到右依次求值。比如：" class="headerlink" title="在这个例子中，变量 anotherAge 以 age 减 1 后的值再加 2 进行初始化。因为递减操作先发生，所以 age 的值先变成 28，然后再加 2，结果是 30。前缀递增和递减在语句中的优先级是相等的，因此会从左到右依次求值。比如："></a>在这个例子中，变量 anotherAge 以 age 减 1 后的值再加 2 进行初始化。因为递减操作先发生，所以 age 的值先变成 28，然后再加 2，结果是 30。前缀递增和递减在语句中的优先级是相等的，因此会从左到右依次求值。比如：</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> num1 = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">let</span> num2 = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">let</span> num3 = --num1 + num2;</span><br><span class="line"><span class="keyword">let</span> num4 = num1 + num2;</span><br><span class="line"><span class="built_in">console</span>.log(num3); <span class="comment">// 21</span></span><br><span class="line"><span class="built_in">console</span>.log(num4); <span class="comment">// 21 </span></span><br></pre></td></tr></table></figure>

<h5 id="这里，num3-等于-21-是因为-num1-先减-1-之后才加-num2。变量-num4-也是-21，那是因为加法使用的也是递减后的值。"><a href="#这里，num3-等于-21-是因为-num1-先减-1-之后才加-num2。变量-num4-也是-21，那是因为加法使用的也是递减后的值。" class="headerlink" title="这里，num3 等于 21 是因为 num1 先减 1 之后才加 num2。变量 num4 也是 21，那是因为加法使用的也是递减后的值。"></a>这里，num3 等于 21 是因为 num1 先减 1 之后才加 num2。变量 num4 也是 21，那是因为加法使用的也是递减后的值。</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> age = <span class="number">29</span>;</span><br><span class="line">age++; </span><br></pre></td></tr></table></figure>
<h5 id="把递增操作符放到变量后面不会改变语句执行的结果，因为递增是唯一的操作。可是，在跟其他操作混合时，差异就会变明显，比如："><a href="#把递增操作符放到变量后面不会改变语句执行的结果，因为递增是唯一的操作。可是，在跟其他操作混合时，差异就会变明显，比如：" class="headerlink" title="把递增操作符放到变量后面不会改变语句执行的结果，因为递增是唯一的操作。可是，在跟其他操作混合时，差异就会变明显，比如："></a>把递增操作符放到变量后面不会改变语句执行的结果，因为递增是唯一的操作。可是，在跟其他操作混合时，差异就会变明显，比如：</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> num1 = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">let</span> num2 = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">let</span> num3 = num1-- + num2;</span><br><span class="line"><span class="keyword">let</span> num4 = num1 + num2; </span><br><span class="line"><span class="built_in">console</span>.log(num3); <span class="comment">// 22</span></span><br><span class="line"><span class="built_in">console</span>.log(num4); <span class="comment">// 21 </span></span><br></pre></td></tr></table></figure>
<h5 id="这个例子跟前面的那个一样，只是把前缀递减改成了后缀递减，区别很明显。在使用前缀版的例子中，num3-和-num4-的值都是-21。而在这个例子中，num3-的值是-22，num4-的值是-21。这里的不同之处在于，计算-num3-时使用的是-num1-的原始值（2），而计算-num4-时使用的是-num1-递减后的值"><a href="#这个例子跟前面的那个一样，只是把前缀递减改成了后缀递减，区别很明显。在使用前缀版的例子中，num3-和-num4-的值都是-21。而在这个例子中，num3-的值是-22，num4-的值是-21。这里的不同之处在于，计算-num3-时使用的是-num1-的原始值（2），而计算-num4-时使用的是-num1-递减后的值" class="headerlink" title="这个例子跟前面的那个一样，只是把前缀递减改成了后缀递减，区别很明显。在使用前缀版的例子中，num3 和 num4 的值都是 21。而在这个例子中，num3 的值是 22，num4 的值是 21。这里的不同之处在于，计算 num3 时使用的是 num1 的原始值（2），而计算 num4 时使用的是 num1 递减后的值"></a>这个例子跟前面的那个一样，只是把前缀递减改成了后缀递减，区别很明显。在使用前缀版的例子中，num3 和 num4 的值都是 21。而在这个例子中，num3 的值是 22，num4 的值是 21。这里的不同之处在于，计算 num3 时使用的是 num1 的原始值（2），而计算 num4 时使用的是 num1 递减后的值</h5><h4 id="这-4-个操作符可以作用于任何值，意思是不限于整数——字符串、布尔值、浮点值，甚至对象都可以。递增和递减操作符遵循如下规则。"><a href="#这-4-个操作符可以作用于任何值，意思是不限于整数——字符串、布尔值、浮点值，甚至对象都可以。递增和递减操作符遵循如下规则。" class="headerlink" title="这 4 个操作符可以作用于任何值，意思是不限于整数——字符串、布尔值、浮点值，甚至对象都可以。递增和递减操作符遵循如下规则。"></a>这 4 个操作符可以作用于任何值，意思是不限于整数——字符串、布尔值、浮点值，甚至对象都可以。递增和递减操作符遵循如下规则。</h4><ol>
<li>对于字符串，如果是有效的数值形式，则转换为数值再应用改变。变量类型从字符串变成数值。</li>
<li>对于字符串，如果不是有效的数值形式，则将变量的值设置为 NaN 。变量类型从字符串变成<br>数值。</li>
<li>对于布尔值，如果是 false，则转换为 0 再应用改变。变量类型从布尔值变成数值。</li>
<li>对于布尔值，如果是 true，则转换为 1 再应用改变。变量类型从布尔值变成数值。</li>
<li>对于浮点值，加 1 或减 1。</li>
<li>如果是对象，则调用其（第 5 章会详细介绍的）valueOf()方法取得可以操作的值。对得到的<br>值应用上述规则。如果是 NaN，则调用 toString()并再次应用其他规则。变量类型从对象变成<br>数值。<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> s1 = <span class="string">&quot;2&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> s2 = <span class="string">&quot;z&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">let</span> f = <span class="number">1.1</span>;</span><br><span class="line"><span class="keyword">let</span> o = &#123;</span><br><span class="line"> valueOf() &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;;</span><br><span class="line">s1++; <span class="comment">// 值变成数值 3</span></span><br><span class="line">s2++; <span class="comment">// 值变成 NaN</span></span><br><span class="line">b++; <span class="comment">// 值变成数值 1</span></span><br><span class="line">f--; <span class="comment">// 值变成 0.10000000000000009（因为浮点数不精确）</span></span><br><span class="line">o--; <span class="comment">// 值变成-2 </span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="2-一元加和减"><a href="#2-一元加和减" class="headerlink" title="2. 一元加和减"></a>2. 一元加和减</h3><h5 id="一元加和减操作符对大多数开发者来说并不陌生，它们在-ECMAScript-中跟在高中数学中的用途一样。一元加由一个加号（-）表示，放在变量前头，对数值没有任何影响："><a href="#一元加和减操作符对大多数开发者来说并不陌生，它们在-ECMAScript-中跟在高中数学中的用途一样。一元加由一个加号（-）表示，放在变量前头，对数值没有任何影响：" class="headerlink" title="一元加和减操作符对大多数开发者来说并不陌生，它们在 ECMAScript 中跟在高中数学中的用途一样。一元加由一个加号（+）表示，放在变量前头，对数值没有任何影响："></a>一元加和减操作符对大多数开发者来说并不陌生，它们在 ECMAScript 中跟在高中数学中的用途一样。一元加由一个加号（+）表示，放在变量前头，对数值没有任何影响：</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> s1 = <span class="string">&quot;01&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> s2 = <span class="string">&quot;1.1&quot;</span>; </span><br><span class="line"><span class="keyword">let</span> s3 = <span class="string">&quot;z&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">let</span> f = <span class="number">1.1</span>;</span><br><span class="line"><span class="keyword">let</span> o = &#123;</span><br><span class="line"> valueOf() &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;;</span><br><span class="line">s1 = +s1; <span class="comment">// 值变成数值 1</span></span><br><span class="line">s2 = +s2; <span class="comment">// 值变成数值 1.1</span></span><br><span class="line">s3 = +s3; <span class="comment">// 值变成 NaN</span></span><br><span class="line">b = +b; <span class="comment">// 值变成数值 0</span></span><br><span class="line">f = +f; <span class="comment">// 不变，还是 1.1</span></span><br><span class="line">o = +o; <span class="comment">// 值变成数值-1 </span></span><br></pre></td></tr></table></figure>
<h5 id="对数值使用一元减会将其变成相应的负值（如上面的例子所示）。在应用到非数值时，一元减会遵循与一元加同样的规则，先对它们进行转换，然后再取负值："><a href="#对数值使用一元减会将其变成相应的负值（如上面的例子所示）。在应用到非数值时，一元减会遵循与一元加同样的规则，先对它们进行转换，然后再取负值：" class="headerlink" title="对数值使用一元减会将其变成相应的负值（如上面的例子所示）。在应用到非数值时，一元减会遵循与一元加同样的规则，先对它们进行转换，然后再取负值："></a>对数值使用一元减会将其变成相应的负值（如上面的例子所示）。在应用到非数值时，一元减会遵循与一元加同样的规则，先对它们进行转换，然后再取负值：</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> s1 = <span class="string">&quot;01&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> s2 = <span class="string">&quot;1.1&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> s3 = <span class="string">&quot;z&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">let</span> f = <span class="number">1.1</span>;</span><br><span class="line"><span class="keyword">let</span> o = &#123;</span><br><span class="line"> valueOf() &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;;</span><br><span class="line">s1 = -s1; <span class="comment">// 值变成数值-1</span></span><br><span class="line">s2 = -s2; <span class="comment">// 值变成数值-1.1</span></span><br><span class="line">s3 = -s3; <span class="comment">// 值变成 NaN</span></span><br><span class="line">b = -b; <span class="comment">// 值变成数值 0</span></span><br><span class="line">f = -f; <span class="comment">// 变成-1.1</span></span><br><span class="line">o = -o; <span class="comment">// 值变成数值 1 </span></span><br></pre></td></tr></table></figure>

<h3 id="布尔操作符"><a href="#布尔操作符" class="headerlink" title="布尔操作符"></a>布尔操作符</h3><h5 id="对于编程语言来说，布尔操作符跟相等操作符几乎同样重要。如果没有能力测试两个值的关系，那么像-if-else-和循环这样的语句也没什么用了。布尔操作符一共有-3-个：逻辑非、逻辑与和逻辑或。"><a href="#对于编程语言来说，布尔操作符跟相等操作符几乎同样重要。如果没有能力测试两个值的关系，那么像-if-else-和循环这样的语句也没什么用了。布尔操作符一共有-3-个：逻辑非、逻辑与和逻辑或。" class="headerlink" title="对于编程语言来说，布尔操作符跟相等操作符几乎同样重要。如果没有能力测试两个值的关系，那么像 if-else 和循环这样的语句也没什么用了。布尔操作符一共有 3 个：逻辑非、逻辑与和逻辑或。"></a>对于编程语言来说，布尔操作符跟相等操作符几乎同样重要。如果没有能力测试两个值的关系，那么像 if-else 和循环这样的语句也没什么用了。布尔操作符一共有 3 个：逻辑非、逻辑与和逻辑或。</h5><h4 id="1-逻辑非"><a href="#1-逻辑非" class="headerlink" title="1. 逻辑非"></a>1. 逻辑非</h4><h5 id="逻辑非操作符由一个叹号（-）表示，可应用给-ECMAScript-中的任何值。这个操作符始终返回布尔值，无论应用到的是什么数据类型。逻辑非操作符首先将操作数转换为布尔值，然后再对其取反。换句话说，逻辑非操作符会遵循如下规则。"><a href="#逻辑非操作符由一个叹号（-）表示，可应用给-ECMAScript-中的任何值。这个操作符始终返回布尔值，无论应用到的是什么数据类型。逻辑非操作符首先将操作数转换为布尔值，然后再对其取反。换句话说，逻辑非操作符会遵循如下规则。" class="headerlink" title="逻辑非操作符由一个叹号（!）表示，可应用给 ECMAScript 中的任何值。这个操作符始终返回布尔值，无论应用到的是什么数据类型。逻辑非操作符首先将操作数转换为布尔值，然后再对其取反。换句话说，逻辑非操作符会遵循如下规则。"></a>逻辑非操作符由一个叹号（!）表示，可应用给 ECMAScript 中的任何值。这个操作符始终返回布尔值，无论应用到的是什么数据类型。逻辑非操作符首先将操作数转换为布尔值，然后再对其取反。换句话说，逻辑非操作符会遵循如下规则。</h5><h4 id="2-逻辑与"><a href="#2-逻辑与" class="headerlink" title="2. 逻辑与"></a>2. 逻辑与</h4><h5 id="逻辑与操作逻辑与操作符由两个和号（-amp-amp-）表示，应用到两个值，逻辑与操作符可用于任何类型的操作数，不限于布尔值。如果有操作数不是布尔值，则逻辑与并不一定会返回布尔值，逻辑与操作符是一种短路操作符，意思就是如果第一个操作数决定了结果，那么永远不会对第二个操作数求值。对逻辑与操作符来说，如果第一个操作数是-false，那么无论第二个操作数是什么值，结果也不可能等于-true。"><a href="#逻辑与操作逻辑与操作符由两个和号（-amp-amp-）表示，应用到两个值，逻辑与操作符可用于任何类型的操作数，不限于布尔值。如果有操作数不是布尔值，则逻辑与并不一定会返回布尔值，逻辑与操作符是一种短路操作符，意思就是如果第一个操作数决定了结果，那么永远不会对第二个操作数求值。对逻辑与操作符来说，如果第一个操作数是-false，那么无论第二个操作数是什么值，结果也不可能等于-true。" class="headerlink" title="逻辑与操作逻辑与操作符由两个和号（&amp;&amp;）表示，应用到两个值，逻辑与操作符可用于任何类型的操作数，不限于布尔值。如果有操作数不是布尔值，则逻辑与并不一定会返回布尔值，逻辑与操作符是一种短路操作符，意思就是如果第一个操作数决定了结果，那么永远不会对第二个操作数求值。对逻辑与操作符来说，如果第一个操作数是 false，那么无论第二个操作数是什么值，结果也不可能等于 true。"></a>逻辑与操作逻辑与操作符由两个和号（&amp;&amp;）表示，应用到两个值，逻辑与操作符可用于任何类型的操作数，不限于布尔值。如果有操作数不是布尔值，则逻辑与并不一定会返回布尔值，逻辑与操作符是一种短路操作符，意思就是如果第一个操作数决定了结果，那么永远不会对第二个操作数求值。对逻辑与操作符来说，如果第一个操作数是 false，那么无论第二个操作数是什么值，结果也不可能等于 true。</h5><h4 id="3-逻辑或"><a href="#3-逻辑或" class="headerlink" title="3. 逻辑或"></a>3. 逻辑或</h4><h5 id="逻辑或操作符由两个管道符（-）表示，与逻辑与类似，如果有一个操作数不是布尔值，那么逻辑或操作符也不一定返回布尔值。"><a href="#逻辑或操作符由两个管道符（-）表示，与逻辑与类似，如果有一个操作数不是布尔值，那么逻辑或操作符也不一定返回布尔值。" class="headerlink" title="逻辑或操作符由两个管道符（||）表示，与逻辑与类似，如果有一个操作数不是布尔值，那么逻辑或操作符也不一定返回布尔值。"></a>逻辑或操作符由两个管道符（||）表示，与逻辑与类似，如果有一个操作数不是布尔值，那么逻辑或操作符也不一定返回布尔值。</h5><h3 id="乘性操作符"><a href="#乘性操作符" class="headerlink" title="乘性操作符"></a>乘性操作符</h3><h4 id="1-乘法操作符"><a href="#1-乘法操作符" class="headerlink" title="1. 乘法操作符"></a>1. 乘法操作符</h4><h5 id="乘法操作符由一个星号（-）表示，可以用于计算两个数值的乘积。其语法类似于-C-语言，比如："><a href="#乘法操作符由一个星号（-）表示，可以用于计算两个数值的乘积。其语法类似于-C-语言，比如：" class="headerlink" title="乘法操作符由一个星号（*）表示，可以用于计算两个数值的乘积。其语法类似于 C 语言，比如："></a>乘法操作符由一个星号（*）表示，可以用于计算两个数值的乘积。其语法类似于 C 语言，比如：</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> result = <span class="number">34</span> * <span class="number">56</span>; </span><br></pre></td></tr></table></figure>
<h4 id="2-除法操作符"><a href="#2-除法操作符" class="headerlink" title="2. 除法操作符"></a>2. 除法操作符</h4><h5 id="除法操作符由一个斜杠（-）表示，用于计算第一个操作数除以第二个操作数的商，比如："><a href="#除法操作符由一个斜杠（-）表示，用于计算第一个操作数除以第二个操作数的商，比如：" class="headerlink" title="除法操作符由一个斜杠（/）表示，用于计算第一个操作数除以第二个操作数的商，比如："></a>除法操作符由一个斜杠（/）表示，用于计算第一个操作数除以第二个操作数的商，比如：</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> result = <span class="number">66</span> / <span class="number">11</span>; </span><br></pre></td></tr></table></figure>
<h4 id="取模操作符"><a href="#取模操作符" class="headerlink" title="取模操作符"></a>取模操作符</h4><h5 id="取模（余数）操作符由一个百分比符号（-）表示，比如："><a href="#取模（余数）操作符由一个百分比符号（-）表示，比如：" class="headerlink" title="取模（余数）操作符由一个百分比符号（%）表示，比如："></a>取模（余数）操作符由一个百分比符号（%）表示，比如：</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> result = <span class="number">26</span> % <span class="number">5</span>; <span class="comment">// 等于 1</span></span><br></pre></td></tr></table></figure>

<h4 id="指数操作符"><a href="#指数操作符" class="headerlink" title="指数操作符"></a>指数操作符</h4><h5 id="ECMAScript-7-新增了指数操作符，Math-pow-现在有了自己的操作符-，结果是一样的："><a href="#ECMAScript-7-新增了指数操作符，Math-pow-现在有了自己的操作符-，结果是一样的：" class="headerlink" title="ECMAScript 7 新增了指数操作符，Math.pow()现在有了自己的操作符**，结果是一样的："></a>ECMAScript 7 新增了指数操作符，Math.pow()现在有了自己的操作符**，结果是一样的：</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.pow(<span class="number">3</span>, <span class="number">2</span>); <span class="comment">// 9</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">3</span> ** <span class="number">2</span>); <span class="comment">// 9</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.pow(<span class="number">16</span>, <span class="number">0.5</span>); <span class="comment">// 4</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">16</span>** <span class="number">0.5</span>); <span class="comment">// 4 </span></span><br></pre></td></tr></table></figure>
<h5 id="不仅如此，指数操作符也有自己的指数赋值操作符-，该操作符执行指数运算和结果的赋值操作："><a href="#不仅如此，指数操作符也有自己的指数赋值操作符-，该操作符执行指数运算和结果的赋值操作：" class="headerlink" title="不仅如此，指数操作符也有自己的指数赋值操作符**=，该操作符执行指数运算和结果的赋值操作："></a>不仅如此，指数操作符也有自己的指数赋值操作符**=，该操作符执行指数运算和结果的赋值操作：</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> squared = <span class="number">3</span>;</span><br><span class="line">squared **= <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(squared); <span class="comment">// 9 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sqrt = <span class="number">16</span>;</span><br><span class="line">sqrt **= <span class="number">0.5</span>;</span><br><span class="line"><span class="built_in">console</span>.log(sqrt); <span class="comment">// 4 </span></span><br></pre></td></tr></table></figure>
<h4 id="加性操作符"><a href="#加性操作符" class="headerlink" title="加性操作符"></a>加性操作符</h4><h5 id="加法操作符（-）用于求两个数的和，比如："><a href="#加法操作符（-）用于求两个数的和，比如：" class="headerlink" title="加法操作符（+）用于求两个数的和，比如："></a>加法操作符（+）用于求两个数的和，比如：</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> result = <span class="number">1</span> + <span class="number">2</span>; </span><br></pre></td></tr></table></figure>

<h4 id="减法操作符"><a href="#减法操作符" class="headerlink" title="减法操作符"></a>减法操作符</h4><h5 id="减法操作符（-）也是使用很频繁的一种操作符，比如："><a href="#减法操作符（-）也是使用很频繁的一种操作符，比如：" class="headerlink" title="减法操作符（-）也是使用很频繁的一种操作符，比如："></a>减法操作符（-）也是使用很频繁的一种操作符，比如：</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> result = <span class="number">2</span> - <span class="number">1</span>; </span><br></pre></td></tr></table></figure>

<h3 id="关系操作符"><a href="#关系操作符" class="headerlink" title="关系操作符"></a>关系操作符</h3><h5 id="关系操作符执行比较两个值的操作，包括小于（-lt-）、大于（-gt-）、小于等于（-lt-）和大于等于（-gt-），用法跟数学课上学的一样。这几个操作符都返回布尔值"><a href="#关系操作符执行比较两个值的操作，包括小于（-lt-）、大于（-gt-）、小于等于（-lt-）和大于等于（-gt-），用法跟数学课上学的一样。这几个操作符都返回布尔值" class="headerlink" title="关系操作符执行比较两个值的操作，包括小于（&lt;）、大于（&gt;）、小于等于（&lt;=）和大于等于（&gt;=），用法跟数学课上学的一样。这几个操作符都返回布尔值"></a>关系操作符执行比较两个值的操作，包括小于（&lt;）、大于（&gt;）、小于等于（&lt;=）和大于等于（&gt;=），用法跟数学课上学的一样。这几个操作符都返回布尔值</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> result1 = <span class="number">5</span> &gt; <span class="number">3</span>; <span class="comment">// true</span></span><br><span class="line"><span class="keyword">let</span> result2 = <span class="number">5</span> &lt; <span class="number">3</span>; <span class="comment">// false </span></span><br></pre></td></tr></table></figure>

<h3 id="相等操作符"><a href="#相等操作符" class="headerlink" title="相等操作符"></a>相等操作符</h3><h4 id="1-等于和不等于"><a href="#1-等于和不等于" class="headerlink" title="1. 等于和不等于"></a>1. 等于和不等于</h4><h5 id="ECMAScript-中的等于操作符用两个等于号（-）表示，如果操作数相等，则会返回-true。不等于操作符用叹号和等于号（-）表示，如果两个操作数不相等，则会返回-true。这两个操作符都会先进行类型转换（通常称为强制类型转换）再确定操作数是否相等。"><a href="#ECMAScript-中的等于操作符用两个等于号（-）表示，如果操作数相等，则会返回-true。不等于操作符用叹号和等于号（-）表示，如果两个操作数不相等，则会返回-true。这两个操作符都会先进行类型转换（通常称为强制类型转换）再确定操作数是否相等。" class="headerlink" title="ECMAScript 中的等于操作符用两个等于号（==）表示，如果操作数相等，则会返回 true。不等于操作符用叹号和等于号（!=）表示，如果两个操作数不相等，则会返回 true。这两个操作符都会先进行类型转换（通常称为强制类型转换）再确定操作数是否相等。"></a>ECMAScript 中的等于操作符用两个等于号（==）表示，如果操作数相等，则会返回 true。不等于操作符用叹号和等于号（!=）表示，如果两个操作数不相等，则会返回 true。这两个操作符都会先进行类型转换（通常称为强制类型转换）再确定操作数是否相等。</h5><h4 id="2-全等和不全等"><a href="#2-全等和不全等" class="headerlink" title="2. 全等和不全等"></a>2. 全等和不全等</h4><h5 id="全等和不全等操作符与相等和不相等操作符类似，只不过它们在比较相等时不转换操作数。全等操作符由-3-个等于号（-）表示，只有两个操作数在不转换的前提下相等才返回-true，"><a href="#全等和不全等操作符与相等和不相等操作符类似，只不过它们在比较相等时不转换操作数。全等操作符由-3-个等于号（-）表示，只有两个操作数在不转换的前提下相等才返回-true，" class="headerlink" title="全等和不全等操作符与相等和不相等操作符类似，只不过它们在比较相等时不转换操作数。全等操作符由 3 个等于号（===）表示，只有两个操作数在不转换的前提下相等才返回 true，"></a>全等和不全等操作符与相等和不相等操作符类似，只不过它们在比较相等时不转换操作数。全等操作符由 3 个等于号（===）表示，只有两个操作数在不转换的前提下相等才返回 true，</h5><h3 id="条件操作符"><a href="#条件操作符" class="headerlink" title="条件操作符"></a>条件操作符</h3><h5 id="条件操作符是-ECMAScript-中用途最为广泛的操作符之一，语法跟-Java-中一样："><a href="#条件操作符是-ECMAScript-中用途最为广泛的操作符之一，语法跟-Java-中一样：" class="headerlink" title="条件操作符是 ECMAScript 中用途最为广泛的操作符之一，语法跟 Java 中一样："></a>条件操作符是 ECMAScript 中用途最为广泛的操作符之一，语法跟 Java 中一样：</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">variable = boolean_expression ? true_value : false_value;</span><br></pre></td></tr></table></figure>
<h5 id="上面的代码执行了条件赋值操作，即根据条件表达式-boolean-expression-的值决定将哪个值赋"><a href="#上面的代码执行了条件赋值操作，即根据条件表达式-boolean-expression-的值决定将哪个值赋" class="headerlink" title="上面的代码执行了条件赋值操作，即根据条件表达式 boolean_expression 的值决定将哪个值赋"></a>上面的代码执行了条件赋值操作，即根据条件表达式 boolean_expression 的值决定将哪个值赋</h5><h5 id="给变量-variable-。如果-boolean-expression-是-true-，则赋值-true-value-；如果"><a href="#给变量-variable-。如果-boolean-expression-是-true-，则赋值-true-value-；如果" class="headerlink" title="给变量 variable 。如果 boolean_expression 是 true ，则赋值 true_value ；如果"></a>给变量 variable 。如果 boolean_expression 是 true ，则赋值 true_value ；如果</h5><h5 id="boolean-expression-是-false，则赋值-false-value。比如："><a href="#boolean-expression-是-false，则赋值-false-value。比如：" class="headerlink" title="boolean_expression 是 false，则赋值 false_value。比如："></a>boolean_expression 是 false，则赋值 false_value。比如：</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> max = (num1 &gt; num2) ? num1 : num2;</span><br></pre></td></tr></table></figure>
<h5 id="在这个例子中，max-将被赋予一个最大值。这个表达式的意思是，如果-num1-大于-num2（条件表达式为-true），则将-num1-赋给-max。否则，将-num2-赋给-max。"><a href="#在这个例子中，max-将被赋予一个最大值。这个表达式的意思是，如果-num1-大于-num2（条件表达式为-true），则将-num1-赋给-max。否则，将-num2-赋给-max。" class="headerlink" title="在这个例子中，max 将被赋予一个最大值。这个表达式的意思是，如果 num1 大于 num2（条件表达式为 true），则将 num1 赋给 max。否则，将 num2 赋给 max。"></a>在这个例子中，max 将被赋予一个最大值。这个表达式的意思是，如果 num1 大于 num2（条件表达式为 true），则将 num1 赋给 max。否则，将 num2 赋给 max。</h5><h3 id="赋值操作符"><a href="#赋值操作符" class="headerlink" title="赋值操作符"></a>赋值操作符</h3><h4 id="简单赋值用等于号（-）表示，将右手边的值赋给左手边的变量，如下所示："><a href="#简单赋值用等于号（-）表示，将右手边的值赋给左手边的变量，如下所示：" class="headerlink" title="简单赋值用等于号（=）表示，将右手边的值赋给左手边的变量，如下所示："></a>简单赋值用等于号（=）表示，将右手边的值赋给左手边的变量，如下所示：</h4>  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">10</span>;</span><br></pre></td></tr></table></figure>

<h4 id="每个数学操作符以及其他一些操作符都有对应的复合赋值操作符："><a href="#每个数学操作符以及其他一些操作符都有对应的复合赋值操作符：" class="headerlink" title="每个数学操作符以及其他一些操作符都有对应的复合赋值操作符："></a>每个数学操作符以及其他一些操作符都有对应的复合赋值操作符：</h4><ol>
<li><p>乘后赋值（*=）</p>
</li>
<li><p>除后赋值（/=）</p>
</li>
<li><p>取模后赋值（%=）</p>
</li>
<li><p>加后赋值（+=）</p>
</li>
<li><p>减后赋值（-=）</p>
</li>
<li><p>左移后赋值（&lt;&lt;=）</p>
</li>
<li><p>右移后赋值（&gt;&gt;=）</p>
</li>
<li><p>无符号右移后赋值（&gt;&gt;&gt;=）</p>
<h4 id="这些操作符仅仅是简写语法，使用它们不会提升性能。"><a href="#这些操作符仅仅是简写语法，使用它们不会提升性能。" class="headerlink" title="这些操作符仅仅是简写语法，使用它们不会提升性能。"></a>这些操作符仅仅是简写语法，使用它们不会提升性能。</h4><h3 id="逗号操作符"><a href="#逗号操作符" class="headerlink" title="逗号操作符"></a>逗号操作符</h3><h4 id="逗号操作符可以用来在一条语句中执行多个操作，"><a href="#逗号操作符可以用来在一条语句中执行多个操作，" class="headerlink" title="逗号操作符可以用来在一条语句中执行多个操作，"></a>逗号操作符可以用来在一条语句中执行多个操作，</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> num1 = <span class="number">1</span>, num2 = <span class="number">2</span>, num3 = <span class="number">3</span>; </span><br></pre></td></tr></table></figure>
<h5 id="在一条语句中同时声明多个变量是逗号操作符最常用的场景。不过，也可以使用逗号操作符来辅助赋值。在赋值时使用逗号操作符分隔值，最终会返回表达式中最后一个值"><a href="#在一条语句中同时声明多个变量是逗号操作符最常用的场景。不过，也可以使用逗号操作符来辅助赋值。在赋值时使用逗号操作符分隔值，最终会返回表达式中最后一个值" class="headerlink" title="在一条语句中同时声明多个变量是逗号操作符最常用的场景。不过，也可以使用逗号操作符来辅助赋值。在赋值时使用逗号操作符分隔值，最终会返回表达式中最后一个值"></a>在一条语句中同时声明多个变量是逗号操作符最常用的场景。不过，也可以使用逗号操作符来辅助赋值。在赋值时使用逗号操作符分隔值，最终会返回表达式中最后一个值</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> num = (<span class="number">5</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">0</span>); <span class="comment">// num 的值为 0 </span></span><br></pre></td></tr></table></figure>
<h5 id="在这个例子中，num-将被赋值为-0，因为-0-是表达式中最后一项。逗号操作符的这种使用场景并不多见，但这种行为的确存在。"><a href="#在这个例子中，num-将被赋值为-0，因为-0-是表达式中最后一项。逗号操作符的这种使用场景并不多见，但这种行为的确存在。" class="headerlink" title="在这个例子中，num 将被赋值为 0，因为 0 是表达式中最后一项。逗号操作符的这种使用场景并不多见，但这种行为的确存在。"></a>在这个例子中，num 将被赋值为 0，因为 0 是表达式中最后一项。逗号操作符的这种使用场景并不多见，但这种行为的确存在。</h5></li>
</ol>
]]></content>
      <categories>
        <category>JavaScript红宝书</category>
      </categories>
      <tags>
        <tag>操作符</tag>
      </tags>
  </entry>
  <entry>
    <title>JS红宝书之语句</title>
    <url>/2020/10/19/%E7%BA%A2%E5%AE%9D%E4%B9%A65/</url>
    <content><![CDATA[<h1 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h1><h4 id="ECMA-262-描述了一些语句（也称为流控制语句），而-ECMAScript-中的大部分语法都体现在语句中。语句通常使用一或多个关键字完成既定的任务。语句可以简单，也可以复杂。简单的如告诉函数退出，复杂的如列出一堆要重复执行的指令。"><a href="#ECMA-262-描述了一些语句（也称为流控制语句），而-ECMAScript-中的大部分语法都体现在语句中。语句通常使用一或多个关键字完成既定的任务。语句可以简单，也可以复杂。简单的如告诉函数退出，复杂的如列出一堆要重复执行的指令。" class="headerlink" title="ECMA-262 描述了一些语句（也称为流控制语句），而 ECMAScript 中的大部分语法都体现在语句中。语句通常使用一或多个关键字完成既定的任务。语句可以简单，也可以复杂。简单的如告诉函数退出，复杂的如列出一堆要重复执行的指令。"></a>ECMA-262 描述了一些语句（也称为流控制语句），而 ECMAScript 中的大部分语法都体现在语句中。语句通常使用一或多个关键字完成既定的任务。语句可以简单，也可以复杂。简单的如告诉函数退出，复杂的如列出一堆要重复执行的指令。</h4><h2 id="if-语句"><a href="#if-语句" class="headerlink" title="if 语句"></a>if 语句</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (任何表达式) statement1 </span><br><span class="line"><span class="keyword">else</span> statement2 </span><br></pre></td></tr></table></figure>

<h5 id="这里的条件（condition）可以是任何表达式，并且求值结果不一定是布尔值。"><a href="#这里的条件（condition）可以是任何表达式，并且求值结果不一定是布尔值。" class="headerlink" title="这里的条件（condition）可以是任何表达式，并且求值结果不一定是布尔值。"></a>这里的条件（condition）可以是任何表达式，并且求值结果不一定是布尔值。</h5><h5 id="ECMAScript-会自动调用-Boolean-函数将这个表达式的值转换为布尔值。如果条件求值为-true，则执行语句statement1；如果条件求值为-false，则执行语句-statement2。这里的语句可能是一行代码，也可能是一个代码块（即包含在一对花括号中的多行代码）。"><a href="#ECMAScript-会自动调用-Boolean-函数将这个表达式的值转换为布尔值。如果条件求值为-true，则执行语句statement1；如果条件求值为-false，则执行语句-statement2。这里的语句可能是一行代码，也可能是一个代码块（即包含在一对花括号中的多行代码）。" class="headerlink" title="ECMAScript 会自动调用 Boolean()函数将这个表达式的值转换为布尔值。如果条件求值为 true，则执行语句statement1；如果条件求值为 false，则执行语句 statement2。这里的语句可能是一行代码，也可能是一个代码块（即包含在一对花括号中的多行代码）。"></a>ECMAScript 会自动调用 Boolean()函数将这个表达式的值转换为布尔值。如果条件求值为 true，则执行语句statement1；如果条件求值为 false，则执行语句 statement2。这里的语句可能是一行代码，也可能是一个代码块（即包含在一对花括号中的多行代码）。</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (i &gt; <span class="number">25</span>)</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">&quot;Greater than 25.&quot;</span>); <span class="comment">// 只有一行代码的语句</span></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">&quot;Less than or equal to 25.&quot;</span>); <span class="comment">// 一个语句块</span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<h5 id="连续使用多个-if-语句"><a href="#连续使用多个-if-语句" class="headerlink" title="连续使用多个 if 语句"></a>连续使用多个 if 语句</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition1) statement1 <span class="keyword">else</span> <span class="keyword">if</span> (condition2) statement2 <span class="keyword">else</span> statement3 </span><br></pre></td></tr></table></figure>

<h2 id="do-while-语句"><a href="#do-while-语句" class="headerlink" title="do-while 语句"></a>do-while 语句</h2><h5 id="do-while-语句是一种后测试循环语句，即循环体中的代码执行后才会对退出条件进行求值。换句话说，循环体内的代码至少执行一次。"><a href="#do-while-语句是一种后测试循环语句，即循环体中的代码执行后才会对退出条件进行求值。换句话说，循环体内的代码至少执行一次。" class="headerlink" title="do-while 语句是一种后测试循环语句，即循环体中的代码执行后才会对退出条件进行求值。换句话说，循环体内的代码至少执行一次。"></a>do-while 语句是一种后测试循环语句，即循环体中的代码执行后才会对退出条件进行求值。换句话说，循环体内的代码至少执行一次。</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.do while 循环 语法结构</span></span><br><span class="line">       <span class="keyword">do</span> &#123;</span><br><span class="line">           <span class="comment">// 循环体</span></span><br><span class="line">       &#125; <span class="keyword">while</span> (条件表达式)</span><br><span class="line">       <span class="comment">// 2.  执行思路 跟while不同的地方在于 do while 先执行一次循环体 在判断条件 如果条件表达式结果为真，则继续执行循环体，否则退出循环</span></span><br><span class="line">       <span class="comment">// 3. 代码验证</span></span><br><span class="line">       <span class="keyword">var</span> i = <span class="number">1</span>;</span><br><span class="line">       <span class="keyword">do</span> &#123;</span><br><span class="line">           <span class="built_in">console</span>.log(<span class="string">&#x27;how are you?&#x27;</span>);</span><br><span class="line">           i++;</span><br><span class="line">       &#125; <span class="keyword">while</span> (i &lt;= <span class="number">100</span>)</span><br><span class="line">       <span class="comment">// 4. 我们的do while 循环体至少执行一次</span></span><br></pre></td></tr></table></figure>
<h5 id="在这个例子中，只要-i-小于-10，循环就会重复执行。i-从-0-开始，每次循环递增-2。"><a href="#在这个例子中，只要-i-小于-10，循环就会重复执行。i-从-0-开始，每次循环递增-2。" class="headerlink" title="在这个例子中，只要 i 小于 10，循环就会重复执行。i 从 0 开始，每次循环递增 2。"></a>在这个例子中，只要 i 小于 10，循环就会重复执行。i 从 0 开始，每次循环递增 2。</h5><h2 id="while-语句"><a href="#while-语句" class="headerlink" title="while 语句"></a>while 语句</h2><h2 id="while-语句是一种先测试循环语句，即先检测退出条件，再执行循环体内的代码。因此，while-循环体内的代码有可能不会执行。"><a href="#while-语句是一种先测试循环语句，即先检测退出条件，再执行循环体内的代码。因此，while-循环体内的代码有可能不会执行。" class="headerlink" title="while 语句是一种先测试循环语句，即先检测退出条件，再执行循环体内的代码。因此，while 循环体内的代码有可能不会执行。"></a>while 语句是一种先测试循环语句，即先检测退出条件，再执行循环体内的代码。因此，while 循环体内的代码有可能不会执行。</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 1. while 循环语法结构  while 当...的时候</span></span><br><span class="line"><span class="comment">// while (条件表达式) &#123;</span></span><br><span class="line"><span class="comment">//     // 循环体</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// 2. 执行思路  当条件表达式结果为true 则执行循环体 否则 退出循环</span></span><br><span class="line"><span class="comment">// 3. 代码验证</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (num &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;好啊有&#x27;</span>);</span><br><span class="line">    num++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 4. 里面应该也有计数器 初始化变量</span></span><br><span class="line"><span class="comment">// 5. 里面应该也有操作表达式  完成计数器的更新 防止死循环</span></span><br></pre></td></tr></table></figure>


<h2 id="for-语句"><a href="#for-语句" class="headerlink" title="for 语句"></a>for 语句</h2><h5 id="for-语句也是先测试语句，只不过增加了进入循环之前的初始化代码，以及循环执行后要执行的表达式"><a href="#for-语句也是先测试语句，只不过增加了进入循环之前的初始化代码，以及循环执行后要执行的表达式" class="headerlink" title="for 语句也是先测试语句，只不过增加了进入循环之前的初始化代码，以及循环执行后要执行的表达式"></a>for 语句也是先测试语句，只不过增加了进入循环之前的初始化代码，以及循环执行后要执行的表达式</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> count = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line"> <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">##  双重for循环语句</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 双重for循环 语法结构</span></span><br><span class="line">        <span class="comment">// for (外层的初始化变量; 外层的条件表达式; 外层的操作表达式) &#123;</span></span><br><span class="line">        <span class="comment">//     for (里层的初始化变量; 里层的条件表达式; 里层的操作表达式) &#123;</span></span><br><span class="line">        <span class="comment">//         // 执行语句;</span></span><br><span class="line">        <span class="comment">//     &#125;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="comment">// 2. 我们可以把里面的循环看做是外层循环的语句</span></span><br><span class="line">        <span class="comment">// 3. 外层循环循环一次， 里面的循环执行全部</span></span><br><span class="line">        <span class="comment">// 4. 代码验证</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">3</span>; i++) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;这是外层循环第&#x27;</span> + i + <span class="string">&#x27;次&#x27;</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">1</span>; j &lt;= <span class="number">3</span>; j++) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&#x27;这是里层的循环第&#x27;</span> + j + <span class="string">&#x27;次&#x27;</span>);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>


<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 九九乘法表</span></span><br><span class="line">       <span class="comment">// 一共有9行，但是每行的个数不一样，因此需要用到双重 for 循环</span></span><br><span class="line">       <span class="comment">// 外层的 for 循环控制行数 i ，循环9次 ，可以打印 9 行  </span></span><br><span class="line">       <span class="comment">// 内层的 for 循环控制每行公式  j  </span></span><br><span class="line">       <span class="comment">// 核心算法：每一行 公式的个数正好和行数一致， j &lt;= i;</span></span><br><span class="line">       <span class="comment">// 每行打印完毕，都需要重新换一行</span></span><br><span class="line">       <span class="keyword">var</span> str = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++) &#123; <span class="comment">// 外层循环控制行数  </span></span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">1</span>; j &lt;= i; j++) &#123; <span class="comment">// 里层循环控制每一行的个数  j &lt;= i</span></span><br><span class="line">               <span class="comment">// 1 × 2 = 2</span></span><br><span class="line">               <span class="comment">// str = str + &#x27;★&#x27;;</span></span><br><span class="line">               str += j + <span class="string">&#x27;×&#x27;</span> + i + <span class="string">&#x27;=&#x27;</span> + i * j + <span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           str += <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="built_in">console</span>.log(str);</span><br></pre></td></tr></table></figure>









<h2 id="for-in-语句"><a href="#for-in-语句" class="headerlink" title="for-in 语句"></a>for-in 语句</h2><h5 id="for-in-语句是一种严格的迭代语句，用于枚举对象中的非符号键属性"><a href="#for-in-语句是一种严格的迭代语句，用于枚举对象中的非符号键属性" class="headerlink" title="for-in 语句是一种严格的迭代语句，用于枚举对象中的非符号键属性"></a>for-in 语句是一种严格的迭代语句，用于枚举对象中的非符号键属性</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> obj) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(k); <span class="comment">// k 变量 输出  得到的是 属性名</span></span><br><span class="line">            <span class="built_in">console</span>.log(obj[k]); <span class="comment">// obj[k] 得到是 属性值</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 我们使用 for in 里面的变量 我们喜欢写 k  或者  key</span></span><br></pre></td></tr></table></figure>


<h5 id="ECMAScript-中对象的属性是无序的，因此-for-in-语句不能保证返回对象属性的顺序。换句话说，所有可枚举的属性都会返回一次，但返回的顺序可能会因浏览器而异。"><a href="#ECMAScript-中对象的属性是无序的，因此-for-in-语句不能保证返回对象属性的顺序。换句话说，所有可枚举的属性都会返回一次，但返回的顺序可能会因浏览器而异。" class="headerlink" title="ECMAScript 中对象的属性是无序的，因此 for-in 语句不能保证返回对象属性的顺序。换句话说，所有可枚举的属性都会返回一次，但返回的顺序可能会因浏览器而异。"></a>ECMAScript 中对象的属性是无序的，因此 for-in 语句不能保证返回对象属性的顺序。换句话说，所有可枚举的属性都会返回一次，但返回的顺序可能会因浏览器而异。</h5><h5 id="如果-for-in-循环要迭代的变量是-null-或-undefined，则不执行循环体。"><a href="#如果-for-in-循环要迭代的变量是-null-或-undefined，则不执行循环体。" class="headerlink" title="如果 for-in 循环要迭代的变量是 null 或 undefined，则不执行循环体。"></a>如果 for-in 循环要迭代的变量是 null 或 undefined，则不执行循环体。</h5><h2 id="for-of-语句"><a href="#for-of-语句" class="headerlink" title="for-of 语句"></a>for-of 语句</h2><h5 id="for-of-语句是一种严格的迭代语句，用于遍历可迭代对象的元素"><a href="#for-of-语句是一种严格的迭代语句，用于遍历可迭代对象的元素" class="headerlink" title="for-of 语句是一种严格的迭代语句，用于遍历可迭代对象的元素"></a>for-of 语句是一种严格的迭代语句，用于遍历可迭代对象的元素</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> el <span class="keyword">of</span> [<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>]) &#123;</span><br><span class="line"> <span class="built_in">document</span>.write(el);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h5 id="我们使用-for-of-语句显示了一个包含-4-个元素的数组中的所有元素。循环会一直持续到将所有元素都迭代完。与-for-循环一样，这里控制语句中的-const-也不是必需的。但为了确保这个局部变量不被修改，推荐使用-const。"><a href="#我们使用-for-of-语句显示了一个包含-4-个元素的数组中的所有元素。循环会一直持续到将所有元素都迭代完。与-for-循环一样，这里控制语句中的-const-也不是必需的。但为了确保这个局部变量不被修改，推荐使用-const。" class="headerlink" title="我们使用 for-of 语句显示了一个包含 4 个元素的数组中的所有元素。循环会一直持续到将所有元素都迭代完。与 for 循环一样，这里控制语句中的 const 也不是必需的。但为了确保这个局部变量不被修改，推荐使用 const。"></a>我们使用 for-of 语句显示了一个包含 4 个元素的数组中的所有元素。循环会一直持续到将所有元素都迭代完。与 for 循环一样，这里控制语句中的 const 也不是必需的。但为了确保这个局部变量不被修改，推荐使用 const。</h5><h5 id="for-of-循环会按照可迭代对象的-next-方法产生值的顺序迭代元素。"><a href="#for-of-循环会按照可迭代对象的-next-方法产生值的顺序迭代元素。" class="headerlink" title="for-of 循环会按照可迭代对象的 next()方法产生值的顺序迭代元素。"></a>for-of 循环会按照可迭代对象的 next()方法产生值的顺序迭代元素。</h5><h2 id="标签语句"><a href="#标签语句" class="headerlink" title="标签语句"></a>标签语句</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">start: <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line"> <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<h5 id="在这个例子中，start-是一个标签，可以在后面通过-break-或-continue-语句引用。标签语句的典型应用场景是嵌套循环。"><a href="#在这个例子中，start-是一个标签，可以在后面通过-break-或-continue-语句引用。标签语句的典型应用场景是嵌套循环。" class="headerlink" title="在这个例子中，start 是一个标签，可以在后面通过 break 或 continue 语句引用。标签语句的典型应用场景是嵌套循环。"></a>在这个例子中，start 是一个标签，可以在后面通过 break 或 continue 语句引用。标签语句的典型应用场景是嵌套循环。</h5><h2 id="break-和-continue-语句"><a href="#break-和-continue-语句" class="headerlink" title="break 和 continue 语句"></a>break 和 continue 语句</h2><h5 id="break-和-continue-语句为执行循环代码提供了更严格的控制手段。"><a href="#break-和-continue-语句为执行循环代码提供了更严格的控制手段。" class="headerlink" title="break 和 continue 语句为执行循环代码提供了更严格的控制手段。"></a>break 和 continue 语句为执行循环代码提供了更严格的控制手段。</h5><h5 id="break-语句用于立即退出循环，强制执行循环后的下一条语句。"><a href="#break-语句用于立即退出循环，强制执行循环后的下一条语句。" class="headerlink" title="break 语句用于立即退出循环，强制执行循环后的下一条语句。"></a>break 语句用于立即退出循环，强制执行循环后的下一条语句。</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// break 退出整个循环</span></span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">           <span class="keyword">if</span> (i == <span class="number">3</span>) &#123;</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="built_in">console</span>.log(<span class="string">&#x27;我正在吃第&#x27;</span> + i + <span class="string">&#x27;个包子&#x27;</span>);</span><br><span class="line">           <span class="comment">//1、2</span></span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="continue-语句也用于立即退出循环，但会再次从循环顶部开始执行。"><a href="#continue-语句也用于立即退出循环，但会再次从循环顶部开始执行。" class="headerlink" title="continue 语句也用于立即退出循环，但会再次从循环顶部开始执行。"></a>continue 语句也用于立即退出循环，但会再次从循环顶部开始执行。</h5> <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// continue 关键字   退出本次（当前次的循环）  继续执行剩余次数循环</span></span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">           <span class="keyword">if</span> (i == <span class="number">3</span>) &#123;</span><br><span class="line">               <span class="keyword">continue</span>; <span class="comment">// 只要遇见 continue就退出本次循环 直接跳到 i++</span></span><br><span class="line">           &#125;</span><br><span class="line">           <span class="built_in">console</span>.log(<span class="string">&#x27;我正在吃第&#x27;</span> + i + <span class="string">&#x27;个包子&#x27;</span>);</span><br><span class="line">            <span class="comment">//1、2、4、5</span></span><br><span class="line"></span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>


<h2 id="with-语句"><a href="#with-语句" class="headerlink" title="with 语句"></a>with 语句</h2><h5 id="with-语句的用途是将代码作用域设置为特定的对象"><a href="#with-语句的用途是将代码作用域设置为特定的对象" class="headerlink" title="with 语句的用途是将代码作用域设置为特定的对象"></a>with 语句的用途是将代码作用域设置为特定的对象</h5> <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> qs = location.search.substring(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">let</span> hostName = location.hostname;</span><br><span class="line"><span class="keyword">let</span> url = location.href;</span><br></pre></td></tr></table></figure>
<h5 id="上面代码中的每一行都用到了-location-对象。如果使用-with-语句，就可以少写一些代码："><a href="#上面代码中的每一行都用到了-location-对象。如果使用-with-语句，就可以少写一些代码：" class="headerlink" title="上面代码中的每一行都用到了 location 对象。如果使用 with 语句，就可以少写一些代码："></a>上面代码中的每一行都用到了 location 对象。如果使用 with 语句，就可以少写一些代码：</h5> <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span>(location) &#123;</span><br><span class="line"> <span class="keyword">let</span> qs = search.substring(<span class="number">1</span>);</span><br><span class="line"> <span class="keyword">let</span> hostName = hostname;</span><br><span class="line"> <span class="keyword">let</span> url = href;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h3 id="警告-由于-with-语句影响性能且难于调试其中的代码，通常不推荐在产品代码中使用-with语句"><a href="#警告-由于-with-语句影响性能且难于调试其中的代码，通常不推荐在产品代码中使用-with语句" class="headerlink" title="警告 由于 with 语句影响性能且难于调试其中的代码，通常不推荐在产品代码中使用 with语句"></a>警告 由于 with 语句影响性能且难于调试其中的代码，通常不推荐在产品代码中使用 with语句</h3><h2 id="switch-语句"><a href="#switch-语句" class="headerlink" title="switch 语句"></a>switch 语句</h2><h5 id="switch-语句是与-if-语句紧密相关的一种流控制语句，从其他语言借鉴而来。ECMAScript中-switch语句跟-C-语言中-switch-语句的语法非常相似"><a href="#switch-语句是与-if-语句紧密相关的一种流控制语句，从其他语言借鉴而来。ECMAScript中-switch语句跟-C-语言中-switch-语句的语法非常相似" class="headerlink" title="switch 语句是与 if 语句紧密相关的一种流控制语句，从其他语言借鉴而来。ECMAScript中 switch语句跟 C 语言中 switch 语句的语法非常相似"></a>switch 语句是与 if 语句紧密相关的一种流控制语句，从其他语言借鉴而来。ECMAScript中 switch语句跟 C 语言中 switch 语句的语法非常相似</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> (表达式) &#123;</span><br><span class="line">           <span class="keyword">case</span> value1:</span><br><span class="line">                执行语句<span class="number">1</span>;</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           <span class="keyword">case</span> value2:</span><br><span class="line">               执行语句<span class="number">2</span>;</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">               ...</span><br><span class="line">               <span class="keyword">default</span>:</span><br><span class="line">                   执行最后的语句;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<h3 id="注意-switch-语句在比较每个条件的值时会使用全等操作符，因此不会强制转换数据类型（比如，字符串”10”不等于数值-10）。"><a href="#注意-switch-语句在比较每个条件的值时会使用全等操作符，因此不会强制转换数据类型（比如，字符串”10”不等于数值-10）。" class="headerlink" title="注意 switch 语句在比较每个条件的值时会使用全等操作符，因此不会强制转换数据类型（比如，字符串”10”不等于数值 10）。"></a>注意 switch 语句在比较每个条件的值时会使用全等操作符，因此不会强制转换数据类型（比如，字符串”10”不等于数值 10）。</h3><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h5 id="函数对任何语言来说都是核心组件，因为它们可以封装语句，然后在任何地方、任何时间执行。ECMAScript-中的函数使用-function-关键字声明，后跟一组参数，然后是函数体。"><a href="#函数对任何语言来说都是核心组件，因为它们可以封装语句，然后在任何地方、任何时间执行。ECMAScript-中的函数使用-function-关键字声明，后跟一组参数，然后是函数体。" class="headerlink" title="函数对任何语言来说都是核心组件，因为它们可以封装语句，然后在任何地方、任何时间执行。ECMAScript 中的函数使用 function 关键字声明，后跟一组参数，然后是函数体。"></a>函数对任何语言来说都是核心组件，因为它们可以封装语句，然后在任何地方、任何时间执行。ECMAScript 中的函数使用 function 关键字声明，后跟一组参数，然后是函数体。</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//声明一个函数</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">myfun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">             alert(<span class="string">&quot;我是一个函数&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">         <span class="comment">//函数的调用</span></span><br><span class="line">         myfun();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 声明一个带有参数的函数</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> sum = (num1 + num2);</span><br><span class="line">            <span class="keyword">return</span> sum;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(add(<span class="number">3</span>, <span class="number">5</span>));</span><br><span class="line">        <span class="built_in">console</span>.log(add(<span class="number">99</span>, <span class="number">1</span>));</span><br><span class="line">        <span class="built_in">console</span>.log(add(<span class="number">-15</span>, <span class="number">6</span>));</span><br></pre></td></tr></table></figure>
<h3 id="注意-最佳实践是函数要么返回值，要么不返回值。只在某个条件下返回值的函数会带来麻烦，尤其是调试时。"><a href="#注意-最佳实践是函数要么返回值，要么不返回值。只在某个条件下返回值的函数会带来麻烦，尤其是调试时。" class="headerlink" title="注意 最佳实践是函数要么返回值，要么不返回值。只在某个条件下返回值的函数会带来麻烦，尤其是调试时。"></a>注意 最佳实践是函数要么返回值，要么不返回值。只在某个条件下返回值的函数会带来麻烦，尤其是调试时。</h3><h4 id="利用函数冒泡排序"><a href="#利用函数冒泡排序" class="headerlink" title="利用函数冒泡排序"></a>利用函数冒泡排序</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">zeroone</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">               <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; arr.length - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">                   <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                       <span class="keyword">var</span> temp = arr[j];</span><br><span class="line">                       arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                       arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> arr;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="keyword">var</span> arr1 = zeroone([<span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">9</span>]);</span><br><span class="line">       <span class="built_in">console</span>.log(arr1);</span><br><span class="line">       <span class="keyword">var</span> arr2 = zeroone([<span class="number">11</span>, <span class="number">7</span>, <span class="number">22</span>, <span class="number">999</span>]);</span><br><span class="line">       <span class="built_in">console</span>.log(arr2);</span><br></pre></td></tr></table></figure>















]]></content>
      <categories>
        <category>JavaScript红宝书</category>
      </categories>
      <tags>
        <tag>语句</tag>
      </tags>
  </entry>
  <entry>
    <title>JS红宝书之变量、作用域</title>
    <url>/2020/10/22/%E7%BA%A2%E5%AE%9D%E4%B9%A66/</url>
    <content><![CDATA[<h1 id="变量、作用域"><a href="#变量、作用域" class="headerlink" title="变量、作用域"></a>变量、作用域</h1><h5 id="相比于其他语言，JavaScript-中的变量可谓独树一帜。正如-ECMA-262-所规定的，JavaScript-变量是松散类型的，而且变量不过就是特定时间点一个特定值的名称而已。由于没有规则定义变量必须包含什么数据类型，变量的值和数据类型在脚本生命期内可以改变。这样的变量很有意思，很强大，当然也有不少问题。"><a href="#相比于其他语言，JavaScript-中的变量可谓独树一帜。正如-ECMA-262-所规定的，JavaScript-变量是松散类型的，而且变量不过就是特定时间点一个特定值的名称而已。由于没有规则定义变量必须包含什么数据类型，变量的值和数据类型在脚本生命期内可以改变。这样的变量很有意思，很强大，当然也有不少问题。" class="headerlink" title="相比于其他语言，JavaScript 中的变量可谓独树一帜。正如 ECMA-262 所规定的，JavaScript 变量是松散类型的，而且变量不过就是特定时间点一个特定值的名称而已。由于没有规则定义变量必须包含什么数据类型，变量的值和数据类型在脚本生命期内可以改变。这样的变量很有意思，很强大，当然也有不少问题。"></a>相比于其他语言，JavaScript 中的变量可谓独树一帜。正如 ECMA-262 所规定的，JavaScript 变量是松散类型的，而且变量不过就是特定时间点一个特定值的名称而已。由于没有规则定义变量必须包含什么数据类型，变量的值和数据类型在脚本生命期内可以改变。这样的变量很有意思，很强大，当然也有不少问题。</h5><h2 id="原始值与引用值"><a href="#原始值与引用值" class="headerlink" title="原始值与引用值"></a>原始值与引用值</h2><h4 id="ECMAScript-变量可以包含两种不同类型的数据："><a href="#ECMAScript-变量可以包含两种不同类型的数据：" class="headerlink" title="ECMAScript 变量可以包含两种不同类型的数据："></a>ECMAScript 变量可以包含两种不同类型的数据：</h4><h5 id="原始值（primitive-value）就是最简单的数据"><a href="#原始值（primitive-value）就是最简单的数据" class="headerlink" title="原始值（primitive value）就是最简单的数据"></a>原始值（primitive value）就是最简单的数据</h5><h5 id="引用值（reference-value）则是由多个值构成的对象"><a href="#引用值（reference-value）则是由多个值构成的对象" class="headerlink" title="引用值（reference value）则是由多个值构成的对象"></a>引用值（reference value）则是由多个值构成的对象</h5><h3 id="动态属性"><a href="#动态属性" class="headerlink" title="动态属性"></a>动态属性</h3><h5 id="原始值和引用值的定义方式很类似，都是创建一个变量，然后给它赋一个值。对于引用值而言，可以随时添加、修改和删除其属性和方法。"><a href="#原始值和引用值的定义方式很类似，都是创建一个变量，然后给它赋一个值。对于引用值而言，可以随时添加、修改和删除其属性和方法。" class="headerlink" title="原始值和引用值的定义方式很类似，都是创建一个变量，然后给它赋一个值。对于引用值而言，可以随时添加、修改和删除其属性和方法。"></a>原始值和引用值的定义方式很类似，都是创建一个变量，然后给它赋一个值。对于引用值而言，可以随时添加、修改和删除其属性和方法。</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">person.name = <span class="string">&quot;Nicholas&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person.name); <span class="comment">// &quot;Nicholas&quot; </span></span><br></pre></td></tr></table></figure>

<h3 id="复制值"><a href="#复制值" class="headerlink" title="复制值"></a>复制值</h3><h4 id="除了存储方式不同，原始值和引用值在通过变量复制时也有所不同。在通过变量把一个原始值赋值到另一个变量时，原始值会被复制到新变量的位置。"><a href="#除了存储方式不同，原始值和引用值在通过变量复制时也有所不同。在通过变量把一个原始值赋值到另一个变量时，原始值会被复制到新变量的位置。" class="headerlink" title="除了存储方式不同，原始值和引用值在通过变量复制时也有所不同。在通过变量把一个原始值赋值到另一个变量时，原始值会被复制到新变量的位置。"></a>除了存储方式不同，原始值和引用值在通过变量复制时也有所不同。在通过变量把一个原始值赋值到另一个变量时，原始值会被复制到新变量的位置。</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> num1 = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">let</span> num2 = num1; </span><br></pre></td></tr></table></figure>

<h4 id="这里，num1-包含数值-5。当把-num2-初始化为-num1-时，num2-也会得到数值-5。这个值跟存储在num1-中的-5-是完全独立的，因为它是那个值的副本。"><a href="#这里，num1-包含数值-5。当把-num2-初始化为-num1-时，num2-也会得到数值-5。这个值跟存储在num1-中的-5-是完全独立的，因为它是那个值的副本。" class="headerlink" title="这里，num1 包含数值 5。当把 num2 初始化为 num1 时，num2 也会得到数值 5。这个值跟存储在num1 中的 5 是完全独立的，因为它是那个值的副本。"></a>这里，num1 包含数值 5。当把 num2 初始化为 num1 时，num2 也会得到数值 5。这个值跟存储在num1 中的 5 是完全独立的，因为它是那个值的副本。</h4><h3 id="传递参数"><a href="#传递参数" class="headerlink" title="传递参数"></a>传递参数</h3><h4 id="ECMAScript-中所有函数的参数都是按值传递的。这意味着函数外的值会被复制到函数内部的参数中，就像从一个变量复制到另一个变量一样。如果是原始值，那么就跟原始值变量的复制一样，如果是引用值，那么就跟引用值变量的复制一样。对很多开发者来说，这一块可能会不好理解，毕竟变量有按值和按引用访问，而传参则只有按值传递。"><a href="#ECMAScript-中所有函数的参数都是按值传递的。这意味着函数外的值会被复制到函数内部的参数中，就像从一个变量复制到另一个变量一样。如果是原始值，那么就跟原始值变量的复制一样，如果是引用值，那么就跟引用值变量的复制一样。对很多开发者来说，这一块可能会不好理解，毕竟变量有按值和按引用访问，而传参则只有按值传递。" class="headerlink" title="ECMAScript 中所有函数的参数都是按值传递的。这意味着函数外的值会被复制到函数内部的参数中，就像从一个变量复制到另一个变量一样。如果是原始值，那么就跟原始值变量的复制一样，如果是引用值，那么就跟引用值变量的复制一样。对很多开发者来说，这一块可能会不好理解，毕竟变量有按值和按引用访问，而传参则只有按值传递。"></a>ECMAScript 中所有函数的参数都是按值传递的。这意味着函数外的值会被复制到函数内部的参数中，就像从一个变量复制到另一个变量一样。如果是原始值，那么就跟原始值变量的复制一样，如果是引用值，那么就跟引用值变量的复制一样。对很多开发者来说，这一块可能会不好理解，毕竟变量有按值和按引用访问，而传参则只有按值传递。</h4><h3 id="确定类型"><a href="#确定类型" class="headerlink" title="确定类型"></a>确定类型</h3><h4 id="前一章提到的-typeof-操作符最适合用来判断一个变量是否为原始类型。更确切地说，它是判断一个变量是否为字符串、数值、布尔值或-undefined-的最好方式。"><a href="#前一章提到的-typeof-操作符最适合用来判断一个变量是否为原始类型。更确切地说，它是判断一个变量是否为字符串、数值、布尔值或-undefined-的最好方式。" class="headerlink" title="前一章提到的 typeof 操作符最适合用来判断一个变量是否为原始类型。更确切地说，它是判断一个变量是否为字符串、数值、布尔值或 undefined 的最好方式。"></a>前一章提到的 typeof 操作符最适合用来判断一个变量是否为原始类型。更确切地说，它是判断一个变量是否为字符串、数值、布尔值或 undefined 的最好方式。</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> s = <span class="string">&quot;Nicholas&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">let</span> i = <span class="number">22</span>;</span><br><span class="line"><span class="keyword">let</span> u;</span><br><span class="line"><span class="keyword">let</span> n = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">let</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> s); <span class="comment">// string</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> i); <span class="comment">// number</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> b); <span class="comment">// boolean</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> u); <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> n); <span class="comment">// object</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> o); <span class="comment">// object</span></span><br></pre></td></tr></table></figure>

<h3 id="执行上下文与作用域"><a href="#执行上下文与作用域" class="headerlink" title="执行上下文与作用域"></a>执行上下文与作用域</h3><h4 id="变量或函数的上下文决定了它们可以访问哪些数据，以及它们的行为。每个上下文都有一个关联的变量对象（variable-object），而这个上下文中定义的所有变量和函数都存在于这个对象上。虽然无法通过代码访问变量对象，但后台处理数据会用到它。"><a href="#变量或函数的上下文决定了它们可以访问哪些数据，以及它们的行为。每个上下文都有一个关联的变量对象（variable-object），而这个上下文中定义的所有变量和函数都存在于这个对象上。虽然无法通过代码访问变量对象，但后台处理数据会用到它。" class="headerlink" title="变量或函数的上下文决定了它们可以访问哪些数据，以及它们的行为。每个上下文都有一个关联的变量对象（variable object），而这个上下文中定义的所有变量和函数都存在于这个对象上。虽然无法通过代码访问变量对象，但后台处理数据会用到它。"></a>变量或函数的上下文决定了它们可以访问哪些数据，以及它们的行为。每个上下文都有一个关联的变量对象（variable object），而这个上下文中定义的所有变量和函数都存在于这个对象上。虽然无法通过代码访问变量对象，但后台处理数据会用到它。</h4><h3 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h3><h4 id="1-使用-var-的函数作用域声明"><a href="#1-使用-var-的函数作用域声明" class="headerlink" title="1. 使用 var 的函数作用域声明"></a>1. 使用 var 的函数作用域声明</h4><h5 id="在使用-var-声明变量时，变量会被自动添加到最接近的上下文。在函数中，最接近的上下文就是函数的局部上下文。在-with-语句中，最接近的上下文也是函数上下文。如果变量未经声明就被初始化了那么它就会自动被添加到全局上下文"><a href="#在使用-var-声明变量时，变量会被自动添加到最接近的上下文。在函数中，最接近的上下文就是函数的局部上下文。在-with-语句中，最接近的上下文也是函数上下文。如果变量未经声明就被初始化了那么它就会自动被添加到全局上下文" class="headerlink" title="在使用 var 声明变量时，变量会被自动添加到最接近的上下文。在函数中，最接近的上下文就是函数的局部上下文。在 with 语句中，最接近的上下文也是函数上下文。如果变量未经声明就被初始化了那么它就会自动被添加到全局上下文"></a>在使用 var 声明变量时，变量会被自动添加到最接近的上下文。在函数中，最接近的上下文就是函数的局部上下文。在 with 语句中，最接近的上下文也是函数上下文。如果变量未经声明就被初始化了那么它就会自动被添加到全局上下文</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> sum = num1 + num2;</span><br><span class="line"> <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> result = add(<span class="number">10</span>, <span class="number">20</span>); <span class="comment">// 30</span></span><br><span class="line"><span class="built_in">console</span>.log(sum); <span class="comment">// 报错：sum 在这里不是有效变量</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="函数-add-定义了一个局部变量-sum，保存加法操作的结果。这个值作为函数的值被返回，但变量-sum-在函数外部是访问不到的。如果省略上面例子中的关键字-var，那么-sum-在-add-被调用之后就变成可以访问的了，"><a href="#函数-add-定义了一个局部变量-sum，保存加法操作的结果。这个值作为函数的值被返回，但变量-sum-在函数外部是访问不到的。如果省略上面例子中的关键字-var，那么-sum-在-add-被调用之后就变成可以访问的了，" class="headerlink" title="函数 add()定义了一个局部变量 sum，保存加法操作的结果。这个值作为函数的值被返回，但变量 sum 在函数外部是访问不到的。如果省略上面例子中的关键字 var，那么 sum 在 add()被调用之后就变成可以访问的了，"></a>函数 add()定义了一个局部变量 sum，保存加法操作的结果。这个值作为函数的值被返回，但变量 sum 在函数外部是访问不到的。如果省略上面例子中的关键字 var，那么 sum 在 add()被调用之后就变成可以访问的了，</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line"> sum = num1 + num2;</span><br><span class="line"> <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> result = add(<span class="number">10</span>, <span class="number">20</span>); <span class="comment">// 30</span></span><br><span class="line"><span class="built_in">console</span>.log(sum); <span class="comment">// 30 </span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="这一次，变量-sum-被用加法操作的结果初始化时并没有使用-var-声明。在调用-add-之后，sum被添加到了全局上下文，在函数退出之后依然存在，从而在后面可以访问到。"><a href="#这一次，变量-sum-被用加法操作的结果初始化时并没有使用-var-声明。在调用-add-之后，sum被添加到了全局上下文，在函数退出之后依然存在，从而在后面可以访问到。" class="headerlink" title="这一次，变量 sum 被用加法操作的结果初始化时并没有使用 var 声明。在调用 add()之后，sum被添加到了全局上下文，在函数退出之后依然存在，从而在后面可以访问到。"></a>这一次，变量 sum 被用加法操作的结果初始化时并没有使用 var 声明。在调用 add()之后，sum被添加到了全局上下文，在函数退出之后依然存在，从而在后面可以访问到。</h5><h4 id="2-使用-let-的块级作用域声明"><a href="#2-使用-let-的块级作用域声明" class="headerlink" title="2. 使用 let 的块级作用域声明"></a>2. 使用 let 的块级作用域声明</h4><h5 id="ES6-新增的-let-关键字跟-var-很相似，但它的作用域是块级的，这也是-JavaScript-中的新概念。块级作用域由最近的一对包含花括号-界定。换句话说，if-块、while-块、function-块，甚至连单独的块也是-let-声明变量的作用域。"><a href="#ES6-新增的-let-关键字跟-var-很相似，但它的作用域是块级的，这也是-JavaScript-中的新概念。块级作用域由最近的一对包含花括号-界定。换句话说，if-块、while-块、function-块，甚至连单独的块也是-let-声明变量的作用域。" class="headerlink" title="ES6 新增的 let 关键字跟 var 很相似，但它的作用域是块级的，这也是 JavaScript 中的新概念。块级作用域由最近的一对包含花括号{}界定。换句话说，if 块、while 块、function 块，甚至连单独的块也是 let 声明变量的作用域。"></a>ES6 新增的 let 关键字跟 var 很相似，但它的作用域是块级的，这也是 JavaScript 中的新概念。块级作用域由最近的一对包含花括号{}界定。换句话说，if 块、while 块、function 块，甚至连单独的块也是 let 声明变量的作用域。</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"> <span class="keyword">let</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// ReferenceError: a 没有定义</span></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"> <span class="keyword">let</span> b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// ReferenceError: b 没有定义</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">let</span> c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(c); <span class="comment">// ReferenceError: c 没有定义</span></span><br><span class="line"> <span class="comment">// 这没什么可奇怪的</span></span><br><span class="line"> <span class="comment">// var 声明也会导致报错</span></span><br><span class="line"><span class="comment">// 这不是对象字面量，而是一个独立的块</span></span><br><span class="line"><span class="comment">// JavaScript 解释器会根据其中内容识别出它来</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="keyword">let</span> d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(d); <span class="comment">// ReferenceError: d 没有定义</span></span><br></pre></td></tr></table></figure>


<h5 id="let-与-var-的另一个不同之处是在同一作用域内不能声明两次。重复的-var-声明会被忽略，而重复的-let-声明会抛出-SyntaxError。"><a href="#let-与-var-的另一个不同之处是在同一作用域内不能声明两次。重复的-var-声明会被忽略，而重复的-let-声明会抛出-SyntaxError。" class="headerlink" title="let 与 var 的另一个不同之处是在同一作用域内不能声明两次。重复的 var 声明会被忽略，而重复的 let 声明会抛出 SyntaxError。"></a>let 与 var 的另一个不同之处是在同一作用域内不能声明两次。重复的 var 声明会被忽略，而重复的 let 声明会抛出 SyntaxError。</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="comment">// 不会报错</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="keyword">let</span> b;</span><br><span class="line"> <span class="keyword">let</span> b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// SyntaxError: 标识符 b 已经声明过了</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="let-的行为非常适合在循环中声明迭代变量。使用-var-声明的迭代变量会泄漏到循环外部，这种情况应该避免。"><a href="#let-的行为非常适合在循环中声明迭代变量。使用-var-声明的迭代变量会泄漏到循环外部，这种情况应该避免。" class="headerlink" title="let 的行为非常适合在循环中声明迭代变量。使用 var 声明的迭代变量会泄漏到循环外部，这种情况应该避免。"></a>let 的行为非常适合在循环中声明迭代变量。使用 var 声明的迭代变量会泄漏到循环外部，这种情况应该避免。</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;&#125;</span><br><span class="line"><span class="built_in">console</span>.log(i); <span class="comment">// 10</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; ++j) &#123;&#125;</span><br><span class="line"><span class="built_in">console</span>.log(j); <span class="comment">// ReferenceError: j 没有定义</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="3-使用-const-的常量声明"><a href="#3-使用-const-的常量声明" class="headerlink" title="3. 使用 const 的常量声明"></a>3. 使用 const 的常量声明</h4><h5 id="除了-let，ES6-同时还增加了-const-关键字。使用-const-声明的变量必须同时初始化为某个值。一经声明，在其生命周期的任何时候都不能再重新赋予新值。"><a href="#除了-let，ES6-同时还增加了-const-关键字。使用-const-声明的变量必须同时初始化为某个值。一经声明，在其生命周期的任何时候都不能再重新赋予新值。" class="headerlink" title="除了 let，ES6 同时还增加了 const 关键字。使用 const 声明的变量必须同时初始化为某个值。一经声明，在其生命周期的任何时候都不能再重新赋予新值。"></a>除了 let，ES6 同时还增加了 const 关键字。使用 const 声明的变量必须同时初始化为某个值。一经声明，在其生命周期的任何时候都不能再重新赋予新值。</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a; <span class="comment">// SyntaxError: 常量声明时没有初始化</span></span><br><span class="line"><span class="keyword">const</span> b = <span class="number">3</span>;</span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 3</span></span><br><span class="line">b = <span class="number">4</span>; <span class="comment">// TypeError: 给常量赋值</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="const-除了要遵循以上规则，其他方面与-let-声明是一样的"><a href="#const-除了要遵循以上规则，其他方面与-let-声明是一样的" class="headerlink" title="const 除了要遵循以上规则，其他方面与 let 声明是一样的"></a>const 除了要遵循以上规则，其他方面与 let 声明是一样的</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"> <span class="keyword">const</span> a = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// ReferenceError: a 没有定义</span></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"> <span class="keyword">const</span> b = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// ReferenceError: b 没有定义</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">const</span> c = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(c); <span class="comment">// ReferenceError: c 没有定义</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="keyword">const</span> d = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(d); <span class="comment">// ReferenceError: d 没有定义</span></span><br></pre></td></tr></table></figure>



<h5 id="const-声明只应用到顶级原语或者对象。换句话说，赋值为对象的-const-变量不能再被重新赋值为其他引用值，但对象的键则不受限制。"><a href="#const-声明只应用到顶级原语或者对象。换句话说，赋值为对象的-const-变量不能再被重新赋值为其他引用值，但对象的键则不受限制。" class="headerlink" title="const 声明只应用到顶级原语或者对象。换句话说，赋值为对象的 const 变量不能再被重新赋值为其他引用值，但对象的键则不受限制。"></a>const 声明只应用到顶级原语或者对象。换句话说，赋值为对象的 const 变量不能再被重新赋值为其他引用值，但对象的键则不受限制。</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> o1 = &#123;&#125;;</span><br><span class="line">o1 = &#123;&#125;; <span class="comment">// TypeError: 给常量赋值</span></span><br><span class="line"><span class="keyword">const</span> o2 = &#123;&#125;;</span><br><span class="line">o2.name = <span class="string">&#x27;Jake&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(o2.name); <span class="comment">// &#x27;Jake&#x27; </span></span><br></pre></td></tr></table></figure>

<h5 id="如果想让整个对象都不能修改，可以使用-Object-freeze-，这样再给属性赋值时虽然不会报错，但会静默失败"><a href="#如果想让整个对象都不能修改，可以使用-Object-freeze-，这样再给属性赋值时虽然不会报错，但会静默失败" class="headerlink" title="如果想让整个对象都不能修改，可以使用 Object.freeze()，这样再给属性赋值时虽然不会报错，但会静默失败"></a>如果想让整个对象都不能修改，可以使用 Object.freeze()，这样再给属性赋值时虽然不会报错，但会静默失败</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> o3 = <span class="built_in">Object</span>.freeze(&#123;&#125;);</span><br><span class="line">o3.name = <span class="string">&#x27;Jake&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(o3.name); <span class="comment">// undefined </span></span><br></pre></td></tr></table></figure>
<h5 id="由于-const-声明暗示变量的值是单一类型且不可修改，JavaScript-运行时编译器可以将其所有实例都替换成实际的值，而不会通过查询表进行变量查找。谷歌的-V8-引擎就执行这种优化。"><a href="#由于-const-声明暗示变量的值是单一类型且不可修改，JavaScript-运行时编译器可以将其所有实例都替换成实际的值，而不会通过查询表进行变量查找。谷歌的-V8-引擎就执行这种优化。" class="headerlink" title="由于 const 声明暗示变量的值是单一类型且不可修改，JavaScript 运行时编译器可以将其所有实例都替换成实际的值，而不会通过查询表进行变量查找。谷歌的 V8 引擎就执行这种优化。"></a>由于 const 声明暗示变量的值是单一类型且不可修改，JavaScript 运行时编译器可以将其所有实例都替换成实际的值，而不会通过查询表进行变量查找。谷歌的 V8 引擎就执行这种优化。</h5><h3 id="注意-开发实践表明，如果开发流程并不会因此而受很大影响，就应该尽可能地多使用const-声明，除非确实需要一个将来会重新赋值的变量。这样可以从根本上保证提前发现重新赋值导致的-bug。"><a href="#注意-开发实践表明，如果开发流程并不会因此而受很大影响，就应该尽可能地多使用const-声明，除非确实需要一个将来会重新赋值的变量。这样可以从根本上保证提前发现重新赋值导致的-bug。" class="headerlink" title="注意 开发实践表明，如果开发流程并不会因此而受很大影响，就应该尽可能地多使用const 声明，除非确实需要一个将来会重新赋值的变量。这样可以从根本上保证提前发现重新赋值导致的 bug。"></a>注意 开发实践表明，如果开发流程并不会因此而受很大影响，就应该尽可能地多使用const 声明，除非确实需要一个将来会重新赋值的变量。这样可以从根本上保证提前发现重新赋值导致的 bug。</h3><h3 id="4-标识符查找"><a href="#4-标识符查找" class="headerlink" title="4. 标识符查找"></a>4. 标识符查找</h3><h5 id="当在特定上下文中为读取或写入而引用一个标识符时，必须通过搜索确定这个标识符表示什么。搜索开始于作用域链前端，以给定的名称搜索对应的标识符。如果在局部上下文中找到该标识符，则搜索停止，变量确定；如果没有找到变量名，则继续沿作用域链搜索。（注意，作用域链中的对象也有一个原型链，因此搜索可能涉及每个对象的原型链。）这个过程一直持续到搜索至全局上下文的变量对象。如果仍然没有找到标识符，则说明其未声明。"><a href="#当在特定上下文中为读取或写入而引用一个标识符时，必须通过搜索确定这个标识符表示什么。搜索开始于作用域链前端，以给定的名称搜索对应的标识符。如果在局部上下文中找到该标识符，则搜索停止，变量确定；如果没有找到变量名，则继续沿作用域链搜索。（注意，作用域链中的对象也有一个原型链，因此搜索可能涉及每个对象的原型链。）这个过程一直持续到搜索至全局上下文的变量对象。如果仍然没有找到标识符，则说明其未声明。" class="headerlink" title="当在特定上下文中为读取或写入而引用一个标识符时，必须通过搜索确定这个标识符表示什么。搜索开始于作用域链前端，以给定的名称搜索对应的标识符。如果在局部上下文中找到该标识符，则搜索停止，变量确定；如果没有找到变量名，则继续沿作用域链搜索。（注意，作用域链中的对象也有一个原型链，因此搜索可能涉及每个对象的原型链。）这个过程一直持续到搜索至全局上下文的变量对象。如果仍然没有找到标识符，则说明其未声明。"></a>当在特定上下文中为读取或写入而引用一个标识符时，必须通过搜索确定这个标识符表示什么。搜索开始于作用域链前端，以给定的名称搜索对应的标识符。如果在局部上下文中找到该标识符，则搜索停止，变量确定；如果没有找到变量名，则继续沿作用域链搜索。（注意，作用域链中的对象也有一个原型链，因此搜索可能涉及每个对象的原型链。）这个过程一直持续到搜索至全局上下文的变量对象。如果仍然没有找到标识符，则说明其未声明。</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> color = <span class="string">&#x27;blue&#x27;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getColor</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> color;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(getColor()); <span class="comment">// &#x27;blue&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="在这个例子中，调用函数-getColor-时会引用变量-color。为确定-color-的值会进行两步搜索。第一步，搜索-getColor-的变量对象，查找名为-color-的标识符。结果没找到，于是继续搜索下一个变量对象（来自全局上下文），然后就找到了名为-color-的标识符。因为全局变量对象上有-color的定义，所以搜索结束。对这个搜索过程而言，引用局部变量会让搜索自动停止，而不继续搜索下一级变量对象。也就是说，如果局部上下文中有一个同名的标识符，那就不能在该上下文中引用父上下文中的同名标识符，"><a href="#在这个例子中，调用函数-getColor-时会引用变量-color。为确定-color-的值会进行两步搜索。第一步，搜索-getColor-的变量对象，查找名为-color-的标识符。结果没找到，于是继续搜索下一个变量对象（来自全局上下文），然后就找到了名为-color-的标识符。因为全局变量对象上有-color的定义，所以搜索结束。对这个搜索过程而言，引用局部变量会让搜索自动停止，而不继续搜索下一级变量对象。也就是说，如果局部上下文中有一个同名的标识符，那就不能在该上下文中引用父上下文中的同名标识符，" class="headerlink" title="在这个例子中，调用函数 getColor()时会引用变量 color。为确定 color 的值会进行两步搜索。第一步，搜索 getColor()的变量对象，查找名为 color 的标识符。结果没找到，于是继续搜索下一个变量对象（来自全局上下文），然后就找到了名为 color 的标识符。因为全局变量对象上有 color的定义，所以搜索结束。对这个搜索过程而言，引用局部变量会让搜索自动停止，而不继续搜索下一级变量对象。也就是说，如果局部上下文中有一个同名的标识符，那就不能在该上下文中引用父上下文中的同名标识符，"></a>在这个例子中，调用函数 getColor()时会引用变量 color。为确定 color 的值会进行两步搜索。第一步，搜索 getColor()的变量对象，查找名为 color 的标识符。结果没找到，于是继续搜索下一个变量对象（来自全局上下文），然后就找到了名为 color 的标识符。因为全局变量对象上有 color的定义，所以搜索结束。对这个搜索过程而言，引用局部变量会让搜索自动停止，而不继续搜索下一级变量对象。也就是说，如果局部上下文中有一个同名的标识符，那就不能在该上下文中引用父上下文中的同名标识符，</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> color = <span class="string">&#x27;blue&#x27;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getColor</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">let</span> color = <span class="string">&#x27;red&#x27;</span>;</span><br><span class="line"> <span class="keyword">return</span> color;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(getColor()); <span class="comment">// &#x27;red&#x27; </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="使用块级作用域声明并不会改变搜索流程，但可以给词法层级添加额外的层次"><a href="#使用块级作用域声明并不会改变搜索流程，但可以给词法层级添加额外的层次" class="headerlink" title="使用块级作用域声明并不会改变搜索流程，但可以给词法层级添加额外的层次"></a>使用块级作用域声明并不会改变搜索流程，但可以给词法层级添加额外的层次</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> color = <span class="string">&#x27;blue&#x27;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getColor</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">let</span> color = <span class="string">&#x27;red&#x27;</span>;</span><br><span class="line"> &#123;</span><br><span class="line"> <span class="keyword">let</span> color = <span class="string">&#x27;green&#x27;</span>;</span><br><span class="line"> <span class="keyword">return</span> color;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(getColor()); <span class="comment">// &#x27;green&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h5 id="在这个修改后的例子中，getColor-内部声明了一个名为-color-的局部变量。在调用这个函数时，变量会被声明。在执行到函数返回语句时，代码引用了变量-color。于是开始在局部上下文中搜索这个标识符，结果找到了值为’green’的变量-color。因为变量已找到，搜索随即停止，所以就使用这个局部变量。这意味着函数会返回’green’。在局部变量-color-声明之后的任何代码都无法访问全局变量color，除非使用完全限定的写法-window-color"><a href="#在这个修改后的例子中，getColor-内部声明了一个名为-color-的局部变量。在调用这个函数时，变量会被声明。在执行到函数返回语句时，代码引用了变量-color。于是开始在局部上下文中搜索这个标识符，结果找到了值为’green’的变量-color。因为变量已找到，搜索随即停止，所以就使用这个局部变量。这意味着函数会返回’green’。在局部变量-color-声明之后的任何代码都无法访问全局变量color，除非使用完全限定的写法-window-color" class="headerlink" title="在这个修改后的例子中，getColor()内部声明了一个名为 color 的局部变量。在调用这个函数时，变量会被声明。在执行到函数返回语句时，代码引用了变量 color。于是开始在局部上下文中搜索这个标识符，结果找到了值为’green’的变量 color。因为变量已找到，搜索随即停止，所以就使用这个局部变量。这意味着函数会返回’green’。在局部变量 color 声明之后的任何代码都无法访问全局变量color，除非使用完全限定的写法 window.color"></a>在这个修改后的例子中，getColor()内部声明了一个名为 color 的局部变量。在调用这个函数时，变量会被声明。在执行到函数返回语句时，代码引用了变量 color。于是开始在局部上下文中搜索这个标识符，结果找到了值为’green’的变量 color。因为变量已找到，搜索随即停止，所以就使用这个局部变量。这意味着函数会返回’green’。在局部变量 color 声明之后的任何代码都无法访问全局变量color，除非使用完全限定的写法 window.color</h5><h3 id="注意-标识符查找并非没有代价。访问局部变量比访问全局变量要快，因为不用切换作用域。不过，JavaScript-引擎在优化标识符查找上做了很多工作，将来这个差异可能就微不足道了。"><a href="#注意-标识符查找并非没有代价。访问局部变量比访问全局变量要快，因为不用切换作用域。不过，JavaScript-引擎在优化标识符查找上做了很多工作，将来这个差异可能就微不足道了。" class="headerlink" title="注意 标识符查找并非没有代价。访问局部变量比访问全局变量要快，因为不用切换作用域。不过，JavaScript 引擎在优化标识符查找上做了很多工作，将来这个差异可能就微不足道了。"></a>注意 标识符查找并非没有代价。访问局部变量比访问全局变量要快，因为不用切换作用域。不过，JavaScript 引擎在优化标识符查找上做了很多工作，将来这个差异可能就微不足道了。</h3>]]></content>
      <categories>
        <category>JavaScript红宝书</category>
      </categories>
      <tags>
        <tag>作用域</tag>
      </tags>
  </entry>
  <entry>
    <title>JS红宝书之垃圾回收</title>
    <url>/2020/10/23/%E7%BA%A2%E5%AE%9D%E4%B9%A67/</url>
    <content><![CDATA[<h1 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h1><h4 id="JavaScript-是使用垃圾回收的语言，也就是说执行环境负责在代码执行时管理内存。"><a href="#JavaScript-是使用垃圾回收的语言，也就是说执行环境负责在代码执行时管理内存。" class="headerlink" title="JavaScript 是使用垃圾回收的语言，也就是说执行环境负责在代码执行时管理内存。"></a>JavaScript 是使用垃圾回收的语言，也就是说执行环境负责在代码执行时管理内存。</h4><h4 id="基本思路很简单：确定哪个变量不会再使用，然后释放它占用的内存。这个过程是周期性的，即垃圾回收程序每隔一定时间（或者说在代码执行过程中某个预定的收集时间）就会自动运行。"><a href="#基本思路很简单：确定哪个变量不会再使用，然后释放它占用的内存。这个过程是周期性的，即垃圾回收程序每隔一定时间（或者说在代码执行过程中某个预定的收集时间）就会自动运行。" class="headerlink" title="基本思路很简单：确定哪个变量不会再使用，然后释放它占用的内存。这个过程是周期性的，即垃圾回收程序每隔一定时间（或者说在代码执行过程中某个预定的收集时间）就会自动运行。"></a>基本思路很简单：确定哪个变量不会再使用，然后释放它占用的内存。这个过程是周期性的，即垃圾回收程序每隔一定时间（或者说在代码执行过程中某个预定的收集时间）就会自动运行。</h4><h4 id="垃圾回收过程是一个近似且不完美的方案，因为某块内存是否还有用，属于“不可判定的”问题，意味着靠算法是解决不了的。"><a href="#垃圾回收过程是一个近似且不完美的方案，因为某块内存是否还有用，属于“不可判定的”问题，意味着靠算法是解决不了的。" class="headerlink" title="垃圾回收过程是一个近似且不完美的方案，因为某块内存是否还有用，属于“不可判定的”问题，意味着靠算法是解决不了的。"></a>垃圾回收过程是一个近似且不完美的方案，因为某块内存是否还有用，属于“不可判定的”问题，意味着靠算法是解决不了的。</h4><h2 id="标记清理"><a href="#标记清理" class="headerlink" title="标记清理"></a>标记清理</h2><h4 id="JavaScript-最常用的垃圾回收策略是标记清理（mark-and-sweep）。当变量进入上下文，比如在函数内部声明一个变量时，这个变量会被加上存在于上下文中的标记。而在上下文中的变量，逻辑上讲，永远不应该释放它们的内存，因为只要上下文中的代码在运行，就有可能用到它们。当变量离开上下文时，也会被加上离开上下文的标记。"><a href="#JavaScript-最常用的垃圾回收策略是标记清理（mark-and-sweep）。当变量进入上下文，比如在函数内部声明一个变量时，这个变量会被加上存在于上下文中的标记。而在上下文中的变量，逻辑上讲，永远不应该释放它们的内存，因为只要上下文中的代码在运行，就有可能用到它们。当变量离开上下文时，也会被加上离开上下文的标记。" class="headerlink" title="JavaScript 最常用的垃圾回收策略是标记清理（mark-and-sweep）。当变量进入上下文，比如在函数内部声明一个变量时，这个变量会被加上存在于上下文中的标记。而在上下文中的变量，逻辑上讲，永远不应该释放它们的内存，因为只要上下文中的代码在运行，就有可能用到它们。当变量离开上下文时，也会被加上离开上下文的标记。"></a>JavaScript 最常用的垃圾回收策略是标记清理（mark-and-sweep）。当变量进入上下文，比如在函数内部声明一个变量时，这个变量会被加上存在于上下文中的标记。而在上下文中的变量，逻辑上讲，永远不应该释放它们的内存，因为只要上下文中的代码在运行，就有可能用到它们。当变量离开上下文时，也会被加上离开上下文的标记。</h4><h4 id="垃圾回收程序运行的时候，会标记内存中存储的所有变量（记住，标记方法有很多种）。然后，它会将所有在上下文中的变量，以及被在上下文中的变量引用的变量的标记去掉。在此之后再被加上标记的变量就是待删除的了，原因是任何在上下文中的变量都访问不到它们了。随后垃圾回收程序做一次内存清理，销毁带标记的所有值并收回它们的内存。"><a href="#垃圾回收程序运行的时候，会标记内存中存储的所有变量（记住，标记方法有很多种）。然后，它会将所有在上下文中的变量，以及被在上下文中的变量引用的变量的标记去掉。在此之后再被加上标记的变量就是待删除的了，原因是任何在上下文中的变量都访问不到它们了。随后垃圾回收程序做一次内存清理，销毁带标记的所有值并收回它们的内存。" class="headerlink" title="垃圾回收程序运行的时候，会标记内存中存储的所有变量（记住，标记方法有很多种）。然后，它会将所有在上下文中的变量，以及被在上下文中的变量引用的变量的标记去掉。在此之后再被加上标记的变量就是待删除的了，原因是任何在上下文中的变量都访问不到它们了。随后垃圾回收程序做一次内存清理，销毁带标记的所有值并收回它们的内存。"></a>垃圾回收程序运行的时候，会标记内存中存储的所有变量（记住，标记方法有很多种）。然后，它会将所有在上下文中的变量，以及被在上下文中的变量引用的变量的标记去掉。在此之后再被加上标记的变量就是待删除的了，原因是任何在上下文中的变量都访问不到它们了。随后垃圾回收程序做一次内存清理，销毁带标记的所有值并收回它们的内存。</h4><h2 id="引用计数"><a href="#引用计数" class="headerlink" title="引用计数"></a>引用计数</h2><h4 id="没那么常用的垃圾回收策略是引用计数（reference-counting）。"><a href="#没那么常用的垃圾回收策略是引用计数（reference-counting）。" class="headerlink" title="没那么常用的垃圾回收策略是引用计数（reference counting）。"></a>没那么常用的垃圾回收策略是引用计数（reference counting）。</h4><h4 id="其思路是对每个值都记录它被引用的次数。声明变量并给它赋一个引用值时，这个值的引用数为-1。如果同一个值又被赋给另一个变量，那么引用数加-1。类似地，如果保存对该值引用的变量被其他值给覆盖了，那么引用数减-1。当一个值的引用数为-0-时，就说明没办法再访问到这个值了，因此可以安全地收回其内存了。垃圾回收程序下次运行的时候就会释放引用数为-0-的值的内存。"><a href="#其思路是对每个值都记录它被引用的次数。声明变量并给它赋一个引用值时，这个值的引用数为-1。如果同一个值又被赋给另一个变量，那么引用数加-1。类似地，如果保存对该值引用的变量被其他值给覆盖了，那么引用数减-1。当一个值的引用数为-0-时，就说明没办法再访问到这个值了，因此可以安全地收回其内存了。垃圾回收程序下次运行的时候就会释放引用数为-0-的值的内存。" class="headerlink" title="其思路是对每个值都记录它被引用的次数。声明变量并给它赋一个引用值时，这个值的引用数为 1。如果同一个值又被赋给另一个变量，那么引用数加 1。类似地，如果保存对该值引用的变量被其他值给覆盖了，那么引用数减 1。当一个值的引用数为 0 时，就说明没办法再访问到这个值了，因此可以安全地收回其内存了。垃圾回收程序下次运行的时候就会释放引用数为 0 的值的内存。"></a>其思路是对每个值都记录它被引用的次数。声明变量并给它赋一个引用值时，这个值的引用数为 1。如果同一个值又被赋给另一个变量，那么引用数加 1。类似地，如果保存对该值引用的变量被其他值给覆盖了，那么引用数减 1。当一个值的引用数为 0 时，就说明没办法再访问到这个值了，因此可以安全地收回其内存了。垃圾回收程序下次运行的时候就会释放引用数为 0 的值的内存。</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">problem</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">let</span> objectA = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"> <span class="keyword">let</span> objectB = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"> objectA.someOtherObject = objectB;</span><br><span class="line"> objectB.anotherObject = objectA;</span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="objectA-和-objectB-通过各自的属性相互引用，意味着它们的引用数都是-2。在标记清理策略下，这不是问题，因为在函数结束后，这两个对象都不在作用域中。而在引用计数策略下，objectA-和-objectB-在函数结束后还会存在，因为它们的引用数永远不会变成-0。如果函数被多次调用，则会导致大量内存永远不会被释放。为此，Netscape-在-4-0-版放弃了引用计数，转而采用标记清理。事实上，引用计数策略的问题还不止于此。"><a href="#objectA-和-objectB-通过各自的属性相互引用，意味着它们的引用数都是-2。在标记清理策略下，这不是问题，因为在函数结束后，这两个对象都不在作用域中。而在引用计数策略下，objectA-和-objectB-在函数结束后还会存在，因为它们的引用数永远不会变成-0。如果函数被多次调用，则会导致大量内存永远不会被释放。为此，Netscape-在-4-0-版放弃了引用计数，转而采用标记清理。事实上，引用计数策略的问题还不止于此。" class="headerlink" title="objectA 和 objectB 通过各自的属性相互引用，意味着它们的引用数都是 2。在标记清理策略下，这不是问题，因为在函数结束后，这两个对象都不在作用域中。而在引用计数策略下，objectA 和 objectB 在函数结束后还会存在，因为它们的引用数永远不会变成 0。如果函数被多次调用，则会导致大量内存永远不会被释放。为此，Netscape 在 4.0 版放弃了引用计数，转而采用标记清理。事实上，引用计数策略的问题还不止于此。"></a>objectA 和 objectB 通过各自的属性相互引用，意味着它们的引用数都是 2。在标记清理策略下，这不是问题，因为在函数结束后，这两个对象都不在作用域中。而在引用计数策略下，objectA 和 objectB 在函数结束后还会存在，因为它们的引用数永远不会变成 0。如果函数被多次调用，则会导致大量内存永远不会被释放。为此，Netscape 在 4.0 版放弃了引用计数，转而采用标记清理。事实上，引用计数策略的问题还不止于此。</h4><h2 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h2><h4 id="JavaScript-引擎的垃圾回收程序被调优为动态改变分配变量、字面量或数组槽位等会触发垃圾回收的阈值。IE7-的起始阈值都与-IE6-的相同。如果垃圾回收程序回收的内存不到已分配的-15-，这些变量、字面量或数组槽位的阈值就会翻倍。如果有一次回收的内存达到已分配的-85-，则阈值重置为默认值。这么一个简单的修改，极大地提升了重度依赖-JavaScript-的网页在浏览器中的性能。"><a href="#JavaScript-引擎的垃圾回收程序被调优为动态改变分配变量、字面量或数组槽位等会触发垃圾回收的阈值。IE7-的起始阈值都与-IE6-的相同。如果垃圾回收程序回收的内存不到已分配的-15-，这些变量、字面量或数组槽位的阈值就会翻倍。如果有一次回收的内存达到已分配的-85-，则阈值重置为默认值。这么一个简单的修改，极大地提升了重度依赖-JavaScript-的网页在浏览器中的性能。" class="headerlink" title="JavaScript 引擎的垃圾回收程序被调优为动态改变分配变量、字面量或数组槽位等会触发垃圾回收的阈值。IE7 的起始阈值都与 IE6 的相同。如果垃圾回收程序回收的内存不到已分配的 15%，这些变量、字面量或数组槽位的阈值就会翻倍。如果有一次回收的内存达到已分配的 85%，则阈值重置为默认值。这么一个简单的修改，极大地提升了重度依赖 JavaScript 的网页在浏览器中的性能。"></a>JavaScript 引擎的垃圾回收程序被调优为动态改变分配变量、字面量或数组槽位等会触发垃圾回收的阈值。IE7 的起始阈值都与 IE6 的相同。如果垃圾回收程序回收的内存不到已分配的 15%，这些变量、字面量或数组槽位的阈值就会翻倍。如果有一次回收的内存达到已分配的 85%，则阈值重置为默认值。这么一个简单的修改，极大地提升了重度依赖 JavaScript 的网页在浏览器中的性能。</h4><h3 id="警告-在某些浏览器中是有可能（但不推荐）主动触发垃圾回收的。在-IE-中，window-CollectGarbage-方法会立即触发垃圾回收。在-Opera-7-及更高版本中，调用-window-opera-collect-也会启动垃圾回收程序。"><a href="#警告-在某些浏览器中是有可能（但不推荐）主动触发垃圾回收的。在-IE-中，window-CollectGarbage-方法会立即触发垃圾回收。在-Opera-7-及更高版本中，调用-window-opera-collect-也会启动垃圾回收程序。" class="headerlink" title="警告 在某些浏览器中是有可能（但不推荐）主动触发垃圾回收的。在 IE 中，window.CollectGarbage()方法会立即触发垃圾回收。在 Opera 7 及更高版本中，调用 window.opera.collect()也会启动垃圾回收程序。"></a>警告 在某些浏览器中是有可能（但不推荐）主动触发垃圾回收的。在 IE 中，window.CollectGarbage()方法会立即触发垃圾回收。在 Opera 7 及更高版本中，调用 window.opera.collect()也会启动垃圾回收程序。</h3><h2 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h2><h4 id="在使用垃圾回收的编程环境中，开发者通常无须关心内存管理。不过，JavaScript-运行在一个内存管理与垃圾回收都很特殊的环境。分配给浏览器的内存通常比分配给桌面软件的要少很多，分配给移动浏览器的就更少了。这更多出于安全考虑而不是别的，就是为了避免运行大量-JavaScript-的网页耗尽系统内存而导致操作系统崩溃。这个内存限制不仅影响变量分配，也影响调用栈以及能够同时在一个线程中执行的语句数量。"><a href="#在使用垃圾回收的编程环境中，开发者通常无须关心内存管理。不过，JavaScript-运行在一个内存管理与垃圾回收都很特殊的环境。分配给浏览器的内存通常比分配给桌面软件的要少很多，分配给移动浏览器的就更少了。这更多出于安全考虑而不是别的，就是为了避免运行大量-JavaScript-的网页耗尽系统内存而导致操作系统崩溃。这个内存限制不仅影响变量分配，也影响调用栈以及能够同时在一个线程中执行的语句数量。" class="headerlink" title="在使用垃圾回收的编程环境中，开发者通常无须关心内存管理。不过，JavaScript 运行在一个内存管理与垃圾回收都很特殊的环境。分配给浏览器的内存通常比分配给桌面软件的要少很多，分配给移动浏览器的就更少了。这更多出于安全考虑而不是别的，就是为了避免运行大量 JavaScript 的网页耗尽系统内存而导致操作系统崩溃。这个内存限制不仅影响变量分配，也影响调用栈以及能够同时在一个线程中执行的语句数量。"></a>在使用垃圾回收的编程环境中，开发者通常无须关心内存管理。不过，JavaScript 运行在一个内存管理与垃圾回收都很特殊的环境。分配给浏览器的内存通常比分配给桌面软件的要少很多，分配给移动浏览器的就更少了。这更多出于安全考虑而不是别的，就是为了避免运行大量 JavaScript 的网页耗尽系统内存而导致操作系统崩溃。这个内存限制不仅影响变量分配，也影响调用栈以及能够同时在一个线程中执行的语句数量。</h4><h3 id="1-通过-const-和-let-声明提升性能"><a href="#1-通过-const-和-let-声明提升性能" class="headerlink" title="1.通过 const 和 let 声明提升性能"></a>1.通过 const 和 let 声明提升性能</h3><h4 id="ES6-增加这两个关键字不仅有助于改善代码风格，而且同样有助于改进垃圾回收的过程。因为-const和-let-都以块（而非函数）为作用域，所以相比于使用-var，使用这两个新关键字可能会更早地让垃圾回收程序介入，尽早回收应该回收的内存。在块作用域比函数作用域更早终止的情况下，这就有可能发生。"><a href="#ES6-增加这两个关键字不仅有助于改善代码风格，而且同样有助于改进垃圾回收的过程。因为-const和-let-都以块（而非函数）为作用域，所以相比于使用-var，使用这两个新关键字可能会更早地让垃圾回收程序介入，尽早回收应该回收的内存。在块作用域比函数作用域更早终止的情况下，这就有可能发生。" class="headerlink" title="ES6 增加这两个关键字不仅有助于改善代码风格，而且同样有助于改进垃圾回收的过程。因为 const和 let 都以块（而非函数）为作用域，所以相比于使用 var，使用这两个新关键字可能会更早地让垃圾回收程序介入，尽早回收应该回收的内存。在块作用域比函数作用域更早终止的情况下，这就有可能发生。"></a>ES6 增加这两个关键字不仅有助于改善代码风格，而且同样有助于改进垃圾回收的过程。因为 const和 let 都以块（而非函数）为作用域，所以相比于使用 var，使用这两个新关键字可能会更早地让垃圾回收程序介入，尽早回收应该回收的内存。在块作用域比函数作用域更早终止的情况下，这就有可能发生。</h4><h3 id="2-隐藏类和删除操作"><a href="#2-隐藏类和删除操作" class="headerlink" title="2.隐藏类和删除操作"></a>2.隐藏类和删除操作</h3><h4 id="根据-JavaScript-所在的运行环境，有时候需要根据浏览器使用的-JavaScript-引擎来采取不同的性能优化策略。截至-2017-年，Chrome-是最流行的浏览器，使用-V8-JavaScript-引擎。V8-在将解释后的-JavaScript代码编译为实际的机器码时会利用“隐藏类”。如果你的代码非常注重性能，那么这一点可能对你很重要。"><a href="#根据-JavaScript-所在的运行环境，有时候需要根据浏览器使用的-JavaScript-引擎来采取不同的性能优化策略。截至-2017-年，Chrome-是最流行的浏览器，使用-V8-JavaScript-引擎。V8-在将解释后的-JavaScript代码编译为实际的机器码时会利用“隐藏类”。如果你的代码非常注重性能，那么这一点可能对你很重要。" class="headerlink" title="根据 JavaScript 所在的运行环境，有时候需要根据浏览器使用的 JavaScript 引擎来采取不同的性能优化策略。截至 2017 年，Chrome 是最流行的浏览器，使用 V8 JavaScript 引擎。V8 在将解释后的 JavaScript代码编译为实际的机器码时会利用“隐藏类”。如果你的代码非常注重性能，那么这一点可能对你很重要。"></a>根据 JavaScript 所在的运行环境，有时候需要根据浏览器使用的 JavaScript 引擎来采取不同的性能优化策略。截至 2017 年，Chrome 是最流行的浏览器，使用 V8 JavaScript 引擎。V8 在将解释后的 JavaScript代码编译为实际的机器码时会利用“隐藏类”。如果你的代码非常注重性能，那么这一点可能对你很重要。</h4><h3 id="3-内存泄漏"><a href="#3-内存泄漏" class="headerlink" title="3.内存泄漏"></a>3.内存泄漏</h3><h4 id="写得不好的-JavaScript-可能出现难以察觉且有害的内存泄漏问题。在内存有限的设备上，或者在函数会被调用很多次的情况下，内存泄漏可能是个大问题。JavaScript-中的内存泄漏大部分是由不合理的引用导致的。"><a href="#写得不好的-JavaScript-可能出现难以察觉且有害的内存泄漏问题。在内存有限的设备上，或者在函数会被调用很多次的情况下，内存泄漏可能是个大问题。JavaScript-中的内存泄漏大部分是由不合理的引用导致的。" class="headerlink" title="写得不好的 JavaScript 可能出现难以察觉且有害的内存泄漏问题。在内存有限的设备上，或者在函数会被调用很多次的情况下，内存泄漏可能是个大问题。JavaScript 中的内存泄漏大部分是由不合理的引用导致的。"></a>写得不好的 JavaScript 可能出现难以察觉且有害的内存泄漏问题。在内存有限的设备上，或者在函数会被调用很多次的情况下，内存泄漏可能是个大问题。JavaScript 中的内存泄漏大部分是由不合理的引用导致的。</h4><h3 id="4-静态分配与对象池"><a href="#4-静态分配与对象池" class="headerlink" title="4. 静态分配与对象池"></a>4. 静态分配与对象池</h3><h4 id="为了提升-JavaScript-性能，最后要考虑的一点往往就是压榨浏览器了。此时，一个关键问题就是如何减少浏览器执行垃圾回收的次数。开发者无法直接控制什么时候开始收集垃圾，但可以间接控制触发垃圾回收的条件。理论上，如果能够合理使用分配的内存，同时避免多余的垃圾回收，那就可以保住因释放内存而损失的性能。"><a href="#为了提升-JavaScript-性能，最后要考虑的一点往往就是压榨浏览器了。此时，一个关键问题就是如何减少浏览器执行垃圾回收的次数。开发者无法直接控制什么时候开始收集垃圾，但可以间接控制触发垃圾回收的条件。理论上，如果能够合理使用分配的内存，同时避免多余的垃圾回收，那就可以保住因释放内存而损失的性能。" class="headerlink" title="为了提升 JavaScript 性能，最后要考虑的一点往往就是压榨浏览器了。此时，一个关键问题就是如何减少浏览器执行垃圾回收的次数。开发者无法直接控制什么时候开始收集垃圾，但可以间接控制触发垃圾回收的条件。理论上，如果能够合理使用分配的内存，同时避免多余的垃圾回收，那就可以保住因释放内存而损失的性能。"></a>为了提升 JavaScript 性能，最后要考虑的一点往往就是压榨浏览器了。此时，一个关键问题就是如何减少浏览器执行垃圾回收的次数。开发者无法直接控制什么时候开始收集垃圾，但可以间接控制触发垃圾回收的条件。理论上，如果能够合理使用分配的内存，同时避免多余的垃圾回收，那就可以保住因释放内存而损失的性能。</h4><h2 id="注意-静态分配是优化的一种极端形式。如果你的应用程序被垃圾回收严重地拖了后腿，可以利用它提升性能。但这种情况并不多见。大多数情况下，这都属于过早优化，因此不用考虑。"><a href="#注意-静态分配是优化的一种极端形式。如果你的应用程序被垃圾回收严重地拖了后腿，可以利用它提升性能。但这种情况并不多见。大多数情况下，这都属于过早优化，因此不用考虑。" class="headerlink" title="注意 静态分配是优化的一种极端形式。如果你的应用程序被垃圾回收严重地拖了后腿，可以利用它提升性能。但这种情况并不多见。大多数情况下，这都属于过早优化，因此不用考虑。"></a>注意 静态分配是优化的一种极端形式。如果你的应用程序被垃圾回收严重地拖了后腿，可以利用它提升性能。但这种情况并不多见。大多数情况下，这都属于过早优化，因此不用考虑。</h2>]]></content>
      <categories>
        <category>JavaScript红宝书</category>
      </categories>
      <tags>
        <tag>垃圾回收</tag>
      </tags>
  </entry>
  <entry>
    <title>JS红宝书之基本引用类型</title>
    <url>/2020/10/24/%E7%BA%A2%E5%AE%9D%E4%B9%A68/</url>
    <content><![CDATA[<h1 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h1><h4 id="Date-类型将日期保存为自协调世界时（UTC，Universal-Time-Coordinated）时间-1970-年-1-月-1-日午夜（零时）至今所经过的毫秒数。使用这种存储格式，Date-类型可以精确表示-1970-年-1-月-1-日之前及之后-285-616-年的日期。"><a href="#Date-类型将日期保存为自协调世界时（UTC，Universal-Time-Coordinated）时间-1970-年-1-月-1-日午夜（零时）至今所经过的毫秒数。使用这种存储格式，Date-类型可以精确表示-1970-年-1-月-1-日之前及之后-285-616-年的日期。" class="headerlink" title="Date 类型将日期保存为自协调世界时（UTC，Universal Time Coordinated）时间 1970 年 1 月 1 日午夜（零时）至今所经过的毫秒数。使用这种存储格式，Date 类型可以精确表示 1970 年 1 月 1 日之前及之后 285 616 年的日期。"></a>Date 类型将日期保存为自协调世界时（UTC，Universal Time Coordinated）时间 1970 年 1 月 1 日午夜（零时）至今所经过的毫秒数。使用这种存储格式，Date 类型可以精确表示 1970 年 1 月 1 日之前及之后 285 616 年的日期。</h4><h4 id="要创建日期对象，就使用-new-操作符来调用-Date-构造函数："><a href="#要创建日期对象，就使用-new-操作符来调用-Date-构造函数：" class="headerlink" title="要创建日期对象，就使用 new 操作符来调用 Date 构造函数："></a>要创建日期对象，就使用 new 操作符来调用 Date 构造函数：</h4><h4 id="创建时间对象，在不传参数的情况下，返回当前日期时间对象。"><a href="#创建时间对象，在不传参数的情况下，返回当前日期时间对象。" class="headerlink" title="创建时间对象，在不传参数的情况下，返回当前日期时间对象。"></a>创建时间对象，在不传参数的情况下，返回当前日期时间对象。</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>(); </span><br></pre></td></tr></table></figure>


<h4 id="获取时间的方法"><a href="#获取时间的方法" class="headerlink" title="获取时间的方法"></a>获取时间的方法</h4><table>
<thead>
<tr>
<th align="center">代码</th>
<th align="center">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">getFullYear()</td>
<td align="center">返回4位数的年份</td>
</tr>
<tr>
<td align="center">getMonth()</td>
<td align="center">返回日期中的月份，返回值0-11</td>
</tr>
<tr>
<td align="center">getDate()</td>
<td align="center">返回月份中的天数</td>
</tr>
<tr>
<td align="center">getDay()</td>
<td align="center">返回星期，返回值为0-6</td>
</tr>
<tr>
<td align="center">getHours()</td>
<td align="center">返回小时</td>
</tr>
<tr>
<td align="center">getMinutes()</td>
<td align="center">返回分钟</td>
</tr>
<tr>
<td align="center">getMinutes()</td>
<td align="center">返回分钟</td>
</tr>
<tr>
<td align="center">getSeconds()</td>
<td align="center">返回秒</td>
</tr>
<tr>
<td align="center">getTime()</td>
<td align="center">返回日期的毫秒数</td>
</tr>
</tbody></table>
<hr>
<h4 id="设置时间的方法"><a href="#设置时间的方法" class="headerlink" title="设置时间的方法"></a>设置时间的方法</h4><table>
<thead>
<tr>
<th align="center">代码</th>
<th align="center">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">setFullYear(year)</td>
<td align="center">设置4位数的年份</td>
</tr>
<tr>
<td align="center">setMonth(mon)</td>
<td align="center">设置日期中的月份，返回值0-11</td>
</tr>
<tr>
<td align="center">setDate()</td>
<td align="center">设置月份中的天数</td>
</tr>
<tr>
<td align="center">setDay()</td>
<td align="center">设置星期，返回值为0-6</td>
</tr>
<tr>
<td align="center">setHours()</td>
<td align="center">设置小时</td>
</tr>
<tr>
<td align="center">setMinutes()</td>
<td align="center">设置分钟</td>
</tr>
<tr>
<td align="center">setMinutes()</td>
<td align="center">设置分钟</td>
</tr>
<tr>
<td align="center">setSeconds()</td>
<td align="center">设置秒</td>
</tr>
<tr>
<td align="center">setTime()</td>
<td align="center">设置日期的毫秒数</td>
</tr>
</tbody></table>
<h4 id="获取一个日期时间对象"><a href="#获取一个日期时间对象" class="headerlink" title="获取一个日期时间对象"></a>获取一个日期时间对象</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">   </span><br><span class="line"><span class="keyword">var</span> weeks=[<span class="string">&quot;日&quot;</span>,<span class="string">&quot;一&quot;</span>,<span class="string">&quot;二&quot;</span>,<span class="string">&quot;三&quot;</span>,<span class="string">&quot;四&quot;</span>,<span class="string">&quot;五&quot;</span>,<span class="string">&quot;六&quot;</span>],</span><br><span class="line">    today=<span class="keyword">new</span> <span class="built_in">Date</span>(),</span><br><span class="line">    year=today.getFullYear(),</span><br><span class="line">    month=today.getMonth()+<span class="number">1</span>,</span><br><span class="line">    date=today.getDate(),</span><br><span class="line">    week=today.getDay(),</span><br><span class="line">    hours=today.getHours(),</span><br><span class="line">    minutes=today.getMinutes(),</span><br><span class="line">    seconds=today.getSeconds(),</span><br><span class="line">    times=today.getTime(),</span><br><span class="line">    time=year+<span class="string">&#x27;年&#x27;</span>+month+<span class="string">&#x27;月&#x27;</span>+date+<span class="string">&#x27;日&#x27;</span>+hours+<span class="string">&#x27;时&#x27;</span>+minutes+<span class="string">&#x27;分&#x27;</span>+seconds+<span class="string">&#x27;秒 星期&#x27;</span>+weeks[week];</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;现在是：&quot;</span>+time);</span><br><span class="line"><span class="built_in">console</span>.log(times);</span><br><span class="line">  </span><br></pre></td></tr></table></figure>
<h4 id="设置一个日期时间对象"><a href="#设置一个日期时间对象" class="headerlink" title="设置一个日期时间对象"></a>设置一个日期时间对象</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> today=<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">      <span class="comment">//today.setFullYear(2017);</span></span><br><span class="line">      <span class="comment">//today.setMonth(15);</span></span><br><span class="line">      <span class="comment">//console.log(today.getFullYear());</span></span><br><span class="line">      <span class="comment">//  50天之后是星期</span></span><br><span class="line">      <span class="comment">// 第一种做法</span></span><br><span class="line">      <span class="comment">//today.setDate(today.getDate()+50);</span></span><br><span class="line">      <span class="comment">//console.log(today.getDay());</span></span><br><span class="line">      <span class="comment">// 第二种做法</span></span><br><span class="line">      <span class="keyword">var</span> weeks=[<span class="string">&quot;日&quot;</span>,<span class="string">&quot;一&quot;</span>,<span class="string">&quot;二&quot;</span>,<span class="string">&quot;三&quot;</span>,<span class="string">&quot;四&quot;</span>,<span class="string">&quot;五&quot;</span>,<span class="string">&quot;六&quot;</span>];</span><br><span class="line">      <span class="keyword">var</span> year=today.getFullYear();</span><br><span class="line">      <span class="keyword">var</span> month=today.getMonth();</span><br><span class="line">      <span class="keyword">var</span> day=today.getDate();</span><br><span class="line">      <span class="comment">// 创建了一个目标日期对象,年,月,日,时,分,秒</span></span><br><span class="line">      <span class="keyword">var</span> temp=<span class="keyword">new</span> <span class="built_in">Date</span>(year+<span class="number">1</span>,month,day);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;50天后的今天是：&quot;</span>+temp.getFullYear()+<span class="string">&#x27;-&#x27;</span>+(temp.getMonth()+<span class="number">1</span>)+<span class="string">&#x27;-&#x27;</span>+temp.getDate()+<span class="string">&#x27;-&#x27;</span>+<span class="string">&#x27;星期&#x27;</span>+weeks[temp.getDay()]);</span><br></pre></td></tr></table></figure>



<h1 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h1><h4 id="ECMAScript-提供了-Math-对象作为保存数学公式、信息和计算的地方。Math-对象提供了一些辅助计算的属性和方法。"><a href="#ECMAScript-提供了-Math-对象作为保存数学公式、信息和计算的地方。Math-对象提供了一些辅助计算的属性和方法。" class="headerlink" title="ECMAScript 提供了 Math 对象作为保存数学公式、信息和计算的地方。Math 对象提供了一些辅助计算的属性和方法。"></a>ECMAScript 提供了 Math 对象作为保存数学公式、信息和计算的地方。Math 对象提供了一些辅助计算的属性和方法。</h4><h4 id="注意-Math-对象上提供的计算要比直接在-JavaScript-实现的快得多，因为-Math-对象上的计算使用了-JavaScript-引擎中更高效的实现和处理器指令。但使用-Math-计算的问题是精度会因浏览器、操作系统、指令集和硬件而异。"><a href="#注意-Math-对象上提供的计算要比直接在-JavaScript-实现的快得多，因为-Math-对象上的计算使用了-JavaScript-引擎中更高效的实现和处理器指令。但使用-Math-计算的问题是精度会因浏览器、操作系统、指令集和硬件而异。" class="headerlink" title="注意 Math 对象上提供的计算要比直接在 JavaScript 实现的快得多，因为 Math 对象上的计算使用了 JavaScript 引擎中更高效的实现和处理器指令。但使用 Math 计算的问题是精度会因浏览器、操作系统、指令集和硬件而异。"></a>注意 Math 对象上提供的计算要比直接在 JavaScript 实现的快得多，因为 Math 对象上的计算使用了 JavaScript 引擎中更高效的实现和处理器指令。但使用 Math 计算的问题是精度会因浏览器、操作系统、指令集和硬件而异。</h4><h3 id="1-Math-对象属性"><a href="#1-Math-对象属性" class="headerlink" title="1. Math 对象属性"></a>1. Math 对象属性</h3><table>
<thead>
<tr>
<th align="center">属 性</th>
<th align="center">说 明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Math.E</td>
<td align="center">自然对数的基数 e 的值</td>
</tr>
<tr>
<td align="center">Math.LN10</td>
<td align="center">10 为底的自然对数</td>
</tr>
<tr>
<td align="center">Math.LN2</td>
<td align="center">2 为底的自然对数</td>
</tr>
<tr>
<td align="center">Math.LOG2E</td>
<td align="center">以 2 为底 e 的对数</td>
</tr>
<tr>
<td align="center">Math.LOG10E</td>
<td align="center">以 10 为底 e 的对数</td>
</tr>
<tr>
<td align="center">Math.PI</td>
<td align="center">π 的值</td>
</tr>
<tr>
<td align="center">Math.SQRT1_2</td>
<td align="center">1/2 的平方根</td>
</tr>
<tr>
<td align="center">Math.SQRT2</td>
<td align="center">2 的平方根</td>
</tr>
</tbody></table>
<h3 id="2-min-和-max-方法"><a href="#2-min-和-max-方法" class="headerlink" title="2. min()和 max()方法"></a>2. min()和 max()方法</h3><h5 id="Math-对象也提供了很多辅助执行简单或复杂数学计算的方法。"><a href="#Math-对象也提供了很多辅助执行简单或复杂数学计算的方法。" class="headerlink" title="Math 对象也提供了很多辅助执行简单或复杂数学计算的方法。"></a>Math 对象也提供了很多辅助执行简单或复杂数学计算的方法。</h5><h5 id="min-和-max-方法用于确定一组数值中的最小值和最大值。这两个方法都接收任意多个参数"><a href="#min-和-max-方法用于确定一组数值中的最小值和最大值。这两个方法都接收任意多个参数" class="headerlink" title="min()和 max()方法用于确定一组数值中的最小值和最大值。这两个方法都接收任意多个参数"></a>min()和 max()方法用于确定一组数值中的最小值和最大值。这两个方法都接收任意多个参数</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> max = <span class="built_in">Math</span>.max(<span class="number">3</span>, <span class="number">54</span>, <span class="number">32</span>, <span class="number">16</span>);</span><br><span class="line"><span class="built_in">console</span>.log(max); <span class="comment">// 54</span></span><br><span class="line"><span class="keyword">let</span> min = <span class="built_in">Math</span>.min(<span class="number">3</span>, <span class="number">54</span>, <span class="number">32</span>, <span class="number">16</span>);</span><br><span class="line"><span class="built_in">console</span>.log(min); <span class="comment">// 3 </span></span><br></pre></td></tr></table></figure>


<h3 id="3-舍入方法"><a href="#3-舍入方法" class="headerlink" title="3. 舍入方法"></a>3. 舍入方法</h3><ol>
<li>Math.ceil()方法始终向上舍入为最接近的整数。</li>
<li>Math.floor()方法始终向下舍入为最接近的整数。</li>
<li>Math.round()方法执行四舍五入。</li>
<li>Math.fround()方法返回数值最接近的单精度（32 位）浮点值表示。<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.ceil(<span class="number">25.9</span>)); <span class="comment">// 26</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.ceil(<span class="number">25.5</span>)); <span class="comment">// 26</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.ceil(<span class="number">25.1</span>)); <span class="comment">// 26</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.round(<span class="number">25.9</span>)); <span class="comment">// 26</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.round(<span class="number">25.5</span>)); <span class="comment">// 26</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.round(<span class="number">25.1</span>)); <span class="comment">// 25</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.fround(<span class="number">0.4</span>)); <span class="comment">// 0.4000000059604645</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.fround(<span class="number">0.5</span>)); <span class="comment">// 0.5</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.fround(<span class="number">25.9</span>)); <span class="comment">// 25.899999618530273</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.floor(<span class="number">25.9</span>)); <span class="comment">// 25</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.floor(<span class="number">25.5</span>)); <span class="comment">// 25</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.floor(<span class="number">25.1</span>)); <span class="comment">// 25 </span></span><br></pre></td></tr></table></figure>



</li>
</ol>
<h3 id="4-random-方法"><a href="#4-random-方法" class="headerlink" title="4. random()方法"></a>4. random()方法</h3><h5 id="Math-random-方法返回一个-0-1-范围内的随机数，其中包含-0-但不包含-1。对于希望显示随机名言或随机新闻的网页，这个方法是非常方便的。可以基于如下公式使用-Math-random-从一组整数中随机选择一个数"><a href="#Math-random-方法返回一个-0-1-范围内的随机数，其中包含-0-但不包含-1。对于希望显示随机名言或随机新闻的网页，这个方法是非常方便的。可以基于如下公式使用-Math-random-从一组整数中随机选择一个数" class="headerlink" title="Math.random()方法返回一个 0~1 范围内的随机数，其中包含 0 但不包含 1。对于希望显示随机名言或随机新闻的网页，这个方法是非常方便的。可以基于如下公式使用 Math.random()从一组整数中随机选择一个数"></a>Math.random()方法返回一个 0~1 范围内的随机数，其中包含 0 但不包含 1。对于希望显示随机名言或随机新闻的网页，这个方法是非常方便的。可以基于如下公式使用 Math.random()从一组整数中随机选择一个数</h5><h5 id="注意-Math-random-方法在这里出于演示目的是没有问题的。如果是为了加密而需要生成随机数（传给生成器的输入需要较高的不确定性），那么建议使用-window-crypto-getRandomValues-。"><a href="#注意-Math-random-方法在这里出于演示目的是没有问题的。如果是为了加密而需要生成随机数（传给生成器的输入需要较高的不确定性），那么建议使用-window-crypto-getRandomValues-。" class="headerlink" title="注意 Math.random()方法在这里出于演示目的是没有问题的。如果是为了加密而需要生成随机数（传给生成器的输入需要较高的不确定性），那么建议使用 window.crypto.getRandomValues()。"></a>注意 Math.random()方法在这里出于演示目的是没有问题的。如果是为了加密而需要生成随机数（传给生成器的输入需要较高的不确定性），那么建议使用 window.crypto.getRandomValues()。</h5><h3 id="5-Math-abs"><a href="#5-Math-abs" class="headerlink" title="5.Math.abs()"></a>5.Math.abs()</h3><h5 id="返回绝对值"><a href="#返回绝对值" class="headerlink" title="返回绝对值"></a>返回绝对值</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> abs = <span class="built_in">Math</span>.abs(<span class="number">-3</span>, <span class="number">-54</span>, <span class="number">-32</span>, <span class="number">-16</span>);</span><br><span class="line"><span class="built_in">console</span>.log(abs); <span class="comment">// (3, 54, 32, 16)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>




<h1 id="原始值包装类型"><a href="#原始值包装类型" class="headerlink" title="原始值包装类型"></a>原始值包装类型</h1><h5 id="为了方便操作原始值，ECMAScript-提供了-3-种特殊的引用类型：Boolean、Number-和-String。"><a href="#为了方便操作原始值，ECMAScript-提供了-3-种特殊的引用类型：Boolean、Number-和-String。" class="headerlink" title="为了方便操作原始值，ECMAScript 提供了 3 种特殊的引用类型：Boolean、Number 和 String。"></a>为了方便操作原始值，ECMAScript 提供了 3 种特殊的引用类型：Boolean、Number 和 String。</h5><h2 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean"></a>Boolean</h2><h5 id="Boolean-是对应布尔值的引用类型。要创建一个-Boolean-对象，就使用-Boolean-构造函数并传入true-或-false，如下例所示："><a href="#Boolean-是对应布尔值的引用类型。要创建一个-Boolean-对象，就使用-Boolean-构造函数并传入true-或-false，如下例所示：" class="headerlink" title="Boolean 是对应布尔值的引用类型。要创建一个 Boolean 对象，就使用 Boolean 构造函数并传入true 或 false，如下例所示："></a>Boolean 是对应布尔值的引用类型。要创建一个 Boolean 对象，就使用 Boolean 构造函数并传入true 或 false，如下例所示：</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> booleanObject = <span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="literal">true</span>); </span><br></pre></td></tr></table></figure>

<h5 id="Boolean-的实例会重写-valueOf-方法，返回一个原始值-true-或-false。toString-方法被调用时也会被覆盖，返回字符串”true”或”false”。不过，Boolean-对象在-ECMAScript-中用得很少。不仅如此，它们还容易引起误会，尤其是在布尔表达式中使用-Boolean-对象时"><a href="#Boolean-的实例会重写-valueOf-方法，返回一个原始值-true-或-false。toString-方法被调用时也会被覆盖，返回字符串”true”或”false”。不过，Boolean-对象在-ECMAScript-中用得很少。不仅如此，它们还容易引起误会，尤其是在布尔表达式中使用-Boolean-对象时" class="headerlink" title="Boolean 的实例会重写 valueOf()方法，返回一个原始值 true 或 false。toString()方法被调用时也会被覆盖，返回字符串”true”或”false”。不过，Boolean 对象在 ECMAScript 中用得很少。不仅如此，它们还容易引起误会，尤其是在布尔表达式中使用 Boolean 对象时"></a>Boolean 的实例会重写 valueOf()方法，返回一个原始值 true 或 false。toString()方法被调用时也会被覆盖，返回字符串”true”或”false”。不过，Boolean 对象在 ECMAScript 中用得很少。不仅如此，它们还容易引起误会，尤其是在布尔表达式中使用 Boolean 对象时</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> falseObject = <span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">let</span> result = falseObject &amp;&amp; <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// true</span></span><br><span class="line"><span class="keyword">let</span> falseValue = <span class="literal">false</span>;</span><br><span class="line">result = falseValue &amp;&amp; <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>


<h2 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h2><h5 id="Number-是对应数值的引用类型。要创建一个-Number-对象，就使用-Number-构造函数并传入一个数值"><a href="#Number-是对应数值的引用类型。要创建一个-Number-对象，就使用-Number-构造函数并传入一个数值" class="headerlink" title="Number 是对应数值的引用类型。要创建一个 Number 对象，就使用 Number 构造函数并传入一个数值"></a>Number 是对应数值的引用类型。要创建一个 Number 对象，就使用 Number 构造函数并传入一个数值</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num.toString()); <span class="comment">// &quot;10&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(num.toString(<span class="number">2</span>)); <span class="comment">// &quot;1010&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(num.toString(<span class="number">8</span>)); <span class="comment">// &quot;12&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(num.toString(<span class="number">10</span>)); <span class="comment">// &quot;10&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(num.toString(<span class="number">16</span>)); <span class="comment">// &quot;a&quot; </span></span><br></pre></td></tr></table></figure>


<h3 id="toFixed-方法返回包含指定小数点位数的数值字符串"><a href="#toFixed-方法返回包含指定小数点位数的数值字符串" class="headerlink" title="toFixed()方法返回包含指定小数点位数的数值字符串"></a>toFixed()方法返回包含指定小数点位数的数值字符串</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num.toFixed(<span class="number">2</span>)); <span class="comment">// &quot;10.00&quot; </span></span><br></pre></td></tr></table></figure>

<h3 id="这里的-toFixed-方法接收了参数-2，表示返回的数值字符串要包含两位小数。结果返回值为”10-00”，小数位填充了-0。如果数值本身的小数位超过了参数指定的位数，则四舍五入到最接近的小数位："><a href="#这里的-toFixed-方法接收了参数-2，表示返回的数值字符串要包含两位小数。结果返回值为”10-00”，小数位填充了-0。如果数值本身的小数位超过了参数指定的位数，则四舍五入到最接近的小数位：" class="headerlink" title="这里的 toFixed()方法接收了参数 2，表示返回的数值字符串要包含两位小数。结果返回值为”10.00”，小数位填充了 0。如果数值本身的小数位超过了参数指定的位数，则四舍五入到最接近的小数位："></a>这里的 toFixed()方法接收了参数 2，表示返回的数值字符串要包含两位小数。结果返回值为”10.00”，小数位填充了 0。如果数值本身的小数位超过了参数指定的位数，则四舍五入到最接近的小数位：</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">10.005</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num.toFixed(<span class="number">2</span>)); <span class="comment">// &quot;10.01&quot; </span></span><br></pre></td></tr></table></figure>


<h3 id="toPrecision-方法会根据情况返回最合理的输出结果，可能是固定长度，也可能是科学记数法形式。这个方法接收一个参数，表示结果中数字的总位数（不包含指数）。"><a href="#toPrecision-方法会根据情况返回最合理的输出结果，可能是固定长度，也可能是科学记数法形式。这个方法接收一个参数，表示结果中数字的总位数（不包含指数）。" class="headerlink" title="toPrecision()方法会根据情况返回最合理的输出结果，可能是固定长度，也可能是科学记数法形式。这个方法接收一个参数，表示结果中数字的总位数（不包含指数）。"></a>toPrecision()方法会根据情况返回最合理的输出结果，可能是固定长度，也可能是科学记数法形式。这个方法接收一个参数，表示结果中数字的总位数（不包含指数）。</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> num = <span class="number">99</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num.toPrecision(<span class="number">1</span>)); <span class="comment">// &quot;1e+2&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(num.toPrecision(<span class="number">2</span>)); <span class="comment">// &quot;99&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(num.toPrecision(<span class="number">3</span>)); <span class="comment">// &quot;99.0&quot; </span></span><br></pre></td></tr></table></figure>


<h3 id="isInteger-方法与安全整数"><a href="#isInteger-方法与安全整数" class="headerlink" title="isInteger()方法与安全整数"></a>isInteger()方法与安全整数</h3><h5 id="ES6-新增了-Number-isInteger-方法，用于辨别一个数值是否保存为整数。"><a href="#ES6-新增了-Number-isInteger-方法，用于辨别一个数值是否保存为整数。" class="headerlink" title="ES6 新增了 Number.isInteger()方法，用于辨别一个数值是否保存为整数。"></a>ES6 新增了 Number.isInteger()方法，用于辨别一个数值是否保存为整数。</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isInteger(<span class="number">1</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isInteger(<span class="number">1.00</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isInteger(<span class="number">1.01</span>)); <span class="comment">// false </span></span><br></pre></td></tr></table></figure>

<h1 id="String"><a href="#String" class="headerlink" title="String"></a>String</h1><h5 id="String-是对应字符串的引用类型。要创建一个-String-对象，使用-String-构造函数并传入一个数值"><a href="#String-是对应字符串的引用类型。要创建一个-String-对象，使用-String-构造函数并传入一个数值" class="headerlink" title="String 是对应字符串的引用类型。要创建一个 String 对象，使用 String 构造函数并传入一个数值"></a>String 是对应字符串的引用类型。要创建一个 String 对象，使用 String 构造函数并传入一个数值</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> stringObject = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">&quot;hello world&quot;</span>); </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="每个-String-对象都有一个-length-属性，表示字符串中字符的数量。"><a href="#每个-String-对象都有一个-length-属性，表示字符串中字符的数量。" class="headerlink" title="每个 String 对象都有一个 length 属性，表示字符串中字符的数量。"></a>每个 String 对象都有一个 length 属性，表示字符串中字符的数量。</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> stringValue = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(stringValue.length); <span class="comment">// &quot;11&quot; </span></span><br></pre></td></tr></table></figure>

<h2 id="JavaScript-字符"><a href="#JavaScript-字符" class="headerlink" title="JavaScript 字符"></a>JavaScript 字符</h2><h5 id="JavaScript-字符串由-16-位码元（code-unit）组成。对多数字符来说，每-16-位码元对应一个字符。换句话说，字符串的-length-属性表示字符串包含多少-16-位码元"><a href="#JavaScript-字符串由-16-位码元（code-unit）组成。对多数字符来说，每-16-位码元对应一个字符。换句话说，字符串的-length-属性表示字符串包含多少-16-位码元" class="headerlink" title="JavaScript 字符串由 16 位码元（code unit）组成。对多数字符来说，每 16 位码元对应一个字符。换句话说，字符串的 length 属性表示字符串包含多少 16 位码元"></a>JavaScript 字符串由 16 位码元（code unit）组成。对多数字符来说，每 16 位码元对应一个字符。换句话说，字符串的 length 属性表示字符串包含多少 16 位码元</h5><h2 id="normalize-方法某些-Unicode-字符可以有多种编码方式。有的字符既可以通过一个-BMP-字符表示，也可以通过一个代理对表示。"><a href="#normalize-方法某些-Unicode-字符可以有多种编码方式。有的字符既可以通过一个-BMP-字符表示，也可以通过一个代理对表示。" class="headerlink" title="normalize()方法某些 Unicode 字符可以有多种编码方式。有的字符既可以通过一个 BMP 字符表示，也可以通过一个代理对表示。"></a>normalize()方法某些 Unicode 字符可以有多种编码方式。有的字符既可以通过一个 BMP 字符表示，也可以通过一个代理对表示。</h2><h1 id="Global"><a href="#Global" class="headerlink" title="Global"></a>Global</h1><h5 id="Global-对象是-ECMAScript-中最特别的对象，因为代码不会显式地访问它。ECMA-262-规定-Global对象为一种兜底对象，它所针对的是不属于任何对象的属性和方法。事实上，不存在全局变量或全局函数这种东西。"><a href="#Global-对象是-ECMAScript-中最特别的对象，因为代码不会显式地访问它。ECMA-262-规定-Global对象为一种兜底对象，它所针对的是不属于任何对象的属性和方法。事实上，不存在全局变量或全局函数这种东西。" class="headerlink" title="Global 对象是 ECMAScript 中最特别的对象，因为代码不会显式地访问它。ECMA-262 规定 Global对象为一种兜底对象，它所针对的是不属于任何对象的属性和方法。事实上，不存在全局变量或全局函数这种东西。"></a>Global 对象是 ECMAScript 中最特别的对象，因为代码不会显式地访问它。ECMA-262 规定 Global对象为一种兜底对象，它所针对的是不属于任何对象的属性和方法。事实上，不存在全局变量或全局函数这种东西。</h5><h3 id="1-URL-编码方法"><a href="#1-URL-编码方法" class="headerlink" title="1.URL 编码方法"></a>1.URL 编码方法</h3><h5 id="encodeURI-和-encodeURIComponent-方法用于编码统一资源标识符（URI），以便传给浏览器。有效的-URI-不能包含某些字符，比如空格。使用-URI-编码方法来编码-URI-可以让浏览器能够理解它们，同时又以特殊的-UTF-8-编码替换掉所有无效字符。"><a href="#encodeURI-和-encodeURIComponent-方法用于编码统一资源标识符（URI），以便传给浏览器。有效的-URI-不能包含某些字符，比如空格。使用-URI-编码方法来编码-URI-可以让浏览器能够理解它们，同时又以特殊的-UTF-8-编码替换掉所有无效字符。" class="headerlink" title="encodeURI()和 encodeURIComponent()方法用于编码统一资源标识符（URI），以便传给浏览器。有效的 URI 不能包含某些字符，比如空格。使用 URI 编码方法来编码 URI 可以让浏览器能够理解它们，同时又以特殊的 UTF-8 编码替换掉所有无效字符。"></a>encodeURI()和 encodeURIComponent()方法用于编码统一资源标识符（URI），以便传给浏览器。有效的 URI 不能包含某些字符，比如空格。使用 URI 编码方法来编码 URI 可以让浏览器能够理解它们，同时又以特殊的 UTF-8 编码替换掉所有无效字符。</h5><h3 id="2-eval-方法"><a href="#2-eval-方法" class="headerlink" title="2. eval()方法"></a>2. eval()方法</h3><h5 id="最后一个方法可能是整个-ECMAScript-语言中最强大的了，它就是-eval-。这个方法就是一个完整的-ECMAScript-解释器，它接收一个参数，即一个要执行的-ECMAScript（JavaScript）字符串。"><a href="#最后一个方法可能是整个-ECMAScript-语言中最强大的了，它就是-eval-。这个方法就是一个完整的-ECMAScript-解释器，它接收一个参数，即一个要执行的-ECMAScript（JavaScript）字符串。" class="headerlink" title="最后一个方法可能是整个 ECMAScript 语言中最强大的了，它就是 eval()。这个方法就是一个完整的 ECMAScript 解释器，它接收一个参数，即一个要执行的 ECMAScript（JavaScript）字符串。"></a>最后一个方法可能是整个 ECMAScript 语言中最强大的了，它就是 eval()。这个方法就是一个完整的 ECMAScript 解释器，它接收一个参数，即一个要执行的 ECMAScript（JavaScript）字符串。</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">eval</span>(<span class="string">&quot;console.log(&#x27;hi&#x27;)&quot;</span>); </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;hi&quot;</span>); </span><br></pre></td></tr></table></figure>



<h3 id="3-Global-对象属性"><a href="#3-Global-对象属性" class="headerlink" title="3.Global 对象属性"></a>3.Global 对象属性</h3><table>
<thead>
<tr>
<th align="center">属 性</th>
<th align="center">说 明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">undefined</td>
<td align="center">特殊值 undefined</td>
</tr>
<tr>
<td align="center">NaN</td>
<td align="center">特殊值 NaN</td>
</tr>
<tr>
<td align="center">Infinity</td>
<td align="center">特殊值 Infinity</td>
</tr>
<tr>
<td align="center">Object</td>
<td align="center">Object 的构造函数</td>
</tr>
<tr>
<td align="center">Array</td>
<td align="center">Array 的构造函数</td>
</tr>
<tr>
<td align="center">Function</td>
<td align="center">Function 的构造函数</td>
</tr>
<tr>
<td align="center">Boolean</td>
<td align="center">Boolean 的构造函数</td>
</tr>
<tr>
<td align="center">String</td>
<td align="center">String 的构造函数</td>
</tr>
<tr>
<td align="center">Number</td>
<td align="center">Number 的构造函数</td>
</tr>
<tr>
<td align="center">Date</td>
<td align="center">Date 的构造函数</td>
</tr>
<tr>
<td align="center">RegExp</td>
<td align="center">RegExp 的构造函数</td>
</tr>
<tr>
<td align="center">Symbol</td>
<td align="center">Symbol 的伪构造函数</td>
</tr>
<tr>
<td align="center">Error</td>
<td align="center">Error 的构造函数</td>
</tr>
<tr>
<td align="center">EvalError</td>
<td align="center">EvalError 的构造函数</td>
</tr>
<tr>
<td align="center">RangeError</td>
<td align="center">RangeError 的构造函数</td>
</tr>
<tr>
<td align="center">ReferenceError</td>
<td align="center">ReferenceError 的构造函数</td>
</tr>
<tr>
<td align="center">SyntaxError</td>
<td align="center">SyntaxError 的构造函数</td>
</tr>
<tr>
<td align="center">TypeError</td>
<td align="center">TypeError 的构造函数</td>
</tr>
<tr>
<td align="center">URIError</td>
<td align="center">URIError 的构造函数</td>
</tr>
</tbody></table>
<h3 id="4-window-对象"><a href="#4-window-对象" class="headerlink" title="4.window 对象"></a>4.window 对象</h3><h5 id="虽然-ECMA-262-没有规定直接访问-Global-对象的方式，但浏览器将-window-对象实现为-Global对象的代理。"><a href="#虽然-ECMA-262-没有规定直接访问-Global-对象的方式，但浏览器将-window-对象实现为-Global对象的代理。" class="headerlink" title="虽然 ECMA-262 没有规定直接访问 Global 对象的方式，但浏览器将 window 对象实现为 Global对象的代理。"></a>虽然 ECMA-262 没有规定直接访问 Global 对象的方式，但浏览器将 window 对象实现为 Global对象的代理。</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> color = <span class="string">&quot;red&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayColor</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="built_in">window</span>.color);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.sayColor(); <span class="comment">// &quot;red&quot; </span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


















]]></content>
      <categories>
        <category>JavaScript红宝书</category>
      </categories>
      <tags>
        <tag>Date</tag>
      </tags>
  </entry>
  <entry>
    <title>JS红宝书之字符串增删改查</title>
    <url>/2020/10/26/%E7%BA%A2%E5%AE%9D%E4%B9%A69/</url>
    <content><![CDATA[<h1 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h1><h2 id="字符串操作方法"><a href="#字符串操作方法" class="headerlink" title="字符串操作方法"></a>字符串操作方法</h2><h3 id="concat"><a href="#concat" class="headerlink" title="concat()"></a>concat()</h3><h5 id="用于将一个或多个字符串拼接成一个新字符串。来看下面的例子"><a href="#用于将一个或多个字符串拼接成一个新字符串。来看下面的例子" class="headerlink" title="用于将一个或多个字符串拼接成一个新字符串。来看下面的例子"></a>用于将一个或多个字符串拼接成一个新字符串。来看下面的例子</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;hello &quot;</span>;</span><br><span class="line"><span class="keyword">let</span> res = str.concat(<span class="string">&quot;world&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(res); <span class="comment">// &quot;hello world&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(str); <span class="comment">// &quot;hello&quot; </span></span><br></pre></td></tr></table></figure>

<h5 id="也可以操控多个参数"><a href="#也可以操控多个参数" class="headerlink" title="也可以操控多个参数"></a>也可以操控多个参数</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;hello &quot;</span>;</span><br><span class="line"><span class="keyword">let</span> res = str.concat(<span class="string">&quot;world&quot;</span>, <span class="string">&quot;!&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(res); <span class="comment">// &quot;hello world!&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(str); <span class="comment">// &quot;hello&quot; </span></span><br></pre></td></tr></table></figure>

<h3 id="slice"><a href="#slice" class="headerlink" title="slice()"></a>slice()</h3><h5 id="返回调用它们的字符串的一个子字符串，而且都接收一或两个参数。第一个参数表示子字符串开始的位置，第二个参数表示子字符串结束的位置。"><a href="#返回调用它们的字符串的一个子字符串，而且都接收一或两个参数。第一个参数表示子字符串开始的位置，第二个参数表示子字符串结束的位置。" class="headerlink" title="返回调用它们的字符串的一个子字符串，而且都接收一或两个参数。第一个参数表示子字符串开始的位置，第二个参数表示子字符串结束的位置。"></a>返回调用它们的字符串的一个子字符串，而且都接收一或两个参数。第一个参数表示子字符串开始的位置，第二个参数表示子字符串结束的位置。</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.slice(<span class="number">3</span>)); <span class="comment">// &quot;lo world&quot; </span></span><br><span class="line"><span class="built_in">console</span>.log(str.slice(<span class="number">3</span>, <span class="number">7</span>)); <span class="comment">// &quot;lo w&quot; </span></span><br><span class="line"><span class="built_in">console</span>.log(str.slice(<span class="number">-3</span>)); <span class="comment">// &quot;rld&quot; </span></span><br><span class="line"><span class="built_in">console</span>.log(str.slice(<span class="number">3</span>, <span class="number">-4</span>)); <span class="comment">// &quot;lo w&quot; </span></span><br></pre></td></tr></table></figure>


<h3 id="substr"><a href="#substr" class="headerlink" title="substr()"></a>substr()</h3><h5 id="返回调用它们的字符串的一个子字符串，而且都接收一或两个参数。第一个参数表示子字符串开始的位置，第二个参数表示子字符串结束的位置。-1"><a href="#返回调用它们的字符串的一个子字符串，而且都接收一或两个参数。第一个参数表示子字符串开始的位置，第二个参数表示子字符串结束的位置。-1" class="headerlink" title="返回调用它们的字符串的一个子字符串，而且都接收一或两个参数。第一个参数表示子字符串开始的位置，第二个参数表示子字符串结束的位置。"></a>返回调用它们的字符串的一个子字符串，而且都接收一或两个参数。第一个参数表示子字符串开始的位置，第二个参数表示子字符串结束的位置。</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;hello world&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(str.substr(<span class="number">3</span>)); <span class="comment">// &quot;lo world&quot; </span></span><br><span class="line"><span class="built_in">console</span>.log(str.substr(<span class="number">3</span>, <span class="number">7</span>)); <span class="comment">// &quot;lo worl&quot; </span></span><br><span class="line"><span class="built_in">console</span>.log(str.substr(<span class="number">-3</span>)); <span class="comment">// &quot;rld&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(str.substr(<span class="number">3</span>, <span class="number">-4</span>)); <span class="comment">// &quot;&quot; (empty string)</span></span><br></pre></td></tr></table></figure>

<h3 id="substring"><a href="#substring" class="headerlink" title="substring()"></a>substring()</h3><h5 id="返回调用它们的字符串的一个子字符串，而且都接收一或两个参数。第一个参数表示子字符串开始的位置，第二个参数表示子字符串结束的位置。-2"><a href="#返回调用它们的字符串的一个子字符串，而且都接收一或两个参数。第一个参数表示子字符串开始的位置，第二个参数表示子字符串结束的位置。-2" class="headerlink" title="返回调用它们的字符串的一个子字符串，而且都接收一或两个参数。第一个参数表示子字符串开始的位置，第二个参数表示子字符串结束的位置。"></a>返回调用它们的字符串的一个子字符串，而且都接收一或两个参数。第一个参数表示子字符串开始的位置，第二个参数表示子字符串结束的位置。</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;hello world&quot;</span>; </span><br><span class="line"><span class="built_in">console</span>.log(str.substring(<span class="number">3</span>)); <span class="comment">// &quot;lo world&quot; </span></span><br><span class="line"><span class="built_in">console</span>.log(str.substring(<span class="number">3</span>,<span class="number">7</span>)); <span class="comment">// &quot;lo w&quot; </span></span><br><span class="line"><span class="built_in">console</span>.log(str.substring(<span class="number">-3</span>)); <span class="comment">// &quot;hello world&quot; </span></span><br><span class="line"><span class="built_in">console</span>.log(str.substring(<span class="number">3</span>, <span class="number">-4</span>)); <span class="comment">// &quot;hel&quot;</span></span><br></pre></td></tr></table></figure>




<h3 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf()"></a>indexOf()</h3><h5 id="从字符串中搜索传入的字符串，并返回位置（如果没找到，则返回-1）从字符串开头开始查找子字符串"><a href="#从字符串中搜索传入的字符串，并返回位置（如果没找到，则返回-1）从字符串开头开始查找子字符串" class="headerlink" title="从字符串中搜索传入的字符串，并返回位置（如果没找到，则返回-1）从字符串开头开始查找子字符串"></a>从字符串中搜索传入的字符串，并返回位置（如果没找到，则返回-1）从字符串开头开始查找子字符串</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.indexOf(<span class="string">&quot;o&quot;</span>)); <span class="comment">// 4 </span></span><br><span class="line"><span class="built_in">console</span>.log(str.indexOf(<span class="string">&quot;o&quot;</span>, <span class="number">6</span>)); <span class="comment">// 7 </span></span><br></pre></td></tr></table></figure>

<h3 id="lastIndexOf"><a href="#lastIndexOf" class="headerlink" title="lastIndexOf()"></a>lastIndexOf()</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;hello world&quot;</span>; </span><br><span class="line"><span class="built_in">console</span>.log(str.lastIndexOf(<span class="string">&quot;o&quot;</span>)); <span class="comment">// 7</span></span><br><span class="line"><span class="built_in">console</span>.log(str.lastIndexOf(<span class="string">&quot;o&quot;</span>, <span class="number">6</span>)); <span class="comment">// 4 </span></span><br></pre></td></tr></table></figure>
<h5 id="从字符串中搜索传入的字符串，并返回位置（如果没找到，则返回-1）从字符串末尾开始查找子字符串"><a href="#从字符串中搜索传入的字符串，并返回位置（如果没找到，则返回-1）从字符串末尾开始查找子字符串" class="headerlink" title="从字符串中搜索传入的字符串，并返回位置（如果没找到，则返回-1）从字符串末尾开始查找子字符串"></a>从字符串中搜索传入的字符串，并返回位置（如果没找到，则返回-1）从字符串末尾开始查找子字符串</h5><h3 id="split"><a href="#split" class="headerlink" title="split()"></a>split()</h3><h5 id="把一个字符串分割成字符串数组"><a href="#把一个字符串分割成字符串数组" class="headerlink" title="把一个字符串分割成字符串数组"></a>把一个字符串分割成字符串数组</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">&#x27;welcome-to-beijing&#x27;</span>;</span><br><span class="line"><span class="comment">//使用split将str转换为数组</span></span><br><span class="line"> <span class="keyword">var</span> arr=str.split(<span class="string">&quot;-&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> date=<span class="string">&#x27;2016/05/05&#x27;</span>;</span><br><span class="line"><span class="comment">//[&quot;welcome&quot;,&quot;to&quot;,&quot;beijing&quot;]</span></span><br><span class="line"><span class="keyword">var</span> dateArr=date.split(<span class="string">&quot;/&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(dateArr);</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h3 id="replace"><a href="#replace" class="headerlink" title="replace()"></a>replace()</h3><h5 id="在字符串用一些字符串替换另一些字符，或替换一个与正则表达式匹配的字符串"><a href="#在字符串用一些字符串替换另一些字符，或替换一个与正则表达式匹配的字符串" class="headerlink" title="在字符串用一些字符串替换另一些字符，或替换一个与正则表达式匹配的字符串"></a>在字符串用一些字符串替换另一些字符，或替换一个与正则表达式匹配的字符串</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> tel=<span class="string">&#x27;010-62971268,400-100-9098,010-86789889&#x27;</span>;</span><br><span class="line"><span class="comment">//newTel被替换之后的字符串</span></span><br><span class="line"><span class="keyword">var</span> newTel=tel.replace(<span class="string">&#x27;,&#x27;</span>,<span class="string">&quot;  &quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(newTel);</span><br><span class="line"><span class="comment">//010-62971268  400-100-9098,010-86789889</span></span><br></pre></td></tr></table></figure>

<h3 id="startsWith"><a href="#startsWith" class="headerlink" title="startsWith()"></a>startsWith()</h3><h5 id="用于判断字符串中是否包含另一个字符串的方法这些方法都会从字符串中搜索传入的字符串，并返回一个表示是否包含的布尔值。startsWith-检查开始于索引-0-的匹配项"><a href="#用于判断字符串中是否包含另一个字符串的方法这些方法都会从字符串中搜索传入的字符串，并返回一个表示是否包含的布尔值。startsWith-检查开始于索引-0-的匹配项" class="headerlink" title="用于判断字符串中是否包含另一个字符串的方法这些方法都会从字符串中搜索传入的字符串，并返回一个表示是否包含的布尔值。startsWith()检查开始于索引 0 的匹配项"></a>用于判断字符串中是否包含另一个字符串的方法这些方法都会从字符串中搜索传入的字符串，并返回一个表示是否包含的布尔值。startsWith()检查开始于索引 0 的匹配项</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> mes = <span class="string">&quot;foobarbaz&quot;</span>; </span><br><span class="line"><span class="built_in">console</span>.log(mes.startsWith(<span class="string">&quot;foo&quot;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(mes.startsWith(<span class="string">&quot;bar&quot;</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<h3 id="endsWith"><a href="#endsWith" class="headerlink" title="endsWith()"></a>endsWith()</h3><h5 id="用于判断字符串中是否包含另一个字符串的方法这些方法都会从字符串中搜索传入的字符串，并返回一个表示是否包含的布尔值。endsWith-检查开始于索引-string-length-substring-length-的匹配项"><a href="#用于判断字符串中是否包含另一个字符串的方法这些方法都会从字符串中搜索传入的字符串，并返回一个表示是否包含的布尔值。endsWith-检查开始于索引-string-length-substring-length-的匹配项" class="headerlink" title="用于判断字符串中是否包含另一个字符串的方法这些方法都会从字符串中搜索传入的字符串，并返回一个表示是否包含的布尔值。endsWith()检查开始于索引(string.length - substring.length)的匹配项"></a>用于判断字符串中是否包含另一个字符串的方法这些方法都会从字符串中搜索传入的字符串，并返回一个表示是否包含的布尔值。endsWith()检查开始于索引(string.length - substring.length)的匹配项</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> mes = <span class="string">&quot;foobarbaz&quot;</span>; </span><br><span class="line"><span class="built_in">console</span>.log(mes.endsWith(<span class="string">&quot;baz&quot;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(mes.endsWith(<span class="string">&quot;bar&quot;</span>)); <span class="comment">// false </span></span><br></pre></td></tr></table></figure>


<h3 id="includes"><a href="#includes" class="headerlink" title="includes()"></a>includes()</h3><h5 id="用于判断字符串中是否包含另一个字符串的方法这些方法都会从字符串中搜索传入的字符串，并返回一个表示是否包含的布尔值。includes-检查整个字符串"><a href="#用于判断字符串中是否包含另一个字符串的方法这些方法都会从字符串中搜索传入的字符串，并返回一个表示是否包含的布尔值。includes-检查整个字符串" class="headerlink" title="用于判断字符串中是否包含另一个字符串的方法这些方法都会从字符串中搜索传入的字符串，并返回一个表示是否包含的布尔值。includes()检查整个字符串"></a>用于判断字符串中是否包含另一个字符串的方法这些方法都会从字符串中搜索传入的字符串，并返回一个表示是否包含的布尔值。includes()检查整个字符串</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> mes = <span class="string">&quot;foobarbaz&quot;</span>; </span><br><span class="line"><span class="built_in">console</span>.log(mes.includes(<span class="string">&quot;bar&quot;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(mes.includes(<span class="string">&quot;qux&quot;</span>)); <span class="comment">// false </span></span><br></pre></td></tr></table></figure>


<h3 id="trim-方法"><a href="#trim-方法" class="headerlink" title="trim()方法"></a>trim()方法</h3><h5 id="ECMAScript-在所有字符串上都提供了-trim-方法。这个方法会创建字符串的一个副本，删除前、后所有空格符，再返回结果。"><a href="#ECMAScript-在所有字符串上都提供了-trim-方法。这个方法会创建字符串的一个副本，删除前、后所有空格符，再返回结果。" class="headerlink" title="ECMAScript 在所有字符串上都提供了 trim()方法。这个方法会创建字符串的一个副本，删除前、后所有空格符，再返回结果。"></a>ECMAScript 在所有字符串上都提供了 trim()方法。这个方法会创建字符串的一个副本，删除前、后所有空格符，再返回结果。</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot; hello world &quot;</span>;</span><br><span class="line"><span class="keyword">let</span> tri = str.trim();</span><br><span class="line"><span class="built_in">console</span>.log(str); <span class="comment">// &quot; hello world &quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(tri); <span class="comment">// &quot;hello world&quot; </span></span><br></pre></td></tr></table></figure>

<h3 id="repeat-方法"><a href="#repeat-方法" class="headerlink" title="repeat()方法"></a>repeat()方法</h3><h5 id="ECMAScript-在所有字符串上都提供了-repeat-方法。这个方法接收一个整数参数，表示要将字符串复制多少次，然后返回拼接所有副本后的结果。"><a href="#ECMAScript-在所有字符串上都提供了-repeat-方法。这个方法接收一个整数参数，表示要将字符串复制多少次，然后返回拼接所有副本后的结果。" class="headerlink" title="ECMAScript 在所有字符串上都提供了 repeat()方法。这个方法接收一个整数参数，表示要将字符串复制多少次，然后返回拼接所有副本后的结果。"></a>ECMAScript 在所有字符串上都提供了 repeat()方法。这个方法接收一个整数参数，表示要将字符串复制多少次，然后返回拼接所有副本后的结果。</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;de &quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.repeat(<span class="number">4</span>) + <span class="string">&quot;decade&quot;</span>);</span><br><span class="line"><span class="comment">// de de de de decade </span></span><br></pre></td></tr></table></figure>


<h3 id="padStart"><a href="#padStart" class="headerlink" title="padStart()"></a>padStart()</h3><h5 id="会复制字符串，如果小于指定长度，则在相应一边填充字符，直至满足长度条件。这两个方法的第一个参数是长度，第二个参数是可选的填充字符串，默认为空格"><a href="#会复制字符串，如果小于指定长度，则在相应一边填充字符，直至满足长度条件。这两个方法的第一个参数是长度，第二个参数是可选的填充字符串，默认为空格" class="headerlink" title="会复制字符串，如果小于指定长度，则在相应一边填充字符，直至满足长度条件。这两个方法的第一个参数是长度，第二个参数是可选的填充字符串，默认为空格"></a>会复制字符串，如果小于指定长度，则在相应一边填充字符，直至满足长度条件。这两个方法的第一个参数是长度，第二个参数是可选的填充字符串，默认为空格</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;foo&quot;</span>; </span><br><span class="line"><span class="built_in">console</span>.log(str(<span class="number">6</span>)); <span class="comment">// &quot; foo&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(str(<span class="number">9</span>, <span class="string">&quot;.&quot;</span>)); <span class="comment">// &quot;......foo&quot; </span></span><br></pre></td></tr></table></figure>

<h3 id="padEnd"><a href="#padEnd" class="headerlink" title="padEnd()"></a>padEnd()</h3><h5 id="会复制字符串，如果小于指定长度，则在相应一边填充字符，直至满足长度条件。这两个方法的第一个参数是长度，第二个参数是可选的填充字符串，默认为空格-1"><a href="#会复制字符串，如果小于指定长度，则在相应一边填充字符，直至满足长度条件。这两个方法的第一个参数是长度，第二个参数是可选的填充字符串，默认为空格-1" class="headerlink" title="会复制字符串，如果小于指定长度，则在相应一边填充字符，直至满足长度条件。这两个方法的第一个参数是长度，第二个参数是可选的填充字符串，默认为空格"></a>会复制字符串，如果小于指定长度，则在相应一边填充字符，直至满足长度条件。这两个方法的第一个参数是长度，第二个参数是可选的填充字符串，默认为空格</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> stringValue = <span class="string">&quot;foo&quot;</span>; </span><br><span class="line"><span class="built_in">console</span>.log(str.padEnd(<span class="number">6</span>)); <span class="comment">// &quot;foo &quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(str.padEnd(<span class="number">9</span>, <span class="string">&quot;.&quot;</span>)); <span class="comment">// &quot;foo......&quot; </span></span><br></pre></td></tr></table></figure>


<h3 id="toLowerCase-、toUpperCase-、toLocaleLowerCase-和toLocaleUpperCase"><a href="#toLowerCase-、toUpperCase-、toLocaleLowerCase-和toLocaleUpperCase" class="headerlink" title="toLowerCase()、toUpperCase()、toLocaleLowerCase()和toLocaleUpperCase()"></a>toLowerCase()、toUpperCase()、toLocaleLowerCase()和toLocaleUpperCase()</h3><h5 id="字符串大小写转换"><a href="#字符串大小写转换" class="headerlink" title="字符串大小写转换"></a>字符串大小写转换</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.toLocaleUpperCase()); <span class="comment">// &quot;HELLO WORLD&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(str.toUpperCase()); <span class="comment">// &quot;HELLO WORLD&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(str.toLocaleLowerCase()); <span class="comment">// &quot;hello world&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(str.toLowerCase()); <span class="comment">// &quot;hello world&quot; </span></span><br></pre></td></tr></table></figure>


<h3 id="localeCompare-方法"><a href="#localeCompare-方法" class="headerlink" title="localeCompare()方法"></a>localeCompare()方法</h3><h5 id="最后一个方法是-localeCompare-，这个方法比较两个字符串，返回如下-3-个值中的一个"><a href="#最后一个方法是-localeCompare-，这个方法比较两个字符串，返回如下-3-个值中的一个" class="headerlink" title="最后一个方法是 localeCompare()，这个方法比较两个字符串，返回如下 3 个值中的一个"></a>最后一个方法是 localeCompare()，这个方法比较两个字符串，返回如下 3 个值中的一个</h5><ol>
<li>如果按照字母表顺序，字符串应该排在字符串参数前头，则返回负值。（通常是-1，具体还要看<br>与实际值相关的实现。）</li>
<li>如果字符串与字符串参数相等，则返回 0。</li>
<li>如果按照字母表顺序，字符串应该排在字符串参数后头，则返回正值。</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> stringValue = <span class="string">&quot;yellow&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(stringValue.localeCompare(<span class="string">&quot;brick&quot;</span>)); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(stringValue.localeCompare(<span class="string">&quot;yellow&quot;</span>)); <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(stringValue.localeCompare(<span class="string">&quot;zoo&quot;</span>)); <span class="comment">// -1 </span></span><br></pre></td></tr></table></figure>









































]]></content>
      <categories>
        <category>JavaScript红宝书</category>
      </categories>
      <tags>
        <tag>字符串增删改查</tag>
      </tags>
  </entry>
  <entry>
    <title>JS红宝书之数据类型</title>
    <url>/2020/10/15/%E7%BA%A2%E5%AE%9D%E4%B9%A63/</url>
    <content><![CDATA[<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h5 id="ECMAScript-有-6-种简单数据类型（也称为原始类型）：Undefined、Null、Boolean、Number、String-和-Symbol。Symbol（符号）是-ECMAScript-6-新增的。还有一种复杂数据类型叫-Object（对象）。Object-是一种无序名值对的集合。因为在-ECMAScript-中不能定义自己的数据类型，所有值都可以用上述-7-种数据类型之一来表示。只有-7-种数据类型似乎不足以表示全部数据。但-ECMAScript-的数据类型很灵活，一种数据类型可以当作多种数据类型来使用。"><a href="#ECMAScript-有-6-种简单数据类型（也称为原始类型）：Undefined、Null、Boolean、Number、String-和-Symbol。Symbol（符号）是-ECMAScript-6-新增的。还有一种复杂数据类型叫-Object（对象）。Object-是一种无序名值对的集合。因为在-ECMAScript-中不能定义自己的数据类型，所有值都可以用上述-7-种数据类型之一来表示。只有-7-种数据类型似乎不足以表示全部数据。但-ECMAScript-的数据类型很灵活，一种数据类型可以当作多种数据类型来使用。" class="headerlink" title="ECMAScript 有 6 种简单数据类型（也称为原始类型）：Undefined、Null、Boolean、Number、String 和 Symbol。Symbol（符号）是 ECMAScript 6 新增的。还有一种复杂数据类型叫 Object（对象）。Object 是一种无序名值对的集合。因为在 ECMAScript 中不能定义自己的数据类型，所有值都可以用上述 7 种数据类型之一来表示。只有 7 种数据类型似乎不足以表示全部数据。但 ECMAScript 的数据类型很灵活，一种数据类型可以当作多种数据类型来使用。"></a>ECMAScript 有 6 种简单数据类型（也称为原始类型）：Undefined、Null、Boolean、Number、String 和 Symbol。Symbol（符号）是 ECMAScript 6 新增的。还有一种复杂数据类型叫 Object（对象）。Object 是一种无序名值对的集合。因为在 ECMAScript 中不能定义自己的数据类型，所有值都可以用上述 7 种数据类型之一来表示。只有 7 种数据类型似乎不足以表示全部数据。但 ECMAScript 的数据类型很灵活，一种数据类型可以当作多种数据类型来使用。</h5><h3 id="typeof-操作符"><a href="#typeof-操作符" class="headerlink" title="typeof 操作符"></a>typeof 操作符</h3><h4 id="因为-ECMAScript-的类型系统是松散的，所以需要一种手段来确定任意变量的数据类型。typeof操作符就是为此而生的。对一个值使用-typeof-操作符会返回下列字符串之一："><a href="#因为-ECMAScript-的类型系统是松散的，所以需要一种手段来确定任意变量的数据类型。typeof操作符就是为此而生的。对一个值使用-typeof-操作符会返回下列字符串之一：" class="headerlink" title="因为 ECMAScript 的类型系统是松散的，所以需要一种手段来确定任意变量的数据类型。typeof操作符就是为此而生的。对一个值使用 typeof 操作符会返回下列字符串之一："></a>因为 ECMAScript 的类型系统是松散的，所以需要一种手段来确定任意变量的数据类型。typeof操作符就是为此而生的。对一个值使用 typeof 操作符会返回下列字符串之一：</h4><h5 id="“undefined”表示值未定义；"><a href="#“undefined”表示值未定义；" class="headerlink" title="“undefined”表示值未定义；"></a>“undefined”表示值未定义；</h5><h5 id="-“boolean”表示值为布尔值；"><a href="#-“boolean”表示值为布尔值；" class="headerlink" title=" “boolean”表示值为布尔值；"></a> “boolean”表示值为布尔值；</h5><h5 id="-“string”表示值为字符串；"><a href="#-“string”表示值为字符串；" class="headerlink" title=" “string”表示值为字符串；"></a> “string”表示值为字符串；</h5><h5 id="-“number”表示值为数值；"><a href="#-“number”表示值为数值；" class="headerlink" title=" “number”表示值为数值；"></a> “number”表示值为数值；</h5><h5 id="-“object”表示值为对象（而不是函数）或-null；"><a href="#-“object”表示值为对象（而不是函数）或-null；" class="headerlink" title=" “object”表示值为对象（而不是函数）或 null；"></a> “object”表示值为对象（而不是函数）或 null；</h5><h5 id="-“function”表示值为函数；"><a href="#-“function”表示值为函数；" class="headerlink" title=" “function”表示值为函数；"></a> “function”表示值为函数；</h5><h5 id="-“symbol”表示值为符号。"><a href="#-“symbol”表示值为符号。" class="headerlink" title=" “symbol”表示值为符号。"></a> “symbol”表示值为符号。</h5><h4 id="下面是使用-typeof-操作符的例子："><a href="#下面是使用-typeof-操作符的例子：" class="headerlink" title="下面是使用 typeof 操作符的例子："></a>下面是使用 typeof 操作符的例子：</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> message = <span class="string">&quot;some string&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> message); <span class="comment">// &quot;string&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(message)); <span class="comment">// &quot;string&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="number">95</span>); <span class="comment">// &quot;number&quot; </span></span><br></pre></td></tr></table></figure>
<h5 id="注意，因为-typeof-是一个操作符而不是函数，所以不需要参数（但可以使用参数）。"><a href="#注意，因为-typeof-是一个操作符而不是函数，所以不需要参数（但可以使用参数）。" class="headerlink" title="注意，因为 typeof 是一个操作符而不是函数，所以不需要参数（但可以使用参数）。"></a>注意，因为 typeof 是一个操作符而不是函数，所以不需要参数（但可以使用参数）。</h5><h3 id="Undefined-类型"><a href="#Undefined-类型" class="headerlink" title="Undefined 类型"></a>Undefined 类型</h3><h5 id="Undefined-类型只有一个值，就是特殊值-undefined。当使用-var-或-let-声明了变量但没有初始化时，就相当于给变量赋予了-undefined-值"><a href="#Undefined-类型只有一个值，就是特殊值-undefined。当使用-var-或-let-声明了变量但没有初始化时，就相当于给变量赋予了-undefined-值" class="headerlink" title="Undefined 类型只有一个值，就是特殊值 undefined。当使用 var 或 let 声明了变量但没有初始化时，就相当于给变量赋予了 undefined 值"></a>Undefined 类型只有一个值，就是特殊值 undefined。当使用 var 或 let 声明了变量但没有初始化时，就相当于给变量赋予了 undefined 值</h5><h4 id="注意-即使未初始化的变量会被自动赋予-undefined-值，但我们仍然建议在声明变量的同时进行初始化。这样，当-typeof-返回”undefined”时，你就会知道那是因为给定的变量尚未声明，而不是声明了但未初始化。"><a href="#注意-即使未初始化的变量会被自动赋予-undefined-值，但我们仍然建议在声明变量的同时进行初始化。这样，当-typeof-返回”undefined”时，你就会知道那是因为给定的变量尚未声明，而不是声明了但未初始化。" class="headerlink" title="注意 即使未初始化的变量会被自动赋予 undefined 值，但我们仍然建议在声明变量的同时进行初始化。这样，当 typeof 返回”undefined”时，你就会知道那是因为给定的变量尚未声明，而不是声明了但未初始化。"></a>注意 即使未初始化的变量会被自动赋予 undefined 值，但我们仍然建议在声明变量的同时进行初始化。这样，当 typeof 返回”undefined”时，你就会知道那是因为给定的变量尚未声明，而不是声明了但未初始化。</h4><h3 id="Null-类型"><a href="#Null-类型" class="headerlink" title="Null 类型"></a>Null 类型</h3><h5 id="Null-类型同样只有一个值，即特殊值-null。逻辑上讲，null-值表示一个空对象指针，这也是给typeof-传一个-null-会返回”object”的原因"><a href="#Null-类型同样只有一个值，即特殊值-null。逻辑上讲，null-值表示一个空对象指针，这也是给typeof-传一个-null-会返回”object”的原因" class="headerlink" title="Null 类型同样只有一个值，即特殊值 null。逻辑上讲，null 值表示一个空对象指针，这也是给typeof 传一个 null 会返回”object”的原因"></a>Null 类型同样只有一个值，即特殊值 null。逻辑上讲，null 值表示一个空对象指针，这也是给typeof 传一个 null 会返回”object”的原因</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> car = <span class="literal">null</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> car); <span class="comment">// &quot;object&quot; </span></span><br></pre></td></tr></table></figure>
<h5 id="undefined-值是由-null-值派生而来的，因此-ECMA-262-将它们定义为表面上相等，如下面的例子所示："><a href="#undefined-值是由-null-值派生而来的，因此-ECMA-262-将它们定义为表面上相等，如下面的例子所示：" class="headerlink" title="undefined 值是由 null 值派生而来的，因此 ECMA-262 将它们定义为表面上相等，如下面的例子所示："></a>undefined 值是由 null 值派生而来的，因此 ECMA-262 将它们定义为表面上相等，如下面的例子所示：</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="literal">null</span> == <span class="literal">undefined</span>); <span class="comment">// true </span></span><br></pre></td></tr></table></figure>
<h5 id="即使-null-和-undefined-有关系，它们的用途也是完全不一样的。"><a href="#即使-null-和-undefined-有关系，它们的用途也是完全不一样的。" class="headerlink" title="即使 null 和 undefined 有关系，它们的用途也是完全不一样的。"></a>即使 null 和 undefined 有关系，它们的用途也是完全不一样的。</h5><h3 id="Boolean-类型"><a href="#Boolean-类型" class="headerlink" title="Boolean 类型"></a>Boolean 类型</h3><h5 id="Boolean（布尔值）类型是-ECMAScript-中使用最频繁的类型之一，有两个字面值：true-和-false。这两个布尔值不同于数值，因此-true-不等于-1，false-不等于-0。下面是给变量赋布尔值的例子："><a href="#Boolean（布尔值）类型是-ECMAScript-中使用最频繁的类型之一，有两个字面值：true-和-false。这两个布尔值不同于数值，因此-true-不等于-1，false-不等于-0。下面是给变量赋布尔值的例子：" class="headerlink" title="Boolean（布尔值）类型是 ECMAScript 中使用最频繁的类型之一，有两个字面值：true 和 false。这两个布尔值不同于数值，因此 true 不等于 1，false 不等于 0。下面是给变量赋布尔值的例子："></a>Boolean（布尔值）类型是 ECMAScript 中使用最频繁的类型之一，有两个字面值：true 和 false。这两个布尔值不同于数值，因此 true 不等于 1，false 不等于 0。下面是给变量赋布尔值的例子：</h5><table>
<thead>
<tr>
<th align="center">数据类型</th>
<th align="center">转换为 true 的值</th>
<th align="center">转换为 false 的值</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Boolean</td>
<td align="center">true</td>
<td align="center">false</td>
</tr>
<tr>
<td align="center">String</td>
<td align="center">非空字符串</td>
<td align="center">“”（空字符串）</td>
</tr>
<tr>
<td align="center">Number</td>
<td align="center">非零数值（包括无穷值）</td>
<td align="center">0、NaN（参见后面的相关内容）</td>
</tr>
<tr>
<td align="center">Object</td>
<td align="center">任意对象</td>
<td align="center">null</td>
</tr>
<tr>
<td align="center">Undefined</td>
<td align="center">N/A（不存在）</td>
<td align="center">undefined</td>
</tr>
</tbody></table>
<h3 id="Number-类型"><a href="#Number-类型" class="headerlink" title="Number 类型"></a>Number 类型</h3><h5 id="ECMAScript-中最有意思的数据类型或许就是-Number-了。Number-类型使用-IEEE-754-格式表示整数和浮点值（在某些语言中也叫双精度值）。不同的数值类型相应地也有不同的数值字面量格式。"><a href="#ECMAScript-中最有意思的数据类型或许就是-Number-了。Number-类型使用-IEEE-754-格式表示整数和浮点值（在某些语言中也叫双精度值）。不同的数值类型相应地也有不同的数值字面量格式。" class="headerlink" title="ECMAScript 中最有意思的数据类型或许就是 Number 了。Number 类型使用 IEEE 754 格式表示整数和浮点值（在某些语言中也叫双精度值）。不同的数值类型相应地也有不同的数值字面量格式。"></a>ECMAScript 中最有意思的数据类型或许就是 Number 了。Number 类型使用 IEEE 754 格式表示整数和浮点值（在某些语言中也叫双精度值）。不同的数值类型相应地也有不同的数值字面量格式。</h5><h5 id="最基本的数值字面量格式是十进制整数，直接写出来即可："><a href="#最基本的数值字面量格式是十进制整数，直接写出来即可：" class="headerlink" title="最基本的数值字面量格式是十进制整数，直接写出来即可："></a>最基本的数值字面量格式是十进制整数，直接写出来即可：</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> intNum = <span class="number">55</span>; <span class="comment">// 整数</span></span><br></pre></td></tr></table></figure>
<h5 id="八进制字面量在严格模式下是无效的，会导致-JavaScript-引擎抛出语法错误。①"><a href="#八进制字面量在严格模式下是无效的，会导致-JavaScript-引擎抛出语法错误。①" class="headerlink" title="八进制字面量在严格模式下是无效的，会导致 JavaScript 引擎抛出语法错误。①"></a>八进制字面量在严格模式下是无效的，会导致 JavaScript 引擎抛出语法错误。①</h5><h4 id="1-浮点值"><a href="#1-浮点值" class="headerlink" title="1. 浮点值"></a>1. 浮点值</h4><h6 id="要定义浮点值，数值中必须包含小数点，而且小数点后面必须至少有一个数字。虽然小数点前面不是必须有整数，但推荐加上。下面是几个例子："><a href="#要定义浮点值，数值中必须包含小数点，而且小数点后面必须至少有一个数字。虽然小数点前面不是必须有整数，但推荐加上。下面是几个例子：" class="headerlink" title="要定义浮点值，数值中必须包含小数点，而且小数点后面必须至少有一个数字。虽然小数点前面不是必须有整数，但推荐加上。下面是几个例子："></a>要定义浮点值，数值中必须包含小数点，而且小数点后面必须至少有一个数字。虽然小数点前面不是必须有整数，但推荐加上。下面是几个例子：</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> floatNum1 = <span class="number">1.1</span>;</span><br><span class="line"><span class="keyword">let</span> floatNum2 = <span class="number">0.1</span>;</span><br><span class="line"><span class="keyword">let</span> floatNum3 = <span class="number">.1</span>; <span class="comment">// 有效，但不推荐</span></span><br></pre></td></tr></table></figure>
<h4 id="2-值的范围"><a href="#2-值的范围" class="headerlink" title="2. 值的范围"></a>2. 值的范围</h4><h6 id="由于内存的限制，ECMAScript-并不支持表示这个世界上的所有数值。ECMAScript-可以表示的最小数值保存在-Number-MIN-VALUE-中，这个值在多数浏览器中是-5e324；可以表示的最大数值保存在Number-MAX-VALUE-中，这个值在多数浏览器中是-1-797-693-134-862-315-7e-308。如果某个计算得到的数值结果超出了-JavaScript-可以表示的范围，那么这个数值会被自动转换为一个特殊的-Infinity（无穷）值。任何无法表示的负数以-Infinity（负无穷大）表示，任何无法表示的正数以-Infinity（正无穷大）表示。"><a href="#由于内存的限制，ECMAScript-并不支持表示这个世界上的所有数值。ECMAScript-可以表示的最小数值保存在-Number-MIN-VALUE-中，这个值在多数浏览器中是-5e324；可以表示的最大数值保存在Number-MAX-VALUE-中，这个值在多数浏览器中是-1-797-693-134-862-315-7e-308。如果某个计算得到的数值结果超出了-JavaScript-可以表示的范围，那么这个数值会被自动转换为一个特殊的-Infinity（无穷）值。任何无法表示的负数以-Infinity（负无穷大）表示，任何无法表示的正数以-Infinity（正无穷大）表示。" class="headerlink" title="由于内存的限制，ECMAScript 并不支持表示这个世界上的所有数值。ECMAScript 可以表示的最小数值保存在 Number.MIN_VALUE 中，这个值在多数浏览器中是 5e324；可以表示的最大数值保存在Number.MAX_VALUE 中，这个值在多数浏览器中是 1.797 693 134 862 315 7e+308。如果某个计算得到的数值结果超出了 JavaScript 可以表示的范围，那么这个数值会被自动转换为一个特殊的 Infinity（无穷）值。任何无法表示的负数以-Infinity（负无穷大）表示，任何无法表示的正数以 Infinity（正无穷大）表示。"></a>由于内存的限制，ECMAScript 并不支持表示这个世界上的所有数值。ECMAScript 可以表示的最小数值保存在 Number.MIN_VALUE 中，这个值在多数浏览器中是 5e324；可以表示的最大数值保存在Number.MAX_VALUE 中，这个值在多数浏览器中是 1.797 693 134 862 315 7e+308。如果某个计算得到的数值结果超出了 JavaScript 可以表示的范围，那么这个数值会被自动转换为一个特殊的 Infinity（无穷）值。任何无法表示的负数以-Infinity（负无穷大）表示，任何无法表示的正数以 Infinity（正无穷大）表示。</h6><h4 id="3-NaN"><a href="#3-NaN" class="headerlink" title="3. NaN"></a>3. NaN</h4><h6 id="有一个特殊的数值叫-NaN，意思是“不是数值”（Not-a-Number），用于表示本来要返回数值的操作失败了（而不是抛出错误）。比如，用-0-除任意数值在其他语言中通常都会导致错误，从而中止代码执。但在-ECMAScript-中，0、-0-或0-相除会返回-NaN："><a href="#有一个特殊的数值叫-NaN，意思是“不是数值”（Not-a-Number），用于表示本来要返回数值的操作失败了（而不是抛出错误）。比如，用-0-除任意数值在其他语言中通常都会导致错误，从而中止代码执。但在-ECMAScript-中，0、-0-或0-相除会返回-NaN：" class="headerlink" title="有一个特殊的数值叫 NaN，意思是“不是数值”（Not a Number），用于表示本来要返回数值的操作失败了（而不是抛出错误）。比如，用 0 除任意数值在其他语言中通常都会导致错误，从而中止代码执。但在 ECMAScript 中，0、+0 或0 相除会返回 NaN："></a>有一个特殊的数值叫 NaN，意思是“不是数值”（Not a Number），用于表示本来要返回数值的操作失败了（而不是抛出错误）。比如，用 0 除任意数值在其他语言中通常都会导致错误，从而中止代码执。但在 ECMAScript 中，0、+0 或0 相除会返回 NaN：</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">0</span>/<span class="number">0</span>); <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">-0</span>/+<span class="number">0</span>); <span class="comment">// NaN </span></span><br></pre></td></tr></table></figure>
<h6 id="NaN-有几个独特的属性。首先，任何涉及-NaN-的操作始终返回-NaN（如-NaN-10），在连续多步计算时这可能是个问题。其次，NaN-不等于包括-NaN-在内的任何值。例如，下面的比较操作会返回-false："><a href="#NaN-有几个独特的属性。首先，任何涉及-NaN-的操作始终返回-NaN（如-NaN-10），在连续多步计算时这可能是个问题。其次，NaN-不等于包括-NaN-在内的任何值。例如，下面的比较操作会返回-false：" class="headerlink" title="NaN 有几个独特的属性。首先，任何涉及 NaN 的操作始终返回 NaN（如 NaN/10），在连续多步计算时这可能是个问题。其次，NaN 不等于包括 NaN 在内的任何值。例如，下面的比较操作会返回 false："></a>NaN 有几个独特的属性。首先，任何涉及 NaN 的操作始终返回 NaN（如 NaN/10），在连续多步计算时这可能是个问题。其次，NaN 不等于包括 NaN 在内的任何值。例如，下面的比较操作会返回 false：</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="literal">NaN</span> == <span class="literal">NaN</span>); <span class="comment">// false </span></span><br></pre></td></tr></table></figure>
<h6 id="为此，ECMAScript-提供了-isNaN-函数。该函数接收一个参数，可以是任意数据类型，然后判断这个参数是否“不是数值”。把一个值传给-isNaN-后，该函数会尝试把它转换为数值。某些非数值的值可以直接转换成数值，如字符串”10”或布尔值。任何不能转换为数值的值都会导致这个函数返回true。举例如下："><a href="#为此，ECMAScript-提供了-isNaN-函数。该函数接收一个参数，可以是任意数据类型，然后判断这个参数是否“不是数值”。把一个值传给-isNaN-后，该函数会尝试把它转换为数值。某些非数值的值可以直接转换成数值，如字符串”10”或布尔值。任何不能转换为数值的值都会导致这个函数返回true。举例如下：" class="headerlink" title="为此，ECMAScript 提供了 isNaN()函数。该函数接收一个参数，可以是任意数据类型，然后判断这个参数是否“不是数值”。把一个值传给 isNaN()后，该函数会尝试把它转换为数值。某些非数值的值可以直接转换成数值，如字符串”10”或布尔值。任何不能转换为数值的值都会导致这个函数返回true。举例如下："></a>为此，ECMAScript 提供了 isNaN()函数。该函数接收一个参数，可以是任意数据类型，然后判断这个参数是否“不是数值”。把一个值传给 isNaN()后，该函数会尝试把它转换为数值。某些非数值的值可以直接转换成数值，如字符串”10”或布尔值。任何不能转换为数值的值都会导致这个函数返回true。举例如下：</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="literal">NaN</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="number">10</span>)); <span class="comment">// false，10 是数值</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="string">&quot;10&quot;</span>)); <span class="comment">// false，可以转换为数值 10</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="string">&quot;blue&quot;</span>)); <span class="comment">// true，不可以转换为数值</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="literal">true</span>)); <span class="comment">// false，可以转换为数值 1</span></span><br></pre></td></tr></table></figure>
<h4 id="4-数值转换"><a href="#4-数值转换" class="headerlink" title="4.数值转换"></a>4.数值转换</h4><h6 id="有3-个函数可以将非数值转换为数值：Number-、parseInt-和-parseFloat-。Number-是转型函数，可用于任何数据类型。后两个函数主要用于将字符串转换为数值。对于同样的参数，这-3-个函数执行的操作也不同"><a href="#有3-个函数可以将非数值转换为数值：Number-、parseInt-和-parseFloat-。Number-是转型函数，可用于任何数据类型。后两个函数主要用于将字符串转换为数值。对于同样的参数，这-3-个函数执行的操作也不同" class="headerlink" title="有3 个函数可以将非数值转换为数值：Number()、parseInt()和 parseFloat()。Number()是转型函数，可用于任何数据类型。后两个函数主要用于将字符串转换为数值。对于同样的参数，这 3 个函数执行的操作也不同"></a>有3 个函数可以将非数值转换为数值：Number()、parseInt()和 parseFloat()。Number()是转型函数，可用于任何数据类型。后两个函数主要用于将字符串转换为数值。对于同样的参数，这 3 个函数执行的操作也不同</h6><h5 id="Number-、"><a href="#Number-、" class="headerlink" title="Number()、"></a>Number()、</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> num1 = <span class="built_in">Number</span>(<span class="string">&quot;Hello world!&quot;</span>); <span class="comment">// NaN</span></span><br><span class="line"><span class="keyword">let</span> num2 = <span class="built_in">Number</span>(<span class="string">&quot;&quot;</span>); <span class="comment">// 0</span></span><br><span class="line"><span class="keyword">let</span> num3 = <span class="built_in">Number</span>(<span class="string">&quot;000011&quot;</span>); <span class="comment">// 11</span></span><br><span class="line"><span class="keyword">let</span> num4 = <span class="built_in">Number</span>(<span class="literal">true</span>); <span class="comment">// 1 </span></span><br></pre></td></tr></table></figure>
<h5 id="parseInt"><a href="#parseInt" class="headerlink" title="parseInt()"></a>parseInt()</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> num1 = <span class="built_in">parseInt</span>(<span class="string">&quot;1234blue&quot;</span>); <span class="comment">// 1234</span></span><br><span class="line"><span class="keyword">let</span> num2 = <span class="built_in">parseInt</span>(<span class="string">&quot;&quot;</span>); <span class="comment">// NaN</span></span><br><span class="line"><span class="keyword">let</span> num3 = <span class="built_in">parseInt</span>(<span class="string">&quot;0xA&quot;</span>); <span class="comment">// 10，解释为十六进制整数</span></span><br><span class="line"><span class="keyword">let</span> num4 = <span class="built_in">parseInt</span>(<span class="number">22.5</span>); <span class="comment">// 22</span></span><br><span class="line"><span class="keyword">let</span> num5 = <span class="built_in">parseInt</span>(<span class="string">&quot;70&quot;</span>); <span class="comment">// 70，解释为十进制值</span></span><br><span class="line"><span class="keyword">let</span> num6 = <span class="built_in">parseInt</span>(<span class="string">&quot;0xf&quot;</span>); <span class="comment">// 15，解释为十六进制整数</span></span><br></pre></td></tr></table></figure>
<h5 id="parseFloat"><a href="#parseFloat" class="headerlink" title="parseFloat()"></a>parseFloat()</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> num1 = <span class="built_in">parseFloat</span>(<span class="string">&quot;1234blue&quot;</span>); <span class="comment">// 1234，按整数解析</span></span><br><span class="line"><span class="keyword">let</span> num2 = <span class="built_in">parseFloat</span>(<span class="string">&quot;0xA&quot;</span>); <span class="comment">// 0</span></span><br><span class="line"><span class="keyword">let</span> num3 = <span class="built_in">parseFloat</span>(<span class="string">&quot;22.5&quot;</span>); <span class="comment">// 22.5</span></span><br><span class="line"><span class="keyword">let</span> num4 = <span class="built_in">parseFloat</span>(<span class="string">&quot;22.34.5&quot;</span>); <span class="comment">// 22.34</span></span><br><span class="line"><span class="keyword">let</span> num5 = <span class="built_in">parseFloat</span>(<span class="string">&quot;0908.5&quot;</span>); <span class="comment">// 908.5</span></span><br><span class="line"><span class="keyword">let</span> num6 = <span class="built_in">parseFloat</span>(<span class="string">&quot;3.125e7&quot;</span>); <span class="comment">// 31250000 </span></span><br></pre></td></tr></table></figure>


<h3 id="String-类型"><a href="#String-类型" class="headerlink" title="String 类型"></a>String 类型</h3><h6 id="String（字符串）数据类型表示零或多个-16-位-Unicode-字符序列。字符串可以使用双引号（”）、单引号（’）或反引号（-）标示，因此下面的代码都是合法的："><a href="#String（字符串）数据类型表示零或多个-16-位-Unicode-字符序列。字符串可以使用双引号（”）、单引号（’）或反引号（-）标示，因此下面的代码都是合法的：" class="headerlink" title="String（字符串）数据类型表示零或多个 16 位 Unicode 字符序列。字符串可以使用双引号（”）、单引号（’）或反引号（`）标示，因此下面的代码都是合法的："></a>String（字符串）数据类型表示零或多个 16 位 Unicode 字符序列。字符串可以使用双引号（”）、单引号（’）或反引号（`）标示，因此下面的代码都是合法的：</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> firstName = <span class="string">&quot;John&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> lastName = <span class="string">&#x27;Jacob&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> lastName = <span class="string">`Jingleheimerschmid`</span>;</span><br></pre></td></tr></table></figure>
<h5 id="不过要注意的是，以某种引号作为字符串开头，必须仍然以该种引号作为字符串结尾。比如，下面的写法会导致语法错误："><a href="#不过要注意的是，以某种引号作为字符串开头，必须仍然以该种引号作为字符串结尾。比如，下面的写法会导致语法错误：" class="headerlink" title="不过要注意的是，以某种引号作为字符串开头，必须仍然以该种引号作为字符串结尾。比如，下面的写法会导致语法错误："></a>不过要注意的是，以某种引号作为字符串开头，必须仍然以该种引号作为字符串结尾。比如，下面的写法会导致语法错误：</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> firstName = <span class="string">&#x27;Nicholas&quot;; // 语法错误：开头和结尾的引号必须是同一种</span></span><br></pre></td></tr></table></figure>

<h4 id="1-字符字面量"><a href="#1-字符字面量" class="headerlink" title="1. 字符字面量"></a>1. 字符字面量</h4><h6 id="字符串数据类型包含一些字符字面量，用于表示非打印字符或有其他用途的字符，如下表所示："><a href="#字符串数据类型包含一些字符字面量，用于表示非打印字符或有其他用途的字符，如下表所示：" class="headerlink" title="字符串数据类型包含一些字符字面量，用于表示非打印字符或有其他用途的字符，如下表所示："></a>字符串数据类型包含一些字符字面量，用于表示非打印字符或有其他用途的字符，如下表所示：</h6><table>
<thead>
<tr>
<th align="center">字 面 量</th>
<th align="center">含 义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">\n</td>
<td align="center">换行</td>
</tr>
<tr>
<td align="center">\t</td>
<td align="center">制表</td>
</tr>
<tr>
<td align="center">\b</td>
<td align="center">退格</td>
</tr>
<tr>
<td align="center">\r</td>
<td align="center">回车</td>
</tr>
<tr>
<td align="center">\f</td>
<td align="center">换页</td>
</tr>
<tr>
<td align="center">\</td>
<td align="center">反斜杠（\）</td>
</tr>
<tr>
<td align="center">&#39;</td>
<td align="center">单引号（’），在字符串以单引号标示时使用，例如’He said, &#39;hey.&#39;‘</td>
</tr>
<tr>
<td align="center">&quot;</td>
<td align="center">双引号（”），在字符串以双引号标示时使用，例如”He said, &quot;hey.&quot;“</td>
</tr>
<tr>
<td align="center">`</td>
<td align="center">反引号（<code>），在字符串以反引号标示时使用，例如</code>He said, `hey.``</td>
</tr>
<tr>
<td align="center">\xnn</td>
<td align="center">以十六进制编码 nn 表示的字符（其中 n 是十六进制数字 0~F），例如\x41 等于”A”</td>
</tr>
<tr>
<td align="center">\unnnn</td>
<td align="center">以十六进制编码 nnnn 表示的 Unicode 字符（其中 n 是十六进制数字 0~F），例如\u03a3 等于希腊字符”Σ”</td>
</tr>
</tbody></table>
<h4 id="2-字符串的特点"><a href="#2-字符串的特点" class="headerlink" title="2. 字符串的特点"></a>2. 字符串的特点</h4><h5 id="CMAScript-中的字符串是不可变的（immutable），意思是一旦创建，它们的值就不能变了。要修改某个变量中的字符串值，必须先销毁原始的字符串，然后将包含新值的另一个字符串保存到该变量，如下所示："><a href="#CMAScript-中的字符串是不可变的（immutable），意思是一旦创建，它们的值就不能变了。要修改某个变量中的字符串值，必须先销毁原始的字符串，然后将包含新值的另一个字符串保存到该变量，如下所示：" class="headerlink" title="CMAScript 中的字符串是不可变的（immutable），意思是一旦创建，它们的值就不能变了。要修改某个变量中的字符串值，必须先销毁原始的字符串，然后将包含新值的另一个字符串保存到该变量，如下所示："></a>CMAScript 中的字符串是不可变的（immutable），意思是一旦创建，它们的值就不能变了。要修改某个变量中的字符串值，必须先销毁原始的字符串，然后将包含新值的另一个字符串保存到该变量，如下所示：</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> lang = <span class="string">&quot;Java&quot;</span>;</span><br><span class="line">lang = lang + <span class="string">&quot;Script&quot;</span>; </span><br></pre></td></tr></table></figure>
<h4 id="3-转换为字符串"><a href="#3-转换为字符串" class="headerlink" title="3. 转换为字符串"></a>3. 转换为字符串</h4><h5 id="有两种方式把一个值转换为字符串。首先是使用几乎所有值都有的-toString-方法。这个方法唯一的用途就是返回当前值的字符串等价物。比如："><a href="#有两种方式把一个值转换为字符串。首先是使用几乎所有值都有的-toString-方法。这个方法唯一的用途就是返回当前值的字符串等价物。比如：" class="headerlink" title="有两种方式把一个值转换为字符串。首先是使用几乎所有值都有的 toString()方法。这个方法唯一的用途就是返回当前值的字符串等价物。比如："></a>有两种方式把一个值转换为字符串。首先是使用几乎所有值都有的 toString()方法。这个方法唯一的用途就是返回当前值的字符串等价物。比如：</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> age = <span class="number">11</span>;</span><br><span class="line"><span class="keyword">let</span> ageAsString = age.toString(); <span class="comment">// 字符串&quot;11&quot;</span></span><br><span class="line"><span class="keyword">let</span> found = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">let</span> foundAsString = found.toString(); <span class="comment">// 字符串&quot;true&quot; </span></span><br></pre></td></tr></table></figure>

<h4 id="toString-方法"><a href="#toString-方法" class="headerlink" title="toString()方法"></a>toString()方法</h4><h5 id="可见于数值、布尔值、对象和字符串值。（没错，字符串值也有-toString-方法，该方法只是简单地返回自身的一个副本。）null-和-undefined-值没有-toString-方法。多数情况下，toString-不接收任何参数。不过，在对数值调用这个方法时，toString-可以接收一个底数参数，即以什么底数来输出数值的字符串表示。默认情况下，toString-返回数值的十进制字符串表示。而通过传入参数，可以得到数值的二进制、八进制、十六进制，或者其他任何有效基数的字符串表示，比如："><a href="#可见于数值、布尔值、对象和字符串值。（没错，字符串值也有-toString-方法，该方法只是简单地返回自身的一个副本。）null-和-undefined-值没有-toString-方法。多数情况下，toString-不接收任何参数。不过，在对数值调用这个方法时，toString-可以接收一个底数参数，即以什么底数来输出数值的字符串表示。默认情况下，toString-返回数值的十进制字符串表示。而通过传入参数，可以得到数值的二进制、八进制、十六进制，或者其他任何有效基数的字符串表示，比如：" class="headerlink" title="可见于数值、布尔值、对象和字符串值。（没错，字符串值也有 toString()方法，该方法只是简单地返回自身的一个副本。）null 和 undefined 值没有 toString()方法。多数情况下，toString()不接收任何参数。不过，在对数值调用这个方法时，toString()可以接收一个底数参数，即以什么底数来输出数值的字符串表示。默认情况下，toString()返回数值的十进制字符串表示。而通过传入参数，可以得到数值的二进制、八进制、十六进制，或者其他任何有效基数的字符串表示，比如："></a>可见于数值、布尔值、对象和字符串值。（没错，字符串值也有 toString()方法，该方法只是简单地返回自身的一个副本。）null 和 undefined 值没有 toString()方法。多数情况下，toString()不接收任何参数。不过，在对数值调用这个方法时，toString()可以接收一个底数参数，即以什么底数来输出数值的字符串表示。默认情况下，toString()返回数值的十进制字符串表示。而通过传入参数，可以得到数值的二进制、八进制、十六进制，或者其他任何有效基数的字符串表示，比如：</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num.toString()); <span class="comment">// &quot;10&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(num.toString(<span class="number">2</span>)); <span class="comment">// &quot;1010&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(num.toString(<span class="number">8</span>)); <span class="comment">// &quot;12&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(num.toString(<span class="number">10</span>)); <span class="comment">// &quot;10&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(num.toString(<span class="number">16</span>)); <span class="comment">// &quot;a&quot; </span></span><br></pre></td></tr></table></figure>
<h4 id="4-模板字面量"><a href="#4-模板字面量" class="headerlink" title="4. 模板字面量"></a>4. 模板字面量</h4><h4 id="ECMAScript-6-新增了使用模板字面量定义字符串的能力。与使用单引号或双引号不同，模板字面量保留换行字符，可以跨行定义字符串："><a href="#ECMAScript-6-新增了使用模板字面量定义字符串的能力。与使用单引号或双引号不同，模板字面量保留换行字符，可以跨行定义字符串：" class="headerlink" title="ECMAScript 6 新增了使用模板字面量定义字符串的能力。与使用单引号或双引号不同，模板字面量保留换行字符，可以跨行定义字符串："></a>ECMAScript 6 新增了使用模板字面量定义字符串的能力。与使用单引号或双引号不同，模板字面量保留换行字符，可以跨行定义字符串：</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> myMultiLineString = <span class="string">&#x27;first line\nsecond line&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> myMultiLineTemplateLiteral = <span class="string">`first line</span></span><br><span class="line"><span class="string">second line`</span>;</span><br><span class="line"><span class="built_in">console</span>.log(myMultiLineString);</span><br><span class="line"><span class="comment">// first line</span></span><br><span class="line"><span class="comment">// second line&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(myMultiLineTemplateLiteral);</span><br><span class="line"><span class="comment">// first line </span></span><br><span class="line"><span class="comment">// second line</span></span><br><span class="line"><span class="built_in">console</span>.log(myMultiLineString === myMultiLinetemplateLiteral); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<h4 id="顾名思义，模板字面量在定义模板时特别有用，比如下面这个-HTML-模板："><a href="#顾名思义，模板字面量在定义模板时特别有用，比如下面这个-HTML-模板：" class="headerlink" title="顾名思义，模板字面量在定义模板时特别有用，比如下面这个 HTML 模板："></a>顾名思义，模板字面量在定义模板时特别有用，比如下面这个 HTML 模板：</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">let pageHTML = `</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">span</span>&gt;</span>Jake<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>`; </span><br></pre></td></tr></table></figure>
<h4 id="5-字符串插值"><a href="#5-字符串插值" class="headerlink" title="5. 字符串插值"></a>5. 字符串插值</h4><h5 id="模板字面量最常用的一个特性是支持字符串插值，也就是可以在一个连续定义中插入一个或多个值。技术上讲，模板字面量不是字符串，而是一种特殊的-JavaScript-句法表达式，只不过求值后得到的是字符串。模板字面量在定义时立即求值并转换为字符串实例，任何插入的变量也会从它们最接近的作用域中取值。"><a href="#模板字面量最常用的一个特性是支持字符串插值，也就是可以在一个连续定义中插入一个或多个值。技术上讲，模板字面量不是字符串，而是一种特殊的-JavaScript-句法表达式，只不过求值后得到的是字符串。模板字面量在定义时立即求值并转换为字符串实例，任何插入的变量也会从它们最接近的作用域中取值。" class="headerlink" title="模板字面量最常用的一个特性是支持字符串插值，也就是可以在一个连续定义中插入一个或多个值。技术上讲，模板字面量不是字符串，而是一种特殊的 JavaScript 句法表达式，只不过求值后得到的是字符串。模板字面量在定义时立即求值并转换为字符串实例，任何插入的变量也会从它们最接近的作用域中取值。"></a>模板字面量最常用的一个特性是支持字符串插值，也就是可以在一个连续定义中插入一个或多个值。技术上讲，模板字面量不是字符串，而是一种特殊的 JavaScript 句法表达式，只不过求值后得到的是字符串。模板字面量在定义时立即求值并转换为字符串实例，任何插入的变量也会从它们最接近的作用域中取值。</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> value = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">let</span> exponent = <span class="string">&#x27;second&#x27;</span>;</span><br><span class="line"><span class="comment">// 以前，字符串插值是这样实现的：</span></span><br><span class="line"><span class="keyword">let</span> interpolatedString =</span><br><span class="line"> value + <span class="string">&#x27; to the &#x27;</span> + exponent + <span class="string">&#x27; power is &#x27;</span> + (value * value);</span><br><span class="line"><span class="comment">// 现在，可以用模板字面量这样实现：</span></span><br><span class="line"><span class="keyword">let</span> interpolatedTemplateLiteral =</span><br><span class="line"> <span class="string">`<span class="subst">$&#123; value &#125;</span> to the <span class="subst">$&#123; exponent &#125;</span> power is <span class="subst">$&#123; value * value &#125;</span>`</span>;</span><br><span class="line"><span class="built_in">console</span>.log(interpolatedString); <span class="comment">// 5 to the second power is 25</span></span><br><span class="line"><span class="built_in">console</span>.log(interpolatedTemplateLiteral); <span class="comment">// 5 to the second power is 25 </span></span><br></pre></td></tr></table></figure>
<h5 id="所有插入的值都会使用-toString-强制转型为字符串，而且任何-JavaScript-表达式都可以用于插值。嵌套的模板字符串无须转义："><a href="#所有插入的值都会使用-toString-强制转型为字符串，而且任何-JavaScript-表达式都可以用于插值。嵌套的模板字符串无须转义：" class="headerlink" title="所有插入的值都会使用 toString()强制转型为字符串，而且任何 JavaScript 表达式都可以用于插值。嵌套的模板字符串无须转义："></a>所有插入的值都会使用 toString()强制转型为字符串，而且任何 JavaScript 表达式都可以用于插值。嵌套的模板字符串无须转义：</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">`Hello, <span class="subst">$&#123; <span class="string">`World`</span> &#125;</span>!`</span>); <span class="comment">// Hello, World!</span></span><br></pre></td></tr></table></figure>
<h5 id="将表达式转换为字符串时会调用-toString-："><a href="#将表达式转换为字符串时会调用-toString-：" class="headerlink" title="将表达式转换为字符串时会调用 toString()："></a>将表达式转换为字符串时会调用 toString()：</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> foo = &#123; <span class="attr">toString</span>: <span class="function">() =&gt;</span> <span class="string">&#x27;World&#x27;</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`Hello, <span class="subst">$&#123; foo &#125;</span>!`</span>); <span class="comment">// Hello, World!</span></span><br></pre></td></tr></table></figure>
<h5 id="在插值表达式中可以调用函数和方法："><a href="#在插值表达式中可以调用函数和方法：" class="headerlink" title="在插值表达式中可以调用函数和方法："></a>在插值表达式中可以调用函数和方法：</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">capitalize</span>(<span class="params">word</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123; word[<span class="number">0</span>].toUpperCase() &#125;</span><span class="subst">$&#123; word.slice(<span class="number">1</span>) &#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123; capitalize(<span class="string">&#x27;hello&#x27;</span>) &#125;</span>, <span class="subst">$&#123; capitalize(<span class="string">&#x27;world&#x27;</span>) &#125;</span>!`</span>); <span class="comment">// Hello, World!</span></span><br></pre></td></tr></table></figure>
<h5 id="此外，模板也可以插入自己之前的值："><a href="#此外，模板也可以插入自己之前的值：" class="headerlink" title="此外，模板也可以插入自己之前的值："></a>此外，模板也可以插入自己之前的值：</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> value = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">append</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> value = <span class="string">`<span class="subst">$&#123;value&#125;</span>abc`</span></span><br><span class="line"> <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;</span><br><span class="line">append(); <span class="comment">// abc</span></span><br><span class="line">append(); <span class="comment">// abcabc</span></span><br><span class="line">append(); <span class="comment">// abcabcabc</span></span><br></pre></td></tr></table></figure>
<h4 id="6-模板字面量标签函数"><a href="#6-模板字面量标签函数" class="headerlink" title="6. 模板字面量标签函数"></a>6. 模板字面量标签函数</h4><h5 id="模板字面量也支持定义标签函数（tag-function），而通过标签函数可以自定义插值行为。标签函数会接收被插值记号分隔后的模板和对每个表达式求值的结果。"><a href="#模板字面量也支持定义标签函数（tag-function），而通过标签函数可以自定义插值行为。标签函数会接收被插值记号分隔后的模板和对每个表达式求值的结果。" class="headerlink" title="模板字面量也支持定义标签函数（tag function），而通过标签函数可以自定义插值行为。标签函数会接收被插值记号分隔后的模板和对每个表达式求值的结果。"></a>模板字面量也支持定义标签函数（tag function），而通过标签函数可以自定义插值行为。标签函数会接收被插值记号分隔后的模板和对每个表达式求值的结果。</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">simpleTag</span>(<span class="params">strings, aValExpression, bValExpression, sumExpression</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(strings);</span><br><span class="line">    <span class="built_in">console</span>.log(aValExpression);</span><br><span class="line">    <span class="built_in">console</span>.log(bValExpression);</span><br><span class="line">    <span class="built_in">console</span>.log(sumExpression);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;foobar&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> untaggedResult = <span class="string">`<span class="subst">$&#123; a &#125;</span> + <span class="subst">$&#123; b &#125;</span> = <span class="subst">$&#123; a + b &#125;</span>`</span>;</span><br><span class="line"><span class="keyword">let</span> taggedResult = simpleTag <span class="string">`<span class="subst">$&#123; a &#125;</span> + <span class="subst">$&#123; b &#125;</span> = <span class="subst">$&#123; a + b &#125;</span>`</span>;</span><br><span class="line"><span class="comment">// [&quot;&quot;, &quot; + &quot;, &quot; = &quot;, &quot;&quot;]</span></span><br><span class="line"><span class="comment">// 6</span></span><br><span class="line"><span class="comment">// 9</span></span><br><span class="line"><span class="comment">// 15</span></span><br><span class="line"><span class="built_in">console</span>.log(untaggedResult); <span class="comment">// &quot;6 + 9 = 15&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(taggedResult); <span class="comment">// &quot;foobar&quot; </span></span><br></pre></td></tr></table></figure>
<h5 id="因为表达式参数的数量是可变的，所以通常应该使用剩余操作符（rest-operator）将它们收集到一个数组中："><a href="#因为表达式参数的数量是可变的，所以通常应该使用剩余操作符（rest-operator）将它们收集到一个数组中：" class="headerlink" title="因为表达式参数的数量是可变的，所以通常应该使用剩余操作符（rest operator）将它们收集到一个数组中："></a>因为表达式参数的数量是可变的，所以通常应该使用剩余操作符（rest operator）将它们收集到一个数组中：</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">9</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">simpleTag</span>(<span class="params">strings, ...expressions</span>) </span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(strings);</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">const</span> expression <span class="keyword">of</span> expressions) &#123;</span><br><span class="line"> <span class="built_in">console</span>.log(expression);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> <span class="string">&#x27;foobar&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> taggedResult = simpleTag<span class="string">`<span class="subst">$&#123; a &#125;</span> + <span class="subst">$&#123; b &#125;</span> = <span class="subst">$&#123; a + b &#125;</span>`</span>;</span><br><span class="line"><span class="comment">// [&quot;&quot;, &quot; + &quot;, &quot; = &quot;, &quot;&quot;]</span></span><br><span class="line"><span class="comment">// 6</span></span><br><span class="line"><span class="comment">// 9</span></span><br><span class="line"><span class="comment">// 15</span></span><br><span class="line"><span class="built_in">console</span>.log(taggedResult); <span class="comment">// &quot;foobar&quot;</span></span><br></pre></td></tr></table></figure>
<h5 id="对于有-n-个插值的模板字面量，传给标签函数的表达式参数的个数始终是-n，而传给标签函数的第一个参数所包含的字符串个数则始终是-n-1。因此，如果你想把这些字符串和对表达式求值的结果拼接起来作为默认返回的字符串，可以这样做："><a href="#对于有-n-个插值的模板字面量，传给标签函数的表达式参数的个数始终是-n，而传给标签函数的第一个参数所包含的字符串个数则始终是-n-1。因此，如果你想把这些字符串和对表达式求值的结果拼接起来作为默认返回的字符串，可以这样做：" class="headerlink" title="对于有 n 个插值的模板字面量，传给标签函数的表达式参数的个数始终是 n，而传给标签函数的第一个参数所包含的字符串个数则始终是 n+1。因此，如果你想把这些字符串和对表达式求值的结果拼接起来作为默认返回的字符串，可以这样做："></a>对于有 n 个插值的模板字面量，传给标签函数的表达式参数的个数始终是 n，而传给标签函数的第一个参数所包含的字符串个数则始终是 n+1。因此，如果你想把这些字符串和对表达式求值的结果拼接起来作为默认返回的字符串，可以这样做：</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">9</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">zipTag</span>(<span class="params">strings, ...expressions</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> strings[<span class="number">0</span>] +</span><br><span class="line"> expressions.map(<span class="function">(<span class="params">e, i</span>) =&gt;</span> <span class="string">`<span class="subst">$&#123;e&#125;</span><span class="subst">$&#123;strings[i + <span class="number">1</span>]&#125;</span>`</span>)</span><br><span class="line"> .join(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> untaggedResult = <span class="string">`<span class="subst">$&#123; a &#125;</span> + <span class="subst">$&#123; b &#125;</span> = <span class="subst">$&#123; a + b &#125;</span>`</span>;</span><br><span class="line"><span class="keyword">let</span> taggedResult = zipTag<span class="string">`<span class="subst">$&#123; a &#125;</span> + <span class="subst">$&#123; b &#125;</span> = <span class="subst">$&#123; a + b &#125;</span>`</span>;</span><br><span class="line"><span class="built_in">console</span>.log(untaggedResult); <span class="comment">// &quot;6 + 9 = 15&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(taggedResult); <span class="comment">// &quot;6 + 9 = 15&quot; </span></span><br></pre></td></tr></table></figure>

<h4 id="7-原始字符串"><a href="#7-原始字符串" class="headerlink" title="7. 原始字符串"></a>7. 原始字符串</h4><h5 id="使用模板字面量也可以直接获取原始的模板字面量内容（如换行符或-Unicode-字符），而不是被转换后的字符表示。为此，可以使用默认的-String-raw-标签函数："><a href="#使用模板字面量也可以直接获取原始的模板字面量内容（如换行符或-Unicode-字符），而不是被转换后的字符表示。为此，可以使用默认的-String-raw-标签函数：" class="headerlink" title="使用模板字面量也可以直接获取原始的模板字面量内容（如换行符或 Unicode 字符），而不是被转换后的字符表示。为此，可以使用默认的 String.raw 标签函数："></a>使用模板字面量也可以直接获取原始的模板字面量内容（如换行符或 Unicode 字符），而不是被转换后的字符表示。为此，可以使用默认的 String.raw 标签函数：</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Unicode 示例</span></span><br><span class="line"><span class="comment">// \u00A9 是版权符号</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`\u00A9`</span>); <span class="comment">// ©</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>.raw<span class="string">`\u00A9`</span>); <span class="comment">// \u00A9</span></span><br><span class="line"><span class="comment">// 换行符示例</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`first line\nsecond line`</span>);</span><br><span class="line"><span class="comment">// first line</span></span><br><span class="line"><span class="comment">// second line</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>.raw<span class="string">`first line\nsecond line`</span>); <span class="comment">// &quot;first line\nsecond line&quot; </span></span><br></pre></td></tr></table></figure>

<h3 id="Symbol-类型"><a href="#Symbol-类型" class="headerlink" title="Symbol 类型"></a>Symbol 类型</h3><h5 id="Symbol（符号）是-ECMAScript-6-新增的数据类型。符号是原始值，且符号实例是唯一、不可变的。符号的用途是确保对象属性使用唯一标识符，不会发生属性冲突的危险。"><a href="#Symbol（符号）是-ECMAScript-6-新增的数据类型。符号是原始值，且符号实例是唯一、不可变的。符号的用途是确保对象属性使用唯一标识符，不会发生属性冲突的危险。" class="headerlink" title="Symbol（符号）是 ECMAScript 6 新增的数据类型。符号是原始值，且符号实例是唯一、不可变的。符号的用途是确保对象属性使用唯一标识符，不会发生属性冲突的危险。"></a>Symbol（符号）是 ECMAScript 6 新增的数据类型。符号是原始值，且符号实例是唯一、不可变的。符号的用途是确保对象属性使用唯一标识符，不会发生属性冲突的危险。</h5><h5 id="尽管听起来跟私有属性有点类似，但符号并不是为了提供私有属性的行为才增加的（尤其是因为Object-API-提供了方法，可以更方便地发现符号属性）。相反，符号就是用来创建唯一记号，进而用作非字符串形式的对象属性。"><a href="#尽管听起来跟私有属性有点类似，但符号并不是为了提供私有属性的行为才增加的（尤其是因为Object-API-提供了方法，可以更方便地发现符号属性）。相反，符号就是用来创建唯一记号，进而用作非字符串形式的对象属性。" class="headerlink" title="尽管听起来跟私有属性有点类似，但符号并不是为了提供私有属性的行为才增加的（尤其是因为Object API 提供了方法，可以更方便地发现符号属性）。相反，符号就是用来创建唯一记号，进而用作非字符串形式的对象属性。"></a>尽管听起来跟私有属性有点类似，但符号并不是为了提供私有属性的行为才增加的（尤其是因为Object API 提供了方法，可以更方便地发现符号属性）。相反，符号就是用来创建唯一记号，进而用作非字符串形式的对象属性。</h5><h4 id="1-符号的基本用法"><a href="#1-符号的基本用法" class="headerlink" title="1. 符号的基本用法"></a>1. 符号的基本用法</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> sym = <span class="built_in">Symbol</span>();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> sym); <span class="comment">// symbol </span></span><br></pre></td></tr></table></figure>
<h5 id="调用-Symbol-函数时，也可以传入一个字符串参数作为对符号的描述（description），将来可以通过这个字符串来调试代码。但是，这个字符串参数与符号定义或标识完全无关："><a href="#调用-Symbol-函数时，也可以传入一个字符串参数作为对符号的描述（description），将来可以通过这个字符串来调试代码。但是，这个字符串参数与符号定义或标识完全无关：" class="headerlink" title="调用 Symbol()函数时，也可以传入一个字符串参数作为对符号的描述（description），将来可以通过这个字符串来调试代码。但是，这个字符串参数与符号定义或标识完全无关："></a>调用 Symbol()函数时，也可以传入一个字符串参数作为对符号的描述（description），将来可以通过这个字符串来调试代码。但是，这个字符串参数与符号定义或标识完全无关：</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> genericSymbol = <span class="built_in">Symbol</span>();</span><br><span class="line"><span class="keyword">let</span> otherGenericSymbol = <span class="built_in">Symbol</span>();</span><br><span class="line"><span class="keyword">let</span> fooSymbol = <span class="built_in">Symbol</span>(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> otherFooSymbol = <span class="built_in">Symbol</span>(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(genericSymbol == otherGenericSymbol); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(fooSymbol == otherFooSymbol); <span class="comment">// false </span></span><br></pre></td></tr></table></figure>
<h5 id="符号没有字面量语法，这也是它们发挥作用的关键。按照规范，你只要创建-Symbol-实例并将其用作对象的新属性，就可以保证它不会覆盖已有的对象属性，无论是符号属性还是字符串属性。"><a href="#符号没有字面量语法，这也是它们发挥作用的关键。按照规范，你只要创建-Symbol-实例并将其用作对象的新属性，就可以保证它不会覆盖已有的对象属性，无论是符号属性还是字符串属性。" class="headerlink" title="符号没有字面量语法，这也是它们发挥作用的关键。按照规范，你只要创建 Symbol()实例并将其用作对象的新属性，就可以保证它不会覆盖已有的对象属性，无论是符号属性还是字符串属性。"></a>符号没有字面量语法，这也是它们发挥作用的关键。按照规范，你只要创建 Symbol()实例并将其用作对象的新属性，就可以保证它不会覆盖已有的对象属性，无论是符号属性还是字符串属性。</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> genericSymbol = <span class="built_in">Symbol</span>();</span><br><span class="line"><span class="built_in">console</span>.log(genericSymbol); <span class="comment">// Symbol()</span></span><br><span class="line"><span class="keyword">let</span> fooSymbol = <span class="built_in">Symbol</span>(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(fooSymbol); <span class="comment">// Symbol(foo);</span></span><br></pre></td></tr></table></figure>
<h5 id="最重要的是，Symbol-函数不能与-new-关键字一起作为构造函数使用。这样做是为了避免创建符号包装对象，像使用-Boolean、String-或-Number-那样，它们都支持构造函数且可用于初始化包含原始值的包装对象："><a href="#最重要的是，Symbol-函数不能与-new-关键字一起作为构造函数使用。这样做是为了避免创建符号包装对象，像使用-Boolean、String-或-Number-那样，它们都支持构造函数且可用于初始化包含原始值的包装对象：" class="headerlink" title="最重要的是，Symbol()函数不能与 new 关键字一起作为构造函数使用。这样做是为了避免创建符号包装对象，像使用 Boolean、String 或 Number 那样，它们都支持构造函数且可用于初始化包含原始值的包装对象："></a>最重要的是，Symbol()函数不能与 new 关键字一起作为构造函数使用。这样做是为了避免创建符号包装对象，像使用 Boolean、String 或 Number 那样，它们都支持构造函数且可用于初始化包含原始值的包装对象：</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> myBoolean = <span class="keyword">new</span> <span class="built_in">Boolean</span>();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> myBoolean); <span class="comment">// &quot;object&quot;</span></span><br><span class="line"><span class="keyword">let</span> myString = <span class="keyword">new</span> <span class="built_in">String</span>();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> myString); <span class="comment">// &quot;object&quot;</span></span><br><span class="line"><span class="keyword">let</span> myNumber = <span class="keyword">new</span> <span class="built_in">Number</span>();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> myNumber); <span class="comment">// &quot;object&quot;</span></span><br><span class="line"><span class="keyword">let</span> mySymbol = <span class="keyword">new</span> <span class="built_in">Symbol</span>(); <span class="comment">// TypeError: Symbol is not a constructor </span></span><br></pre></td></tr></table></figure>

<h5 id="如果你确实想使用符号包装对象，可以借用-Object-函数："><a href="#如果你确实想使用符号包装对象，可以借用-Object-函数：" class="headerlink" title="如果你确实想使用符号包装对象，可以借用 Object()函数："></a>如果你确实想使用符号包装对象，可以借用 Object()函数：</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> mySymbol = <span class="built_in">Symbol</span>();</span><br><span class="line"><span class="keyword">let</span> myWrappedSymbol = <span class="built_in">Object</span>(mySymbol);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> myWrappedSymbol); <span class="comment">// &quot;object&quot; </span></span><br></pre></td></tr></table></figure>
<h4 id="2-使用全局符号注册表"><a href="#2-使用全局符号注册表" class="headerlink" title="2. 使用全局符号注册表"></a>2. 使用全局符号注册表</h4><h5 id="如果运行时的不同部分需要共享和重用符号实例，那么可以用一个字符串作为键，在全局符号注册表中创建并重用符号。"><a href="#如果运行时的不同部分需要共享和重用符号实例，那么可以用一个字符串作为键，在全局符号注册表中创建并重用符号。" class="headerlink" title="如果运行时的不同部分需要共享和重用符号实例，那么可以用一个字符串作为键，在全局符号注册表中创建并重用符号。"></a>如果运行时的不同部分需要共享和重用符号实例，那么可以用一个字符串作为键，在全局符号注册表中创建并重用符号。</h5><h5 id="为此，需要使用-Symbol-for-方法："><a href="#为此，需要使用-Symbol-for-方法：" class="headerlink" title="为此，需要使用 Symbol.for()方法："></a>为此，需要使用 Symbol.for()方法：</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> fooGlobalSymbol = <span class="built_in">Symbol</span>.for(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> fooGlobalSymbol); <span class="comment">// symbol </span></span><br></pre></td></tr></table></figure>
<h5 id="Symbol-for-对每个字符串键都执行幂等操作。第一次使用某个字符串调用时，它会检查全局运行时注册表，发现不存在对应的符号，于是就会生成一个新符号实例并添加到注册表中。后续使用相同字符串的调用同样会检查注册表，发现存在与该字符串对应的符号，然后就会返回该符号实例。"><a href="#Symbol-for-对每个字符串键都执行幂等操作。第一次使用某个字符串调用时，它会检查全局运行时注册表，发现不存在对应的符号，于是就会生成一个新符号实例并添加到注册表中。后续使用相同字符串的调用同样会检查注册表，发现存在与该字符串对应的符号，然后就会返回该符号实例。" class="headerlink" title="Symbol.for()对每个字符串键都执行幂等操作。第一次使用某个字符串调用时，它会检查全局运行时注册表，发现不存在对应的符号，于是就会生成一个新符号实例并添加到注册表中。后续使用相同字符串的调用同样会检查注册表，发现存在与该字符串对应的符号，然后就会返回该符号实例。"></a>Symbol.for()对每个字符串键都执行幂等操作。第一次使用某个字符串调用时，它会检查全局运行时注册表，发现不存在对应的符号，于是就会生成一个新符号实例并添加到注册表中。后续使用相同字符串的调用同样会检查注册表，发现存在与该字符串对应的符号，然后就会返回该符号实例。</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> fooGlobalSymbol = <span class="built_in">Symbol</span>.for(<span class="string">&#x27;foo&#x27;</span>); <span class="comment">// 创建新符号</span></span><br><span class="line"><span class="keyword">let</span> otherFooGlobalSymbol = <span class="built_in">Symbol</span>.for(<span class="string">&#x27;foo&#x27;</span>); <span class="comment">// 重用已有符号</span></span><br><span class="line"><span class="built_in">console</span>.log(fooGlobalSymbol === otherFooGlobalSymbol); <span class="comment">// true </span></span><br></pre></td></tr></table></figure>
<h5 id="即使采用相同的符号描述，在全局注册表中定义的符号跟使用-Symbol-定义的符号也并不等同："><a href="#即使采用相同的符号描述，在全局注册表中定义的符号跟使用-Symbol-定义的符号也并不等同：" class="headerlink" title="即使采用相同的符号描述，在全局注册表中定义的符号跟使用 Symbol()定义的符号也并不等同："></a>即使采用相同的符号描述，在全局注册表中定义的符号跟使用 Symbol()定义的符号也并不等同：</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> localSymbol = <span class="built_in">Symbol</span>(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> globalSymbol = <span class="built_in">Symbol</span>.for(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(localSymbol === globalSymbol); <span class="comment">// false </span></span><br></pre></td></tr></table></figure>
<h5 id="全局注册表中的符号必须使用字符串键来创建，因此作为参数传给-Symbol-for-的任何值都会被转换为字符串。此外，注册表中使用的键同时也会被用作符号描述。"><a href="#全局注册表中的符号必须使用字符串键来创建，因此作为参数传给-Symbol-for-的任何值都会被转换为字符串。此外，注册表中使用的键同时也会被用作符号描述。" class="headerlink" title="全局注册表中的符号必须使用字符串键来创建，因此作为参数传给 Symbol.for()的任何值都会被转换为字符串。此外，注册表中使用的键同时也会被用作符号描述。"></a>全局注册表中的符号必须使用字符串键来创建，因此作为参数传给 Symbol.for()的任何值都会被转换为字符串。此外，注册表中使用的键同时也会被用作符号描述。</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> emptyGlobalSymbol = <span class="built_in">Symbol</span>.for();</span><br><span class="line"><span class="built_in">console</span>.log(emptyGlobalSymbol); <span class="comment">// Symbol(undefined) </span></span><br></pre></td></tr></table></figure>
<h5 id="还可以使用-Symbol-keyFor-来查询全局注册表，这个方法接收符号，返回该全局符号对应的字符串键。如果查询的不是全局符号，则返回-undefined。"><a href="#还可以使用-Symbol-keyFor-来查询全局注册表，这个方法接收符号，返回该全局符号对应的字符串键。如果查询的不是全局符号，则返回-undefined。" class="headerlink" title="还可以使用 Symbol.keyFor()来查询全局注册表，这个方法接收符号，返回该全局符号对应的字符串键。如果查询的不是全局符号，则返回 undefined。"></a>还可以使用 Symbol.keyFor()来查询全局注册表，这个方法接收符号，返回该全局符号对应的字符串键。如果查询的不是全局符号，则返回 undefined。</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建全局符号</span></span><br><span class="line"><span class="keyword">let</span> s = <span class="built_in">Symbol</span>.for(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Symbol</span>.keyFor(s)); <span class="comment">// foo</span></span><br><span class="line"><span class="comment">// 创建普通符号</span></span><br><span class="line"><span class="keyword">let</span> s2 = <span class="built_in">Symbol</span>(<span class="string">&#x27;bar&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Symbol</span>.keyFor(s2)); <span class="comment">// undefined </span></span><br></pre></td></tr></table></figure>
<h5 id="如果传给-Symbol-keyFor-的不是符号，则该方法抛出-TypeError："><a href="#如果传给-Symbol-keyFor-的不是符号，则该方法抛出-TypeError：" class="headerlink" title="如果传给 Symbol.keyFor()的不是符号，则该方法抛出 TypeError："></a>如果传给 Symbol.keyFor()的不是符号，则该方法抛出 TypeError：</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Symbol</span>.keyFor(<span class="number">123</span>); <span class="comment">// TypeError: 123 is not a symbol</span></span><br></pre></td></tr></table></figure>

<h4 id="3-使用符号作为属性"><a href="#3-使用符号作为属性" class="headerlink" title="3. 使用符号作为属性"></a>3. 使用符号作为属性</h4><h5 id="凡是可以使用字符串或数值作为属性的地方，都可以使用符号。这就包括了对象字面量属性和Object-defineProperty-Object-defineProperties-定义的属性。对象字面量只能在计算属性语法中使用符号作为属性。"><a href="#凡是可以使用字符串或数值作为属性的地方，都可以使用符号。这就包括了对象字面量属性和Object-defineProperty-Object-defineProperties-定义的属性。对象字面量只能在计算属性语法中使用符号作为属性。" class="headerlink" title="凡是可以使用字符串或数值作为属性的地方，都可以使用符号。这就包括了对象字面量属性和Object.defineProperty()/Object.defineProperties()定义的属性。对象字面量只能在计算属性语法中使用符号作为属性。"></a>凡是可以使用字符串或数值作为属性的地方，都可以使用符号。这就包括了对象字面量属性和Object.defineProperty()/Object.defineProperties()定义的属性。对象字面量只能在计算属性语法中使用符号作为属性。</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> s1 = <span class="built_in">Symbol</span>(<span class="string">&#x27;foo&#x27;</span>),</span><br><span class="line"> s2 = <span class="built_in">Symbol</span>(<span class="string">&#x27;bar&#x27;</span>),</span><br><span class="line"> s3 = <span class="built_in">Symbol</span>(<span class="string">&#x27;baz&#x27;</span>),</span><br><span class="line"> s4 = <span class="built_in">Symbol</span>(<span class="string">&#x27;qux&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> o = &#123;</span><br><span class="line"> [s1]: <span class="string">&#x27;foo val&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 这样也可以：o[s1] = &#x27;foo val&#x27;;</span></span><br><span class="line"><span class="built_in">console</span>.log(o);</span><br><span class="line"><span class="comment">// &#123;Symbol(foo): foo val&#125;</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(o, s2, &#123;<span class="attr">value</span>: <span class="string">&#x27;bar val&#x27;</span>&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(o);</span><br><span class="line"><span class="comment">// &#123;Symbol(foo): foo val, Symbol(bar): bar val&#125;</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperties(o, &#123;</span><br><span class="line"> [s3]: &#123;<span class="attr">value</span>: <span class="string">&#x27;baz val&#x27;</span>&#125;,</span><br><span class="line"> [s4]: &#123;<span class="attr">value</span>: <span class="string">&#x27;qux val&#x27;</span>&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(o);</span><br><span class="line"><span class="comment">// &#123;Symbol(foo): foo val, Symbol(bar): bar val,</span></span><br><span class="line"><span class="comment">// Symbol(baz): baz val, Symbol(qux): qux val&#125;</span></span><br></pre></td></tr></table></figure>
<h5 id="类似于-Object-getOwnPropertyNames-返回对象实例的常规属性数组，Object-getOwnPropertySymbols-返回对象实例的符号属性数组。这两个方法的返回值彼此互斥。Object-getOwnPropertyDescriptors-会返回同时包含常规和符号属性描述符的对象。Reflect-ownKeys-会返回两种类型的键："><a href="#类似于-Object-getOwnPropertyNames-返回对象实例的常规属性数组，Object-getOwnPropertySymbols-返回对象实例的符号属性数组。这两个方法的返回值彼此互斥。Object-getOwnPropertyDescriptors-会返回同时包含常规和符号属性描述符的对象。Reflect-ownKeys-会返回两种类型的键：" class="headerlink" title="类似于 Object.getOwnPropertyNames()返回对象实例的常规属性数组，Object.getOwnPropertySymbols()返回对象实例的符号属性数组。这两个方法的返回值彼此互斥。Object.getOwnPropertyDescriptors()会返回同时包含常规和符号属性描述符的对象。Reflect.ownKeys()会返回两种类型的键："></a>类似于 Object.getOwnPropertyNames()返回对象实例的常规属性数组，Object.getOwnPropertySymbols()返回对象实例的符号属性数组。这两个方法的返回值彼此互斥。Object.getOwnPropertyDescriptors()会返回同时包含常规和符号属性描述符的对象。Reflect.ownKeys()会返回两种类型的键：</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> s1 = <span class="built_in">Symbol</span>(<span class="string">&#x27;foo&#x27;</span>),</span><br><span class="line"> s2 = <span class="built_in">Symbol</span>(<span class="string">&#x27;bar&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> o = &#123;</span><br><span class="line"> [s1]: <span class="string">&#x27;foo val&#x27;</span>,</span><br><span class="line"> [s2]: <span class="string">&#x27;bar val&#x27;</span>,</span><br><span class="line"> baz: <span class="string">&#x27;baz val&#x27;</span>,</span><br><span class="line"> qux: <span class="string">&#x27;qux val&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertySymbols(o));</span><br><span class="line"><span class="comment">// [Symbol(foo), Symbol(bar)]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertyNames(o));</span><br><span class="line"><span class="comment">// [&quot;baz&quot;, &quot;qux&quot;]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertyDescriptors(o));</span><br><span class="line"><span class="comment">// &#123;baz: &#123;...&#125;, qux: &#123;...&#125;, Symbol(foo): &#123;...&#125;, Symbol(bar): &#123;...&#125;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Reflect</span>.ownKeys(o));</span><br><span class="line"><span class="comment">// [&quot;baz&quot;, &quot;qux&quot;, Symbol(foo), Symbol(bar)] </span></span><br></pre></td></tr></table></figure>
<h5 id="因为符号属性是对内存中符号的一个引用，所以直接创建并用作属性的符号不会丢失。但是，如果没有显式地保存对这些属性的引用，那么必须遍历对象的所有符号属性才能找到相应的属性键："><a href="#因为符号属性是对内存中符号的一个引用，所以直接创建并用作属性的符号不会丢失。但是，如果没有显式地保存对这些属性的引用，那么必须遍历对象的所有符号属性才能找到相应的属性键：" class="headerlink" title="因为符号属性是对内存中符号的一个引用，所以直接创建并用作属性的符号不会丢失。但是，如果没有显式地保存对这些属性的引用，那么必须遍历对象的所有符号属性才能找到相应的属性键："></a>因为符号属性是对内存中符号的一个引用，所以直接创建并用作属性的符号不会丢失。但是，如果没有显式地保存对这些属性的引用，那么必须遍历对象的所有符号属性才能找到相应的属性键：</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> o = &#123;</span><br><span class="line"> [<span class="built_in">Symbol</span>(<span class="string">&#x27;foo&#x27;</span>)]: <span class="string">&#x27;foo val&#x27;</span>,</span><br><span class="line"> [<span class="built_in">Symbol</span>(<span class="string">&#x27;bar&#x27;</span>)]: <span class="string">&#x27;bar val&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(o);</span><br><span class="line"><span class="comment">// &#123;Symbol(foo): &quot;foo val&quot;, Symbol(bar): &quot;bar val&quot;&#125;</span></span><br><span class="line"><span class="keyword">let</span> barSymbol = <span class="built_in">Object</span>.getOwnPropertySymbols(o)</span><br><span class="line"> .find(<span class="function">(<span class="params">symbol</span>) =&gt;</span> symbol.toString().match(<span class="regexp">/bar/</span>));</span><br><span class="line"><span class="built_in">console</span>.log(barSymbol);</span><br><span class="line"><span class="comment">// Symbol(bar) </span></span><br></pre></td></tr></table></figure>

<h4 id="4-常用内置符号"><a href="#4-常用内置符号" class="headerlink" title="4. 常用内置符号"></a>4. 常用内置符号</h4><h5 id="ECMAScript-6-也引入了一批常用内置符号（well-known-symbol），用于暴露语言内部行为，开发者可以直接访问、重写或模拟这些行为。这些内置符号都以-Symbol-工厂函数字符串属性的形式存在。"><a href="#ECMAScript-6-也引入了一批常用内置符号（well-known-symbol），用于暴露语言内部行为，开发者可以直接访问、重写或模拟这些行为。这些内置符号都以-Symbol-工厂函数字符串属性的形式存在。" class="headerlink" title="ECMAScript 6 也引入了一批常用内置符号（well-known symbol），用于暴露语言内部行为，开发者可以直接访问、重写或模拟这些行为。这些内置符号都以 Symbol 工厂函数字符串属性的形式存在。"></a>ECMAScript 6 也引入了一批常用内置符号（well-known symbol），用于暴露语言内部行为，开发者可以直接访问、重写或模拟这些行为。这些内置符号都以 Symbol 工厂函数字符串属性的形式存在。</h5><h5 id="这些内置符号最重要的用途之一是重新定义它们，从而改变原生结构的行为。比如，我们知道for-of-循环会在相关对象上使用-Symbol-iterator-属性，那么就可以通过在自定义对象上重新定义Symbol-iterator-的值，来改变-for-of-在迭代该对象时的行为。这些内置符号也没有什么特别之处，它们就是全局函数-Symbol-的普通字符串属性，指向一个符号的实例。所有内置符号属性都是不可写、不可枚举、不可配置的。"><a href="#这些内置符号最重要的用途之一是重新定义它们，从而改变原生结构的行为。比如，我们知道for-of-循环会在相关对象上使用-Symbol-iterator-属性，那么就可以通过在自定义对象上重新定义Symbol-iterator-的值，来改变-for-of-在迭代该对象时的行为。这些内置符号也没有什么特别之处，它们就是全局函数-Symbol-的普通字符串属性，指向一个符号的实例。所有内置符号属性都是不可写、不可枚举、不可配置的。" class="headerlink" title="这些内置符号最重要的用途之一是重新定义它们，从而改变原生结构的行为。比如，我们知道for-of 循环会在相关对象上使用 Symbol.iterator 属性，那么就可以通过在自定义对象上重新定义Symbol.iterator 的值，来改变 for-of 在迭代该对象时的行为。这些内置符号也没有什么特别之处，它们就是全局函数 Symbol 的普通字符串属性，指向一个符号的实例。所有内置符号属性都是不可写、不可枚举、不可配置的。"></a>这些内置符号最重要的用途之一是重新定义它们，从而改变原生结构的行为。比如，我们知道for-of 循环会在相关对象上使用 Symbol.iterator 属性，那么就可以通过在自定义对象上重新定义Symbol.iterator 的值，来改变 for-of 在迭代该对象时的行为。这些内置符号也没有什么特别之处，它们就是全局函数 Symbol 的普通字符串属性，指向一个符号的实例。所有内置符号属性都是不可写、不可枚举、不可配置的。</h5><h4 id="5-Symbol-asyncIterator"><a href="#5-Symbol-asyncIterator" class="headerlink" title="5. Symbol.asyncIterator"></a>5. Symbol.asyncIterator</h4><h5 id="根据-ECMAScript-规范，这个符号作为一个属性表示“一个方法，该方法返回对象默认的-AsyncIterator。由-for-await-of-语句使用”。换句话说，这个符号表示实现异步迭代器-API-的函数。"><a href="#根据-ECMAScript-规范，这个符号作为一个属性表示“一个方法，该方法返回对象默认的-AsyncIterator。由-for-await-of-语句使用”。换句话说，这个符号表示实现异步迭代器-API-的函数。" class="headerlink" title="根据 ECMAScript 规范，这个符号作为一个属性表示“一个方法，该方法返回对象默认的 AsyncIterator。由 for-await-of 语句使用”。换句话说，这个符号表示实现异步迭代器 API 的函数。"></a>根据 ECMAScript 规范，这个符号作为一个属性表示“一个方法，该方法返回对象默认的 AsyncIterator。由 for-await-of 语句使用”。换句话说，这个符号表示实现异步迭代器 API 的函数。</h5><h5 id="for-await-of-循环会利用这个函数执行异步迭代操作。循环时，它们会调用以-Symbol-asyncIterator为键的函数，并期望这个函数会返回一个实现迭代器-API-的对象。很多时候，返回的对象是实现该-API的-AsyncGenerator："><a href="#for-await-of-循环会利用这个函数执行异步迭代操作。循环时，它们会调用以-Symbol-asyncIterator为键的函数，并期望这个函数会返回一个实现迭代器-API-的对象。很多时候，返回的对象是实现该-API的-AsyncGenerator：" class="headerlink" title="for-await-of 循环会利用这个函数执行异步迭代操作。循环时，它们会调用以 Symbol.asyncIterator为键的函数，并期望这个函数会返回一个实现迭代器 API 的对象。很多时候，返回的对象是实现该 API的 AsyncGenerator："></a>for-await-of 循环会利用这个函数执行异步迭代操作。循环时，它们会调用以 Symbol.asyncIterator为键的函数，并期望这个函数会返回一个实现迭代器 API 的对象。很多时候，返回的对象是实现该 API的 AsyncGenerator：</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line"> <span class="keyword">async</span> *[<span class="built_in">Symbol</span>.asyncIterator]() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> f = <span class="keyword">new</span> Foo();</span><br><span class="line"><span class="built_in">console</span>.log(f[<span class="built_in">Symbol</span>.asyncIterator]());</span><br><span class="line"><span class="comment">// AsyncGenerator &#123;&lt;suspended&gt;&#125; </span></span><br></pre></td></tr></table></figure>
<h5 id="技术上，这个由-Symbol-asyncIterator-函数生成的对象应该通过其-next-方法陆续返回Promise-实例。可以通过显式地调用-next-方法返回，也可以隐式地通过异步生成器函数返回："><a href="#技术上，这个由-Symbol-asyncIterator-函数生成的对象应该通过其-next-方法陆续返回Promise-实例。可以通过显式地调用-next-方法返回，也可以隐式地通过异步生成器函数返回：" class="headerlink" title="技术上，这个由 Symbol.asyncIterator 函数生成的对象应该通过其 next()方法陆续返回Promise 实例。可以通过显式地调用 next()方法返回，也可以隐式地通过异步生成器函数返回："></a>技术上，这个由 Symbol.asyncIterator 函数生成的对象应该通过其 next()方法陆续返回Promise 实例。可以通过显式地调用 next()方法返回，也可以隐式地通过异步生成器函数返回：</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Emitter</span> </span>&#123;</span><br><span class="line"> <span class="keyword">constructor</span>(max) &#123;</span><br><span class="line"> <span class="built_in">this</span>.max = max;</span><br><span class="line"> <span class="built_in">this</span>.asyncIdx = <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">async</span> *[<span class="built_in">Symbol</span>.asyncIterator]() &#123;</span><br><span class="line"> <span class="keyword">while</span>(<span class="built_in">this</span>.asyncIdx &lt; <span class="built_in">this</span>.max) &#123;</span><br><span class="line"> <span class="keyword">yield</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> resolve(<span class="built_in">this</span>.asyncIdx++));</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">asyncCount</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">let</span> emitter = <span class="keyword">new</span> Emitter(<span class="number">5</span>);</span><br><span class="line"> <span class="keyword">for</span> <span class="keyword">await</span>(<span class="keyword">const</span> x <span class="keyword">of</span> emitter) &#123;</span><br><span class="line"> <span class="built_in">console</span>.log(x);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">asyncCount();</span><br><span class="line"><span class="comment">// 0</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="comment">// 4</span></span><br></pre></td></tr></table></figure>
<h4 id="注意-Symbol-asyncIterator-是-ES2018-规范定义的，因此只有版本非常新的浏览器支持它。"><a href="#注意-Symbol-asyncIterator-是-ES2018-规范定义的，因此只有版本非常新的浏览器支持它。" class="headerlink" title="注意 Symbol.asyncIterator 是 ES2018 规范定义的，因此只有版本非常新的浏览器支持它。"></a>注意 Symbol.asyncIterator 是 ES2018 规范定义的，因此只有版本非常新的浏览器支持它。</h4><h4 id="6-Symbol-hasInstance"><a href="#6-Symbol-hasInstance" class="headerlink" title="6. Symbol.hasInstance"></a>6. Symbol.hasInstance</h4><h5 id="根据-ECMAScript-规范，这个符号作为一个属性表示“一个方法，该方法决定一个构造器对象是否认可一个对象是它的实例。由-instanceof-操作符使用”。instanceof-操作符可以用来确定一个对象实例的原型链上是否有原型。instanceof-的典型使用场景如下："><a href="#根据-ECMAScript-规范，这个符号作为一个属性表示“一个方法，该方法决定一个构造器对象是否认可一个对象是它的实例。由-instanceof-操作符使用”。instanceof-操作符可以用来确定一个对象实例的原型链上是否有原型。instanceof-的典型使用场景如下：" class="headerlink" title="根据 ECMAScript 规范，这个符号作为一个属性表示“一个方法，该方法决定一个构造器对象是否认可一个对象是它的实例。由 instanceof 操作符使用”。instanceof 操作符可以用来确定一个对象实例的原型链上是否有原型。instanceof 的典型使用场景如下："></a>根据 ECMAScript 规范，这个符号作为一个属性表示“一个方法，该方法决定一个构造器对象是否认可一个对象是它的实例。由 instanceof 操作符使用”。instanceof 操作符可以用来确定一个对象实例的原型链上是否有原型。instanceof 的典型使用场景如下：</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">let</span> f = <span class="keyword">new</span> Foo();</span><br><span class="line"><span class="built_in">console</span>.log(f <span class="keyword">instanceof</span> Foo); <span class="comment">// true</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bar</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> Bar();</span><br><span class="line"><span class="built_in">console</span>.log(b <span class="keyword">instanceof</span> Bar); <span class="comment">// true </span></span><br></pre></td></tr></table></figure>
<h5 id="在-ES6-中，instanceof-操作符会使用-Symbol-hasInstance-函数来确定关系。以-Symbol-hasInstance-为键的函数会执行同样的操作，只是操作数对调了一下："><a href="#在-ES6-中，instanceof-操作符会使用-Symbol-hasInstance-函数来确定关系。以-Symbol-hasInstance-为键的函数会执行同样的操作，只是操作数对调了一下：" class="headerlink" title="在 ES6 中，instanceof 操作符会使用 Symbol.hasInstance 函数来确定关系。以 Symbol.hasInstance 为键的函数会执行同样的操作，只是操作数对调了一下："></a>在 ES6 中，instanceof 操作符会使用 Symbol.hasInstance 函数来确定关系。以 Symbol.hasInstance 为键的函数会执行同样的操作，只是操作数对调了一下：</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">let</span> f = <span class="keyword">new</span> Foo();</span><br><span class="line"><span class="built_in">console</span>.log(Foo[<span class="built_in">Symbol</span>.hasInstance](f)); <span class="comment">// true</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bar</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> Bar();</span><br><span class="line"><span class="built_in">console</span>.log(Bar[<span class="built_in">Symbol</span>.hasInstance](b)); <span class="comment">// true </span></span><br></pre></td></tr></table></figure>
<h5 id="这个属性定义在-Function-的原型上，因此默认在所有函数和类上都可以调用。由于-instanceof操作符会在原型链上寻找这个属性定义，就跟在原型链上寻找其他属性一样，因此可以在继承的类上通过静态方法重新定义这个函数："><a href="#这个属性定义在-Function-的原型上，因此默认在所有函数和类上都可以调用。由于-instanceof操作符会在原型链上寻找这个属性定义，就跟在原型链上寻找其他属性一样，因此可以在继承的类上通过静态方法重新定义这个函数：" class="headerlink" title="这个属性定义在 Function 的原型上，因此默认在所有函数和类上都可以调用。由于 instanceof操作符会在原型链上寻找这个属性定义，就跟在原型链上寻找其他属性一样，因此可以在继承的类上通过静态方法重新定义这个函数："></a>这个属性定义在 Function 的原型上，因此默认在所有函数和类上都可以调用。由于 instanceof操作符会在原型链上寻找这个属性定义，就跟在原型链上寻找其他属性一样，因此可以在继承的类上通过静态方法重新定义这个函数：</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bar</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Baz</span> <span class="keyword">extends</span> <span class="title">Bar</span> </span>&#123;</span><br><span class="line"> <span class="keyword">static</span> [<span class="built_in">Symbol</span>.hasInstance]() &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> Baz();</span><br><span class="line"><span class="built_in">console</span>.log(Bar[<span class="built_in">Symbol</span>.hasInstance](b)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(b <span class="keyword">instanceof</span> Bar); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(Baz[<span class="built_in">Symbol</span>.hasInstance](b)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(b <span class="keyword">instanceof</span> Baz); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
<h4 id="7-Symbol-isConcatSpreadable"><a href="#7-Symbol-isConcatSpreadable" class="headerlink" title="7. Symbol.isConcatSpreadable"></a>7. Symbol.isConcatSpreadable</h4><h5 id="根据-ECMAScript-规范，这个符号作为一个属性表示“一个布尔值，如果是-true，则意味着对象应该用-Array-prototype-concat-打平其数组元素”。ES6-中的-Array-prototype-concat-方法会根据接收到的对象类型选择如何将一个类数组对象拼接成数组实例。覆盖-Symbol-isConcatSpreadable-的值可以修改这个行为。"><a href="#根据-ECMAScript-规范，这个符号作为一个属性表示“一个布尔值，如果是-true，则意味着对象应该用-Array-prototype-concat-打平其数组元素”。ES6-中的-Array-prototype-concat-方法会根据接收到的对象类型选择如何将一个类数组对象拼接成数组实例。覆盖-Symbol-isConcatSpreadable-的值可以修改这个行为。" class="headerlink" title="根据 ECMAScript 规范，这个符号作为一个属性表示“一个布尔值，如果是 true，则意味着对象应该用 Array.prototype.concat()打平其数组元素”。ES6 中的 Array.prototype.concat()方法会根据接收到的对象类型选择如何将一个类数组对象拼接成数组实例。覆盖 Symbol.isConcatSpreadable 的值可以修改这个行为。"></a>根据 ECMAScript 规范，这个符号作为一个属性表示“一个布尔值，如果是 true，则意味着对象应该用 Array.prototype.concat()打平其数组元素”。ES6 中的 Array.prototype.concat()方法会根据接收到的对象类型选择如何将一个类数组对象拼接成数组实例。覆盖 Symbol.isConcatSpreadable 的值可以修改这个行为。</h5><h5 id="数组对象默认情况下会被打平到已有的数组，false-或假值会导致整个对象被追加到数组末尾。类数组对象默认情况下会被追加到数组末尾，true-或真值会导致这个类数组对象被打平到数组实例。其他不是类数组对象的对象在-Symbol-isConcatSpreadable-被设置为-true-的情况下将被忽略。"><a href="#数组对象默认情况下会被打平到已有的数组，false-或假值会导致整个对象被追加到数组末尾。类数组对象默认情况下会被追加到数组末尾，true-或真值会导致这个类数组对象被打平到数组实例。其他不是类数组对象的对象在-Symbol-isConcatSpreadable-被设置为-true-的情况下将被忽略。" class="headerlink" title="数组对象默认情况下会被打平到已有的数组，false 或假值会导致整个对象被追加到数组末尾。类数组对象默认情况下会被追加到数组末尾，true 或真值会导致这个类数组对象被打平到数组实例。其他不是类数组对象的对象在 Symbol.isConcatSpreadable 被设置为 true 的情况下将被忽略。"></a>数组对象默认情况下会被打平到已有的数组，false 或假值会导致整个对象被追加到数组末尾。类数组对象默认情况下会被追加到数组末尾，true 或真值会导致这个类数组对象被打平到数组实例。其他不是类数组对象的对象在 Symbol.isConcatSpreadable 被设置为 true 的情况下将被忽略。</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> initial = [<span class="string">&#x27;foo&#x27;</span>];</span><br><span class="line"><span class="keyword">let</span> array = [<span class="string">&#x27;bar&#x27;</span>];</span><br><span class="line"><span class="built_in">console</span>.log(array[<span class="built_in">Symbol</span>.isConcatSpreadable]); <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(initial.concat(array)); <span class="comment">// [&#x27;foo&#x27;, &#x27;bar&#x27;]</span></span><br><span class="line">array[<span class="built_in">Symbol</span>.isConcatSpreadable] = <span class="literal">false</span>;</span><br><span class="line"><span class="built_in">console</span>.log(initial.concat(array)); <span class="comment">// [&#x27;foo&#x27;, Array(1)] </span></span><br><span class="line"><span class="keyword">let</span> arrayLikeObject = &#123; <span class="attr">length</span>: <span class="number">1</span>, <span class="number">0</span>: <span class="string">&#x27;baz&#x27;</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(arrayLikeObject[<span class="built_in">Symbol</span>.isConcatSpreadable]); <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(initial.concat(arrayLikeObject)); <span class="comment">// [&#x27;foo&#x27;, &#123;...&#125;]</span></span><br><span class="line">arrayLikeObject[<span class="built_in">Symbol</span>.isConcatSpreadable] = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">console</span>.log(initial.concat(arrayLikeObject)); <span class="comment">// [&#x27;foo&#x27;, &#x27;baz&#x27;]</span></span><br><span class="line"><span class="keyword">let</span> otherObject = <span class="keyword">new</span> <span class="built_in">Set</span>().add(<span class="string">&#x27;qux&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(otherObject[<span class="built_in">Symbol</span>.isConcatSpreadable]); <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(initial.concat(otherObject)); <span class="comment">// [&#x27;foo&#x27;, Set(1)]</span></span><br><span class="line">otherObject[<span class="built_in">Symbol</span>.isConcatSpreadable] = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">console</span>.log(initial.concat(otherObject)); <span class="comment">// [&#x27;foo&#x27;] </span></span><br></pre></td></tr></table></figure>

<h4 id="8-Symbol-iterator"><a href="#8-Symbol-iterator" class="headerlink" title="8. Symbol.iterator"></a>8. Symbol.iterator</h4><h5 id="根据-ECMAScript-规范，这个符号作为一个属性表示“一个方法，该方法返回对象默认的迭代器。由-for-of-语句使用”。换句话说，这个符号表示实现迭代器-API-的函数。"><a href="#根据-ECMAScript-规范，这个符号作为一个属性表示“一个方法，该方法返回对象默认的迭代器。由-for-of-语句使用”。换句话说，这个符号表示实现迭代器-API-的函数。" class="headerlink" title="根据 ECMAScript 规范，这个符号作为一个属性表示“一个方法，该方法返回对象默认的迭代器。由 for-of 语句使用”。换句话说，这个符号表示实现迭代器 API 的函数。"></a>根据 ECMAScript 规范，这个符号作为一个属性表示“一个方法，该方法返回对象默认的迭代器。由 for-of 语句使用”。换句话说，这个符号表示实现迭代器 API 的函数。</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line"> *[<span class="built_in">Symbol</span>.iterator]() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> f = <span class="keyword">new</span> Foo();</span><br><span class="line"><span class="built_in">console</span>.log(f[<span class="built_in">Symbol</span>.iterator]());</span><br><span class="line"><span class="comment">// Generator &#123;&lt;suspended&gt;&#125; </span></span><br></pre></td></tr></table></figure>

<h5 id="技术上，这个由-Symbol-iterator-函数生成的对象应该通过其-next-方法陆续返回值。可以通过显式地调用-next-方法返回，也可以隐式地通过生成器函数返回："><a href="#技术上，这个由-Symbol-iterator-函数生成的对象应该通过其-next-方法陆续返回值。可以通过显式地调用-next-方法返回，也可以隐式地通过生成器函数返回：" class="headerlink" title="技术上，这个由 Symbol.iterator 函数生成的对象应该通过其 next()方法陆续返回值。可以通过显式地调用 next()方法返回，也可以隐式地通过生成器函数返回："></a>技术上，这个由 Symbol.iterator 函数生成的对象应该通过其 next()方法陆续返回值。可以通过显式地调用 next()方法返回，也可以隐式地通过生成器函数返回：</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Emitter</span> </span>&#123;</span><br><span class="line"> <span class="keyword">constructor</span>(max) &#123;</span><br><span class="line"> <span class="built_in">this</span>.max = max;</span><br><span class="line"> <span class="built_in">this</span>.idx = <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> *[<span class="built_in">Symbol</span>.iterator]() &#123;</span><br><span class="line"> <span class="keyword">while</span>(<span class="built_in">this</span>.idx &lt; <span class="built_in">this</span>.max) &#123;</span><br><span class="line"> <span class="keyword">yield</span> <span class="built_in">this</span>.idx++;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">count</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">let</span> emitter = <span class="keyword">new</span> Emitter(<span class="number">5</span>);</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">const</span> x <span class="keyword">of</span> emitter) &#123;</span><br><span class="line"> <span class="built_in">console</span>.log(x);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">count();</span><br><span class="line"><span class="comment">// 0 </span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="comment">// 4</span></span><br></pre></td></tr></table></figure>
<h4 id="9-Symbol-match"><a href="#9-Symbol-match" class="headerlink" title="9. Symbol.match"></a>9. Symbol.match</h4><h5 id="根据-ECMAScript-规范，这个符号作为一个属性表示“一个正则表达式方法，该方法用正则表达式去匹配字符串。由-String-prototype-match-方法使用”。String-prototype-match-方法会使用以-Symbol-match-为键的函数来对正则表达式求值。正则表达式的原型上默认有这个函数的定义，因此所有正则表达式实例默认是这个-String-方法的有效参数"><a href="#根据-ECMAScript-规范，这个符号作为一个属性表示“一个正则表达式方法，该方法用正则表达式去匹配字符串。由-String-prototype-match-方法使用”。String-prototype-match-方法会使用以-Symbol-match-为键的函数来对正则表达式求值。正则表达式的原型上默认有这个函数的定义，因此所有正则表达式实例默认是这个-String-方法的有效参数" class="headerlink" title="根据 ECMAScript 规范，这个符号作为一个属性表示“一个正则表达式方法，该方法用正则表达式去匹配字符串。由 String.prototype.match()方法使用”。String.prototype.match()方法会使用以 Symbol.match 为键的函数来对正则表达式求值。正则表达式的原型上默认有这个函数的定义，因此所有正则表达式实例默认是这个 String 方法的有效参数"></a>根据 ECMAScript 规范，这个符号作为一个属性表示“一个正则表达式方法，该方法用正则表达式去匹配字符串。由 String.prototype.match()方法使用”。String.prototype.match()方法会使用以 Symbol.match 为键的函数来对正则表达式求值。正则表达式的原型上默认有这个函数的定义，因此所有正则表达式实例默认是这个 String 方法的有效参数</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.prototype[<span class="built_in">Symbol</span>.match]);</span><br><span class="line"><span class="comment">// ƒ [Symbol.match]() &#123; [native code] &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;foobar&#x27;</span>.match(<span class="regexp">/bar/</span>));</span><br><span class="line"><span class="comment">// [&quot;bar&quot;, index: 3, input: &quot;foobar&quot;, groups: undefined]</span></span><br><span class="line">~~~ </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### 10. Symbol.replace</span><br><span class="line">##### 根据 ECMAScript 规范，这个符号作为一个属性表示“一个正则表达式方法，该方法替换一个字符串中匹配的子串。由 String.prototype.replace()方法使用”。String.prototype.replace()方法会使用以 Symbol.replace 为键的函数来对正则表达式求值。正则表达式的原型上默认有这个函数的定义，因此所有正则表达式实例默认是这个 String 方法的有效参数：</span><br><span class="line">~~~JavaScript</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.prototype[<span class="built_in">Symbol</span>.replace]);</span><br><span class="line"><span class="comment">// ƒ [Symbol.replace]() &#123; [native code] &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;foobarbaz&#x27;</span>.replace(<span class="regexp">/bar/</span>, <span class="string">&#x27;qux&#x27;</span>));</span><br><span class="line"><span class="comment">// &#x27;fooquxbaz&#x27; </span></span><br></pre></td></tr></table></figure>

<h4 id="11-Symbol-search"><a href="#11-Symbol-search" class="headerlink" title="11. Symbol.search"></a>11. Symbol.search</h4><h5 id="根据-ECMAScript-规范，这个符号作为一个属性表示“一个正则表达式方法，该方法返回字符串中匹配正则表达式的索引。由-String-prototype-search-方法使用”。String-prototype-search-方法会使用以-Symbol-search-为键的函数来对正则表达式求值。正则表达式的原型上默认有这个函数的定义，因此所有正则表达式实例默认是这个-String-方法的有效参数："><a href="#根据-ECMAScript-规范，这个符号作为一个属性表示“一个正则表达式方法，该方法返回字符串中匹配正则表达式的索引。由-String-prototype-search-方法使用”。String-prototype-search-方法会使用以-Symbol-search-为键的函数来对正则表达式求值。正则表达式的原型上默认有这个函数的定义，因此所有正则表达式实例默认是这个-String-方法的有效参数：" class="headerlink" title="根据 ECMAScript 规范，这个符号作为一个属性表示“一个正则表达式方法，该方法返回字符串中匹配正则表达式的索引。由 String.prototype.search()方法使用”。String.prototype.search()方法会使用以 Symbol.search 为键的函数来对正则表达式求值。正则表达式的原型上默认有这个函数的定义，因此所有正则表达式实例默认是这个 String 方法的有效参数："></a>根据 ECMAScript 规范，这个符号作为一个属性表示“一个正则表达式方法，该方法返回字符串中匹配正则表达式的索引。由 String.prototype.search()方法使用”。String.prototype.search()方法会使用以 Symbol.search 为键的函数来对正则表达式求值。正则表达式的原型上默认有这个函数的定义，因此所有正则表达式实例默认是这个 String 方法的有效参数：</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.prototype[<span class="built_in">Symbol</span>.search]);</span><br><span class="line"><span class="comment">// ƒ [Symbol.search]() &#123; [native code] &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;foobar&#x27;</span>.search(<span class="regexp">/bar/</span>));</span><br><span class="line"><span class="comment">// 3 </span></span><br></pre></td></tr></table></figure>

<h4 id="12-Symbol-species"><a href="#12-Symbol-species" class="headerlink" title="12. Symbol.species"></a>12. Symbol.species</h4><h5 id="根据-ECMAScript-规范，这个符号作为一个属性表示“一个函数值，该函数作为创建派生对象的构造函数”。这个属性在内置类型中最常用，用于对内置类型实例方法的返回值暴露实例化派生对象的方法。用-Symbol-species-定义静态的获取器（getter）方法，可以覆盖新创建实例的原型定义："><a href="#根据-ECMAScript-规范，这个符号作为一个属性表示“一个函数值，该函数作为创建派生对象的构造函数”。这个属性在内置类型中最常用，用于对内置类型实例方法的返回值暴露实例化派生对象的方法。用-Symbol-species-定义静态的获取器（getter）方法，可以覆盖新创建实例的原型定义：" class="headerlink" title="根据 ECMAScript 规范，这个符号作为一个属性表示“一个函数值，该函数作为创建派生对象的构造函数”。这个属性在内置类型中最常用，用于对内置类型实例方法的返回值暴露实例化派生对象的方法。用 Symbol.species 定义静态的获取器（getter）方法，可以覆盖新创建实例的原型定义："></a>根据 ECMAScript 规范，这个符号作为一个属性表示“一个函数值，该函数作为创建派生对象的构造函数”。这个属性在内置类型中最常用，用于对内置类型实例方法的返回值暴露实例化派生对象的方法。用 Symbol.species 定义静态的获取器（getter）方法，可以覆盖新创建实例的原型定义：</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bar</span> <span class="keyword">extends</span> <span class="title">Array</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Baz</span> <span class="keyword">extends</span> <span class="title">Array</span> </span>&#123;</span><br><span class="line"> <span class="keyword">static</span> get [<span class="built_in">Symbol</span>.species]() &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="built_in">Array</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> bar = <span class="keyword">new</span> Bar();</span><br><span class="line"><span class="built_in">console</span>.log(bar <span class="keyword">instanceof</span> <span class="built_in">Array</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(bar <span class="keyword">instanceof</span> Bar); <span class="comment">// true</span></span><br><span class="line">bar = bar.concat(<span class="string">&#x27;bar&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(bar <span class="keyword">instanceof</span> <span class="built_in">Array</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(bar <span class="keyword">instanceof</span> Bar); <span class="comment">// true</span></span><br><span class="line"><span class="keyword">let</span> baz = <span class="keyword">new</span> Baz();</span><br><span class="line"><span class="built_in">console</span>.log(baz <span class="keyword">instanceof</span> <span class="built_in">Array</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(baz <span class="keyword">instanceof</span> Baz); <span class="comment">// true</span></span><br><span class="line">baz = baz.concat(<span class="string">&#x27;baz&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(baz <span class="keyword">instanceof</span> <span class="built_in">Array</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(baz <span class="keyword">instanceof</span> Baz); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<h4 id="13-Symbol-split"><a href="#13-Symbol-split" class="headerlink" title="13. Symbol.split"></a>13. Symbol.split</h4><h5 id="根据-ECMAScript-规范，这个符号作为一个属性表示“一个正则表达式方法，该方法在匹配正则表达式的索引位置拆分字符串。由-String-prototype-split-方法使用”。String-prototype-split-方法会使用以-Symbol-split-为键的函数来对正则表达式求值。正则表达式的原型上默认有这个函数的定义，因此所有正则表达式实例默认是这个-String-方法的有效参数："><a href="#根据-ECMAScript-规范，这个符号作为一个属性表示“一个正则表达式方法，该方法在匹配正则表达式的索引位置拆分字符串。由-String-prototype-split-方法使用”。String-prototype-split-方法会使用以-Symbol-split-为键的函数来对正则表达式求值。正则表达式的原型上默认有这个函数的定义，因此所有正则表达式实例默认是这个-String-方法的有效参数：" class="headerlink" title="根据 ECMAScript 规范，这个符号作为一个属性表示“一个正则表达式方法，该方法在匹配正则表达式的索引位置拆分字符串。由 String.prototype.split()方法使用”。String.prototype.split()方法会使用以 Symbol.split 为键的函数来对正则表达式求值。正则表达式的原型上默认有这个函数的定义，因此所有正则表达式实例默认是这个 String 方法的有效参数："></a>根据 ECMAScript 规范，这个符号作为一个属性表示“一个正则表达式方法，该方法在匹配正则表达式的索引位置拆分字符串。由 String.prototype.split()方法使用”。String.prototype.split()方法会使用以 Symbol.split 为键的函数来对正则表达式求值。正则表达式的原型上默认有这个函数的定义，因此所有正则表达式实例默认是这个 String 方法的有效参数：</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.prototype[<span class="built_in">Symbol</span>.split]);</span><br><span class="line"><span class="comment">// ƒ [Symbol.split]() &#123; [native code] &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;foobarbaz&#x27;</span>.split(<span class="regexp">/bar/</span>));</span><br><span class="line"><span class="comment">// [&#x27;foo&#x27;, &#x27;baz&#x27;] </span></span><br></pre></td></tr></table></figure>

<h4 id="14-Symbol-toPrimitive"><a href="#14-Symbol-toPrimitive" class="headerlink" title="14. Symbol.toPrimitive"></a>14. Symbol.toPrimitive</h4><h5 id="根据-ECMAScript-规范，这个符号作为一个属性表示“一个方法，该方法将对象转换为相应的原始值。由-ToPrimitive-抽象操作使用”。很多内置操作都会尝试强制将对象转换为原始值，包括字符串、数值和未指定的原始类型。对于一个自定义对象实例，通过在这个实例的-Symbol-toPrimitive-属性上定义一个函数可以改变默认行为。根据提供给这个函数的参数（string、number-或-default），可以控制返回的原始值："><a href="#根据-ECMAScript-规范，这个符号作为一个属性表示“一个方法，该方法将对象转换为相应的原始值。由-ToPrimitive-抽象操作使用”。很多内置操作都会尝试强制将对象转换为原始值，包括字符串、数值和未指定的原始类型。对于一个自定义对象实例，通过在这个实例的-Symbol-toPrimitive-属性上定义一个函数可以改变默认行为。根据提供给这个函数的参数（string、number-或-default），可以控制返回的原始值：" class="headerlink" title="根据 ECMAScript 规范，这个符号作为一个属性表示“一个方法，该方法将对象转换为相应的原始值。由 ToPrimitive 抽象操作使用”。很多内置操作都会尝试强制将对象转换为原始值，包括字符串、数值和未指定的原始类型。对于一个自定义对象实例，通过在这个实例的 Symbol.toPrimitive 属性上定义一个函数可以改变默认行为。根据提供给这个函数的参数（string、number 或 default），可以控制返回的原始值："></a>根据 ECMAScript 规范，这个符号作为一个属性表示“一个方法，该方法将对象转换为相应的原始值。由 ToPrimitive 抽象操作使用”。很多内置操作都会尝试强制将对象转换为原始值，包括字符串、数值和未指定的原始类型。对于一个自定义对象实例，通过在这个实例的 Symbol.toPrimitive 属性上定义一个函数可以改变默认行为。根据提供给这个函数的参数（string、number 或 default），可以控制返回的原始值：</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">let</span> foo = <span class="keyword">new</span> Foo();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">3</span> + foo); <span class="comment">// &quot;3[object Object]&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">3</span> - foo); <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>(foo)); <span class="comment">// &quot;[object Object]&quot;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bar</span> </span>&#123;</span><br><span class="line"> <span class="keyword">constructor</span>() &#123;</span><br><span class="line"> <span class="built_in">this</span>[<span class="built_in">Symbol</span>.toPrimitive] = <span class="function"><span class="keyword">function</span>(<span class="params">hint</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">switch</span> (hint) &#123;</span><br><span class="line"> <span class="keyword">case</span> <span class="string">&#x27;number&#x27;</span>:</span><br><span class="line"> <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line"> <span class="keyword">case</span> <span class="string">&#x27;string&#x27;</span>:</span><br><span class="line"> <span class="keyword">return</span> <span class="string">&#x27;string bar&#x27;</span>;</span><br><span class="line"> <span class="keyword">case</span> <span class="string">&#x27;default&#x27;</span>:</span><br><span class="line"> <span class="keyword">default</span>:</span><br><span class="line"> <span class="keyword">return</span> <span class="string">&#x27;default bar&#x27;</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> bar = <span class="keyword">new</span> Bar();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">3</span> + bar); <span class="comment">// &quot;3default bar&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">3</span> - bar); <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>(bar)); <span class="comment">// &quot;string bar&quot; </span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="15-Symbol-toStringTag"><a href="#15-Symbol-toStringTag" class="headerlink" title="15. Symbol.toStringTag"></a>15. Symbol.toStringTag</h4><h5 id="根据-ECMAScript-规范，这个符号作为一个属性表示“一个字符串，该字符串用于创建对象的默认字符串描述。由内置方法-Object-prototype-toString-使用”。通过-toString-方法获取对象标识时，会检索由-Symbol-toStringTag-指定的实例标识符，默认为”Object”。内置类型已经指定了这个值，但自定义类实例还需要明确定义："><a href="#根据-ECMAScript-规范，这个符号作为一个属性表示“一个字符串，该字符串用于创建对象的默认字符串描述。由内置方法-Object-prototype-toString-使用”。通过-toString-方法获取对象标识时，会检索由-Symbol-toStringTag-指定的实例标识符，默认为”Object”。内置类型已经指定了这个值，但自定义类实例还需要明确定义：" class="headerlink" title="根据 ECMAScript 规范，这个符号作为一个属性表示“一个字符串，该字符串用于创建对象的默认字符串描述。由内置方法 Object.prototype.toString()使用”。通过 toString()方法获取对象标识时，会检索由 Symbol.toStringTag 指定的实例标识符，默认为”Object”。内置类型已经指定了这个值，但自定义类实例还需要明确定义："></a>根据 ECMAScript 规范，这个符号作为一个属性表示“一个字符串，该字符串用于创建对象的默认字符串描述。由内置方法 Object.prototype.toString()使用”。通过 toString()方法获取对象标识时，会检索由 Symbol.toStringTag 指定的实例标识符，默认为”Object”。内置类型已经指定了这个值，但自定义类实例还需要明确定义：</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line"><span class="built_in">console</span>.log(s); <span class="comment">// Set(0) &#123;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(s.toString()); <span class="comment">// [object Set]</span></span><br><span class="line"><span class="built_in">console</span>.log(s[<span class="built_in">Symbol</span>.toStringTag]); <span class="comment">// Set</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">let</span> foo = <span class="keyword">new</span> Foo();</span><br><span class="line"><span class="built_in">console</span>.log(foo); <span class="comment">// Foo &#123;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(foo.toString()); <span class="comment">// [object Object]</span></span><br><span class="line"><span class="built_in">console</span>.log(foo[<span class="built_in">Symbol</span>.toStringTag]); <span class="comment">// undefined</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bar</span> </span>&#123;</span><br><span class="line"> <span class="keyword">constructor</span>() &#123;</span><br><span class="line"> <span class="built_in">this</span>[<span class="built_in">Symbol</span>.toStringTag] = <span class="string">&#x27;Bar&#x27;</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> bar = <span class="keyword">new</span> Bar();</span><br><span class="line"><span class="built_in">console</span>.log(bar); <span class="comment">// Bar &#123;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(bar.toString()); <span class="comment">// [object Bar]</span></span><br><span class="line"><span class="built_in">console</span>.log(bar[<span class="built_in">Symbol</span>.toStringTag]); <span class="comment">// Bar </span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="16-Symbol-unscopables"><a href="#16-Symbol-unscopables" class="headerlink" title="16. Symbol.unscopables"></a>16. Symbol.unscopables</h4><h5 id="根据-ECMAScript-规范，这个符号作为一个属性表示“一个对象，该对象所有的以及继承的属性，都会从关联对象的-with-环境绑定中排除”。设置这个符号并让其映射对应属性的键值为-true，就可以阻止该属性出现在-with-环境绑定中，如下例所示："><a href="#根据-ECMAScript-规范，这个符号作为一个属性表示“一个对象，该对象所有的以及继承的属性，都会从关联对象的-with-环境绑定中排除”。设置这个符号并让其映射对应属性的键值为-true，就可以阻止该属性出现在-with-环境绑定中，如下例所示：" class="headerlink" title="根据 ECMAScript 规范，这个符号作为一个属性表示“一个对象，该对象所有的以及继承的属性，都会从关联对象的 with 环境绑定中排除”。设置这个符号并让其映射对应属性的键值为 true，就可以阻止该属性出现在 with 环境绑定中，如下例所示："></a>根据 ECMAScript 规范，这个符号作为一个属性表示“一个对象，该对象所有的以及继承的属性，都会从关联对象的 with 环境绑定中排除”。设置这个符号并让其映射对应属性的键值为 true，就可以阻止该属性出现在 with 环境绑定中，如下例所示：</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> o = &#123; <span class="attr">foo</span>: <span class="string">&#x27;bar&#x27;</span> &#125;;</span><br><span class="line"><span class="keyword">with</span> (o) &#123;</span><br><span class="line"> <span class="built_in">console</span>.log(foo); <span class="comment">// bar</span></span><br><span class="line">&#125;</span><br><span class="line">o[<span class="built_in">Symbol</span>.unscopables] = &#123;</span><br><span class="line"> foo: <span class="literal">true</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">with</span> (o) &#123;</span><br><span class="line"> <span class="built_in">console</span>.log(foo); <span class="comment">// ReferenceError</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Object-类型"><a href="#Object-类型" class="headerlink" title="Object 类型"></a>Object 类型</h3><h5 id="ECMAScript-中的对象其实就是一组数据和功能的集合。对象通过-new-操作符后跟对象类型的名称来创建。开发者可以通过创建-Object-类型的实例来创建自己的对象，然后再给对象添加属性和方法："><a href="#ECMAScript-中的对象其实就是一组数据和功能的集合。对象通过-new-操作符后跟对象类型的名称来创建。开发者可以通过创建-Object-类型的实例来创建自己的对象，然后再给对象添加属性和方法：" class="headerlink" title="ECMAScript 中的对象其实就是一组数据和功能的集合。对象通过 new 操作符后跟对象类型的名称来创建。开发者可以通过创建 Object 类型的实例来创建自己的对象，然后再给对象添加属性和方法："></a>ECMAScript 中的对象其实就是一组数据和功能的集合。对象通过 new 操作符后跟对象类型的名称来创建。开发者可以通过创建 Object 类型的实例来创建自己的对象，然后再给对象添加属性和方法：</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>(); </span><br></pre></td></tr></table></figure>
<h5 id="这个语法类似-Java，但-ECMAScript-只要求在给构造函数提供参数时使用括号。如果没有参数，如上面的例子所示，那么完全可以省略括号（不推荐）："><a href="#这个语法类似-Java，但-ECMAScript-只要求在给构造函数提供参数时使用括号。如果没有参数，如上面的例子所示，那么完全可以省略括号（不推荐）：" class="headerlink" title="这个语法类似 Java，但 ECMAScript 只要求在给构造函数提供参数时使用括号。如果没有参数，如上面的例子所示，那么完全可以省略括号（不推荐）："></a>这个语法类似 Java，但 ECMAScript 只要求在给构造函数提供参数时使用括号。如果没有参数，如上面的例子所示，那么完全可以省略括号（不推荐）：</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>; <span class="comment">// 合法，但不推荐</span></span><br></pre></td></tr></table></figure>
<h4 id="每个-Object-实例都有如下属性和方法。"><a href="#每个-Object-实例都有如下属性和方法。" class="headerlink" title="每个 Object 实例都有如下属性和方法。"></a>每个 Object 实例都有如下属性和方法。</h4><h5 id="1-constructor：用于创建当前对象的函数。在前面的例子中，这个属性的值就是-Object-函数。"><a href="#1-constructor：用于创建当前对象的函数。在前面的例子中，这个属性的值就是-Object-函数。" class="headerlink" title="1.constructor：用于创建当前对象的函数。在前面的例子中，这个属性的值就是 Object()函数。"></a>1.constructor：用于创建当前对象的函数。在前面的例子中，这个属性的值就是 Object()函数。</h5><h5 id="2-hasOwnProperty-propertyName-：用于判断当前对象实例（不是原型）上是否存在给定的属性。要检查的属性名必须是字符串（如-o-hasOwnProperty-“name”-）或符号。"><a href="#2-hasOwnProperty-propertyName-：用于判断当前对象实例（不是原型）上是否存在给定的属性。要检查的属性名必须是字符串（如-o-hasOwnProperty-“name”-）或符号。" class="headerlink" title="2. hasOwnProperty(propertyName)：用于判断当前对象实例（不是原型）上是否存在给定的属性。要检查的属性名必须是字符串（如 o.hasOwnProperty(“name”)）或符号。"></a>2. hasOwnProperty(propertyName)：用于判断当前对象实例（不是原型）上是否存在给定的属性。要检查的属性名必须是字符串（如 o.hasOwnProperty(“name”)）或符号。</h5><h5 id="3-isPrototypeOf-object-：用于判断当前对象是否为另一个对象的原型。（第-8-章将详细介绍原型。）"><a href="#3-isPrototypeOf-object-：用于判断当前对象是否为另一个对象的原型。（第-8-章将详细介绍原型。）" class="headerlink" title="3. isPrototypeOf(object)：用于判断当前对象是否为另一个对象的原型。（第 8 章将详细介绍原型。）"></a>3. isPrototypeOf(object)：用于判断当前对象是否为另一个对象的原型。（第 8 章将详细介绍原型。）</h5><h5 id="4-propertyIsEnumerable-propertyName-：用于判断给定的属性是否可以使用（本章稍后讨论的）for-in-语句枚举。与-hasOwnProperty-一样，属性名必须是字符串。"><a href="#4-propertyIsEnumerable-propertyName-：用于判断给定的属性是否可以使用（本章稍后讨论的）for-in-语句枚举。与-hasOwnProperty-一样，属性名必须是字符串。" class="headerlink" title="4. propertyIsEnumerable(propertyName)：用于判断给定的属性是否可以使用（本章稍后讨论的）for-in 语句枚举。与 hasOwnProperty()一样，属性名必须是字符串。"></a>4. propertyIsEnumerable(propertyName)：用于判断给定的属性是否可以使用（本章稍后讨论的）for-in 语句枚举。与 hasOwnProperty()一样，属性名必须是字符串。</h5><h5 id="5-toLocaleString-：返回对象的字符串表示，该字符串反映对象所在的本地化执行环境。"><a href="#5-toLocaleString-：返回对象的字符串表示，该字符串反映对象所在的本地化执行环境。" class="headerlink" title="5. toLocaleString()：返回对象的字符串表示，该字符串反映对象所在的本地化执行环境。"></a>5. toLocaleString()：返回对象的字符串表示，该字符串反映对象所在的本地化执行环境。</h5><h5 id="6-toString-：返回对象的字符串表示。"><a href="#6-toString-：返回对象的字符串表示。" class="headerlink" title="6. toString()：返回对象的字符串表示。"></a>6. toString()：返回对象的字符串表示。</h5><h5 id="7-valueOf-：返回对象对应的字符串、数值或布尔值表示。通常与-toString-的返回值相同。因为在-ECMAScript-中-Object-是所有对象的基类，所以任何对象都有这些属性和方法。第-8-章将介绍对象间的继承机制。"><a href="#7-valueOf-：返回对象对应的字符串、数值或布尔值表示。通常与-toString-的返回值相同。因为在-ECMAScript-中-Object-是所有对象的基类，所以任何对象都有这些属性和方法。第-8-章将介绍对象间的继承机制。" class="headerlink" title="7. valueOf()：返回对象对应的字符串、数值或布尔值表示。通常与 toString()的返回值相同。因为在 ECMAScript 中 Object 是所有对象的基类，所以任何对象都有这些属性和方法。第 8 章将介绍对象间的继承机制。"></a>7. valueOf()：返回对象对应的字符串、数值或布尔值表示。通常与 toString()的返回值相同。因为在 ECMAScript 中 Object 是所有对象的基类，所以任何对象都有这些属性和方法。第 8 章将介绍对象间的继承机制。</h5><h4 id="注意-严格来讲，ECMA-262-中对象的行为不一定适合-JavaScript-中的其他对象。比如浏览器环境中的-BOM-和-DOM-对象，都是由宿主环境定义和提供的宿主对象。而宿主对象不受-ECMA-262-约束，所以它们可能会也可能不会继承-Object。"><a href="#注意-严格来讲，ECMA-262-中对象的行为不一定适合-JavaScript-中的其他对象。比如浏览器环境中的-BOM-和-DOM-对象，都是由宿主环境定义和提供的宿主对象。而宿主对象不受-ECMA-262-约束，所以它们可能会也可能不会继承-Object。" class="headerlink" title="注意 严格来讲，ECMA-262 中对象的行为不一定适合 JavaScript 中的其他对象。比如浏览器环境中的 BOM 和 DOM 对象，都是由宿主环境定义和提供的宿主对象。而宿主对象不受 ECMA-262 约束，所以它们可能会也可能不会继承 Object。"></a>注意 严格来讲，ECMA-262 中对象的行为不一定适合 JavaScript 中的其他对象。比如浏览器环境中的 BOM 和 DOM 对象，都是由宿主环境定义和提供的宿主对象。而宿主对象不受 ECMA-262 约束，所以它们可能会也可能不会继承 Object。</h4>]]></content>
      <categories>
        <category>JavaScript红宝书</category>
      </categories>
      <tags>
        <tag>数据类型</tag>
      </tags>
  </entry>
</search>
