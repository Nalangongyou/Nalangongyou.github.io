<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Decade</title>
  
  <subtitle>你终究是一个过客</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2020-10-07T16:41:48.321Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Decade</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>移动端web开发之项目的属性</title>
    <link href="http://example.com/2020/03/20/%E7%A7%BB%E5%8A%A8web3/"/>
    <id>http://example.com/2020/03/20/%E7%A7%BB%E5%8A%A8web3/</id>
    <published>2020-03-20T05:06:43.000Z</published>
    <updated>2020-10-07T16:41:48.321Z</updated>
    
    <content type="html"><![CDATA[<h1 id="order"><a href="#order" class="headerlink" title="order"></a>order</h1><h2 id="order定义项目排序"><a href="#order定义项目排序" class="headerlink" title="order定义项目排序"></a>order定义项目排序</h2><h2 id="数值越小，排列越靠前，默认为0"><a href="#数值越小，排列越靠前，默认为0" class="headerlink" title="数值越小，排列越靠前，默认为0"></a>数值越小，排列越靠前，默认为0</h2><p><img src="https://s1.ax1x.com/2020/10/08/0wpXAU.png"></p><hr><h1 id="flex-grow"><a href="#flex-grow" class="headerlink" title="flex-grow"></a>flex-grow</h1><h2 id="定义项目放大比例，默认都为0，如果剩余空间大，也不放大"><a href="#定义项目放大比例，默认都为0，如果剩余空间大，也不放大" class="headerlink" title="定义项目放大比例，默认都为0，如果剩余空间大，也不放大"></a>定义项目放大比例，默认都为0，如果剩余空间大，也不放大</h2><h2 id="数值越小，排列越靠前，默认为0-1"><a href="#数值越小，排列越靠前，默认为0-1" class="headerlink" title="数值越小，排列越靠前，默认为0"></a>数值越小，排列越靠前，默认为0</h2><p><img src="https://s1.ax1x.com/2020/10/08/0w9ngA.png"><br><img src="https://s1.ax1x.com/2020/10/08/0w9Mut.png"><br><img src="https://s1.ax1x.com/2020/10/08/0w93E8.png"></p><hr><h1 id="flex-shrink"><a href="#flex-shrink" class="headerlink" title="flex-shrink"></a>flex-shrink</h1><h2 id="定义项目的缩小比例，默认为1，如果空间不足，该项目会缩小。"><a href="#定义项目的缩小比例，默认为1，如果空间不足，该项目会缩小。" class="headerlink" title="定义项目的缩小比例，默认为1，如果空间不足，该项目会缩小。"></a>定义项目的缩小比例，默认为1，如果空间不足，该项目会缩小。</h2><p><img src="https://s1.ax1x.com/2020/10/08/0w9wD0.png"></p><hr><h1 id="flex-basis"><a href="#flex-basis" class="headerlink" title="flex-basis"></a>flex-basis</h1><h2 id="定义项目的在分配多余空间之前，项目沾主轴空间，浏览器根据这个属性计算是否有多余空间"><a href="#定义项目的在分配多余空间之前，项目沾主轴空间，浏览器根据这个属性计算是否有多余空间" class="headerlink" title="定义项目的在分配多余空间之前，项目沾主轴空间，浏览器根据这个属性计算是否有多余空间"></a>定义项目的在分配多余空间之前，项目沾主轴空间，浏览器根据这个属性计算是否有多余空间</h2><p><img src="https://s1.ax1x.com/2020/10/08/0wC6df.png"></p><hr><h1 id="align-self"><a href="#align-self" class="headerlink" title="align-self"></a>align-self</h1><h2 id="定义项目单个项目与其他不一样的对齐方式，可覆盖align-item属性"><a href="#定义项目单个项目与其他不一样的对齐方式，可覆盖align-item属性" class="headerlink" title="定义项目单个项目与其他不一样的对齐方式，可覆盖align-item属性"></a>定义项目单个项目与其他不一样的对齐方式，可覆盖align-item属性</h2><p><img src="https://s1.ax1x.com/2020/10/08/0wCILq.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;order&quot;&gt;&lt;a href=&quot;#order&quot; class=&quot;headerlink&quot; title=&quot;order&quot;&gt;&lt;/a&gt;order&lt;/h1&gt;&lt;h2 id=&quot;order定义项目排序&quot;&gt;&lt;a href=&quot;#order定义项目排序&quot; class=&quot;headerlink</summary>
      
    
    
    
    <category term="移动端web" scheme="http://example.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AFweb/"/>
    
    
  </entry>
  
  <entry>
    <title>移动端web开发之Flex</title>
    <link href="http://example.com/2020/03/19/%E7%A7%BB%E5%8A%A8web2/"/>
    <id>http://example.com/2020/03/19/%E7%A7%BB%E5%8A%A8web2/</id>
    <published>2020-03-19T05:06:43.000Z</published>
    <updated>2020-10-07T16:02:28.366Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是Flex布局"><a href="#什么是Flex布局" class="headerlink" title="什么是Flex布局"></a>什么是Flex布局</h1><h2 id="Flex是Flexible-Box的缩写，意为“灵活的盒子”或者“弹性的盒子”，所以flex布局也叫弹性布局"><a href="#Flex是Flexible-Box的缩写，意为“灵活的盒子”或者“弹性的盒子”，所以flex布局也叫弹性布局" class="headerlink" title="Flex是Flexible Box的缩写，意为“灵活的盒子”或者“弹性的盒子”，所以flex布局也叫弹性布局"></a>Flex是Flexible Box的缩写，意为“灵活的盒子”或者“弹性的盒子”，所以flex布局也叫弹性布局</h2><hr><h2 id="什么是flex容器"><a href="#什么是flex容器" class="headerlink" title="什么是flex容器"></a>什么是flex容器</h2><h3 id="采用flex布局的元素，称之为flex容器"><a href="#采用flex布局的元素，称之为flex容器" class="headerlink" title="采用flex布局的元素，称之为flex容器"></a>采用flex布局的元素，称之为flex容器</h3><h3 id="box-dispaly：flex-inline-flex"><a href="#box-dispaly：flex-inline-flex" class="headerlink" title=".box{dispaly：flex|inline-flex}"></a>.box{dispaly：flex|inline-flex}</h3><hr><h1 id="容器的属性"><a href="#容器的属性" class="headerlink" title="容器的属性"></a>容器的属性</h1><h2 id="display-决定使用flex布局"><a href="#display-决定使用flex布局" class="headerlink" title="display 决定使用flex布局"></a>display 决定使用flex布局</h2><h3 id="display：flex-与inline-flex"><a href="#display：flex-与inline-flex" class="headerlink" title="display：flex|与inline-flex"></a>display：flex|与inline-flex</h3><p><img src="https://s1.ax1x.com/2020/10/06/0U5NUU.png"></p><h3 id="设置成flex这个父容器是有固定宽度的"><a href="#设置成flex这个父容器是有固定宽度的" class="headerlink" title="设置成flex这个父容器是有固定宽度的"></a>设置成flex这个父容器是有固定宽度的</h3><h3 id="设置成inline-flex呢-是里面内容撑开的"><a href="#设置成inline-flex呢-是里面内容撑开的" class="headerlink" title="设置成inline-flex呢  是里面内容撑开的"></a>设置成inline-flex呢  是里面内容撑开的</h3><p><img src="https://s1.ax1x.com/2020/10/06/0U5cVK.png"></p><hr><h2 id="flex-direction属性"><a href="#flex-direction属性" class="headerlink" title="flex-direction属性"></a>flex-direction属性</h2><h2 id="flex-direction-row-默认值-row-reverse-倒着排序-column上下正序-column-reseverse上下倒叙"><a href="#flex-direction-row-默认值-row-reverse-倒着排序-column上下正序-column-reseverse上下倒叙" class="headerlink" title="flex-direction:row 默认值|row-reverse 倒着排序|column上下正序|column-reseverse上下倒叙;"></a>flex-direction:row 默认值|row-reverse 倒着排序|column上下正序|column-reseverse上下倒叙;</h2><p><img src="https://s1.ax1x.com/2020/10/06/0UIOw6.png"><br><img src="https://s1.ax1x.com/2020/10/06/0UonpQ.png"><br><img src="https://s1.ax1x.com/2020/10/06/0Uo37V.png"></p><hr><h2 id="flex-wrap属性"><a href="#flex-wrap属性" class="headerlink" title="flex-wrap属性"></a>flex-wrap属性</h2><h2 id="flex-wrap：nowrap-默认值-wrap-换行在第一行上方-wrap-reverse-换行-在第一行下方"><a href="#flex-wrap：nowrap-默认值-wrap-换行在第一行上方-wrap-reverse-换行-在第一行下方" class="headerlink" title="flex-wrap：nowrap 默认值|wrap 换行在第一行上方|wrap-reverse 换行 在第一行下方"></a>flex-wrap：nowrap 默认值|wrap 换行在第一行上方|wrap-reverse 换行 在第一行下方</h2><p><img src="https://s1.ax1x.com/2020/10/07/0UTQ8e.png"></p><hr><h2 id="justify-content属性"><a href="#justify-content属性" class="headerlink" title="justify-content属性"></a>justify-content属性</h2><h2 id="justify-content属性定义了项目在主轴上的对其方式"><a href="#justify-content属性定义了项目在主轴上的对其方式" class="headerlink" title="justify-content属性定义了项目在主轴上的对其方式"></a>justify-content属性定义了项目在主轴上的对其方式</h2><h2 id="justify-content属性值分别是flex-start左对齐-felx-end右对齐-center居中-space-between两端对齐项目之间间隔相等-space-around每个项目两侧间隔相等。"><a href="#justify-content属性值分别是flex-start左对齐-felx-end右对齐-center居中-space-between两端对齐项目之间间隔相等-space-around每个项目两侧间隔相等。" class="headerlink" title="justify-content属性值分别是flex-start左对齐|felx-end右对齐|center居中|space-between两端对齐项目之间间隔相等|space-around每个项目两侧间隔相等。"></a>justify-content属性值分别是flex-start左对齐|felx-end右对齐|center居中|space-between两端对齐项目之间间隔相等|space-around每个项目两侧间隔相等。</h2><p><img src="https://s1.ax1x.com/2020/10/07/0dxQFH.png"></p><hr><h2 id="align-items属性"><a href="#align-items属性" class="headerlink" title="align-items属性"></a>align-items属性</h2><h2 id="align-items属性定义项目在交叉轴上如何对齐"><a href="#align-items属性定义项目在交叉轴上如何对齐" class="headerlink" title="align-items属性定义项目在交叉轴上如何对齐"></a>align-items属性定义项目在交叉轴上如何对齐</h2><h2 id="align-items属性flex-start交叉轴起点对齐-felx-end交叉轴终点对齐-center交叉轴中点对齐-baseline项目的文字基线对齐-stretch每个字将沾满容器高度"><a href="#align-items属性flex-start交叉轴起点对齐-felx-end交叉轴终点对齐-center交叉轴中点对齐-baseline项目的文字基线对齐-stretch每个字将沾满容器高度" class="headerlink" title="align-items属性flex-start交叉轴起点对齐|felx-end交叉轴终点对齐|center交叉轴中点对齐|baseline项目的文字基线对齐|stretch每个字将沾满容器高度"></a>align-items属性flex-start交叉轴起点对齐|felx-end交叉轴终点对齐|center交叉轴中点对齐|baseline项目的文字基线对齐|stretch每个字将沾满容器高度</h2><p><img src="https://s1.ax1x.com/2020/10/07/0dzt3R.png"><br><img src="https://s1.ax1x.com/2020/10/07/0dzwDK.png"><br><img src="https://s1.ax1x.com/2020/10/07/0dzDED.png"><br><img src="https://s1.ax1x.com/2020/10/07/0dzrUe.png"><br><img src="https://s1.ax1x.com/2020/10/07/0dzc8A.png"></p><hr><h2 id="align-content属性"><a href="#align-content属性" class="headerlink" title="align-content属性"></a>align-content属性</h2><h2 id="align-items属性定义多根轴线的对齐方式"><a href="#align-items属性定义多根轴线的对齐方式" class="headerlink" title="align-items属性定义多根轴线的对齐方式"></a>align-items属性定义多根轴线的对齐方式</h2><h2 id="align-items属性flex-start交叉轴起点对齐-felx-end交叉轴终点对齐-center交叉轴中点对齐-space-between上下平均分布-space-around每根轴线两端距离相等-stretch每个字将沾满容器高度"><a href="#align-items属性flex-start交叉轴起点对齐-felx-end交叉轴终点对齐-center交叉轴中点对齐-space-between上下平均分布-space-around每根轴线两端距离相等-stretch每个字将沾满容器高度" class="headerlink" title="align-items属性flex-start交叉轴起点对齐|felx-end交叉轴终点对齐|center交叉轴中点对齐|space-between上下平均分布|space-around每根轴线两端距离相等|stretch每个字将沾满容器高度"></a>align-items属性flex-start交叉轴起点对齐|felx-end交叉轴终点对齐|center交叉轴中点对齐|space-between上下平均分布|space-around每根轴线两端距离相等|stretch每个字将沾满容器高度</h2><p><img src="https://s1.ax1x.com/2020/10/07/0wSuPH.png"><br><img src="https://s1.ax1x.com/2020/10/07/0wS1Mt.png"><br><img src="https://s1.ax1x.com/2020/10/07/0wSaGj.png"><br><img src="https://s1.ax1x.com/2020/10/07/0wSrLV.png"><br><img src="https://s1.ax1x.com/2020/10/07/0wSWW9.png"><br><img src="https://s1.ax1x.com/2020/10/08/0wSLJH.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;什么是Flex布局&quot;&gt;&lt;a href=&quot;#什么是Flex布局&quot; class=&quot;headerlink&quot; title=&quot;什么是Flex布局&quot;&gt;&lt;/a&gt;什么是Flex布局&lt;/h1&gt;&lt;h2 id=&quot;Flex是Flexible-Box的缩写，意为“灵活的盒子”或者“弹性的盒</summary>
      
    
    
    
    <category term="移动端web" scheme="http://example.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AFweb/"/>
    
    
  </entry>
  
  <entry>
    <title>移动端web开发之基础</title>
    <link href="http://example.com/2020/03/18/%E7%A7%BB%E5%8A%A8web1/"/>
    <id>http://example.com/2020/03/18/%E7%A7%BB%E5%8A%A8web1/</id>
    <published>2020-03-18T05:06:43.000Z</published>
    <updated>2020-10-05T15:25:32.847Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是移动端？"><a href="#什么是移动端？" class="headerlink" title="什么是移动端？"></a>什么是移动端？</h1><h3 id="手机-平板电脑"><a href="#手机-平板电脑" class="headerlink" title="手机   平板电脑"></a>手机   平板电脑</h3><h2 id=""><a href="#" class="headerlink" title=""></a><img src="https://iknow-pic.cdn.bcebos.com/0ff41bd5ad6eddc44bf32e9a37dbb6fd526633be?x-bce-process=image/resize,m_lfit,w_600,h_800,limit_1"></h2><h1 id="移动端web要点"><a href="#移动端web要点" class="headerlink" title="移动端web要点"></a>移动端web要点</h1><h2 id="1-移动端事件"><a href="#1-移动端事件" class="headerlink" title="1.移动端事件"></a>1.移动端事件</h2><h2 id="2-移动端调试"><a href="#2-移动端调试" class="headerlink" title="2.移动端调试"></a>2.移动端调试</h2><h2 id="3-终端检测"><a href="#3-终端检测" class="headerlink" title="3.终端检测"></a>3.终端检测</h2><h2 id="4-移动端常见问题"><a href="#4-移动端常见问题" class="headerlink" title="4.移动端常见问题"></a>4.移动端常见问题</h2><h2 id="5-移动性能优化"><a href="#5-移动性能优化" class="headerlink" title="5.移动性能优化"></a>5.移动性能优化</h2><hr><h1 id="CSS像素"><a href="#CSS像素" class="headerlink" title="CSS像素"></a>CSS像素</h1><h2 id="CSS像素-1"><a href="#CSS像素-1" class="headerlink" title="CSS像素"></a>CSS像素</h2><h2 id="逻辑像素-logical-pixel"><a href="#逻辑像素-logical-pixel" class="headerlink" title="逻辑像素(logical pixel)"></a>逻辑像素(logical pixel)</h2><h2 id="设备独立像素-dpi-device-independent-pixel"><a href="#设备独立像素-dpi-device-independent-pixel" class="headerlink" title="设备独立像素(dpi:device independent pixel)"></a>设备独立像素(dpi:device independent pixel)</h2><hr><h1 id="视口-viewport"><a href="#视口-viewport" class="headerlink" title="视口-viewport"></a>视口-viewport</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meat</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="缩放比"><a href="#缩放比" class="headerlink" title="缩放比"></a>缩放比</h2><h3 id="1不需要缩放-宽和设备的宽相等不需要缩放"><a href="#1不需要缩放-宽和设备的宽相等不需要缩放" class="headerlink" title="=1不需要缩放  宽和设备的宽相等不需要缩放"></a>=1不需要缩放  宽和设备的宽相等不需要缩放</h3><h3 id="0-5倍缩放时-物理像素会变大-保证总数不变"><a href="#0-5倍缩放时-物理像素会变大-保证总数不变" class="headerlink" title="0.5倍缩放时  物理像素会变大 保证总数不变"></a>0.5倍缩放时  物理像素会变大 保证总数不变</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meat</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;initial-scale=1&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="兼容各个浏览器"><a href="#兼容各个浏览器" class="headerlink" title="兼容各个浏览器"></a>兼容各个浏览器</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meat</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width,initial-scale=1&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="user-scalable-用户是否可以缩放-yes是可以-no是不可以"><a href="#user-scalable-用户是否可以缩放-yes是可以-no是不可以" class="headerlink" title="user-scalable 用户是否可以缩放 yes是可以  no是不可以"></a>user-scalable 用户是否可以缩放 yes是可以  no是不可以</h3><h3 id="user-scalable-no-maximum-scale-1-minimum-scale-1"><a href="#user-scalable-no-maximum-scale-1-minimum-scale-1" class="headerlink" title="user-scalable=no === maximum-scale=1,minimum-scale=1"></a>user-scalable=no === maximum-scale=1,minimum-scale=1</h3><h3 id="兼容各个浏览器-1"><a href="#兼容各个浏览器-1" class="headerlink" title="兼容各个浏览器"></a>兼容各个浏览器</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meat</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width,initial-scale=1,user-scalable=no,maximum-scale=1,minimum-scale=1&quot;</span> &gt;</span></span><br></pre></td></tr></table></figure><h2 id="如何获取用户视口？"><a href="#如何获取用户视口？" class="headerlink" title="如何获取用户视口？"></a>如何获取用户视口？</h2><h2 id="-1"><a href="#-1" class="headerlink" title=""></a><img src="https://s1.ax1x.com/2020/10/05/0tdIPg.png"></h2><h1 id="box-sizing"><a href="#box-sizing" class="headerlink" title="box-sizing"></a>box-sizing</h1><h2 id="PC端会考虑兼容性-移动端不会考虑兼容性"><a href="#PC端会考虑兼容性-移动端不会考虑兼容性" class="headerlink" title="PC端会考虑兼容性  移动端不会考虑兼容性"></a>PC端会考虑兼容性  移动端不会考虑兼容性</h2><h2 id="box-sizing-content-box-内容的宽高表示不变-向外扩张"><a href="#box-sizing-content-box-内容的宽高表示不变-向外扩张" class="headerlink" title="box-sizing:content-box 内容的宽高表示不变 (向外扩张)"></a>box-sizing:content-box 内容的宽高表示不变 (向外扩张)</h2><h2 id="box-sizing-border-box-内容的宽高开始从内容border开始计算，简而言之是把border包括在里面了-向内压缩"><a href="#box-sizing-border-box-内容的宽高开始从内容border开始计算，简而言之是把border包括在里面了-向内压缩" class="headerlink" title="box-sizing:border-box 内容的宽高开始从内容border开始计算，简而言之是把border包括在里面了(向内压缩)"></a>box-sizing:border-box 内容的宽高开始从内容border开始计算，简而言之是把border包括在里面了(向内压缩)</h2><p><img src="https://s1.ax1x.com/2020/10/05/0twwyn.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;什么是移动端？&quot;&gt;&lt;a href=&quot;#什么是移动端？&quot; class=&quot;headerlink&quot; title=&quot;什么是移动端？&quot;&gt;&lt;/a&gt;什么是移动端？&lt;/h1&gt;&lt;h3 id=&quot;手机-平板电脑&quot;&gt;&lt;a href=&quot;#手机-平板电脑&quot; class=&quot;headerlink</summary>
      
    
    
    
    <category term="移动端web" scheme="http://example.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AFweb/"/>
    
    
  </entry>
  
  <entry>
    <title>前端面试题系列1</title>
    <link href="http://example.com/2018/08/04/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E7%B3%BB%E5%88%97/"/>
    <id>http://example.com/2018/08/04/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E7%B3%BB%E5%88%97/</id>
    <published>2018-08-04T14:06:43.000Z</published>
    <updated>2019-08-04T15:09:39.693Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-如何理解移动端上的点击穿透？"><a href="#1-如何理解移动端上的点击穿透？" class="headerlink" title="1. 如何理解移动端上的点击穿透？"></a>1. 如何理解移动端上的点击穿透？</h3><h4 id="点击穿透现象有3种："><a href="#点击穿透现象有3种：" class="headerlink" title="点击穿透现象有3种："></a>点击穿透现象有3种：</h4><ol><li>点击蒙层（mask）上的关闭按钮，蒙层消失后发现触发了按钮下面元素的click事件；</li><li>（跨页面）如果按钮下面恰好是一个有href属性的a标签，那么页面就会发生跳转；</li><li>（跨页面）这次没有mask了，直接点击页内按钮跳转至新页，然后发现新页面中对应位置元素的click事件被触发了</li></ol><p>解决方案：</p><ol><li><p>只用touch<br>最简单的解决方案，完美解决点击穿透问题<br>把页面内所有click全部换成touch事件（ touchstart 、’touchend’、’tap’）；</p></li><li><p>只用click<br>下下策，因为会带来300ms延迟，页面内任何一个自定义交互都将增加300毫秒延迟；</p></li><li><p>tap后延迟350ms再隐藏mask<br>改动最小，缺点是隐藏mask变慢了，350ms还是能感觉到慢的；</p></li><li><p>pointer-events<br>比较麻烦且有缺陷， 不建议使用mask隐藏后，给按钮下面元素添上 pointer-events: none; 样式，让click穿过去，350ms后去掉这个样式，恢复响应缺陷是mask消失后的的350ms内，用户可以看到按钮下面的元素点着没反应，如果用户手速很快的话一定会发现。</p></li></ol><h3 id="2-尝试实现-双向绑定"><a href="#2-尝试实现-双向绑定" class="headerlink" title="2. 尝试实现 双向绑定"></a>2. 尝试实现 双向绑定</h3><p>HTML 部分：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;txt&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;show-txt&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>JS 部分：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">&#x27;txt&#x27;</span>, &#123;</span><br><span class="line">  get: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> obj</span><br><span class="line">  &#125;,</span><br><span class="line">  set: <span class="function"><span class="keyword">function</span> (<span class="params">newValue</span>) </span>&#123;</span><br><span class="line">     <span class="built_in">document</span>.getElementById(<span class="string">&#x27;txt&#x27;</span>).value = newValue</span><br><span class="line">     <span class="built_in">document</span>.getElementById(<span class="string">&#x27;show-txt&#x27;</span>).innerHTML = newValue</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">&#x27;keyup&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  obj.txt = e.target.value</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="3-简述-AJAX-执行流程"><a href="#3-简述-AJAX-执行流程" class="headerlink" title="3.简述 AJAX 执行流程"></a>3.简述 AJAX 执行流程</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr =<span class="literal">null</span>; <span class="comment">// 创建对象 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">window</span>.XMLHttpRequest)&#123;</span><br><span class="line">  xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  xhr = <span class="keyword">new</span> ActiveXObject(<span class="string">&quot;Microsoft.XMLHTTP&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">xhr.open(<span class="string">&quot;method&quot;</span>, <span class="string">&quot;url&quot;</span>, <span class="string">&quot;async&quot;</span>); <span class="comment">// 初始化请求 </span></span><br><span class="line">xhr.setRequestHeader(<span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>); <span class="comment">// 设置http头信息 </span></span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;; <span class="comment">// 指定回调函数 </span></span><br><span class="line">xhr.send();<span class="comment">//发送请求</span></span><br></pre></td></tr></table></figure><h3 id="4-写出下列代码运行结果"><a href="#4-写出下列代码运行结果" class="headerlink" title="4.写出下列代码运行结果"></a>4.写出下列代码运行结果</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="number">1</span> &amp;&amp; <span class="number">2</span>)</span><br></pre></td></tr></table></figure><h3 id="5-写出下列代码运行结果"><a href="#5-写出下列代码运行结果" class="headerlink" title="5.写出下列代码运行结果"></a>5.写出下列代码运行结果</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>].map(<span class="built_in">parseInt</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-如何理解移动端上的点击穿透？&quot;&gt;&lt;a href=&quot;#1-如何理解移动端上的点击穿透？&quot; class=&quot;headerlink&quot; title=&quot;1. 如何理解移动端上的点击穿透？&quot;&gt;&lt;/a&gt;1. 如何理解移动端上的点击穿透？&lt;/h3&gt;&lt;h4 id=&quot;点击穿透现象有</summary>
      
    
    
    
    <category term="面试题" scheme="http://example.com/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>AJAX   JSON类型、跨域</title>
    <link href="http://example.com/2018/07/09/AJAX%20JSON%E7%B1%BB%E5%9E%8B%E3%80%81%E8%B7%A8%E5%9F%9F/"/>
    <id>http://example.com/2018/07/09/AJAX%20JSON%E7%B1%BB%E5%9E%8B%E3%80%81%E8%B7%A8%E5%9F%9F/</id>
    <published>2018-07-09T07:06:43.000Z</published>
    <updated>2019-07-17T08:30:28.104Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-1-JSON-格式数据类型"><a href="#1-1-JSON-格式数据类型" class="headerlink" title="1.1 JSON 格式数据类型"></a><strong>1.1 JSON 格式数据类型</strong></h3><h4 id="a：纯文本"><a href="#a：纯文本" class="headerlink" title="a：纯文本"></a>a：纯文本</h4><h4 id="b：文本网页（默认）"><a href="#b：文本网页（默认）" class="headerlink" title="b：文本网页（默认）"></a>b：文本网页（默认）</h4><h4 id="c：xml（旧行业标准）"><a href="#c：xml（旧行业标准）" class="headerlink" title="c：xml（旧行业标准）"></a>c：xml（旧行业标准）</h4><h4 id="d：javascript"><a href="#d：javascript" class="headerlink" title="d：javascript"></a>d：javascript</h4><h4 id="e：json（新行业标准）"><a href="#e：json（新行业标准）" class="headerlink" title="e：json（新行业标准）"></a>e：json（新行业标准）</h4><h4 id="json（工业标准：所有后台交互都是用json）：-ajax发送数据-格式-；json字符串数据格式，用于描述数据，简洁；（轻量级数据格式）"><a href="#json（工业标准：所有后台交互都是用json）：-ajax发送数据-格式-；json字符串数据格式，用于描述数据，简洁；（轻量级数据格式）" class="headerlink" title="json（工业标准：所有后台交互都是用json）：**ajax发送数据[格式]**；json字符串数据格式，用于描述数据，简洁；（轻量级数据格式）"></a><strong>json</strong>（工业标准：所有后台交互都是用json）：**ajax发送数据[格式]**；json字符串数据格式，用于描述数据，简洁；（轻量级数据格式）</h4><h4 id="xml重量级"><a href="#xml重量级" class="headerlink" title="xml重量级"></a><strong>xml重量级</strong></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?xml version=&quot;1.0&quot;encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">books</span>&gt;</span><span class="tag">&lt;<span class="name">book</span>&gt;</span><span class="tag">&lt;<span class="name">id</span>&gt;</span>101<span class="tag">&lt;/<span class="name">id</span>&gt;</span><span class="tag">&lt;/<span class="name">book</span>&gt;</span><span class="tag">&lt;/<span class="name">books</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h4 id="json轻量级-“name”-”tom”"><a href="#json轻量级-“name”-”tom”" class="headerlink" title="json轻量级 {“name”:”tom”}"></a><strong>json轻量级 {“name”:”tom”}</strong></h4><h4 id="概念：易于阅读和编写，行业内支持很普遍；"><a href="#概念：易于阅读和编写，行业内支持很普遍；" class="headerlink" title="概念：易于阅读和编写，行业内支持很普遍；"></a><strong>概念：易于阅读和编写，行业内支持很普遍；</strong></h4><h4 id="语法：基于js语言，但是目前被各种语言支持；"><a href="#语法：基于js语言，但是目前被各种语言支持；" class="headerlink" title="语法：基于js语言，但是目前被各种语言支持；"></a><strong>语法：基于js语言，但是目前被各种语言支持；</strong></h4><h4 id="成为一种“异构系统交互数据的标准格式”（可以跨平台使用）；"><a href="#成为一种“异构系统交互数据的标准格式”（可以跨平台使用）；" class="headerlink" title="成为一种“异构系统交互数据的标准格式”（可以跨平台使用）；"></a><strong>成为一种“异构系统交互数据的标准格式”（可以跨平台使用）；</strong></h4><p><strong>php&lt;– json –&gt;java</strong><br><strong>java&lt;– json –&gt;网银</strong></p><hr><h4 id="1-2-json-字符串-语法要求"><a href="#1-2-json-字符串-语法要求" class="headerlink" title="1.2 json{字符串}语法要求"></a><strong>1.2 json{字符串}语法要求</strong></h4><h5 id="1：一个json字符串有且只有一个根，可以是-；也可以是-对象"><a href="#1：一个json字符串有且只有一个根，可以是-；也可以是-对象" class="headerlink" title="1：一个json字符串有且只有一个根，可以是 ；也可以是{ }(对象)"></a><strong>1：一个json字符串有且只有一个根，可以是<a href="%E6%95%B0%E7%BB%84"> </a>；也可以是{ }(对象)</strong></h5><h5 id="2：json可以表示number，bool，null，字符串；字符串必须用双引号"><a href="#2：json可以表示number，bool，null，字符串；字符串必须用双引号" class="headerlink" title="2：json可以表示number，bool，null，字符串；字符串必须用双引号"></a><strong>2：json可以表示number，bool，null，字符串；字符串必须用双引号</strong></h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;“name”:”tom”,”age”:10,”set”:true&#125;</span><br></pre></td></tr></table></figure><h5 id="3：数组中可以包含多个值，使用逗号分隔，-10-20-304-1"><a href="#3：数组中可以包含多个值，使用逗号分隔，-10-20-304-1" class="headerlink" title="3：数组中可以包含多个值，使用逗号分隔，[10,20,304,1]"></a><strong>3：数组中可以包含多个值，使用逗号分隔，[10,20,304,1]</strong></h5><h5 id="4：对象中可以包含多个键值对，使用逗号分隔，键和值之间用冒号分隔，键必须是双引号"><a href="#4：对象中可以包含多个键值对，使用逗号分隔，键和值之间用冒号分隔，键必须是双引号" class="headerlink" title="4：对象中可以包含多个键值对，使用逗号分隔，键和值之间用冒号分隔，键必须是双引号"></a><strong>4：对象中可以包含多个键值对，使用逗号分隔，键和值之间用冒号分隔，键必须是双引号</strong></h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;“name”:”tom”,”age”:10&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="1-3-服务器端php中如何将数据转json字符串"><a href="#1-3-服务器端php中如何将数据转json字符串" class="headerlink" title="1.3 服务器端php中如何将数据转json字符串"></a><strong>1.3 服务器端php中如何将数据转json字符串</strong></h4><h4 id="php-array–-gt-json-string"><a href="#php-array–-gt-json-string" class="headerlink" title="php {array–&gt;json string}"></a><strong>php {array–&gt;json string}</strong></h4><h4 id="php函数：json-encode-索引数组、关联数组都能转换"><a href="#php函数：json-encode-索引数组、关联数组都能转换" class="headerlink" title="php函数：json_encode( );      索引数组、关联数组都能转换"></a><strong>php函数：json_encode( );      索引数组、关联数组都能转换</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$str =json_encode($arr);</span><br><span class="line">  echo $str;    由于发送json格式字符串，需要指定输出格式</span><br><span class="line"> header(“content-type:application/json;charset=utf<span class="number">-8</span>”);    </span><br></pre></td></tr></table></figure><p><img src="http://imagehosting.biz/images/2018/04/13/_20180413205218.jpg" alt="我是图片"></p><hr><h4 id="1-4-客户端将json字符串解析js对象"><a href="#1-4-客户端将json字符串解析js对象" class="headerlink" title="1.4 客户端将json字符串解析js对象"></a><strong>1.4 客户端将json字符串解析js对象</strong></h4><p><strong>html(json string–&gt;js object)</strong><br><strong>客户端浏览器 JSON.parse();</strong><br><strong>var result = JSON.parse(str);</strong><br><strong>result 已经是js对象[ ] / { }</strong></p><h4 id="简洁解决方式"><a href="#简洁解决方式" class="headerlink" title="简洁解决方式"></a><strong>简洁解决方式</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$.get();   自动json.parse( );</span><br><span class="line">$getJSON();        自动json.parse( );</span><br></pre></td></tr></table></figure><p><img src="http://imagehosting.biz/images/2018/04/13/_20180413205231.jpg" alt="我是图片"></p><p><strong>a：从数据库中一次性抓取全部表转二维数组</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ json = mysqli_fetch_all($result,MYSQLI_ASSOC)</span><br></pre></td></tr></table></figure><p><strong>b：jquery 循环函数   html += <code>;   </code> 来做循环</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.echo(data,function(i,obj)&#123; &#125;)</span><br></pre></td></tr></table></figure><p><img src="http://imagehosting.biz/images/2018/04/13/_20180413205237.jpg" alt="我是图片"><br><img src="http://imagehosting.biz/images/2018/04/13/_20180413205247.jpg" alt="我是图片"></p><h3 id="html-html代码段-可以在中间直接写代码段"><a href="#html-html代码段-可以在中间直接写代码段" class="headerlink" title="html +=html代码段;可以在中间直接写代码段"></a><strong>html +=<code>html代码段</code>;可以在中间直接写代码段</strong></h3><h4 id="2、跨域-CRoss-DominRquqest"><a href="#2、跨域-CRoss-DominRquqest" class="headerlink" title="2、跨域 CRoss DominRquqest"></a><strong>2、跨域 CRoss DominRquqest</strong></h4><h4 id="从一个域名下的某个资源访问另一个域名下的某个资源。"><a href="#从一个域名下的某个资源访问另一个域名下的某个资源。" class="headerlink" title="从一个域名下的某个资源访问另一个域名下的某个资源。"></a>从一个域名下的某个资源访问另一个域名下的某个资源。</h4><h4 id="示例：http-tmooc-cn-1-html"><a href="#示例：http-tmooc-cn-1-html" class="headerlink" title="示例：http://tmooc.cn/1.html"></a>示例：<a href="http://tmooc.cn/1.html">http://tmooc.cn/1.html</a></h4><h4 id="a-img-script-css-ajax-想访问百度的2-php"><a href="#a-img-script-css-ajax-想访问百度的2-php" class="headerlink" title="a img script css ajax 想访问百度的2.php"></a>a img script css ajax 想访问百度的2.php</h4><h4 id="访问：http-www-baidu-com-2-php"><a href="#访问：http-www-baidu-com-2-php" class="headerlink" title="访问：http://www.baidu.com/2.php"></a>访问：<a href="http://www.baidu.com/2.php">http://www.baidu.com/2.php</a></h4><h4 id="2-1跨域的种类-4种"><a href="#2-1跨域的种类-4种" class="headerlink" title="2.1跨域的种类 4种"></a><strong>2.1跨域的种类 4种</strong></h4><h4 id="1：两个域名不同"><a href="#1：两个域名不同" class="headerlink" title="1：两个域名不同"></a>1：两个域名不同</h4><h4 id="2：协议名不同-https-http"><a href="#2：协议名不同-https-http" class="headerlink" title="2：协议名不同     https  http"></a>2：协议名不同     https  http</h4><h4 id="3：主机名-ip不同"><a href="#3：主机名-ip不同" class="headerlink" title="3：主机名/ip不同"></a>3：主机名/ip不同</h4><h4 id="4：端口号不同"><a href="#4：端口号不同" class="headerlink" title="4：端口号不同"></a>4：端口号不同</h4><p><strong>报错提示：</strong><br><img src="http://imagehosting.biz/images/2018/04/13/_20180413210739.jpg" alt="我是图片"></p><h3 id="2-2浏览器允许跨域请求情形"><a href="#2-2浏览器允许跨域请求情形" class="headerlink" title="2.2浏览器允许跨域请求情形"></a><strong>2.2浏览器允许跨域请求情形</strong></h3><pre><code>**img/link/script/iframe ……**</code></pre><h3 id="2-3浏览器禁止跨域请求情形"><a href="#2-3浏览器禁止跨域请求情形" class="headerlink" title="2.3浏览器禁止跨域请求情形"></a><strong>2.3浏览器禁止跨域请求情形</strong></h3><p><strong>浏览器默认禁止XHR跨域请求，跨域访问可能导致外来的数据，对当前页面造成安全风险。</strong><br><strong>$.get(“<a href="http://www.baidu.com/1.php%E2%80%9D">www.baidu.com/1.php”</a>,);    从百度拿来的ajax数据可能对当前页面造成安全风险</strong></p><h3 id="2-4解决方案JSONP"><a href="#2-4解决方案JSONP" class="headerlink" title="2.4解决方案JSONP{ }"></a><strong>2.4解决方案JSONP{ }</strong></h3><h3 id="JSON-与-JSONP区别："><a href="#JSON-与-JSONP区别：" class="headerlink" title="JSON 与 JSONP区别："></a><strong>JSON 与 JSONP区别：</strong></h3><p><strong>JSON：是一种字符串数据格式，用于描述批量数据。</strong><br><strong>JSONP：JSON withPadding 填充式JSON：是一种使用JSON数据的方法，用于解决浏览器XHR跨域请求的限制。</strong></p><h3 id="JSONP解决思路："><a href="#JSONP解决思路：" class="headerlink" title="JSONP解决思路："></a><strong>JSONP解决思路：</strong></h3><h6 id="1：发起异步请求，不使用（XHR），使用一个动态创建的script标签，来替换XHR"><a href="#1：发起异步请求，不使用（XHR），使用一个动态创建的script标签，来替换XHR" class="headerlink" title="1：发起异步请求，不使用（XHR），使用一个动态创建的script标签，来替换XHR"></a><strong>1：发起异步请求，不使用（XHR），使用一个动态创建的script标签，来替换XHR</strong></h6><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=”跨域地址/.php”&gt;&lt;/script&gt; </span><br></pre></td></tr></table></figure><h6 id="2：要求服务器必须返回一段js片段"><a href="#2：要求服务器必须返回一段js片段" class="headerlink" title="2：要求服务器必须返回一段js片段"></a><strong>2：要求服务器必须返回一段js片段</strong></h6><p>   <strong>doResponse({“name”:”tom”,”age”:20});</strong></p><h6 id="3：客户端特意提供一个函数"><a href="#3：客户端特意提供一个函数" class="headerlink" title="3：客户端特意提供一个函数"></a><strong>3：客户端特意提供一个函数</strong></h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">function <span class="title">doResponse</span><span class="params">(data)</span></span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-1-JSON-格式数据类型&quot;&gt;&lt;a href=&quot;#1-1-JSON-格式数据类型&quot; class=&quot;headerlink&quot; title=&quot;1.1 JSON 格式数据类型&quot;&gt;&lt;/a&gt;&lt;strong&gt;1.1 JSON 格式数据类型&lt;/strong&gt;&lt;/h3&gt;&lt;h4 </summary>
      
    
    
    
    <category term="AJAX" scheme="http://example.com/categories/AJAX/"/>
    
    
  </entry>
  
  <entry>
    <title>AJAX   用户登录，xml</title>
    <link href="http://example.com/2018/07/07/AJAX%20%20%20%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%EF%BC%8Cxml/"/>
    <id>http://example.com/2018/07/07/AJAX%20%20%20%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%EF%BC%8Cxml/</id>
    <published>2018-07-07T07:06:43.000Z</published>
    <updated>2019-07-17T08:30:07.319Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-用户登录-AJAX"><a href="#1-用户登录-AJAX" class="headerlink" title="1.用户登录 AJAX"></a><strong>1.用户登录 AJAX</strong></h3><h4 id="login-html-登录表单"><a href="#login-html-登录表单" class="headerlink" title="login.html    登录表单"></a>login.html    登录表单</h4><h6 id="1：填写用户名密码"><a href="#1：填写用户名密码" class="headerlink" title="1：填写用户名密码"></a><strong>1：填写用户名密码</strong></h6><h6 id="2：点击提交按钮—-gt-发送ajax请求，并且接收返回值"><a href="#2：点击提交按钮—-gt-发送ajax请求，并且接收返回值" class="headerlink" title="2：点击提交按钮—&gt;发送ajax请求，并且接收返回值"></a><strong>2：点击提交按钮—&gt;发送ajax请求，并且接收返回值</strong></h6><h3 id="success"><a href="#success" class="headerlink" title="success"></a><strong>success</strong></h3><h6 id="1：提示：alert"><a href="#1：提示：alert" class="headerlink" title="1：提示：alert();"></a><strong>1：提示：alert();</strong></h6><h6 id="2：自动跳转主程序-main-php"><a href="#2：自动跳转主程序-main-php" class="headerlink" title="2：自动跳转主程序 main.php"></a><strong>2：自动跳转主程序 main.php</strong></h6><h3 id="error-提示：alert"><a href="#error-提示：alert" class="headerlink" title="error  提示：alert();"></a><strong>error  提示：alert();</strong></h3><h3 id="login-do-php-处理表单程序"><a href="#login-do-php-处理表单程序" class="headerlink" title="login_do.php      处理表单程序"></a><strong>login_do.php      处理表单程序</strong></h3><h6 id="1：获取表单数据-uname-upwd"><a href="#1：获取表单数据-uname-upwd" class="headerlink" title="1：获取表单数据 uname upwd"></a>1：获取表单数据 uname upwd</h6><h6 id="2：查询数据库"><a href="#2：查询数据库" class="headerlink" title="2：查询数据库"></a>2：查询数据库</h6><h6 id="3：判断"><a href="#3：判断" class="headerlink" title="3：判断"></a>3：判断</h6><h6 id="4：输出-success——登录成功-error——登录失败"><a href="#4：输出-success——登录成功-error——登录失败" class="headerlink" title="4：输出     success——登录成功        error——登录失败"></a>4：输出     success——登录成功        error——登录失败</h6><p><img src="http://imagehosting.biz/images/2018/04/12/_20180413111142.jpg" alt="我是图片"></p><hr><h3 id="2、使用xhr接收响应信息（不同类型）"><a href="#2、使用xhr接收响应信息（不同类型）" class="headerlink" title="2、使用xhr接收响应信息（不同类型）"></a><strong>2、使用xhr接收响应信息（不同类型）</strong></h3><h5 id="a：text-plain（纯文本：字母、数字、汉字）"><a href="#a：text-plain（纯文本：字母、数字、汉字）" class="headerlink" title="a：text/plain（纯文本：字母、数字、汉字）"></a><strong>a：text/plain（纯文本：字母、数字、汉字）</strong></h5><h5 id="服务器：header-“content-type-text-plain-charset-utf-8”-通常放在php的最后两行"><a href="#服务器：header-“content-type-text-plain-charset-utf-8”-通常放在php的最后两行" class="headerlink" title="服务器：header(“content-type:text/plain;charset=utf-8”) #通常放在php的最后两行"></a>服务器：header(“content-type:text/plain;charset=utf-8”) #通常放在php的最后两行</h5><h5 id="echo“euccess”"><a href="#echo“euccess”" class="headerlink" title="echo“euccess”;"></a>echo“euccess”;</h5><h5 id="客户端：xhr-responseText"><a href="#客户端：xhr-responseText" class="headerlink" title="客户端：xhr.responseText;"></a>客户端：xhr.responseText;</h5><h5 id="b：text-html（html片段，不是完整DOM树）"><a href="#b：text-html（html片段，不是完整DOM树）" class="headerlink" title="b：text/html（html片段，不是完整DOM树）"></a><strong>b：text/html（html片段，不是完整DOM树）</strong></h5><h5 id="服务器：-header-“content-type-text-html-charset-utf-8”-通常放在php的最后几行"><a href="#服务器：-header-“content-type-text-html-charset-utf-8”-通常放在php的最后几行" class="headerlink" title="服务器： header(“content-type:text/html;charset=utf-8”) #通常放在php的最后几行"></a>服务器： header(“content-type:text/html;charset=utf-8”) #通常放在php的最后几行</h5><h5 id="echo“指南大全”"><a href="#echo“指南大全”" class="headerlink" title="echo“指南大全”;"></a>echo“<li>指南</li><li>大全</li>”;</h5><h5 id="客户端：xhr-responseText-1"><a href="#客户端：xhr-responseText-1" class="headerlink" title="客户端：xhr.responseText"></a>客户端：xhr.responseText</h5><h5 id="示例-搜索建议"><a href="#示例-搜索建议" class="headerlink" title="示例:搜索建议"></a><strong>示例:搜索建议</strong></h5><h4 id="1-编写sql-库-dangdang-t-book"><a href="#1-编写sql-库-dangdang-t-book" class="headerlink" title="1:编写sql 库 dangdang/t_book"></a>1:编写sql 库 dangdang/t_book</h4><h4 id="2-添加20行"><a href="#2-添加20行" class="headerlink" title="2:添加20行"></a>2:添加20行</h4><h4 id="3-book-search-html"><a href="#3-book-search-html" class="headerlink" title="3:book_search.html"></a>3:book_search.html</h4><h6 id="输入框中只要有一个输入"><a href="#输入框中只要有一个输入" class="headerlink" title="输入框中只要有一个输入,"></a>输入框中只要有一个输入,</h6><h6 id="onkeyup——按完按键之后（keydown：只有在按着键盘的时候才会执行）"><a href="#onkeyup——按完按键之后（keydown：只有在按着键盘的时候才会执行）" class="headerlink" title="onkeyup——按完按键之后（keydown：只有在按着键盘的时候才会执行）"></a>onkeyup——按完按键之后（keydown：只有在按着键盘的时候才会执行）</h6><h6 id="则发起一个GET异步请求"><a href="#则发起一个GET异步请求" class="headerlink" title="则发起一个GET异步请求,"></a>则发起一个GET异步请求,</h6><h6 id="获取包含当前关键字书名列表"><a href="#获取包含当前关键字书名列表" class="headerlink" title="获取包含当前关键字书名列表"></a>获取包含当前关键字书名列表</h6><h4 id="4-book-search-do-php"><a href="#4-book-search-do-php" class="headerlink" title="4:book_search_do.php"></a>4:book_search_do.php</h4><h6 id="a-获取用户输入关键字-css"><a href="#a-获取用户输入关键字-css" class="headerlink" title="a:获取用户输入关键字 css"></a>a:获取用户输入关键字 css</h6><h6 id="b-查询数据库中所有包含css书名图书"><a href="#b-查询数据库中所有包含css书名图书" class="headerlink" title="b:查询数据库中所有包含css书名图书"></a>b:查询数据库中所有包含css书名图书</h6><h6 id="c-拼一个html片段"><a href="#c-拼一个html片段" class="headerlink" title="c:拼一个html片段"></a>c:拼一个html片段</h6><h6 id="css指南"><a href="#css指南" class="headerlink" title="css指南"></a><li>css指南<li></h6><h6 id="css大全"><a href="#css大全" class="headerlink" title="css大全"></a><li>css大全</li></h6><p><strong>SELECT titleFROM t_book WHERE title like ‘%j%’;</strong><br><strong>%$kw——以kw为结尾；$kw%——以kw为开头；%$kw%——包含kw</strong><br><strong>采用post方法发送请求</strong></p><h5 id="改二行加一行"><a href="#改二行加一行" class="headerlink" title="#改二行加一行"></a><strong>#改二行加一行</strong></h5><p><strong>xhr.open(‘POST’,’book_search_do.php’,true);</strong><br><strong>xhr.setRequestHeader(‘Content-Type’,’application/x-www-form-urlencoded’);</strong><br><strong>xhr.send(‘k=v&amp;k1=v1&amp;k2=v2’);</strong><br><img src="http://imagehosting.biz/images/2018/04/12/_20180413111148.jpg" alt="我是图片"><br><img src="http://imagehosting.biz/images/2018/04/12/_20180413111209.jpg" alt="我是图片"></p><h3 id="c：application-javascript-js-—不同人群看到的网页内容不同"><a href="#c：application-javascript-js-—不同人群看到的网页内容不同" class="headerlink" title="c：application/javascript(js)—不同人群看到的网页内容不同"></a><strong>c：application/javascript(js)—不同人群看到的网页内容不同</strong></h3><h5 id="一般的js书写在js文件中，使用script标签请求（静态的js）；任何人任何时间访问js都一样。"><a href="#一般的js书写在js文件中，使用script标签请求（静态的js）；任何人任何时间访问js都一样。" class="headerlink" title="一般的js书写在js文件中，使用script标签请求（静态的js）；任何人任何时间访问js都一样。"></a>一般的js书写在js文件中，使用script标签请求（静态的js）；任何人任何时间访问js都一样。</h5><h5 id="在些情况下-需要服务器返回”动态js”——根据客户端不同或访问时间不同；js不同"><a href="#在些情况下-需要服务器返回”动态js”——根据客户端不同或访问时间不同；js不同" class="headerlink" title="在些情况下,需要服务器返回”动态js”——根据客户端不同或访问时间不同；js不同"></a>在些情况下,需要服务器返回”动态js”——根据客户端不同或访问时间不同；js不同</h5><h6 id="服务器：修改服务器响应的主体类型"><a href="#服务器：修改服务器响应的主体类型" class="headerlink" title="服务器：修改服务器响应的主体类型"></a><strong>服务器</strong>：修改服务器响应的主体类型</h6><h5 id="header-‘content-type-application-javascript’"><a href="#header-‘content-type-application-javascript’" class="headerlink" title="header(‘content-type:application/javascript’);"></a>header(‘content-type:application/javascript’);</h5><h5 id="echo-“var-msg-10-alert-msg-”"><a href="#echo-“var-msg-10-alert-msg-”" class="headerlink" title="echo “var msg =10;alert(msg);”;"></a>echo “var msg =10;alert(msg);”;</h5><h6 id="客户端：eval-函数执行字符串格式js程序"><a href="#客户端：eval-函数执行字符串格式js程序" class="headerlink" title="客户端：eval();函数执行字符串格式js程序"></a><strong>客户端</strong>：eval();函数执行字符串格式js程序</h6><h3 id="eval-xhr-responseText-把js解析出来"><a href="#eval-xhr-responseText-把js解析出来" class="headerlink" title="eval(xhr.responseText);把js解析出来"></a>eval(xhr.responseText);把js解析出来</h3><h6 id="实现i18n国际化-internationalization"><a href="#实现i18n国际化-internationalization" class="headerlink" title="实现i18n国际化(internationalization)"></a><strong>实现i18n国际化</strong>(internationalization)</h6><h6 id="页面加载完成-onload"><a href="#页面加载完成-onload" class="headerlink" title="页面加载完成 onload"></a><strong>页面加载完成</strong> onload</h6><h6 id="1-编写php-读取客户端请求头部"><a href="#1-编写php-读取客户端请求头部" class="headerlink" title="1:编写php 读取客户端请求头部"></a><strong>1:编写php 读取客户端请求头部</strong></h6><h6 id="Accept-Language-截取前两个字母-zh-ja-en"><a href="#Accept-Language-截取前两个字母-zh-ja-en" class="headerlink" title="(Accept-Language)截取前两个字母,zh/ja/en"></a>(Accept-Language)截取前两个字母,zh/ja/en</h6><h6 id="读取客户请求所有头部-list-getallheaders"><a href="#读取客户请求所有头部-list-getallheaders" class="headerlink" title="读取客户请求所有头部$list=  getallheaders();"></a>读取客户请求所有头部$list=  getallheaders();</h6><h6 id="从0位开始截取2个字母substr-lang-0-2"><a href="#从0位开始截取2个字母substr-lang-0-2" class="headerlink" title="从0位开始截取2个字母substr($lang,0,2);"></a>从0位开始截取2个字母substr($lang,0,2);</h6><h6 id="客户端的首选语言，据此返回不同语言"><a href="#客户端的首选语言，据此返回不同语言" class="headerlink" title="客户端的首选语言，据此返回不同语言."></a>客户端的首选语言，据此返回不同语言.</h6><h6 id="2-编写html"><a href="#2-编写html" class="headerlink" title="2:编写html"></a><strong>2:编写html</strong></h6><h6 id="待页面加载完成，发起异步请求-GET"><a href="#待页面加载完成，发起异步请求-GET" class="headerlink" title="待页面加载完成，发起异步请求,GET"></a>待页面加载完成，发起异步请求,GET</h6><p><img src="http://imagehosting.biz/images/2018/04/12/_20180413111201.jpg" alt="我是图片"><br><img src="http://imagehosting.biz/images/2018/04/12/_20180413111203.jpg" alt="我是图片"></p><h3 id="d：XML"><a href="#d：XML" class="headerlink" title="d：XML"></a><strong>d：XML</strong></h3><h6 id="服务器向客户端发送一个批量的复合数据"><a href="#服务器向客户端发送一个批量的复合数据" class="headerlink" title="服务器向客户端发送一个批量的复合数据"></a>服务器向客户端发送一个批量的复合数据</h6><h6 id="批量复合数据：一个数组，包含多个数组"><a href="#批量复合数据：一个数组，包含多个数组" class="headerlink" title="批量复合数据：一个数组，包含多个数组"></a>批量复合数据：一个数组，包含多个数组</h6><h6 id=""><a href="#" class="headerlink" title="["></a>[</h6><h6 id="id-gt-1-name-gt-’tom1’"><a href="#id-gt-1-name-gt-’tom1’" class="headerlink" title="[id=&gt;1,name=&gt;’tom1’],"></a>[id=&gt;1,name=&gt;’tom1’],</h6><h6 id="id-gt-2-name-gt-’tom2’"><a href="#id-gt-2-name-gt-’tom2’" class="headerlink" title="[id=&gt;2,name=&gt;’tom2’],"></a>[id=&gt;2,name=&gt;’tom2’],</h6><h6 id="-1"><a href="#-1" class="headerlink" title="]"></a>]</h6><h6 id="1：text-html"><a href="#1：text-html" class="headerlink" title="1：text/html"></a>1：text/html</h6><h6 id="1tom1"><a href="#1tom1" class="headerlink" title="1tom1"></a><tr><td>1</td><td>tom1</td></tr></h6><h6 id="2tom2"><a href="#2tom2" class="headerlink" title="2tom2"></a><tr><td>2</td><td>tom2</td></tr></h6><h6 id="2：application-xml"><a href="#2：application-xml" class="headerlink" title="2：application/xml"></a>2：application/xml</h6><h6 id="xml：通用性少"><a href="#xml：通用性少" class="headerlink" title="xml：通用性少"></a>xml：通用性少</h6><h6 id="html：超文本标记语言，所有标签预定义号，用于描述一个网页"><a href="#html：超文本标记语言，所有标签预定义号，用于描述一个网页" class="headerlink" title="html：超文本标记语言，所有标签预定义号，用于描述一个网页"></a>html：超文本标记语言，所有标签预定义号，用于描述一个网页<h1></h1><h6></h6></h6><h6 id="xml：可扩展的标签语言，所有标签自定义"><a href="#xml：可扩展的标签语言，所有标签自定义" class="headerlink" title="xml：可扩展的标签语言，所有标签自定义"></a>xml：可扩展的标签语言，所有标签自定义</h6><h6 id="xml语法要求"><a href="#xml语法要求" class="headerlink" title="xml语法要求"></a>xml语法要求</h6><h6 id="1：xml文档声明（第一行）"><a href="#1：xml文档声明（第一行）" class="headerlink" title="1：xml文档声明（第一行）"></a>1：xml文档声明（第一行）</h6><h6 id="-2"><a href="#-2" class="headerlink" title=""></a><?xml version=”1.0” encoding=”utf-8”?></h6><h6 id="2：整篇xml字符串有且只能有一个根元素"><a href="#2：整篇xml字符串有且只能有一个根元素" class="headerlink" title="2：整篇xml字符串有且只能有一个根元素"></a>2：整篇xml字符串有且只能有一个根元素</h6><h6 id="3：标签又开始就必须要有结束，开始结束标签必须完全相同"><a href="#3：标签又开始就必须要有结束，开始结束标签必须完全相同" class="headerlink" title="3：标签又开始就必须要有结束，开始结束标签必须完全相同"></a>3：标签又开始就必须要有结束，开始结束标签必须完全相同<book></book></h6><h6 id="4：标签可以嵌套，但不能交叉"><a href="#4：标签可以嵌套，但不能交叉" class="headerlink" title="4：标签可以嵌套，但不能交叉"></a>4：标签可以嵌套，但不能交叉</h6><h6 id="5：标签可以有任意属性，属性值必须用双引号括起来"><a href="#5：标签可以有任意属性，属性值必须用双引号括起来" class="headerlink" title="5：标签可以有任意属性，属性值必须用双引号括起来"></a>5：标签可以有任意属性，属性值必须用双引号括起来</h6><p><img src="http://imagehosting.biz/images/2018/04/12/_20180413111206.jpg" alt="我是图片"><br><img src="http://imagehosting.biz/images/2018/04/12/_20180413111209.jpg" alt="我是图片"><br><img src="http://imagehosting.biz/images/2018/04/12/_20180413111212.jpg" alt="我是图片"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-用户登录-AJAX&quot;&gt;&lt;a href=&quot;#1-用户登录-AJAX&quot; class=&quot;headerlink&quot; title=&quot;1.用户登录 AJAX&quot;&gt;&lt;/a&gt;&lt;strong&gt;1.用户登录 AJAX&lt;/strong&gt;&lt;/h3&gt;&lt;h4 id=&quot;login-html-登</summary>
      
    
    
    
    <category term="AJAX" scheme="http://example.com/categories/AJAX/"/>
    
    
  </entry>
  
  <entry>
    <title>AJAX jquery简化ajax（工作重点）</title>
    <link href="http://example.com/2018/07/07/AJAX%20%20jquery%E7%AE%80%E5%8C%96ajax%EF%BC%88%E5%B7%A5%E4%BD%9C%E9%87%8D%E7%82%B9%EF%BC%89/"/>
    <id>http://example.com/2018/07/07/AJAX%20%20jquery%E7%AE%80%E5%8C%96ajax%EF%BC%88%E5%B7%A5%E4%BD%9C%E9%87%8D%E7%82%B9%EF%BC%89/</id>
    <published>2018-07-07T07:06:43.000Z</published>
    <updated>2019-07-17T08:30:17.966Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简洁方式完成ajax任务——jquery"><a href="#简洁方式完成ajax任务——jquery" class="headerlink" title="简洁方式完成ajax任务——jquery"></a><strong>简洁方式完成ajax任务——jquery</strong></h3><h5 id="jquery方法：功能：发送一个ajax请求（php与html不需要修改响应头）"><a href="#jquery方法：功能：发送一个ajax请求（php与html不需要修改响应头）" class="headerlink" title="#jquery方法：功能：发送一个ajax请求（php与html不需要修改响应头）"></a><strong>#jquery方法：功能：发送一个ajax请求（php与html不需要修改响应头）</strong></h5><h5 id="url-请求地址"><a href="#url-请求地址" class="headerlink" title="#url 请求地址"></a><strong>#url 请求地址</strong></h5><h5 id="function-data-回调函数–-gt-当请求结束后自动调用函数"><a href="#function-data-回调函数–-gt-当请求结束后自动调用函数" class="headerlink" title="#function(data){} 回调函数–&gt;当请求结束后自动调用函数"></a><strong>#function(data){} 回调函数–&gt;当请求结束后自动调用函数</strong></h5><h5 id="data-服务器端的响应主体"><a href="#data-服务器端的响应主体" class="headerlink" title="#data 服务器端的响应主体"></a><strong>#data 服务器端的响应主体</strong></h5><h2 id="get-url-function-data"><a href="#get-url-function-data" class="headerlink" title="$.get(url,function(data){});"></a><strong>$.get(url,function(data){});</strong></h2><p><img src="http://imagehosting.biz/images/2018/04/13/_20180413135516.jpg" alt="我是图片"></p><h5 id="总结："><a href="#总结：" class="headerlink" title="总结："></a><strong>总结</strong>：</h5><h5 id="1：创建库"><a href="#1：创建库" class="headerlink" title="1：创建库"></a><strong>1：创建库</strong></h5><h5 id="2：创建php"><a href="#2：创建php" class="headerlink" title="2：创建php{}"></a><strong>2：创建php{}</strong></h5><h5 id="3：执行php-地址栏输入回车"><a href="#3：执行php-地址栏输入回车" class="headerlink" title="3：执行php{地址栏输入回车}"></a><strong>3：执行php{地址栏输入回车}</strong></h5><h5 id="4：书写html-get"><a href="#4：书写html-get" class="headerlink" title="4：书写html $.get"></a><strong>4：书写html $.get</strong></h5><hr><h3 id="2、理论"><a href="#2、理论" class="headerlink" title="2、理论"></a><strong>2、理论</strong></h3><h5 id="get发送的数据，中文有可能会出现乱码，但是最新版本的浏览器可以直接编译"><a href="#get发送的数据，中文有可能会出现乱码，但是最新版本的浏览器可以直接编译" class="headerlink" title="get发送的数据，中文有可能会出现乱码，但是最新版本的浏览器可以直接编译"></a><strong>get发送的数据，中文有可能会出现乱码，但是最新版本的浏览器可以直接编译</strong></h5><h5 id="jquery解决方案"><a href="#jquery解决方案" class="headerlink" title="jquery解决方案"></a><strong>jquery解决方案</strong></h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.get();         $.post();        $.ajax();        $(选择器).load();    $.getScript();              $.getJSON();</span><br></pre></td></tr></table></figure><h5 id="post-含义：发送一个ajax-post请求，并在请求主体中提交请求数据，如果服务器返回数据"><a href="#post-含义：发送一个ajax-post请求，并在请求主体中提交请求数据，如果服务器返回数据" class="headerlink" title="$.post();含义：发送一个ajax post请求，并在请求主体中提交请求数据，如果服务器返回数据"></a><strong>$.post();含义：发送一个ajax post请求，并在请求主体中提交请求数据，如果服务器返回数据</strong></h5><h5 id="在回调函数中接收"><a href="#在回调函数中接收" class="headerlink" title="在回调函数中接收"></a><strong>在回调函数中接收</strong></h5><h5 id="语法：-post-url-data-fn"><a href="#语法：-post-url-data-fn" class="headerlink" title="语法：$.post(url,data,fn);"></a><strong>语法：$.post(url,data,fn);</strong></h5><h5 id="post-‘3-php’-’age-19-amp-id-3’-fn"><a href="#post-‘3-php’-’age-19-amp-id-3’-fn" class="headerlink" title="$.post(‘3.php’,’age=19&amp;id=3’,fn);"></a><strong>$.post(‘3.php’,’age=19&amp;id=3’,fn);</strong></h5><h5 id="post-‘3-php’-age-19-id-3-fn"><a href="#post-‘3-php’-age-19-id-3-fn" class="headerlink" title="$.post(‘3.php’,{age:19,id:3},fn);"></a><strong>$.post(‘3.php’,{age:19,id:3},fn);</strong></h5><p><img src="http://imagehosting.biz/images/2018/04/13/_20180413135507.jpg" alt="我是图片"><br><img src="http://imagehosting.biz/images/2018/04/13/_20180413140646.jpg" alt="我是图片"></p><h2 id="ajax-（重点）"><a href="#ajax-（重点）" class="headerlink" title="$.ajax(); （重点）"></a><strong>$.ajax(); （重点）</strong></h2><h4 id="万能的ajax函数，提供非常多的可选项，可以处理各种情况-前面函数都是-ajax-简化版本"><a href="#万能的ajax函数，提供非常多的可选项，可以处理各种情况-前面函数都是-ajax-简化版本" class="headerlink" title="万能的ajax函数，提供非常多的可选项，可以处理各种情况 . 前面函数都是$.ajax()简化版本"></a><strong>万能的ajax函数，提供非常多的可选项，可以处理各种情况 . 前面函数都是$.ajax()简化版本</strong></h4><h4 id="标准语法"><a href="#标准语法" class="headerlink" title="标准语法"></a><strong>标准语法</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    type:&#39;GET&#39;,   &#x2F;POST&#x2F;PUT&#x2F;DELETE&#x2F;HEAD</span><br><span class="line">    url:&#39;x.php&#39;,</span><br><span class="line">    data:&#39;k&#x3D;v&amp;k&#x3D;v&#39;, &#x2F;&#x2F;提交服务器的请求数据</span><br><span class="line">    beforeSend:fn,  &#x2F;&#x2F;请求消息发送之前回调函数</span><br><span class="line">    success:fn,     &#x2F;&#x2F;响应完成且成功回调</span><br><span class="line">    error:fn,       &#x2F;&#x2F;响应完成但有问题回调</span><br><span class="line">    complete:fn     &#x2F;&#x2F;响应完成后回调</span><br><span class="line">    &#x2F;&#x2F;(无论成功失败都调用)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="http://imagehosting.biz/images/2018/04/13/_20180413135519.jpg" alt="我是图片"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;简洁方式完成ajax任务——jquery&quot;&gt;&lt;a href=&quot;#简洁方式完成ajax任务——jquery&quot; class=&quot;headerlink&quot; title=&quot;简洁方式完成ajax任务——jquery&quot;&gt;&lt;/a&gt;&lt;strong&gt;简洁方式完成ajax任务——jque</summary>
      
    
    
    
    <category term="AJAX" scheme="http://example.com/categories/AJAX/"/>
    
    
  </entry>
  
  <entry>
    <title>AJAX HTTP协议响应、AJAX核心对象.</title>
    <link href="http://example.com/2018/07/06/AJAX%20HTTP%E5%8D%8F%E8%AE%AE%E5%93%8D%E5%BA%94%E3%80%81AJAX%E6%A0%B8%E5%BF%83%E5%AF%B9%E8%B1%A1/"/>
    <id>http://example.com/2018/07/06/AJAX%20HTTP%E5%8D%8F%E8%AE%AE%E5%93%8D%E5%BA%94%E3%80%81AJAX%E6%A0%B8%E5%BF%83%E5%AF%B9%E8%B1%A1/</id>
    <published>2018-07-06T07:06:43.000Z</published>
    <updated>2019-07-17T08:30:24.844Z</updated>
    
    <content type="html"><![CDATA[<h3 id="八种请求方法有哪些"><a href="#八种请求方法有哪些" class="headerlink" title="八种请求方法有哪些?"></a>八种请求方法有哪些?</h3><p><img src="http://imagehosting.biz/images/2018/04/12/_20180413103354.jpg" alt="我是图片"></p><h4 id="GET请求与POST请求区别？"><a href="#GET请求与POST请求区别？" class="headerlink" title="GET请求与POST请求区别？"></a><strong>GET请求与POST请求区别？</strong></h4><h4 id="1、语义"><a href="#1、语义" class="headerlink" title="1、语义"></a><strong>1、语义</strong></h4><h6 id="GET客户端想获取服务器指定资源"><a href="#GET客户端想获取服务器指定资源" class="headerlink" title="GET客户端想获取服务器指定资源"></a><strong>GET客户端想获取服务器指定资源</strong></h6><h6 id="POST客户端向传递数据给服务器"><a href="#POST客户端向传递数据给服务器" class="headerlink" title="POST客户端向传递数据给服务器"></a><strong>POST客户端向传递数据给服务器</strong></h6><h4 id="2、安全级别-解决：加密"><a href="#2、安全级别-解决：加密" class="headerlink" title="2、安全级别         解决：加密"></a><strong>2、安全级别         解决：加密</strong></h4><h6 id="GET与POST都不安全"><a href="#GET与POST都不安全" class="headerlink" title="GET与POST都不安全"></a><strong>GET与POST都不安全</strong></h6><h4 id="3、数据长度"><a href="#3、数据长度" class="headerlink" title="3、数据长度"></a><strong>3、数据长度</strong></h4><h6 id="GET：1KB-请求在请求起始行后添加-id-1-amp-aget-19"><a href="#GET：1KB-请求在请求起始行后添加-id-1-amp-aget-19" class="headerlink" title="GET：1KB     请求在请求起始行后添加 ?id=1&amp;aget=19"></a><strong>GET：1KB     请求在请求起始行后添加 ?id=1&amp;aget=19</strong></h6><h6 id="POST：没限制-请求在请求主体中-data"><a href="#POST：没限制-请求在请求主体中-data" class="headerlink" title="POST：没限制     请求在请求主体中 data"></a><strong>POST：没限制     请求在请求主体中 data</strong></h6><h4 id="4、是否需要编码"><a href="#4、是否需要编码" class="headerlink" title="4、是否需要编码"></a><strong>4、是否需要编码</strong></h4><h6 id="GET没有编码——中文乱码"><a href="#GET没有编码——中文乱码" class="headerlink" title="GET没有编码——中文乱码"></a><strong>GET没有编码——中文乱码</strong></h6><h6 id="POST自动编码——不容易出现中文乱码"><a href="#POST自动编码——不容易出现中文乱码" class="headerlink" title="POST自动编码——不容易出现中文乱码"></a><strong>POST自动编码——不容易出现中文乱码</strong></h6><h4 id="5、如何发起"><a href="#5、如何发起" class="headerlink" title="5、如何发起"></a><strong>5、如何发起</strong></h4><p><strong>GET</strong><br>    <strong>1：浏览器地址输入一个URL 回车</strong><br>    <strong>2：标签 a href /img src 都会有请求</strong><br>    <strong>3：表单 GET</strong><br>    <strong>4：JS  location.href=”1.html”;</strong><br>    <strong>5：AJAX GET</strong><br><strong>POST</strong><br>    <strong>1：表单 POST</strong><br>    <strong>2：AJAX POST</strong></p><h4 id="如何使用http协议相关知识进行网页访问优化"><a href="#如何使用http协议相关知识进行网页访问优化" class="headerlink" title="如何使用http协议相关知识进行网页访问优化"></a><strong>如何使用http协议相关知识进行网页访问优化</strong></h4><h4 id="提示：web访问优化可以从很多方面考虑"><a href="#提示：web访问优化可以从很多方面考虑" class="headerlink" title="提示：web访问优化可以从很多方面考虑"></a><strong>提示：web访问优化可以从很多方面考虑</strong></h4><h4 id="如：数据库-php-web服务器-网速-传输数据-浏览器解析速（html-css-js…）"><a href="#如：数据库-php-web服务器-网速-传输数据-浏览器解析速（html-css-js…）" class="headerlink" title="如：数据库/php/web服务器/网速/传输数据/浏览器解析速（html/css/js…）"></a><strong>如：数据库/php/web服务器/网速/传输数据/浏览器解析速（html/css/js…）</strong></h4><h4 id="从http请求和响应角度考虑："><a href="#从http请求和响应角度考虑：" class="headerlink" title="从http请求和响应角度考虑："></a><strong>从http请求和响应角度考虑：</strong></h4><h5 id="1：域名解析（DNS）-——减少引用外部网站资源"><a href="#1：域名解析（DNS）-——减少引用外部网站资源" class="headerlink" title="1：域名解析（DNS） ——减少引用外部网站资源"></a><strong>1：域名解析（DNS） ——减少引用外部网站资源</strong></h5><h6 id="尽可能减少域名的解析次数——减少跨站外部资源的引用。"><a href="#尽可能减少域名的解析次数——减少跨站外部资源的引用。" class="headerlink" title="尽可能减少域名的解析次数——减少跨站外部资源的引用。"></a><strong>尽可能减少域名的解析次数——减少跨站外部资源的引用。</strong></h6><h6 id="www-baidu-com-191-10-1-1"><a href="#www-baidu-com-191-10-1-1" class="headerlink" title="www.baidu.com 191.10.1.1"></a><strong><a href="http://www.baidu.com/">www.baidu.com</a> 191.10.1.1</strong></h6><h6 id="减少引用外部网站的次数"><a href="#减少引用外部网站的次数" class="headerlink" title="减少引用外部网站的次数"></a><strong>减少引用外部网站的次数</strong></h6><p><img src="http://imagehosting.biz/images/2018/04/12/_20180413103358.jpg" alt="我是图片"></p><h5 id="2：创建连接——持久连接"><a href="#2：创建连接——持久连接" class="headerlink" title="2：创建连接——持久连接"></a><strong>2：创建连接——持久连接</strong></h5><h6 id="努力减少连接创建次数-使用："><a href="#努力减少连接创建次数-使用：" class="headerlink" title="努力减少连接创建次数-使用："></a><strong>努力减少连接创建次数-使用：</strong></h6><h6 id="Connection-keep-alive启动持久连接"><a href="#Connection-keep-alive启动持久连接" class="headerlink" title="Connection:keep-alive启动持久连接"></a><strong>Connection:keep-alive启动持久连接</strong></h6><h5 id="3：发送请求——CSS精灵图"><a href="#3：发送请求——CSS精灵图" class="headerlink" title="3：发送请求——CSS精灵图"></a><strong>3：发送请求——CSS精灵图</strong></h5><h6 id="尽量减少请求次数，合理进行资源合并，合理使用缓存——使用css精灵图，减少多张图片"><a href="#尽量减少请求次数，合理进行资源合并，合理使用缓存——使用css精灵图，减少多张图片" class="headerlink" title="尽量减少请求次数，合理进行资源合并，合理使用缓存——使用css精灵图，减少多张图片"></a><strong>尽量减少请求次数，合理进行资源合并，合理使用缓存——使用css精灵图，减少多张图片</strong></h6><h5 id="4：等待响应——更换服务器"><a href="#4：等待响应——更换服务器" class="headerlink" title="4：等待响应——更换服务器"></a><strong>4：等待响应——更换服务器</strong></h5><h6 id="提高服务器运行速度——提高数据的运算及查询速度"><a href="#提高服务器运行速度——提高数据的运算及查询速度" class="headerlink" title="提高服务器运行速度——提高数据的运算及查询速度"></a><strong>提高服务器运行速度——提高数据的运算及查询速度</strong></h6><h5 id="5：接收响应——压缩代码"><a href="#5：接收响应——压缩代码" class="headerlink" title="5：接收响应——压缩代码"></a><strong>5：接收响应——压缩代码</strong></h5><h6 id="尽可能减少响应数据长度——删除空白字符，启用压缩"><a href="#尽可能减少响应数据长度——删除空白字符，启用压缩" class="headerlink" title="尽可能减少响应数据长度——删除空白字符，启用压缩"></a><strong>尽可能减少响应数据长度——删除空白字符，启用压缩</strong></h6><h6 id="在线压缩http-tool-oschina-net-jscompress"><a href="#在线压缩http-tool-oschina-net-jscompress" class="headerlink" title="#在线压缩http://tool.oschina.net/jscompress/"></a><strong>#在线压缩<a href="http://tool.oschina.net/jscompress/">http://tool.oschina.net/jscompress/</a></strong></h6><h6 id="大批量js压缩YUI-Compressor-java"><a href="#大批量js压缩YUI-Compressor-java" class="headerlink" title="#大批量js压缩YUI Compressor(java)"></a><strong>#大批量js压缩YUI Compressor(java)</strong></h6><hr><h4 id="1、如何修改http消息头部"><a href="#1、如何修改http消息头部" class="headerlink" title="1、如何修改http消息头部"></a><strong>1、如何修改http消息头部</strong></h4><h4 id="1：修改web服务器配置文件"><a href="#1：修改web服务器配置文件" class="headerlink" title="1：修改web服务器配置文件"></a><strong>1：修改web服务器配置文件</strong></h4><h4 id="2：在html中文件-meta"><a href="#2：在html中文件-meta" class="headerlink" title="2：在html中文件 meta"></a><strong>2：在html中文件 meta</strong></h4><h5 id="lt-meta-http-equiv-”content-type”-content-”text-html-charset-utf-8”-gt"><a href="#lt-meta-http-equiv-”content-type”-content-”text-html-charset-utf-8”-gt" class="headerlink" title="&lt;meta http-equiv=”content-type” content=”text/html;charset=utf-8”&gt;"></a>&lt;meta http-equiv=”content-type” content=”text/html;charset=utf-8”&gt;</h5><h5 id="3：使用服务器端语言设置响应消息"><a href="#3：使用服务器端语言设置响应消息" class="headerlink" title="3：使用服务器端语言设置响应消息"></a><strong>3：使用服务器端语言设置响应消息</strong></h5><h5 id="php的一个函数-header-“content-type-text-html-charset-utf-8”"><a href="#php的一个函数-header-“content-type-text-html-charset-utf-8”" class="headerlink" title="php的一个函数 header(“content-type:text/html;charset=utf-8”);"></a>php的一个函数 header(“content-type:text/html;charset=utf-8”);</h5><h5 id="2、AJAX"><a href="#2、AJAX" class="headerlink" title="2、AJAX"></a><strong>2、AJAX</strong></h5><h5 id="用户注册功能："><a href="#用户注册功能：" class="headerlink" title="用户注册功能："></a><strong>用户注册功能：</strong></h5><h6 id="user-reg-html-表单-用户名-密码-提交"><a href="#user-reg-html-表单-用户名-密码-提交" class="headerlink" title="user_reg.html{表单:用户名/密码/提交}"></a><strong>user_reg.html{表单:用户名/密码/提交}</strong></h6><h6 id="user-reg-do-php-获取参数-添加数据库"><a href="#user-reg-do-php-获取参数-添加数据库" class="headerlink" title="user_reg.do.php{获取参数/添加数据库}"></a><strong>user_reg.do.php{获取参数/添加数据库}</strong></h6><h5 id="2-1-AJAX：异步javascript-and-xml"><a href="#2-1-AJAX：异步javascript-and-xml" class="headerlink" title="2.1 AJAX：异步javascript and xml"></a><strong>2.1 AJAX：异步javascript and xml</strong></h5><h6 id="异步：服务器和客户端做自己的事（不需要相互等待）"><a href="#异步：服务器和客户端做自己的事（不需要相互等待）" class="headerlink" title="异步：服务器和客户端做自己的事（不需要相互等待）"></a><strong>异步：服务器和客户端做自己的事（不需要相互等待）</strong></h6><h6 id="同步：服务器和客户端做同一件事儿（相互需要等待）"><a href="#同步：服务器和客户端做同一件事儿（相互需要等待）" class="headerlink" title="同步：服务器和客户端做同一件事儿（相互需要等待）"></a><strong>同步：服务器和客户端做同一件事儿（相互需要等待）</strong></h6><h3 id="2002年左右-由Google在搜索引擎中"><a href="#2002年左右-由Google在搜索引擎中" class="headerlink" title="2002年左右,由Google在搜索引擎中,"></a>2002年左右,由Google在搜索引擎中,</h3><h3 id="提出GoogleSuggest效果-提出AJAX"><a href="#提出GoogleSuggest效果-提出AJAX" class="headerlink" title="提出GoogleSuggest效果,提出AJAX"></a><strong>提出GoogleSuggest效果,提出AJAX</strong></h3><h4 id="AJAX-html-css-js-dom-xml-XMLHttpRequest"><a href="#AJAX-html-css-js-dom-xml-XMLHttpRequest" class="headerlink" title="AJAX=(html+css+js+dom+xml+XMLHttpRequest)"></a><strong>AJAX=(html+css+js+dom+xml+XMLHttpRequest)</strong></h4><h4 id="ajax作用：实现在无刷新无提交的情况下页面内容布局更新"><a href="#ajax作用：实现在无刷新无提交的情况下页面内容布局更新" class="headerlink" title="ajax作用：实现在无刷新无提交的情况下页面内容布局更新"></a><strong>ajax作用：实现在无刷新无提交的情况下页面内容布局更新</strong></h4><h4 id="常见应用场合：聊天室，在线走势，搜索建议，移动应用"><a href="#常见应用场合：聊天室，在线走势，搜索建议，移动应用" class="headerlink" title="常见应用场合：聊天室，在线走势，搜索建议，移动应用"></a><strong>常见应用场合：聊天室，在线走势，搜索建议，移动应用</strong></h4><h5 id="AJAX-核心对象-（XMLHttpRequest）"><a href="#AJAX-核心对象-（XMLHttpRequest）" class="headerlink" title="AJAX 核心对象 （XMLHttpRequest）"></a><strong>AJAX 核心对象 （XMLHttpRequest）</strong></h5><h5 id="XHR-对象作用：向web服务器发送异步请求，并接受返回的响应消息"><a href="#XHR-对象作用：向web服务器发送异步请求，并接受返回的响应消息" class="headerlink" title="XHR 对象作用：向web服务器发送异步请求，并接受返回的响应消息"></a><strong>XHR 对象作用：向web服务器发送异步请求，并接受返回的响应消息</strong></h5><h3 id="构建XHR对象——（可以直接使用：chrome-firefox-safari-IE9-）"><a href="#构建XHR对象——（可以直接使用：chrome-firefox-safari-IE9-）" class="headerlink" title="构建XHR对象——（可以直接使用：chrome/firefox/safari/IE9+）"></a><strong>构建XHR对象——（可以直接使用：chrome/firefox/safari/IE9+）</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(window.XMLHttpRequest)&#123;</span><br><span class="line">       varxhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;<span class="comment">//IE8-</span></span><br><span class="line">       varxhr = <span class="keyword">new</span> ActiveXObject(“Microsoft.XMLHTTP”);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="由于IE8市场份额比较低，所以可以不用考虑"><a href="#由于IE8市场份额比较低，所以可以不用考虑" class="headerlink" title="由于IE8市场份额比较低，所以可以不用考虑"></a>由于IE8市场份额比较低，所以可以不用考虑</h5><h5 id="XHR对象常用成员"><a href="#XHR对象常用成员" class="headerlink" title="XHR对象常用成员"></a>XHR对象常用成员</h5><hr><h3 id="第一个属性"><a href="#第一个属性" class="headerlink" title="第一个属性"></a><strong>第一个属性</strong></h3><h4 id="readState：表示XHR对象当前状态，不能手工赋值，其值会随着请求和响应的过程进行自动的改变，可获取值；"><a href="#readState：表示XHR对象当前状态，不能手工赋值，其值会随着请求和响应的过程进行自动的改变，可获取值；" class="headerlink" title="readState：表示XHR对象当前状态，不能手工赋值，其值会随着请求和响应的过程进行自动的改变，可获取值；"></a><strong>readState：表示XHR对象当前状态，不能手工赋值，其值会随着请求和响应的过程进行自动的改变，可获取值；</strong></h4><h4 id="取值范围："><a href="#取值范围：" class="headerlink" title="取值范围："></a><strong>取值范围：</strong></h4><p><strong>0 ：UNSENT 请求信息尚未发送</strong><br><strong>1 ：OPENED XHR已经打开到web服务器连接</strong><br><strong>2 ：HEADERS_RECEIVED XHR已接收响应信息头部</strong><br><strong>3 ：LOADING XHR正在加载响应信息主体</strong><br><strong>4：DONE XHR接收完成响应消息</strong><br><img src="http://imagehosting.biz/images/2018/04/12/_20180413103415.jpg" alt="我是图片"></p><h3 id="第二个属性"><a href="#第二个属性" class="headerlink" title="第二个属性"></a><strong>第二个属性</strong></h3><h6 id="status：状态码，服务器响应消息状态码（200-304，404-500）"><a href="#status：状态码，服务器响应消息状态码（200-304，404-500）" class="headerlink" title="status：状态码，服务器响应消息状态码（200,304，404,500）"></a><strong>status：状态码，服务器响应消息状态码（200,304，404,500）</strong></h6><h3 id="第三个属性"><a href="#第三个属性" class="headerlink" title="第三个属性"></a><strong>第三个属性</strong></h3><h6 id="responseText：保存着服务器响应消息主体（text文本）"><a href="#responseText：保存着服务器响应消息主体（text文本）" class="headerlink" title="responseText：保存着服务器响应消息主体（text文本）"></a><strong>responseText：保存着服务器响应消息主体（text文本）</strong></h6><h6 id="消息主体为php文件中-echo的部分"><a href="#消息主体为php文件中-echo的部分" class="headerlink" title="消息主体为php文件中 echo的部分"></a><strong>消息主体为php文件中 echo的部分</strong></h6><p><img src="http://imagehosting.biz/images/2018/04/12/_20180413103418.jpg" alt="我是图片"></p><h3 id="第四个属性"><a href="#第四个属性" class="headerlink" title="第四个属性"></a><strong>第四个属性</strong></h3><h6 id="responseXML：保存服务器响应消息主体（xml）"><a href="#responseXML：保存服务器响应消息主体（xml）" class="headerlink" title="responseXML：保存服务器响应消息主体（xml）"></a><strong>responseXML：保存服务器响应消息主体（xml）</strong></h6><hr><h3 id="成员方法"><a href="#成员方法" class="headerlink" title="成员方法"></a><strong>成员方法</strong></h3><h5 id="open-method，url，isAsyn-打开服务器的链接"><a href="#open-method，url，isAsyn-打开服务器的链接" class="headerlink" title="open(method，url，isAsyn)打开服务器的链接"></a><strong>open(method，url，isAsyn)打开服务器的链接</strong></h5><h6 id="method：请求方法-GET-POST"><a href="#method：请求方法-GET-POST" class="headerlink" title="method：请求方法 GET POST"></a><strong>method：请求方法 GET POST</strong></h6><h6 id="url：-请求地址"><a href="#url：-请求地址" class="headerlink" title="url： 请求地址"></a><strong>url： 请求地址</strong></h6><h6 id="isAsyn：true-异步请求（默认）-false-同步请求"><a href="#isAsyn：true-异步请求（默认）-false-同步请求" class="headerlink" title="isAsyn：true 异步请求（默认）   false 同步请求"></a><strong>isAsyn：true 异步请求（默认）   false 同步请求</strong></h6><h4 id="send-body-把请求消息发送给web服务器，默认填写send-null"><a href="#send-body-把请求消息发送给web服务器，默认填写send-null" class="headerlink" title="send(body)把请求消息发送给web服务器，默认填写send(null)"></a><strong>send(body)把请求消息发送给web服务器，默认填写send(null)</strong></h4><h3 id="成员事件"><a href="#成员事件" class="headerlink" title="成员事件"></a><strong>成员事件</strong></h3><h5 id="onreadystatechange：当readyState值每次改变时都会触发该事件"><a href="#onreadystatechange：当readyState值每次改变时都会触发该事件" class="headerlink" title="onreadystatechange：当readyState值每次改变时都会触发该事件"></a><strong>onreadystatechange：当readyState值每次改变时都会触发该事件</strong></h5><h2 id="使用XHR发送异步请求步骤："><a href="#使用XHR发送异步请求步骤：" class="headerlink" title="使用XHR发送异步请求步骤："></a>使用XHR发送异步请求步骤：</h2><h3 id="1：创建XHR对象"><a href="#1：创建XHR对象" class="headerlink" title="1：创建XHR对象"></a><strong>1：创建XHR对象</strong></h3><h5 id="var-xhr-new-XMLHttpRequest"><a href="#var-xhr-new-XMLHttpRequest" class="headerlink" title="var xhr = new XMLHttpRequest();"></a><strong>var xhr = new XMLHttpRequest();</strong></h5><h3 id="2：监听XHR的状态改变；如果状态码200-如果接收完成，获取数据"><a href="#2：监听XHR的状态改变；如果状态码200-如果接收完成，获取数据" class="headerlink" title="2：监听XHR的状态改变；如果状态码200 如果接收完成，获取数据"></a><strong>2：监听XHR的状态改变；如果状态码200 如果接收完成，获取数据</strong></h3><h5 id="xhr-onreadystatechange-function"><a href="#xhr-onreadystatechange-function" class="headerlink" title="xhr.onreadystatechange= function(){}"></a><strong>xhr.onreadystatechange= function(){}</strong></h5><h3 id="3：连接web服务器"><a href="#3：连接web服务器" class="headerlink" title="3：连接web服务器"></a><strong>3：连接web服务器</strong></h3><h5 id="xhr-open"><a href="#xhr-open" class="headerlink" title="xhr.open();"></a><strong>xhr.open();</strong></h5><h3 id="4：发送请求服务器"><a href="#4：发送请求服务器" class="headerlink" title="4：发送请求服务器"></a><strong>4：发送请求服务器</strong></h3><h5 id="xhr-send"><a href="#xhr-send" class="headerlink" title="xhr.send();"></a><strong>xhr.send();</strong></h5><p><img src="http://imagehosting.biz/images/2018/04/12/_20180413103422.jpg" alt="我是图片"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;八种请求方法有哪些&quot;&gt;&lt;a href=&quot;#八种请求方法有哪些&quot; class=&quot;headerlink&quot; title=&quot;八种请求方法有哪些?&quot;&gt;&lt;/a&gt;八种请求方法有哪些?&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://imagehosting.biz/images</summary>
      
    
    
    
    <category term="AJAX" scheme="http://example.com/categories/AJAX/"/>
    
    
  </entry>
  
  <entry>
    <title>AJAX 网络连接断开，HTTP协议请求</title>
    <link href="http://example.com/2018/07/05/AJAX%20%E7%BD%91%E7%BB%9C%E8%BF%9E%E6%8E%A5%E6%96%AD%E5%BC%80%EF%BC%8CHTTP%E5%8D%8F%E8%AE%AE%E8%AF%B7%E6%B1%82/"/>
    <id>http://example.com/2018/07/05/AJAX%20%E7%BD%91%E7%BB%9C%E8%BF%9E%E6%8E%A5%E6%96%AD%E5%BC%80%EF%BC%8CHTTP%E5%8D%8F%E8%AE%AE%E8%AF%B7%E6%B1%82/</id>
    <published>2018-07-05T07:06:43.000Z</published>
    <updated>2019-07-17T08:30:21.532Z</updated>
    
    <content type="html"><![CDATA[<h3 id="HTTP（请求）（响应）的内容"><a href="#HTTP（请求）（响应）的内容" class="headerlink" title="HTTP（请求）（响应）的内容"></a>HTTP（请求）（响应）的内容</h3><h4 id="请求（request）消息——客户端浏览器发送给web服务器"><a href="#请求（request）消息——客户端浏览器发送给web服务器" class="headerlink" title="请求（request）消息——客户端浏览器发送给web服务器"></a><strong>请求（request）消息——客户端浏览器发送给web服务器</strong></h4><h4 id="响应（response）消息——web服务器发送给客户端浏览器"><a href="#响应（response）消息——web服务器发送给客户端浏览器" class="headerlink" title="响应（response）消息——web服务器发送给客户端浏览器"></a><strong>响应（response）消息——web服务器发送给客户端浏览器</strong></h4><h5 id="请求头信息"><a href="#请求头信息" class="headerlink" title="请求头信息"></a><strong>请求头信息</strong></h5><h5 id="请求起始行：GET-web-index-new-html-HTTP-1-1"><a href="#请求起始行：GET-web-index-new-html-HTTP-1-1" class="headerlink" title="请求起始行：GET/web/index_new.html HTTP/1.1"></a><strong>请求起始行：GET/web/index_new.html HTTP/1.1</strong></h5><p><img src="http://imagehosting.biz/images/2018/04/12/_20180413101557.jpg" alt="我是图片"></p><h3 id="响应头信息"><a href="#响应头信息" class="headerlink" title="响应头信息"></a>响应头信息</h3><p><img src="http://imagehosting.biz/images/2018/04/12/_20180413101607.jpg" alt="我是图片"></p><h5 id="在提交表单后，会有一串URL编码"><a href="#在提交表单后，会有一串URL编码" class="headerlink" title="在提交表单后，会有一串URL编码"></a><strong>在提交表单后，会有一串URL编码</strong></h5><p><strong>Content-Length:68</strong><br><img src="http://imagehosting.biz/images/2018/04/12/_20180413101610.jpg" alt="我是图片"><br><strong>u=%E4%B8%9C%E4%B8%9C%E6%9C%89%E5%AE%B6%E5%B0%8F%E9%A3%9E%E6%9C%BA&amp;p=</strong></p><h4 id="注册、登录、商品列表、分页"><a href="#注册、登录、商品列表、分页" class="headerlink" title="注册、登录、商品列表、分页"></a><strong>注册、登录、商品列表、分页</strong></h4><p><img src="http://imagehosting.biz/images/2018/04/12/_20180413101623.jpg" alt="我是图片"><br><img src="http://imagehosting.biz/images/2018/04/12/_20180413101626.jpg" alt="我是图片"></p><h4 id="抓取数据显示-图片"><a href="#抓取数据显示-图片" class="headerlink" title="抓取数据显示{图片}"></a><strong>抓取数据显示{图片}</strong></h4><h4 id="lt-imgsrc-’1-jpg’-gt"><a href="#lt-imgsrc-’1-jpg’-gt" class="headerlink" title="&lt;imgsrc=’1.jpg’ /&gt;"></a><strong><td>&lt;imgsrc=’1.jpg’ /&gt;</td></strong></h4><h4 id="分页"><a href="#分页" class="headerlink" title="分页"></a><strong>分页</strong></h4><h4 id="SELEECTFROM-t-productlimit-p-3"><a href="#SELEECTFROM-t-productlimit-p-3" class="headerlink" title="*SELEECTFROM t_productlimit $p,3;**"></a>*<em>SELEECT</em>FROM t_productlimit $p,3;**</h4><h4 id="if-empty-REQUEST-‘p’-false-empty如果为空则输出true，不为空输出false"><a href="#if-empty-REQUEST-‘p’-false-empty如果为空则输出true，不为空输出false" class="headerlink" title="if(empty($_REQUEST[‘p’])===false){//empty如果为空则输出true，不为空输出false"></a><strong>if(empty($_REQUEST[‘p’])===false){//empty如果为空则输出true，不为空输出false</strong></h4><h4 id="p-REQUEST-‘p’"><a href="#p-REQUEST-‘p’" class="headerlink" title="$p=$_REQUEST[‘p’];"></a><strong>$p=$_REQUEST[‘p’];</strong></h4><h4 id=""><a href="#" class="headerlink" title="}"></a><strong>}</strong></h4><p><img src="http://imagehosting.biz/images/2018/04/12/_20180413101630.jpg" alt="我是图片"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;HTTP（请求）（响应）的内容&quot;&gt;&lt;a href=&quot;#HTTP（请求）（响应）的内容&quot; class=&quot;headerlink&quot; title=&quot;HTTP（请求）（响应）的内容&quot;&gt;&lt;/a&gt;HTTP（请求）（响应）的内容&lt;/h3&gt;&lt;h4 id=&quot;请求（request）消息</summary>
      
    
    
    
    <category term="AJAX" scheme="http://example.com/categories/AJAX/"/>
    
    
  </entry>
  
  <entry>
    <title>AJAX 服务器、mysql语句增删改查</title>
    <link href="http://example.com/2018/07/04/AJAX%20%20%E6%9C%8D%E5%8A%A1%E5%99%A8%E3%80%81mysql%E8%AF%AD%E5%8F%A5%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/"/>
    <id>http://example.com/2018/07/04/AJAX%20%20%E6%9C%8D%E5%8A%A1%E5%99%A8%E3%80%81mysql%E8%AF%AD%E5%8F%A5%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/</id>
    <published>2018-07-04T07:06:43.000Z</published>
    <updated>2020-02-28T08:26:02.901Z</updated>
    
    <content type="html"><![CDATA[<h2 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h2><h3 id="服务器-能够在网络系统中提供各种服务的软件与硬件集合。-网页传送-收发邮件-视频，语音"><a href="#服务器-能够在网络系统中提供各种服务的软件与硬件集合。-网页传送-收发邮件-视频，语音" class="headerlink" title="服务器:能够在网络系统中提供各种服务的软件与硬件集合。 (网页传送,收发邮件,视频，语音)"></a><strong>服务器</strong>:能够在网络系统中提供各种服务的软件与硬件集合。 (网页传送,收发邮件,视频，语音)</h3><h3 id="硬件服务器：高性能硬件（小型机、中型机、大型机、PC…）"><a href="#硬件服务器：高性能硬件（小型机、中型机、大型机、PC…）" class="headerlink" title="硬件服务器：高性能硬件（小型机、中型机、大型机、PC…）"></a><strong>硬件服务器</strong>：高性能硬件（小型机、中型机、大型机、PC…）</h3><h3 id="软件服务器：稳定高效服务-web-ftp-email-db"><a href="#软件服务器：稳定高效服务-web-ftp-email-db" class="headerlink" title="软件服务器：稳定高效服务(web/ftp/email/db..)"></a><strong>软件服务器</strong>：稳定高效服务(web/ftp/email/db..)</h3><h3 id="协议-域名或IP-端口号"><a href="#协议-域名或IP-端口号" class="headerlink" title="协议://域名或IP:端口号"></a><strong>协议://域名或IP</strong>:端口号</h3><p><img src="http://imagehosting.biz/images/2018/04/10/6597976863751619020.jpg" alt="我是图片"></p><h2 id="数据库服务器-软件"><a href="#数据库服务器-软件" class="headerlink" title="数据库服务器(软件)"></a><strong>数据库服务器(软件)</strong></h2><h3 id="作用-存储和管理数据软件产品"><a href="#作用-存储和管理数据软件产品" class="headerlink" title="作用:存储和管理数据软件产品"></a><strong>作用</strong>:存储和管理数据软件产品</h3><h3 id="数据库可以解决其它软件不能解决的二个问题"><a href="#数据库可以解决其它软件不能解决的二个问题" class="headerlink" title="数据库可以解决其它软件不能解决的二个问题"></a><strong>数据库可以解决其它软件不能解决的二个问题</strong></h3><h6 id="a-海量-永久-数据存储"><a href="#a-海量-永久-数据存储" class="headerlink" title="a:海量(永久)数据存储"></a><strong>a:海量(永久)数据存储</strong></h6><h6 id="b-高速查询-（114）"><a href="#b-高速查询-（114）" class="headerlink" title="b:高速查询 （114）"></a><strong>b:高速查询 （114）</strong></h6><h2 id="数据服务服务器分类"><a href="#数据服务服务器分类" class="headerlink" title="数据服务服务器分类"></a><strong>数据服务服务器分类</strong></h2><h2 id="DatabaseServer：用于永久存储项目中的数据"><a href="#DatabaseServer：用于永久存储项目中的数据" class="headerlink" title="DatabaseServer：用于永久存储项目中的数据"></a>DatabaseServer：用于永久存储项目中的数据</h2><h6 id="网状数据库"><a href="#网状数据库" class="headerlink" title="-网状数据库"></a><strong>-网状数据库</strong></h6><h6 id="树型数据库"><a href="#树型数据库" class="headerlink" title="-树型数据库"></a><strong>-树型数据库</strong></h6><h6 id="关系数据库—-数据和数据之间都是有关系的-Mysql-Oracle-SqlServer-DB2"><a href="#关系数据库—-数据和数据之间都是有关系的-Mysql-Oracle-SqlServer-DB2" class="headerlink" title="-关系数据库—-数据和数据之间都是有关系的(Mysql/Oracle/SqlServer/DB2)"></a><strong>-关系数据库—-数据和数据之间都是有关系的(Mysql/Oracle/SqlServer/DB2)</strong></h6><h6 id="对象型数据库"><a href="#对象型数据库" class="headerlink" title="-对象型数据库"></a><strong>-对象型数据库</strong></h6><h6 id="mysql-互联网软件系统标配-免费-入门简单-功能强"><a href="#mysql-互联网软件系统标配-免费-入门简单-功能强" class="headerlink" title="mysql 互联网软件系统标配(免费/入门简单/功能强)"></a><strong>mysql 互联网软件系统标配(免费/入门简单/功能强)</strong></h6><h6 id="NOSQLRedis-内存储数据库查询极快"><a href="#NOSQLRedis-内存储数据库查询极快" class="headerlink" title="NOSQLRedis(内存储数据库查询极快)"></a><strong>NOSQLRedis(内存储数据库查询极快)</strong></h6><h2 id="什么是关系型数据库"><a href="#什么是关系型数据库" class="headerlink" title="什么是关系型数据库"></a><strong>什么是关系型数据库</strong></h2><h2 id="以横行竖列的方式保存数据的数据库称为"><a href="#以横行竖列的方式保存数据的数据库称为" class="headerlink" title="以横行竖列的方式保存数据的数据库称为"></a><strong>以横行竖列的方式保存数据的数据库称为</strong></h2><h4 id="关系型数据库"><a href="#关系型数据库" class="headerlink" title="关系型数据库"></a>关系型数据库</h4><h2 id="用户数据"><a href="#用户数据" class="headerlink" title="用户数据"></a><strong>用户数据</strong></h2><table><thead><tr><th align="center">编号</th><th align="center">用户名</th><th align="center">密码</th><th align="center">年龄(字段列)</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">tom</td><td align="center">123a</td><td align="center">19  (记录 行)</td></tr><tr><td align="center">2</td><td align="center">jerry</td><td align="center">456</td><td align="center">20</td></tr></tbody></table><pre><code>|3   |  james | 789   | 21|</code></pre><p>  |  4   |  dong  | 123   | 25|<br>   | 5  |   daxu  | 567   |  21|</p><h2 id="关系型数据库层次"><a href="#关系型数据库层次" class="headerlink" title="关系型数据库层次"></a><strong>关系型数据库层次</strong></h2><h4 id="mysql数据库软件–-gt-库-Database-gt-表-Table-gt-行-Row-–-gt-列-column"><a href="#mysql数据库软件–-gt-库-Database-gt-表-Table-gt-行-Row-–-gt-列-column" class="headerlink" title="mysql数据库软件–&gt;库(Database)-&gt;表(Table)-&gt;行(Row)–&gt;列(column)"></a><strong>mysql数据库软件–&gt;库(Database)-&gt;表(Table)-&gt;行(Row)–&gt;列(column)</strong></h4><h2 id="mysql安装使用"><a href="#mysql安装使用" class="headerlink" title="mysql安装使用"></a><strong>mysql安装使用</strong></h2><h4 id="1-在官网下载mysql安装包-国内镜像站"><a href="#1-在官网下载mysql安装包-国内镜像站" class="headerlink" title="1:在官网下载mysql安装包(国内镜像站)"></a><strong>1</strong>:<strong>在官网下载mysql安装包(国内镜像站)</strong></h4><h4 id="官网：http-www-oracle-com-cn-index-html"><a href="#官网：http-www-oracle-com-cn-index-html" class="headerlink" title="官网：http://www.oracle.com/cn/index.html"></a><strong>官网</strong>：<a href="http://www.oracle.com/cn/index.html">http://www.oracle.com/cn/index.html</a></h4><h4 id="搜狐镜像：http-mirrors-sohu-com-下载版本（window5-6-64位）"><a href="#搜狐镜像：http-mirrors-sohu-com-下载版本（window5-6-64位）" class="headerlink" title="搜狐镜像：http://mirrors.sohu.com       下载版本（window5.6 64位）"></a><strong>搜狐镜像</strong>：<a href="http://mirrors.sohu.com/">http://mirrors.sohu.com</a>       下载版本（window5.6 64位）</h4><h4 id="2-xampp-软件工具包-apache-php-mysql"><a href="#2-xampp-软件工具包-apache-php-mysql" class="headerlink" title="2:xampp 软件工具包(apache/php/mysql)"></a><strong>2</strong>:<strong>xampp 软件工具包(apache/php/mysql)</strong></h4><h4 id="https-apachefriends-org"><a href="#https-apachefriends-org" class="headerlink" title="https://apachefriends.org"></a><a href="https://apachefriends.org/">https://apachefriends.org</a></h4><h4 id="3-服务器端-用于存储数据-先启动服务器"><a href="#3-服务器端-用于存储数据-先启动服务器" class="headerlink" title="3:服务器端:用于存储数据(先启动服务器)"></a><strong>3</strong>:<strong>服务器端:用于存储数据(先启动服务器)</strong></h4><h4 id="a-xampp控制面板-gt-启动按钮-start"><a href="#a-xampp控制面板-gt-启动按钮-start" class="headerlink" title="a:xampp控制面板-&gt;启动按钮{start}"></a>a:xampp控制面板-&gt;启动按钮{start}</h4><h4 id="启动程序-c-xampp-mysql-bin-mysqld-exe"><a href="#启动程序-c-xampp-mysql-bin-mysqld-exe" class="headerlink" title="启动程序:c:/xampp/mysql/bin/mysqld.exe"></a><strong>启动程序</strong>:c:/xampp/mysql/bin/mysqld.exe</h4><h4 id="注意-数据库服务通常不停止"><a href="#注意-数据库服务通常不停止" class="headerlink" title="注意:数据库服务通常不停止"></a><strong>注意</strong>:数据库服务通常不停止</h4><h4 id="4-客户端-下载并安装一款mysql客户端软件"><a href="#4-客户端-下载并安装一款mysql客户端软件" class="headerlink" title="4:客户端:下载并安装一款mysql客户端软件"></a><strong>4</strong>:<strong>客户端:下载并安装一款mysql客户端软件</strong></h4><h4 id="–用于向服务器发出增删改查指令的"><a href="#–用于向服务器发出增删改查指令的" class="headerlink" title="–用于向服务器发出增删改查指令的"></a>–用于向服务器发出增删改查指令的</h4><h4 id="c-xampp-mysql-bin-mysql-exe"><a href="#c-xampp-mysql-bin-mysql-exe" class="headerlink" title="c:/xampp/mysql/bin/mysql.exe"></a>c:/xampp/mysql/bin/mysql.exe</h4><h4 id="mysql-exe-uroot-–p-不是操作命令，不能加分号！！"><a href="#mysql-exe-uroot-–p-不是操作命令，不能加分号！！" class="headerlink" title="mysql.exe-uroot –p       不是操作命令，不能加分号！！"></a>mysql.exe-uroot –p       不是操作命令，不能加分号！！</h4><h4 id="可通过如下设置，修改环境变量来实现在cmd中直接执行mysql"><a href="#可通过如下设置，修改环境变量来实现在cmd中直接执行mysql" class="headerlink" title="可通过如下设置，修改环境变量来实现在cmd中直接执行mysql"></a>可通过如下设置，修改环境变量来实现在cmd中直接执行mysql</h4><h4 id="C-xampp-mysql-bin-C-ProgramData-Oracle-Java-javapath-SystemRoot-system32-SystemRoot-SystemRoot-System32-Wbem-说-SYSTEMROOT-System32-WindowsPowerShell-v1-0-C-ProgramFiles-Intel-WiFi-bin-C-Program-Files-CommonFiles-Intel-WirelessCommon-D-node-D-svn-bin"><a href="#C-xampp-mysql-bin-C-ProgramData-Oracle-Java-javapath-SystemRoot-system32-SystemRoot-SystemRoot-System32-Wbem-说-SYSTEMROOT-System32-WindowsPowerShell-v1-0-C-ProgramFiles-Intel-WiFi-bin-C-Program-Files-CommonFiles-Intel-WirelessCommon-D-node-D-svn-bin" class="headerlink" title="C:\xampp\mysql\bin;C:\ProgramData\Oracle\Java\javapath;%SystemRoot%\system32;%SystemRoot%;%SystemRoot%\System32\Wbem;说%SYSTEMROOT%\System32\WindowsPowerShell\v1.0;C:\ProgramFiles\Intel\WiFi\bin;C:\Program Files\CommonFiles\Intel\WirelessCommon;D:\node;D:\svn\bin"></a>C:\xampp\mysql\bin;C:\ProgramData\Oracle\Java\javapath;%SystemRoot%\system32;%SystemRoot%;%SystemRoot%\System32\Wbem;说%SYSTEMROOT%\System32\WindowsPowerShell\v1.0;C:\ProgramFiles\Intel\WiFi\bin;C:\Program Files\CommonFiles\Intel\WirelessCommon;D:\node;D:\svn\bin</h4><p><img src="http://imagehosting.biz/images/2018/04/10/6597787747751649447.jpg"><br><img src="https://s2.ax1x.com/2019/07/17/ZLFIn1.jpg"></p><h5 id="查询当前mysql中有多少个库可用show-databases"><a href="#查询当前mysql中有多少个库可用show-databases" class="headerlink" title="查询当前mysql中有多少个库可用show databases;"></a>查询当前mysql中有多少个库可用show databases;</h5><h5 id="查询当前mysql编码方式status"><a href="#查询当前mysql编码方式status" class="headerlink" title="查询当前mysql编码方式status;"></a>查询当前mysql编码方式status;</h5><h5 id="退出sql执行状态-exit"><a href="#退出sql执行状态-exit" class="headerlink" title="退出sql执行状态 exit;"></a>退出sql执行状态 exit;</h5><p><img src="https://s2.ax1x.com/2019/07/17/ZLF4XR.jpg"><br><img src="https://s2.ax1x.com/2019/07/17/ZLFo0x.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;服务器&quot;&gt;&lt;a href=&quot;#服务器&quot; class=&quot;headerlink&quot; title=&quot;服务器&quot;&gt;&lt;/a&gt;服务器&lt;/h2&gt;&lt;h3 id=&quot;服务器-能够在网络系统中提供各种服务的软件与硬件集合。-网页传送-收发邮件-视频，语音&quot;&gt;&lt;a href=&quot;#服务器-能够</summary>
      
    
    
    
    <category term="AJAX" scheme="http://example.com/categories/AJAX/"/>
    
    
  </entry>
  
  <entry>
    <title>jQuery UI、其他插件、封装自定义插件</title>
    <link href="http://example.com/2018/07/04/jQuery%20UI%E3%80%81%E5%85%B6%E4%BB%96%E6%8F%92%E4%BB%B6%E3%80%81%E5%B0%81%E8%A3%85%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8F%92%E4%BB%B6/"/>
    <id>http://example.com/2018/07/04/jQuery%20UI%E3%80%81%E5%85%B6%E4%BB%96%E6%8F%92%E4%BB%B6%E3%80%81%E5%B0%81%E8%A3%85%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8F%92%E4%BB%B6/</id>
    <published>2018-07-04T07:06:43.000Z</published>
    <updated>2019-07-17T08:24:19.894Z</updated>
    
    <content type="html"><![CDATA[<h2 id="jQueryUI"><a href="#jQueryUI" class="headerlink" title="jQueryUI"></a>jQueryUI</h2><h4 id="什么是：jQuery官方出的，基于jQuery实现的比jQuery更简化的UI组件和函数库。"><a href="#什么是：jQuery官方出的，基于jQuery实现的比jQuery更简化的UI组件和函数库。" class="headerlink" title="什么是：jQuery官方出的，基于jQuery实现的比jQuery更简化的UI组件和函数库。"></a><strong>什么是</strong>：jQuery官方出的，基于jQuery实现的比jQuery更简化的UI组件和函数库。</h4><h4 id="何时：如果觉得jQuery依然不够简化时"><a href="#何时：如果觉得jQuery依然不够简化时" class="headerlink" title="何时：如果觉得jQuery依然不够简化时"></a><strong>何时</strong>：如果觉得jQuery依然不够简化时</h4><h4 id="UI-User-Interface-用户界面，包括-内容HTML-样式CSS-行为JS"><a href="#UI-User-Interface-用户界面，包括-内容HTML-样式CSS-行为JS" class="headerlink" title="UI: User Interface 用户界面，包括: 内容HTML, 样式CSS, 行为JS"></a><strong>UI</strong>: User Interface 用户界面，包括: 内容HTML, 样式CSS, 行为JS</h4><h4 id="UI库-使用HTML-CSS-JS组成的实现一个专门功能的UI程序和效果的包，比如下拉菜单、弹出对话框、手风琴"><a href="#UI库-使用HTML-CSS-JS组成的实现一个专门功能的UI程序和效果的包，比如下拉菜单、弹出对话框、手风琴" class="headerlink" title="UI库: 使用HTML/CSS/JS组成的实现一个专门功能的UI程序和效果的包，比如下拉菜单、弹出对话框、手风琴"></a><strong>UI库</strong>: 使用HTML/CSS/JS组成的实现一个专门功能的UI程序和效果的包，比如下拉菜单、弹出对话框、手风琴</h4><h4 id="jQueryUI是基于jQuery封装的，进一步简化的UI组件库"><a href="#jQueryUI是基于jQuery封装的，进一步简化的UI组件库" class="headerlink" title="jQueryUI是基于jQuery封装的，进一步简化的UI组件库"></a><strong>jQueryUI是基于jQuery封装的，进一步简化的UI组件库</strong></h4><h4 id="为什么-避免重复开发，实现HTML-CSS-JS的代码重用"><a href="#为什么-避免重复开发，实现HTML-CSS-JS的代码重用" class="headerlink" title="为什么: 避免重复开发，实现HTML,CSS,JS的代码重用"></a><strong>为什么</strong>: 避免重复开发，实现HTML,CSS,JS的代码重用</h4><h4 id="如何"><a href="#如何" class="headerlink" title="如何:"></a><strong>如何</strong>:</h4><h4 id="下载jQueryUI"><a href="#下载jQueryUI" class="headerlink" title="下载jQueryUI"></a>下载jQueryUI</h4><h4 id="在网页中先引入jQuery-js，再引入jQueryUI-js"><a href="#在网页中先引入jQuery-js，再引入jQueryUI-js" class="headerlink" title="在网页中先引入jQuery.js，再引入jQueryUI.js"></a>在网页中先引入jQuery.js，再引入jQueryUI.js</h4><h3 id="三大部分"><a href="#三大部分" class="headerlink" title="三大部分"></a><strong>三大部分</strong></h3><h4 id="第一部分：效果：对jQuery中原有的动画API进行增强"><a href="#第一部分：效果：对jQuery中原有的动画API进行增强" class="headerlink" title="第一部分：效果：对jQuery中原有的动画API进行增强:"></a><strong>第一部分</strong>：<strong>效果</strong>：对jQuery中原有的动画API进行增强:</h4><h4 id="1-为-add-remove-toggleClass添加动画-speed"><a href="#1-为-add-remove-toggleClass添加动画-speed" class="headerlink" title="1. 为.add/remove/toggleClass添加动画(speed)"></a><strong>1</strong>. 为.add/remove/toggleClass添加动画(speed)</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.add/remove/toggleClass(<span class="string">&quot;类名&quot;</span>,speed)</span><br></pre></td></tr></table></figure><h4 id="2-为-show-hide-toggle添加了更多的特效"><a href="#2-为-show-hide-toggle添加了更多的特效" class="headerlink" title="2. 为.show/hide/toggle添加了更多的特效"></a><strong>2</strong>. 为.show/hide/toggle添加了更多的特效</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.show/hide/toggle(<span class="string">&quot;特效名&quot;</span>,speed)</span><br></pre></td></tr></table></figure><h4 id="3-让animate支持颜色动画"><a href="#3-让animate支持颜色动画" class="headerlink" title="3. 让animate支持颜色动画"></a><strong>3</strong>. 让animate支持颜色动画</h4><p><img src="http://imagehosting.biz/images/2018/04/10/1879689894574171377.jpg" alt="我是图片"><br><img src="http://imagehosting.biz/images/2018/04/10/5717527534644814465.jpg" alt="我是图片"></p><h4 id="第二部分-交互组件-为页面现有元素添加特殊交互行为"><a href="#第二部分-交互组件-为页面现有元素添加特殊交互行为" class="headerlink" title="第二部分: 交互组件:为页面现有元素添加特殊交互行为"></a><strong>第二部分</strong>: <strong>交互组件:为页面现有元素添加特殊交互行为</strong></h4><h4 id="侵入性-组件根据自身的需要-动态向原有元素上添加所需的class或自定义扩展属性。"><a href="#侵入性-组件根据自身的需要-动态向原有元素上添加所需的class或自定义扩展属性。" class="headerlink" title="侵入性: 组件根据自身的需要, 动态向原有元素上添加所需的class或自定义扩展属性。"></a><strong>侵入性</strong>: 组件根据自身的需要, 动态向原有元素上添加所需的class或自定义扩展属性。</h4><h4 id="问题-如果发现侵入，但样式依然没变"><a href="#问题-如果发现侵入，但样式依然没变" class="headerlink" title="问题: 如果发现侵入，但样式依然没变"></a><strong>问题</strong>: 如果发现侵入，但样式依然没变</h4><h4 id="解决"><a href="#解决" class="headerlink" title="解决:"></a><strong>解决</strong>:</h4><h4 id="1-可能没有引入jqueryui的css"><a href="#1-可能没有引入jqueryui的css" class="headerlink" title="1. 可能没有引入jqueryui的css"></a>1. 可能没有引入jqueryui的css</h4><h4 id="2-可能侵入的样式需要自行实现"><a href="#2-可能侵入的样式需要自行实现" class="headerlink" title="2.可能侵入的样式需要自行实现"></a>2.可能侵入的样式需要自行实现</h4><h4 id="1-draggable-让一个元素可拖拽"><a href="#1-draggable-让一个元素可拖拽" class="headerlink" title="1.  .draggable()  让一个元素可拖拽"></a><strong>1</strong>.  .draggable()  让一个元素可拖拽</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HTML:div.box&gt;hn.ui-dialog-titlebar+p</span><br><span class="line">CSS: 不用</span><br><span class="line">JS: $(<span class="string">&quot;.box&quot;</span>).draggable();</span><br></pre></td></tr></table></figure><h4 id="2-selectable-让一个列表中的li可选择"><a href="#2-selectable-让一个列表中的li可选择" class="headerlink" title="2.  .selectable()  让一个列表中的li可选择"></a><strong>2</strong>.  .selectable()  让一个列表中的li可选择</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HTML: ul&gt;li*n</span><br><span class="line">CSS: .ui-selected&#123;...&#125;定义选中的li样式</span><br><span class="line">js: $(<span class="string">&quot;ul&quot;</span>).selectable();</span><br></pre></td></tr></table></figure><h4 id="3-sortable-让一个列表中的li可重新排列位置"><a href="#3-sortable-让一个列表中的li可重新排列位置" class="headerlink" title="3.  .sortable() 让一个列表中的li可重新排列位置"></a><strong>3</strong>.  .sortable() 让一个列表中的li可重新排列位置</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HTML:ul&gt;li*n</span><br><span class="line">CSS: 不需要</span><br><span class="line">js: $(<span class="string">&quot;ul&quot;</span>).sortable();</span><br></pre></td></tr></table></figure><h4 id="第三部分：部件：拥有完成样式和行为的一个独立功能"><a href="#第三部分：部件：拥有完成样式和行为的一个独立功能" class="headerlink" title="第三部分：部件：拥有完成样式和行为的一个独立功能"></a><strong>第三部分：部件：拥有完成样式和行为的一个独立功能</strong></h4><h6 id="强调-用部件，都要先引入jquery-ui-css"><a href="#强调-用部件，都要先引入jquery-ui-css" class="headerlink" title="强调: 用部件，都要先引入jquery-ui.css"></a><strong>强调</strong>: 用部件，都要先引入jquery-ui.css</h6><h6 id="关于色调和主题-官网-gt-Themes-gt-Gallery-gt-选择颜色主体-gt-download"><a href="#关于色调和主题-官网-gt-Themes-gt-Gallery-gt-选择颜色主体-gt-download" class="headerlink" title="关于色调和主题: 官网-&gt;Themes-&gt;Gallery-&gt;选择颜色主体-&gt;download"></a><strong>关于色调和主题</strong>: 官网-&gt;Themes-&gt;Gallery-&gt;选择颜色主体-&gt;download</h6><h4 id="1、-accordion手风琴；"><a href="#1、-accordion手风琴；" class="headerlink" title="1、.accordion手风琴；"></a><strong>1、.accordion手风琴</strong>；</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">html:父元素&gt;(标题hn+内容div/p)*n</span><br><span class="line">CSS: 不用</span><br><span class="line">js: $(<span class="string">&quot;父元素&quot;</span>).accordion();</span><br></pre></td></tr></table></figure><h4 id="2、-autocomplete-自动完成"><a href="#2、-autocomplete-自动完成" class="headerlink" title="2、 .autocomplete 自动完成"></a><strong>2、 .autocomplete 自动完成</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">html: input文本框</span><br><span class="line">css:不用</span><br><span class="line">js: <span class="number">1.</span> 定义备选词数组</span><br><span class="line">    <span class="number">2.</span> 对input文本框调用.autocomplete()</span><br><span class="line">    $(...).autocomplete(&#123;source: 数组&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> dishList=[<span class="string">&quot;鱼香肉丝&quot;</span>,<span class="string">&quot;京酱肉丝&quot;</span>,<span class="string">&quot;番茄炒鸡蛋&quot;</span>,<span class="string">&quot;香椿鸡蛋&quot;</span>,<span class="string">&quot;松鼠桂鱼&quot;</span>];</span><br><span class="line">$(<span class="string">&quot;input&quot;</span>).autocomplete(&#123;<span class="attr">source</span>:dishList&#125;); </span><br></pre></td></tr></table></figure><h4 id="3、-button-让各种按钮变成统一的按钮样式"><a href="#3、-button-让各种按钮变成统一的按钮样式" class="headerlink" title="3、.button 让各种按钮变成统一的按钮样式"></a><strong>3</strong>、.button 让各种按钮变成统一的按钮样式</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">html: a , input type=<span class="string">&quot;button&quot;</span> , button</span><br><span class="line">js: $(...).button();</span><br></pre></td></tr></table></figure><h4 id="4-datepicker日历部件"><a href="#4-datepicker日历部件" class="headerlink" title="4. datepicker日历部件:"></a><strong>4</strong>. datepicker日历部件:</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">html: input文本框</span><br><span class="line">css:</span><br><span class="line">js: $(...).datepicker(&#123;</span><br><span class="line">                     dateFormat:<span class="string">&quot;yy年mm月dd日&quot;</span></span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h2 id="H5-也有日期组件-input-type-”date”-但是无法修改样式"><a href="#H5-也有日期组件-input-type-”date”-但是无法修改样式" class="headerlink" title="H5: 也有日期组件: input type=”date” 但是无法修改样式"></a><strong>H5</strong>: 也有日期组件: input type=”date” 但是无法修改样式</h2><h4 id="5、dialog-对话框"><a href="#5、dialog-对话框" class="headerlink" title="5、dialog: 对话框:"></a><strong>5</strong>、dialog: 对话框:</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">html: 对话框容器[title=标题]&gt;内容</span><br><span class="line">其中title属性会自动成为对话框标题</span><br><span class="line">js: $(...).dialog(); <span class="comment">//让找到的元素变成对话框的样子</span></span><br></pre></td></tr></table></figure><h4 id="默认隐藏-…-dialog-autoOpen-false"><a href="#默认隐藏-…-dialog-autoOpen-false" class="headerlink" title="默认隐藏: $(…).dialog({autoOpen:false})"></a><strong>默认隐藏</strong>: $(…).dialog({autoOpen:false})</h4><h4 id="打开-…-dialog-“open”"><a href="#打开-…-dialog-“open”" class="headerlink" title="打开: $(…).dialog(“open”)"></a><strong>打开</strong>: $(…).dialog(“open”)</h4><h4 id="关闭s-…-dialog-“close”"><a href="#关闭s-…-dialog-“close”" class="headerlink" title="关闭s: $(…).dialog(“close”)"></a><strong>关闭</strong>s: $(…).dialog(“close”)</h4><h2 id="模态对话框-一旦打开对话框，则禁止操作网页其他元素"><a href="#模态对话框-一旦打开对话框，则禁止操作网页其他元素" class="headerlink" title="模态对话框: 一旦打开对话框，则禁止操作网页其他元素"></a><strong>模态对话框</strong>: 一旦打开对话框，则禁止操作网页其他元素</h2><h4 id="…-dialog-autoOpen-false-modal-true"><a href="#…-dialog-autoOpen-false-modal-true" class="headerlink" title="$(…).dialog({autoOpen:false,modal: true })"></a><strong>$(…).dialog({autoOpen:false,modal: true })</strong></h4><p><img src="http://imagehosting.biz/images/2018/04/10/6597786648240020139.jpg" alt="我是图片"></p><h4 id="6、Menu菜单"><a href="#6、Menu菜单" class="headerlink" title="6、Menu菜单:"></a><strong>6</strong>、Menu菜单:</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HTML: ul&gt;li&gt;ul&gt;li....</span><br><span class="line">CSS: .ui-menu&#123;<span class="attr">width</span>: xxxpx&#125;</span><br><span class="line">js: $(<span class="string">&quot;ul&quot;</span>).menu();</span><br><span class="line">如果某个li不可用，就添加<span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;ui-state-disabled&quot;</span></span><br></pre></td></tr></table></figure><h4 id="7、-进度条"><a href="#7、-进度条" class="headerlink" title="7、 进度条:"></a><strong>7</strong>、 进度条:</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">   html: <span class="xml"><span class="tag">&lt;<span class="name">divid=&quot;my-pb&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;my-label&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">   css: 为进度条div和标签div设置定位</span><br><span class="line">   js: 初始化进度条:</span><br><span class="line">     $progressbar.progressbar(&#123;</span><br><span class="line">       value:<span class="literal">false</span>,              <span class="comment">//进度值，也可以取0,</span></span><br><span class="line">      change:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">//当进度条的value被改变时</span></span><br><span class="line">                              $(<span class="built_in">this</span>).progressbar(<span class="string">&quot;value&quot;</span>)<span class="comment">//获取当前进度值</span></span><br><span class="line">                              <span class="comment">//修改label的内容为进度条当前value</span></span><br><span class="line">                              <span class="comment">//获取当前进度条的value:</span></span><br><span class="line">       &#125;,</span><br><span class="line">      complete:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">//当进度条进度为100%时</span></span><br><span class="line">        <span class="comment">//改label</span></span><br><span class="line">       &#125;</span><br><span class="line">     &#125;)</span><br><span class="line">修改进度条进度:</span><br><span class="line">            $progressbar.progressbar(<span class="string">&quot;value&quot;</span>,值)</span><br></pre></td></tr></table></figure><h4 id="8、sider"><a href="#8、sider" class="headerlink" title="8、sider"></a><strong>8</strong>、sider</h4><h4 id="9、spinner递增递减"><a href="#9、spinner递增递减" class="headerlink" title="9、spinner递增递减"></a><strong>9</strong>、spinner递增递减</h4><h4 id="10、Tabs-标签页-boot中有"><a href="#10、Tabs-标签页-boot中有" class="headerlink" title="10、Tabs 标签页 boot中有"></a><strong>10</strong>、Tabs 标签页 boot中有</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">html：divid=<span class="string">&quot;my-tabs&quot;</span></span><br><span class="line">    ul</span><br><span class="line">     li&gt;a href=<span class="string">&quot;#divId&quot;</span></span><br><span class="line">    divid=<span class="string">&quot;divId&quot;</span> 内容</span><br><span class="line">CSS:不用</span><br><span class="line">JS: $(“容器div”).tabs();</span><br></pre></td></tr></table></figure><p><img src="http://imagehosting.biz/images/2018/04/10/6597653607333202273.jpg" alt="我是图片"></p><h4 id="11、tooltip工具提示-html中的title-boot中有"><a href="#11、tooltip工具提示-html中的title-boot中有" class="headerlink" title="11、tooltip工具提示: html中的title  boot中有"></a><strong>11</strong>、tooltip工具提示: html中的title  boot中有</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HTML ：为元素添加title属性&lt;ANY title&gt;</span><br><span class="line">CSS:</span><br><span class="line">JS: $(<span class="built_in">document</span>).tooltip()</span><br></pre></td></tr></table></figure><h2 id="二、第三方插件"><a href="#二、第三方插件" class="headerlink" title="二、第三方插件"></a><strong>二、第三方插件</strong></h2><h4 id="使用前也必须去官网下载，并用link和script将css和js文件加载到页面"><a href="#使用前也必须去官网下载，并用link和script将css和js文件加载到页面" class="headerlink" title="使用前也必须去官网下载，并用link和script将css和js文件加载到页面"></a>使用前也必须去官网下载，并用link和script将css和js文件加载到页面</h4><h4 id="1-日历-laydate-不依赖于jQuery"><a href="#1-日历-laydate-不依赖于jQuery" class="headerlink" title="1. 日历: laydate  不依赖于jQuery"></a><strong>1</strong>. 日历: laydate  不依赖于jQuery</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> HTML: <span class="xml"><span class="tag">&lt;<span class="name">inputid=&quot;#id&quot;</span></span></span></span><br><span class="line"><span class="xml"> CSS:</span></span><br><span class="line"><span class="xml">JS: laydate(&#123;elem:&quot;#id&quot;, format:&quot;YYYY年MM月DD日&quot;&#125;)</span></span><br></pre></td></tr></table></figure><h4 id="2-表单验证-jquery-validate-基于jQuery"><a href="#2-表单验证-jquery-validate-基于jQuery" class="headerlink" title="2. 表单验证: jquery.validate  基于jQuery"></a><strong>2</strong>. 表单验证: jquery.validate  基于jQuery</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">HTML: 普通表单</span><br><span class="line">CSS: 自定义验证未通过时的样式</span><br><span class="line">input.error&#123; 定义出错的输入框的样式&#125;</span><br><span class="line">label.error&#123; 定义错误提示的label元素的样式&#125;</span><br><span class="line"></span><br><span class="line">JS:</span><br><span class="line">   $(...).validate(&#123;</span><br><span class="line">      rules:&#123;<span class="comment">//保存对每个输入框的验证规则</span></span><br><span class="line">              <span class="comment">//如果一个输入框只有一个验证规则时</span></span><br><span class="line">         name1: <span class="string">&quot;规则名&quot;</span>,<span class="comment">//必填</span></span><br><span class="line">              <span class="comment">//如果一个输入框被多个规则约束</span></span><br><span class="line">         name2:&#123;</span><br><span class="line">            <span class="string">&quot;规则名&quot;</span>:值,</span><br><span class="line">                 ... : ...,</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    messages:&#123;<span class="comment">//保存每个验证规则对象的错误提示</span></span><br><span class="line">            name1: <span class="string">&quot;错误提示&quot;</span>,</span><br><span class="line">              <span class="comment">//如果一个输入框被多个规则约束</span></span><br><span class="line">            name2:&#123;</span><br><span class="line">                <span class="string">&quot;规则名&quot;</span>:<span class="string">&quot;错误提示&quot;</span>,</span><br><span class="line">                     ... : ...,</span><br><span class="line">            &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></figure><h4 id="规则-看jquery-validate-js的326行"><a href="#规则-看jquery-validate-js的326行" class="headerlink" title="规则: 看jquery.validate.js的326行"></a><strong>规则</strong>: 看jquery.validate.js的326行</h4><h4 id="required-true-必填"><a href="#required-true-必填" class="headerlink" title="required: true 必填"></a><strong>required</strong>: true 必填</h4><h4 id="min-maxlength-值-最小-最大长度"><a href="#min-maxlength-值-最小-最大长度" class="headerlink" title="min/maxlength:值 最小/最大长度"></a><strong>min/maxlength</strong>:值 最小/最大长度</h4><h4 id="rangelength-min-max-长度的范围"><a href="#rangelength-min-max-长度的范围" class="headerlink" title="rangelength:[min,max], 长度的范围"></a><strong>rangelength</strong>:[min,max], 长度的范围</h4><h4 id="min-max-值-最小-最大值"><a href="#min-max-值-最小-最大值" class="headerlink" title="min/max:值  最小/最大值"></a><strong>min/max</strong>:值  最小/最大值</h4><h4 id="range-min-max-取值的范围"><a href="#range-min-max-取值的范围" class="headerlink" title="range: [min,max]取值的范围"></a><strong>range</strong>: [min,max]取值的范围</h4><h4 id="格式验证-email-url-date"><a href="#格式验证-email-url-date" class="headerlink" title="格式验证: email, url, date"></a><strong>格式验证</strong>: email, url, date</h4><h4 id="强调-格式验证时，不加required，如果为空，则不验证"><a href="#强调-格式验证时，不加required，如果为空，则不验证" class="headerlink" title="强调: 格式验证时，不加required，如果为空，则不验证"></a><strong>强调</strong>: 格式验证时，不加required，如果为空，则不验证</h4><h4 id="两元素内容相等-equalTo-“-id”"><a href="#两元素内容相等-equalTo-“-id”" class="headerlink" title="两元素内容相等:equalTo: “#id”"></a><strong>两元素内容相等</strong>:equalTo: “#id”</h4><h4 id="添加自定义验证规则"><a href="#添加自定义验证规则" class="headerlink" title="添加自定义验证规则:"></a><strong>添加自定义验证规则</strong>:</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">jQuery.validator.addMethod(“规则名”,fn,”错误提示”)</span><br><span class="line">jQuery.validator.addMethod(</span><br><span class="line">    <span class="string">&quot;规则名&quot;</span>,</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">val</span>)</span>&#123;<span class="comment">//val会自动获得当前元素的内容</span></span><br><span class="line">       其中: fn的参数value可自动获得要验证的输入值</span><br><span class="line">        如果验证通过,返回<span class="literal">true</span>,否则返回<span class="literal">false</span></span><br><span class="line">        returnval是否验证通过</span><br><span class="line">    &#125;,</span><br><span class="line">        <span class="string">&quot;错误提示&quot;</span></span><br><span class="line">    )</span><br></pre></td></tr></table></figure><h4 id="3-瀑布流masonry彩砖墙"><a href="#3-瀑布流masonry彩砖墙" class="headerlink" title="3. 瀑布流masonry彩砖墙"></a><strong>3</strong>. 瀑布流masonry彩砖墙</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HTML: 容器div#container&gt;div*n</span><br><span class="line">CSS:</span><br><span class="line">JS: $(...).masonry();</span><br></pre></td></tr></table></figure><h2 id="三、添加jQuery全局函数-封装自定义插件"><a href="#三、添加jQuery全局函数-封装自定义插件" class="headerlink" title="三、添加jQuery全局函数: 封装自定义插件"></a><strong>三、添加jQuery全局函数: 封装自定义插件</strong></h2><h4 id="何时：只要发现网页中一个效果或功能需要在多个网站中重用时"><a href="#何时：只要发现网页中一个效果或功能需要在多个网站中重用时" class="headerlink" title="何时：只要发现网页中一个效果或功能需要在多个网站中重用时"></a><strong>何时</strong>：只要发现网页中一个效果或功能需要在多个网站中重用时</h4><h4 id="如何：2种"><a href="#如何：2种" class="headerlink" title="如何：2种"></a><strong>如何</strong>：2种</h4><h4 id="1-添加jQuery全局函数"><a href="#1-添加jQuery全局函数" class="headerlink" title="1.添加jQuery全局函数"></a><strong>1</strong>.添加jQuery全局函数</h4><h6 id="鄙视"><a href="#鄙视" class="headerlink" title="鄙视:"></a><strong>鄙视</strong>:</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$.each(数组/集合,<span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;...&#125;)-&gt;函数名(“参数列表”)</span><br><span class="line">       直接定义在$构造函数对象上</span><br><span class="line">       对任意数组或类数组对象均可用</span><br><span class="line">    $(...).each(<span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;...&#125;)-&gt;变量.API();</span><br><span class="line">       仅定义在jQuery查询结果对象的原型对象中</span><br><span class="line">       只能被jQuery查询结果对象使用</span><br></pre></td></tr></table></figure><p><img src="http://imagehosting.biz/images/2018/04/10/286260051415153432.jpg" alt="我是图片"></p><h3 id="jQuery函数分两种"><a href="#jQuery函数分两种" class="headerlink" title="jQuery函数分两种:"></a><strong>jQuery函数分两种</strong>:</h3><h4 id="1-jQuery全局函数-直接定义在jQuery构造函数上的，所有对象都可使用的函数"><a href="#1-jQuery全局函数-直接定义在jQuery构造函数上的，所有对象都可使用的函数" class="headerlink" title="1. jQuery全局函数: 直接定义在jQuery构造函数上的，所有对象都可使用的函数"></a><strong>1. jQuery全局函数</strong>: 直接定义在jQuery构造函数上的，所有对象都可使用的函数</h4><h4 id="2-jQuery实例函数-定义在jQuery-fn原型对象上，只有jQuery的查询结果对象才能使用。"><a href="#2-jQuery实例函数-定义在jQuery-fn原型对象上，只有jQuery的查询结果对象才能使用。" class="headerlink" title="2. jQuery实例函数: 定义在jQuery.fn原型对象上，只有jQuery的查询结果对象才能使用。"></a><strong>2. jQuery实例函数</strong>: 定义在jQuery.fn原型对象上，只有jQuery的查询结果对象才能使用。</h4><h4 id="如果觉得jQuery函数不够用-可扩展自定义函数"><a href="#如果觉得jQuery函数不够用-可扩展自定义函数" class="headerlink" title="如果觉得jQuery函数不够用: 可扩展自定义函数"></a>如果觉得jQuery函数不够用: 可扩展自定义函数</h4><h4 id="如果仅希望jQuery查询结果使用，就定义在jQuery-fn上"><a href="#如果仅希望jQuery查询结果使用，就定义在jQuery-fn上" class="headerlink" title="如果仅希望jQuery查询结果使用，就定义在jQuery.fn上"></a>如果仅希望jQuery查询结果使用，就定义在jQuery.fn上</h4><h4 id="如果希望jQuery查询结果以及所有数组，类数组对象都能使用，就定义在jQuery构造函数上"><a href="#如果希望jQuery查询结果以及所有数组，类数组对象都能使用，就定义在jQuery构造函数上" class="headerlink" title="如果希望jQuery查询结果以及所有数组，类数组对象都能使用，就定义在jQuery构造函数上"></a>如果希望jQuery查询结果以及所有数组，类数组对象都能使用，就定义在jQuery构造函数上</h4><h3 id="2-封装jQuery部件-3步"><a href="#2-封装jQuery部件-3步" class="headerlink" title="2.封装jQuery部件  3步"></a><strong>2.封装jQuery部件  3步</strong></h3><h4 id="1-定义css样式"><a href="#1-定义css样式" class="headerlink" title="1.定义css样式"></a>1.定义css样式</h4><h4 id="2-位指定元素侵入class"><a href="#2-位指定元素侵入class" class="headerlink" title="2.位指定元素侵入class"></a>2.位指定元素侵入class</h4><h4 id="3-为元素绑定事件"><a href="#3-为元素绑定事件" class="headerlink" title="3.为元素绑定事件"></a>3.为元素绑定事件</h4><p><img src="http://imagehosting.biz/images/2018/04/10/1875186294946828018.jpg" alt="我是图片"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;jQueryUI&quot;&gt;&lt;a href=&quot;#jQueryUI&quot; class=&quot;headerlink&quot; title=&quot;jQueryUI&quot;&gt;&lt;/a&gt;jQueryUI&lt;/h2&gt;&lt;h4 id=&quot;什么是：jQuery官方出的，基于jQuery实现的比jQuery更简化的UI组件</summary>
      
    
    
    
    <category term="jQuery" scheme="http://example.com/categories/jQuery/"/>
    
    
  </entry>
  
  <entry>
    <title>jQuery事件简化、模拟触发、hover、动画</title>
    <link href="http://example.com/2018/07/03/jQuery%E4%BA%8B%E4%BB%B6%E7%AE%80%E5%8C%96%E3%80%81%E6%A8%A1%E6%8B%9F%E8%A7%A6%E5%8F%91%E3%80%81hover%E3%80%81%E5%8A%A8%E7%94%BB/"/>
    <id>http://example.com/2018/07/03/jQuery%E4%BA%8B%E4%BB%B6%E7%AE%80%E5%8C%96%E3%80%81%E6%A8%A1%E6%8B%9F%E8%A7%A6%E5%8F%91%E3%80%81hover%E3%80%81%E5%8A%A8%E7%94%BB/</id>
    <published>2018-07-03T07:06:43.000Z</published>
    <updated>2019-07-17T08:24:32.793Z</updated>
    
    <content type="html"><![CDATA[<h2 id="事件绑定简化"><a href="#事件绑定简化" class="headerlink" title="事件绑定简化"></a>事件绑定简化</h2><h5 id="绑定"><a href="#绑定" class="headerlink" title="绑定:"></a><strong>绑定</strong>:</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">已废弃: $ (...).live(&quot;事件名&quot;,fn)        $(...).die(&quot;事件名&quot;,fn)</span><br></pre></td></tr></table></figure><h5 id="极端：将网页中所有事件集中绑定在document上。效率极低"><a href="#极端：将网页中所有事件集中绑定在document上。效率极低" class="headerlink" title="极端：将网页中所有事件集中绑定在document上。效率极低"></a><strong>极端</strong>：将网页中所有事件集中绑定在document上。效率极低</h5><h5 id="终极简化"><a href="#终极简化" class="headerlink" title="终极简化:"></a><strong>终极简化</strong>:</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(...).on(...) 绑定        $(...).off(...)解绑</span><br><span class="line">$(...).on(&quot;事件名&quot;,fn)  -&gt; 代替bind</span><br><span class="line">$(...).on(&quot;事件名&quot;,&quot;selector&quot;,fn) -&gt; 代替delegate</span><br><span class="line">强调: on代替delegate，要事件名在前，选择器在后</span><br><span class="line">解绑: $(...).off(&quot;事件名&quot;,[&quot;selector&quot;,]fn)</span><br></pre></td></tr></table></figure><h3 id="模拟触发"><a href="#模拟触发" class="headerlink" title="模拟触发"></a><strong>模拟触发</strong></h3><h5 id="什么是：希望通过代码代替用户操作，触发元素的事件"><a href="#什么是：希望通过代码代替用户操作，触发元素的事件" class="headerlink" title="什么是：希望通过代码代替用户操作，触发元素的事件"></a><strong>什么是</strong>：希望通过代码代替用户操作，触发元素的事件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(...).trigger(&quot;事件名&quot;) 触发找到的元素上绑定的事件函数</span><br><span class="line">$(...).事件名()  比如：$(form).submit();提交表单</span><br></pre></td></tr></table></figure><h5 id="总结：jQuery简化版事件处理函数两用："><a href="#总结：jQuery简化版事件处理函数两用：" class="headerlink" title="总结：jQuery简化版事件处理函数两用："></a><strong>总结</strong>：jQuery简化版事件处理函数两用：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(…).事件名([fn])        有fn，则绑定事件；   没有fn，则模拟触发事件</span><br></pre></td></tr></table></figure><p><img src="http://imagehosting.biz/images/2018/04/10/6597541457147015163.jpg" alt="我是图片"></p><h3 id="页面加载后自动执行"><a href="#页面加载后自动执行" class="headerlink" title="页面加载后自动执行"></a><strong>页面加载后自动执行</strong></h3><h6 id="1、整个页面内容加载完成才触发-window-onload-function-…"><a href="#1、整个页面内容加载完成才触发-window-onload-function-…" class="headerlink" title="1、整个页面内容加载完成才触发  window.onload=function(){…}"></a>1、整个页面内容加载完成才触发  window.onload=function(){…}</h6><h6 id="HTML，CSS，JS，图片全部加载完成"><a href="#HTML，CSS，JS，图片全部加载完成" class="headerlink" title="HTML，CSS，JS，图片全部加载完成"></a>HTML，CSS，JS，图片全部加载完成</h6><h6 id="2、DOM内容加载完成就触发-DOMContentLoaded-有兼容性问题"><a href="#2、DOM内容加载完成就触发-DOMContentLoaded-有兼容性问题" class="headerlink" title="2、DOM内容加载完成就触发 DOMContentLoaded : 有兼容性问题"></a>2、DOM内容加载完成就触发 DOMContentLoaded : 有兼容性问题</h6><h6 id="仅HTML和JS加载并执行完成"><a href="#仅HTML和JS加载并执行完成" class="headerlink" title="仅HTML和JS加载并执行完成"></a>仅HTML和JS加载并执行完成</h6><h6 id="准备工作包括-事件绑定，DOM操作"><a href="#准备工作包括-事件绑定，DOM操作" class="headerlink" title="准备工作包括: 事件绑定，DOM操作"></a>准备工作包括: 事件绑定，DOM操作</h6><h6 id="DOM内容加载完成比整个页面加载完成提前触发"><a href="#DOM内容加载完成比整个页面加载完成提前触发" class="headerlink" title="DOM内容加载完成比整个页面加载完成提前触发"></a>DOM内容加载完成比整个页面加载完成提前触发</h6><h6 id="何时-：凡是对DOM的初始化操作，都要放在DOM内容加载完成时提前执行，不必等待整个页面加载完成"><a href="#何时-：凡是对DOM的初始化操作，都要放在DOM内容加载完成时提前执行，不必等待整个页面加载完成" class="headerlink" title="何时 ：凡是对DOM的初始化操作，都要放在DOM内容加载完成时提前执行，不必等待整个页面加载完成"></a><strong>何时</strong> ：凡是对DOM的初始化操作，都要放在DOM内容加载完成时提前执行，不必等待整个页面加载完成</h6><h6 id="比如-：动态生成DOM内容和内容和事件绑定"><a href="#比如-：动态生成DOM内容和内容和事件绑定" class="headerlink" title="比如 ：动态生成DOM内容和内容和事件绑定"></a><strong>比如</strong> ：动态生成DOM内容和内容和事件绑定</h6><h6 id="如何jQuery"><a href="#如何jQuery" class="headerlink" title="如何jQuery"></a><strong>如何jQuery</strong></h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(document).ready(function()&#123;....&#125;)</span><br><span class="line">简写: $().ready(function()&#123;....&#125;)</span><br><span class="line">再简写：$(function()&#123;....&#125;) 反复$()的fn，默认DOM内容加载后就提前执行</span><br></pre></td></tr></table></figure><h6 id="终极简化："><a href="#终极简化：" class="headerlink" title="终极简化："></a><strong>终极简化</strong>：</h6><p>只要放在body结尾的script中的代码，默认DOM内容加载后提前执行。</p><h6 id="特殊的事件："><a href="#特殊的事件：" class="headerlink" title="特殊的事件："></a><strong>特殊的事件</strong>：</h6><h6 id="hover-mouseover-mouseout"><a href="#hover-mouseover-mouseout" class="headerlink" title="hover = mouseover+mouseout"></a>hover = mouseover+mouseout</h6><h6 id="什么是：同时绑定两个事件：mouseover和mouseout"><a href="#什么是：同时绑定两个事件：mouseover和mouseout" class="headerlink" title="什么是：同时绑定两个事件：mouseover和mouseout"></a><strong>什么是</strong>：同时绑定两个事件：mouseover和mouseout</h6><h6 id="何时-只要同时绑定-mouseover和mouseout时："><a href="#何时-只要同时绑定-mouseover和mouseout时：" class="headerlink" title="何时: 只要同时绑定 mouseover和mouseout时："></a><strong>何时</strong>: 只要同时绑定 mouseover和mouseout时：</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(...).hover(</span><br><span class="line">    function()&#123;...mouseover...&#125;,</span><br><span class="line">    function()&#123;...mouseout...&#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h6 id="更简化-如果能够将两个函数统一为一个函数，可简写为-…-hover-fn-，无论over还是out都执行相同操作。"><a href="#更简化-如果能够将两个函数统一为一个函数，可简写为-…-hover-fn-，无论over还是out都执行相同操作。" class="headerlink" title="更简化: 如果能够将两个函数统一为一个函数，可简写为: $(…).hover(fn);，无论over还是out都执行相同操作。"></a><strong>更简化</strong>: 如果能够将两个函数统一为一个函数，可简写为: $(…).hover(fn);，无论over还是out都执行相同操作。</h6><h4 id="“-target”-hover-function-this-toggleClass-“hover”"><a href="#“-target”-hover-function-this-toggleClass-“hover”" class="headerlink" title="$(“#target”).hover(function(){$(this).toggleClass(“hover”)})"></a><strong>$(“#target”).hover(function(){$(this).toggleClass(“hover”)})</strong></h4><h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a><strong>动画</strong></h2><h4 id="1-简单动画-3种固定效果"><a href="#1-简单动画-3种固定效果" class="headerlink" title="1. 简单动画: 3种固定效果"></a>1. 简单动画: 3种固定效果</h4><h4 id="1-显示-隐藏-…-show-hide-toggle"><a href="#1-显示-隐藏-…-show-hide-toggle" class="headerlink" title="1. 显示/隐藏: $(…).show/hide/toggle();"></a>1. 显示/隐藏: $(…).show/hide/toggle();</h4><h4 id="问题-如果show-hide不给任何参数-display-none，-瞬间显示隐藏"><a href="#问题-如果show-hide不给任何参数-display-none，-瞬间显示隐藏" class="headerlink" title="问题:如果show/hide不给任何参数: display:none， 瞬间显示隐藏"></a><strong>问题</strong>:如果show/hide不给任何参数: display:none， 瞬间显示隐藏</h4><h4 id="解决：在参数中加入时间-直接添加毫秒数或者指定参数-speed-1-三档-“slow”-”normal”-”fast”"><a href="#解决：在参数中加入时间-直接添加毫秒数或者指定参数-speed-1-三档-“slow”-”normal”-”fast”" class="headerlink" title="解决：在参数中加入时间 直接添加毫秒数或者指定参数: speed: 1. 三档(“slow”,”normal”,”fast”)"></a><strong>解决</strong>：在参数中加入时间 直接添加毫秒数或者指定参数: speed: 1. 三档(“slow”,”normal”,”fast”)</h4><h4 id="问题：所有效果属性变化，都写死在jQuery源代码内部，无法按需求更改。"><a href="#问题：所有效果属性变化，都写死在jQuery源代码内部，无法按需求更改。" class="headerlink" title="问题：所有效果属性变化，都写死在jQuery源代码内部，无法按需求更改。"></a><strong>问题</strong>：所有效果属性变化，都写死在jQuery源代码内部，无法按需求更改。</h4><h4 id="解决：1、少用简单动画-2、class-transition"><a href="#解决：1、少用简单动画-2、class-transition" class="headerlink" title="解决：1、少用简单动画     2、class+transition"></a><strong>解决</strong>：1、少用简单动画     2、class+transition</h4><h4 id="2-上滑-下滑-…-slideUp-slideDown-slideToggle"><a href="#2-上滑-下滑-…-slideUp-slideDown-slideToggle" class="headerlink" title="2. 上滑/下滑:$(…).slideUp/slideDown/slideToggle();"></a><strong>2</strong>. 上滑/下滑:$(…).slideUp/slideDown/slideToggle();</h4><h4 id="3-淡入-淡出-…-fadeIn-fadeOut-fadeToggle"><a href="#3-淡入-淡出-…-fadeIn-fadeOut-fadeToggle" class="headerlink" title="3. 淡入/淡出:$(…).fadeIn/fadeOut/fadeToggle();"></a><strong>3</strong>. 淡入/淡出:$(…).fadeIn/fadeOut/fadeToggle();</h4><h4 id="缺点-效果写死在库函数中，无法维护！"><a href="#缺点-效果写死在库函数中，无法维护！" class="headerlink" title="缺点: 效果写死在库函数中，无法维护！"></a>缺点: 效果写死在库函数中，无法维护！</h4><h2 id="解决-class-transition"><a href="#解决-class-transition" class="headerlink" title="解决: class+transition"></a><strong>解决: class+transition</strong></h2><h2 id="所有动画API的最后一个参数，都可指定回调函数"><a href="#所有动画API的最后一个参数，都可指定回调函数" class="headerlink" title="所有动画API的最后一个参数，都可指定回调函数"></a><strong>所有动画API的最后一个参数，都可指定回调函数</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(...).show(speed,callback)</span><br><span class="line">    callback:在动画结束后自动执行，this-&gt;当前元素</span><br></pre></td></tr></table></figure><h2 id="2-自定义动画——万能动画"><a href="#2-自定义动画——万能动画" class="headerlink" title="2. 自定义动画——万能动画"></a><strong>2. 自定义动画——万能动画</strong></h2><h4 id="什么是：可对任意数值类型的CSS属性执行动画效果"><a href="#什么是：可对任意数值类型的CSS属性执行动画效果" class="headerlink" title="什么是：可对任意数值类型的CSS属性执行动画效果"></a><strong>什么是</strong>：可对任意数值类型的CSS属性执行动画效果</h4><h4 id="何时：只要希望对任意数值类型执行动画效果"><a href="#何时：只要希望对任意数值类型执行动画效果" class="headerlink" title="何时：只要希望对任意数值类型执行动画效果"></a><strong>何时</strong>：只要希望对任意数值类型执行动画效果</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(...).animate(&#123;<span class="comment">//目标样式</span></span><br><span class="line">    css属性:值, css属性:值, ...</span><br><span class="line">&#125;,speed[easing,callback]);</span><br></pre></td></tr></table></figure><h4 id="其中：speed-是动画持续的总毫秒数"><a href="#其中：speed-是动画持续的总毫秒数" class="headerlink" title="其中：speed 是动画持续的总毫秒数"></a><strong>其中</strong>：speed 是动画持续的总毫秒数</h4><h4 id="easing-是动画变化的效果-：linear-swing"><a href="#easing-是动画变化的效果-：linear-swing" class="headerlink" title="easing 是动画变化的效果 ：linear swing"></a>easing 是动画变化的效果 ：linear swing</h4><h4 id="callback是动画结束后的回调函数，动画执行完再执行回调函数"><a href="#callback是动画结束后的回调函数，动画执行完再执行回调函数" class="headerlink" title="callback是动画结束后的回调函数，动画执行完再执行回调函数"></a>callback是动画结束后的回调函数，动画执行完再执行回调函数</h4><h4 id="不足-只能对单个纯数字的属性值执行动画变化，不支持颜色动画"><a href="#不足-只能对单个纯数字的属性值执行动画变化，不支持颜色动画" class="headerlink" title="不足: 只能对单个纯数字的属性值执行动画变化，不支持颜色动画"></a><strong>不足</strong>: 只能对单个纯数字的属性值执行动画变化，不支持颜色动画</h4><h4 id="并发和排队"><a href="#并发和排队" class="headerlink" title="并发和排队"></a><strong>并发和排队</strong></h4><h4 id="并发-多个css属性同时变化"><a href="#并发-多个css属性同时变化" class="headerlink" title="并发: 多个css属性同时变化"></a><strong>并发</strong>: 多个css属性同时变化</h4><h4 id="1-放在同一个animate中的多个css属性都是并发变化"><a href="#1-放在同一个animate中的多个css属性都是并发变化" class="headerlink" title="1. 放在同一个animate中的多个css属性都是并发变化"></a>1. 放在同一个animate中的多个css属性都是并发变化</h4><h4 id="2-同时给多个元素添加animate效果，不同元素调用的动画也是并发。"><a href="#2-同时给多个元素添加animate效果，不同元素调用的动画也是并发。" class="headerlink" title="2. 同时给多个元素添加animate效果，不同元素调用的动画也是并发。"></a>2. 同时给多个元素添加animate效果，不同元素调用的动画也是并发。</h4><p><img src="http://imagehosting.biz/images/2018/04/10/1982146786096809806.jpg" alt="我是图片"></p><h4 id="排队-每个css属性，先后逐个变化"><a href="#排队-每个css属性，先后逐个变化" class="headerlink" title="排队: 每个css属性，先后逐个变化"></a><strong>排队</strong>: 每个css属性，先后逐个变化</h4><h4 id="先后调用的不同animate内的多个css属性时排队变化——动画队列"><a href="#先后调用的不同animate内的多个css属性时排队变化——动画队列" class="headerlink" title="先后调用的不同animate内的多个css属性时排队变化——动画队列"></a>先后调用的不同animate内的多个css属性时排队变化——动画队列</h4><h4 id="停止动画：-…-stop"><a href="#停止动画：-…-stop" class="headerlink" title="停止动画：$(…).stop();"></a><strong>停止动画</strong>：$(…).stop();</h4><h4 id="问题-默认仅停止队列中正在执行的当前动画，后续动画继续执行"><a href="#问题-默认仅停止队列中正在执行的当前动画，后续动画继续执行" class="headerlink" title="问题: 默认仅停止队列中正在执行的当前动画，后续动画继续执行"></a><strong>问题</strong>: 默认仅停止队列中正在执行的当前动画，后续动画继续执行</h4><h4 id="解决-…-stop-true-停止当前动画，清空队列"><a href="#解决-…-stop-true-停止当前动画，清空队列" class="headerlink" title="解决: $(…).stop(true);//停止当前动画，清空队列"></a><strong>解决</strong>: $(…).stop(true);//停止当前动画，清空队列</h4><h4 id="推迟执行：-…-delay-ms-animate-…"><a href="#推迟执行：-…-delay-ms-animate-…" class="headerlink" title="推迟执行：$(…).delay(ms).animate(…)"></a>推迟执行：$(…).delay(ms).animate(…)</h4><h4 id="问题：如果停止动画时，会直接停止delay，后续动画继续执行。如果stop-true-则所有动画都停止"><a href="#问题：如果停止动画时，会直接停止delay，后续动画继续执行。如果stop-true-则所有动画都停止" class="headerlink" title="问题：如果停止动画时，会直接停止delay，后续动画继续执行。如果stop(true)则所有动画都停止"></a><strong>问题</strong>：如果停止动画时，会直接停止delay，后续动画继续执行。如果stop(true)则所有动画都停止</h4><h4 id="查找一个正在播放动画的元素-animated"><a href="#查找一个正在播放动画的元素-animated" class="headerlink" title="查找一个正在播放动画的元素  :animated"></a>查找一个正在播放动画的元素  :animated</h4><h4 id="连续链式调用的多个animate的css属性是排队执行"><a href="#连续链式调用的多个animate的css属性是排队执行" class="headerlink" title="连续链式调用的多个animate的css属性是排队执行"></a>连续链式调用的多个animate的css属性是排队执行</h4><h4 id="练习-为多个元素，有规律的指定属性值（属性值中可以写函数）"><a href="#练习-为多个元素，有规律的指定属性值（属性值中可以写函数）" class="headerlink" title="练习: 为多个元素，有规律的指定属性值（属性值中可以写函数）"></a><strong>练习</strong>: 为多个元素，有规律的指定属性值（属性值中可以写函数）</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(...).css(<span class="string">&quot;属性&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">i,val</span>)</span>&#123;<span class="comment">//自动在每个元素上执行</span></span><br><span class="line">    i<span class="comment">//自动获得当前元素的下标</span></span><br><span class="line">    val<span class="comment">//当前元素的指定属性值</span></span><br><span class="line">    <span class="built_in">this</span><span class="comment">//当前DOM元素...</span></span><br><span class="line">    <span class="keyword">return</span>要修改给当前元素的属性的值</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="类数组对象的操作"><a href="#类数组对象的操作" class="headerlink" title="类数组对象的操作"></a><strong>类数组对象的操作</strong></h4><h4 id="类数组对象不是数组类型，无法使用数组的API"><a href="#类数组对象不是数组类型，无法使用数组的API" class="headerlink" title="类数组对象不是数组类型，无法使用数组的API"></a>类数组对象不是数组类型，无法使用数组的API</h4><h4 id="size-gt-代替-length获得类数组对象中的元素个数"><a href="#size-gt-代替-length获得类数组对象中的元素个数" class="headerlink" title=".size()-&gt;代替.length获得类数组对象中的元素个数"></a><strong>.size()-&gt;代替.length获得类数组对象中的元素个数</strong></h4><h4 id="get-i-gt-获得数组对象中i位置的元素"><a href="#get-i-gt-获得数组对象中i位置的元素" class="headerlink" title=".get(i)-&gt;获得数组对象中i位置的元素"></a><strong>.get(i)-&gt;获得数组对象中i位置的元素</strong></h4><h4 id="each-fn-gt-相当于数组的forEach，对类数组对象中每个元素执行相同操作"><a href="#each-fn-gt-相当于数组的forEach，对类数组对象中每个元素执行相同操作" class="headerlink" title=".each(fn)-&gt;相当于数组的forEach，对类数组对象中每个元素执行相同操作"></a><strong>.each(fn)-&gt;相当于数组的forEach，对类数组对象中每个元素执行相同操作</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">其中：fn：<span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123; <span class="comment">//i 当前元素的下标</span></span><br><span class="line">                 <span class="built_in">this</span>-&gt;当前DOM元素-&gt;$(<span class="built_in">this</span>)-&gt;jQuery对象</span><br><span class="line">           &#125;</span><br></pre></td></tr></table></figure><h4 id="index-gt-在类数组对象中查找指定元素的下标位置。类似于indexOf函数"><a href="#index-gt-在类数组对象中查找指定元素的下标位置。类似于indexOf函数" class="headerlink" title=".index()-&gt;在类数组对象中查找指定元素的下标位置。类似于indexOf函数"></a><strong>.index()-&gt;在类数组对象中查找指定元素的下标位置。类似于indexOf函数</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;selector&quot;</span>).index(DOM/$(...))</span><br></pre></td></tr></table></figure><h4 id="在满足selector的所有元素中找右侧DOM-JQ对象的位置——在左边的集合中找右边的对象"><a href="#在满足selector的所有元素中找右侧DOM-JQ对象的位置——在左边的集合中找右边的对象" class="headerlink" title="在满足selector的所有元素中找右侧DOM/JQ对象的位置——在左边的集合中找右边的对象"></a><strong>在满足selector的所有元素中找右侧DOM/JQ对象的位置——在左边的集合中找右边的对象</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    $(<span class="string">&quot;selector1&quot;</span>).index(<span class="string">&quot;selector2&quot;</span>)</span><br><span class="line">~~~    </span><br><span class="line">#### **在满足selector2的所有元素中找左侧selector1元素的位置——在右边的集合中找左边的对象**</span><br><span class="line">~~~javascript</span><br><span class="line">    $(<span class="string">&quot;selector&quot;</span>).index()</span><br></pre></td></tr></table></figure><h4 id="返回selector元素在其父元素下平辈子元素中的下标位置"><a href="#返回selector元素在其父元素下平辈子元素中的下标位置" class="headerlink" title="返回selector元素在其父元素下平辈子元素中的下标位置"></a><strong>返回selector元素在其父元素下平辈子元素中的下标位置</strong></h4><p><img src="http://imagehosting.biz/images/2018/04/10/845550830139160188.jpg" alt="我是图片"><br><img src="http://imagehosting.biz/images/2018/04/10/1380634760866078083.jpg" alt="我是图片"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;事件绑定简化&quot;&gt;&lt;a href=&quot;#事件绑定简化&quot; class=&quot;headerlink&quot; title=&quot;事件绑定简化&quot;&gt;&lt;/a&gt;事件绑定简化&lt;/h2&gt;&lt;h5 id=&quot;绑定&quot;&gt;&lt;a href=&quot;#绑定&quot; class=&quot;headerlink&quot; title=&quot;绑定:&quot;&gt;</summary>
      
    
    
    
    <category term="jQuery" scheme="http://example.com/categories/jQuery/"/>
    
    
  </entry>
  
  <entry>
    <title>jQuery 节点选择器、修改、绑定事件</title>
    <link href="http://example.com/2018/07/01/jQuery%E8%8A%82%E7%82%B9%E9%80%89%E6%8B%A9%E5%99%A8%E3%80%81%E4%BF%AE%E6%94%B9%E3%80%81%E7%BB%91%E5%AE%9A%E4%BA%8B%E4%BB%B6/"/>
    <id>http://example.com/2018/07/01/jQuery%E8%8A%82%E7%82%B9%E9%80%89%E6%8B%A9%E5%99%A8%E3%80%81%E4%BF%AE%E6%94%B9%E3%80%81%E7%BB%91%E5%AE%9A%E4%BA%8B%E4%BB%B6/</id>
    <published>2018-07-01T05:06:43.000Z</published>
    <updated>2019-07-17T08:24:28.959Z</updated>
    
    <content type="html"><![CDATA[<h2 id="按节点间关系"><a href="#按节点间关系" class="headerlink" title="按节点间关系"></a>按节点间关系</h2><h6 id="何时：如果已经获得一个元素，找周围的元素时"><a href="#何时：如果已经获得一个元素，找周围的元素时" class="headerlink" title="何时：如果已经获得一个元素，找周围的元素时"></a>何时：如果已经获得一个元素，找周围的元素时</h6><p><strong>父子: $(child).parent()              child.parentNode</strong><br><strong>$(parent).children([selector])  parent.children</strong></p><h6 id="强调："><a href="#强调：" class="headerlink" title="强调："></a>强调：</h6><h6 id="1-仅查找直接子节点"><a href="#1-仅查找直接子节点" class="headerlink" title="1.仅查找直接子节点"></a>1.仅查找直接子节点</h6><h6 id="2-带中括号-，表示选择器可用可不用；可用选择器仅选择感兴趣的子节点，但选择器可写可不写"><a href="#2-带中括号-，表示选择器可用可不用；可用选择器仅选择感兴趣的子节点，但选择器可写可不写" class="headerlink" title="2.带中括号[ ]，表示选择器可用可不用；可用选择器仅选择感兴趣的子节点，但选择器可写可不写"></a>2.带中括号[ ]，表示选择器可用可不用；可用选择器仅选择感兴趣的子节点，但选择器可写可不写</h6><h6 id="获得parent下直接子元素中符合selector条件的"><a href="#获得parent下直接子元素中符合selector条件的" class="headerlink" title="获得parent下直接子元素中符合selector条件的"></a>获得parent下直接子元素中符合selector条件的</h6><h6 id="parent-find-selector"><a href="#parent-find-selector" class="headerlink" title="$(parent).find(selector)"></a>$(parent).find(selector)</h6><h6 id="强调：1-不但查找直接子元素，且查找后代元素"><a href="#强调：1-不但查找直接子元素，且查找后代元素" class="headerlink" title="强调：1.不但查找直接子元素，且查找后代元素"></a>强调：1.不但查找直接子元素，且查找后代元素</h6><h4 id="选择器必须写"><a href="#选择器必须写" class="headerlink" title="选择器必须写"></a><strong>选择器必须写</strong></h4><h6 id="获得parent下所有后代元素中符合selector条件的"><a href="#获得parent下所有后代元素中符合selector条件的" class="headerlink" title="获得parent下所有后代元素中符合selector条件的"></a>获得parent下所有后代元素中符合selector条件的</h6><h6 id="parent-children-first-parent-firstChild"><a href="#parent-children-first-parent-firstChild" class="headerlink" title="$(parent).children().first()      parent.firstChild"></a>$(parent).children().first()      parent.firstChild</h6><h6 id="parent-children-last-parent-lastChild"><a href="#parent-children-last-parent-lastChild" class="headerlink" title="$(parent).children().last()      parent.lastChild"></a>$(parent).children().last()      parent.lastChild</h6><h6 id="2、兄弟-…-prev-选择和当前元素紧邻的前一个兄弟"><a href="#2、兄弟-…-prev-选择和当前元素紧邻的前一个兄弟" class="headerlink" title="2、兄弟: $(…).prev() 选择和当前元素紧邻的前一个兄弟"></a>2、兄弟: $(…).prev() 选择和当前元素紧邻的前一个兄弟</h6><h6 id="强调-必须紧邻的前一个"><a href="#强调-必须紧邻的前一个" class="headerlink" title="强调: 必须紧邻的前一个"></a>强调: 必须紧邻的前一个</h6><h6 id="…-prev-selector"><a href="#…-prev-selector" class="headerlink" title="$(…).prev([selector])"></a>$(…).prev([selector])</h6><h6 id="要求-必须紧邻的前一个且满足selector"><a href="#要求-必须紧邻的前一个且满足selector" class="headerlink" title="要求: 必须紧邻的前一个且满足selector"></a>要求: 必须紧邻的前一个且满足selector</h6><h6 id="…-prevAll-selector-选择当前元素之前的所有兄弟"><a href="#…-prevAll-selector-选择当前元素之前的所有兄弟" class="headerlink" title="$(…).prevAll([selector])选择当前元素之前的所有兄弟"></a>$(…).prevAll([selector])选择当前元素之前的所有兄弟</h6><h6 id="…-next-…-nextAll-…-同prev-prevAll"><a href="#…-next-…-nextAll-…-同prev-prevAll" class="headerlink" title="$(…).next(…)/.nextAll(…)同prev/prevAll"></a>$(…).next(…)/.nextAll(…)同prev/prevAll</h6><h6 id="…-siblings-selector-除自己之外的所有前后的平级兄弟"><a href="#…-siblings-selector-除自己之外的所有前后的平级兄弟" class="headerlink" title="$(…).siblings([selector])除自己之外的所有前后的平级兄弟"></a>$(…).siblings([selector])除自己之外的所有前后的平级兄弟</h6><h2 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h2><h4 id="内容"><a href="#内容" class="headerlink" title="内容:"></a><strong>内容</strong>:</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(...).html([html代码片段])-&gt; elem.innerHTML</span><br><span class="line">$(...).text([文本]) -&gt;elem.textContent</span><br><span class="line">$(...).val([值]) -&gt; elem.value</span><br><span class="line">$(...).empty() 清空元素的内容</span><br></pre></td></tr></table></figure><h6 id="属性-…-attr-“属性名”-”值”-gt-elem-属性-不写值是获取，写值为修改"><a href="#属性-…-attr-“属性名”-”值”-gt-elem-属性-不写值是获取，写值为修改" class="headerlink" title="属性: $(…).attr(“属性名”[,”值”]) -&gt; elem.属性    不写值是获取，写值为修改"></a><strong>属性</strong>: $(…).attr(“属性名”[,”值”]) -&gt; elem.属性    <strong>不写值是获取，写值为修改</strong></h6><h6 id="移除属性-…-removeAttr-“属性名”"><a href="#移除属性-…-removeAttr-“属性名”" class="headerlink" title="移除属性: $(…).removeAttr(“属性名”)"></a>移除属性: $(…).removeAttr(“属性名”)</h6><h6 id="问题-不能访问三大状态-disabled-checked-selected"><a href="#问题-不能访问三大状态-disabled-checked-selected" class="headerlink" title="问题: 不能访问三大状态: disabled checked selected"></a>问题: 不能访问三大状态: disabled checked selected</h6><h6 id="解决-…-prop-…"><a href="#解决-…-prop-…" class="headerlink" title="解决: $(…).prop(…)"></a>解决: $(…).prop(…)</h6><h6 id="问题-一句attr只能修改一个属性"><a href="#问题-一句attr只能修改一个属性" class="headerlink" title="问题: 一句attr只能修改一个属性"></a>问题: 一句attr只能修改一个属性</h6><h6 id="解决-…-attr"><a href="#解决-…-attr" class="headerlink" title="解决: $(…).attr({"></a>解决: $(…).attr({</h6><h6 id="属性名-值"><a href="#属性名-值" class="headerlink" title="属性名: 值,"></a>属性名: 值,</h6><h6 id="…-…"><a href="#…-…" class="headerlink" title="… : … ,"></a>… : … ,</h6><h6 id=""><a href="#" class="headerlink" title="})"></a>})</h6><h6 id="样式-…-css-“属性名”-”值”"><a href="#样式-…-css-“属性名”-”值”" class="headerlink" title="样式:$(…).css(“属性名”[,”值”])"></a><strong>样式</strong>:$(…).css(“属性名”[,”值”])</h6><h6 id="获取：自动获取计算后的完整样式"><a href="#获取：自动获取计算后的完整样式" class="headerlink" title="获取：自动获取计算后的完整样式"></a>获取：自动获取计算后的完整样式</h6><h6 id="修改：自动仅修改内联样式"><a href="#修改：自动仅修改内联样式" class="headerlink" title="修改：自动仅修改内联样式"></a>修改：自动仅修改内联样式</h6><h6 id="强调-凡是从页面上获得的属性-样式的值都是字符串"><a href="#强调-凡是从页面上获得的属性-样式的值都是字符串" class="headerlink" title="强调: 凡是从页面上获得的属性/样式的值都是字符串"></a>强调: 凡是从页面上获得的属性/样式的值都是字符串</h6><h6 id="如要计算，必须先转为浮点数，去单位。"><a href="#如要计算，必须先转为浮点数，去单位。" class="headerlink" title="如要计算，必须先转为浮点数，去单位。"></a>如要计算，必须先转为浮点数，去单位。</h6><p><img src="https://s2.ax1x.com/2019/07/17/ZLul6O.png" alt="我是图片"></p><h6 id="修改一个css属性-…-css-“css属性名”-”值”"><a href="#修改一个css属性-…-css-“css属性名”-”值”" class="headerlink" title="修改一个css属性: $(…).css(“css属性名”[,”值”])"></a>修改一个css属性: $(…).css(“css属性名”[,”值”])</h6><h6 id="如果不给值，就获取css属性的值"><a href="#如果不给值，就获取css属性的值" class="headerlink" title="如果不给值，就获取css属性的值"></a>如果不给值，就获取css属性的值</h6><h6 id="强调-jq-修改-…-css-…-值-gt-elem-style-css属性"><a href="#强调-jq-修改-…-css-…-值-gt-elem-style-css属性" class="headerlink" title="强调: jq: 修改: $(…).css(…,值) =&gt; elem.style.css属性"></a><strong>强调</strong>: jq: 修改: $(…).css(…,值) =&gt; elem.style.css属性</h6><h6 id="获取-…-css-…-gt-getComputedStyle-elem"><a href="#获取-…-css-…-gt-getComputedStyle-elem" class="headerlink" title="获取: $(…).css(…) =&gt;getComputedStyle(elem)"></a><strong>获取</strong>: $(…).css(…) =&gt;getComputedStyle(elem)</h6><h6 id="同时修改多个css属性"><a href="#同时修改多个css属性" class="headerlink" title="同时修改多个css属性:"></a>同时修改多个css属性:</h6><h6 id="…-css"><a href="#…-css" class="headerlink" title="$(…).css({"></a>$(…).css({</h6><h6 id="css属性-值"><a href="#css属性-值" class="headerlink" title="css属性: 值,"></a>css属性: 值,</h6><h6 id="…-…-1"><a href="#…-…-1" class="headerlink" title="… : …"></a>… : …</h6><h6 id="-1"><a href="#-1" class="headerlink" title="})"></a>})</h6><h6 id="强调"><a href="#强调" class="headerlink" title="强调:"></a><strong>强调</strong>:</h6><h6 id="1-所有css属性名都要去横线变驼峰"><a href="#1-所有css属性名都要去横线变驼峰" class="headerlink" title="1. 所有css属性名都要去横线变驼峰"></a>1. 所有css属性名都要去横线变驼峰</h6><h6 id="2-如果属性值为数值-可省略引号和单位"><a href="#2-如果属性值为数值-可省略引号和单位" class="headerlink" title="2. 如果属性值为数值, 可省略引号和单位"></a>2. 如果属性值为数值, 可省略引号和单位</h6><h6 id="问题：要修改的css属性很多，则代码繁琐"><a href="#问题：要修改的css属性很多，则代码繁琐" class="headerlink" title="问题：要修改的css属性很多，则代码繁琐"></a>问题：要修改的css属性很多，则代码繁琐</h6><h6 id="解决：今后批量修改css，都要将css集中定义在class中，通过应用class来批量修改css样式"><a href="#解决：今后批量修改css，都要将css集中定义在class中，通过应用class来批量修改css样式" class="headerlink" title="解决：今后批量修改css，都要将css集中定义在class中，通过应用class来批量修改css样式"></a>解决：今后批量修改css，都要将css集中定义在class中，通过应用class来批量修改css样式</h6><h3 id="修改class"><a href="#修改class" class="headerlink" title="修改class:"></a><strong>修改class</strong>:</h3><h6 id="1-为元素添加class-…-addClass-“类名”-…"><a href="#1-为元素添加class-…-addClass-“类名”-…" class="headerlink" title="1. 为元素添加class : $(…).addClass(“类名”,…)"></a>1. 为元素添加class : $(…).addClass(“类名”,…)</h6><h6 id="2-从元素上移除类名-…-removeClass-“类名”"><a href="#2-从元素上移除类名-…-removeClass-“类名”" class="headerlink" title="2. 从元素上移除类名 : $(…).removeClass(“类名”)"></a>2. 从元素上移除类名 : $(…).removeClass(“类名”)</h6><h6 id="3-判断元素是否包含指定class-…-hasClass-“class”"><a href="#3-判断元素是否包含指定class-…-hasClass-“class”" class="headerlink" title="3. 判断元素是否包含指定class  $(…).hasClass(“class”)"></a>3. 判断元素是否包含指定class  $(…).hasClass(“class”)</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>($(...).hasClass(<span class="string">&quot;class&quot;</span>))$(...).removeClass(<span class="string">&quot;class&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span> $(...).addClass(<span class="string">&quot;class&quot;</span>)</span><br></pre></td></tr></table></figure><h6 id="4-切换-…-toggleClass-“class”"><a href="#4-切换-…-toggleClass-“class”" class="headerlink" title="4. 切换 $(…).toggleClass(“class”)"></a>4. 切换 $(…).toggleClass(“class”)</h6><h6 id="toggleClass只适合一个按钮切换class"><a href="#toggleClass只适合一个按钮切换class" class="headerlink" title="toggleClass只适合一个按钮切换class"></a>toggleClass只适合一个按钮切换class</h6><p><img src="https://s2.ax1x.com/2019/07/17/ZLu1XD.jpg" alt="我是图片"></p><h6 id="如果没有class为-in-的类，则添加in"><a href="#如果没有class为-in-的类，则添加in" class="headerlink" title="如果没有class为 in 的类，则添加in"></a>如果没有class为 in 的类，则添加in</h6><h2 id="添加，删除，替换，复制"><a href="#添加，删除，替换，复制" class="headerlink" title="添加，删除，替换，复制:"></a><strong>添加，删除，替换，复制</strong>:</h2><h4 id="添加-2步"><a href="#添加-2步" class="headerlink" title="添加: 2步:"></a><strong>添加</strong>: 2步:</h4><h6 id="1-使用HTML代码片段创建新元素"><a href="#1-使用HTML代码片段创建新元素" class="headerlink" title="1. 使用HTML代码片段创建新元素"></a><strong>1. 使用HTML代码片段创建新元素</strong></h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $elem=$(<span class="string">&quot;html代码片段&quot;</span>)</span><br></pre></td></tr></table></figure><h6 id="强调：如果代码片段中即包含父元素，又包含子元素，则同时创建"><a href="#强调：如果代码片段中即包含父元素，又包含子元素，则同时创建" class="headerlink" title="强调：如果代码片段中即包含父元素，又包含子元素，则同时创建"></a>强调：如果代码片段中即包含父元素，又包含子元素，则同时创建</h6><h6 id="2-将新元素添加到页面（DOM树）"><a href="#2-将新元素添加到页面（DOM树）" class="headerlink" title="2. 将新元素添加到页面（DOM树）"></a><strong>2. 将新元素添加到页面（DOM树）</strong></h6><h6 id="1-向父元素下添加子元素"><a href="#1-向父元素下添加子元素" class="headerlink" title="1. 向父元素下添加子元素:"></a>1. 向父元素下添加子元素:</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(parent).append($elem) 末尾追加</span><br><span class="line">$(parent).prepend($elem) 开头插入</span><br></pre></td></tr></table></figure><h6 id="2-在现有子元素前后插入"><a href="#2-在现有子元素前后插入" class="headerlink" title="2. 在现有子元素前后插入:"></a>2. 在现有子元素前后插入:</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(child).after($elem) 在child之后插入elem</span><br><span class="line">$(child).before($elem) 在child之前插入 elem</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/07/17/ZLuufx.jpg" alt="我是图片"></p><h4 id="删除-…-remove-selector"><a href="#删除-…-remove-selector" class="headerlink" title="删除: $(…).remove([selector])"></a><strong>删除</strong>: $(…).remove([selector])</h4><h4 id="替换"><a href="#替换" class="headerlink" title="替换:"></a><strong>替换</strong>:</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;selector&quot;</span>).replaceWith($elem/<span class="string">&quot;HTML片段&quot;</span>)</span><br><span class="line">    用右侧的$elem或<span class="string">&quot;HTML片段&quot;</span>，替换左侧查找到的元素</span><br><span class="line">$(<span class="string">&quot;HTML片段&quot;</span>).replaceAll(<span class="string">&quot;selector&quot;</span>)</span><br><span class="line">    用左侧的HTML片段替换右侧的selector选中的元素</span><br></pre></td></tr></table></figure><h4 id="克隆-复制一个元素"><a href="#克隆-复制一个元素" class="headerlink" title="克隆: 复制一个元素:"></a><strong>克隆: 复制一个元素</strong>:</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $elem_copy=$(...).clone();</span><br></pre></td></tr></table></figure><h6 id="强调-不带参数的clone方法，只能复制样式和属性，不会复制行为-事件"><a href="#强调-不带参数的clone方法，只能复制样式和属性，不会复制行为-事件" class="headerlink" title="强调: 不带参数的clone方法，只能复制样式和属性，不会复制行为(事件)"></a>强调: 不带参数的clone方法，只能复制样式和属性，不会复制行为(事件)</h6><h6 id="如何-即复制属性-样式，又复制行为-…-clone-true"><a href="#如何-即复制属性-样式，又复制行为-…-clone-true" class="headerlink" title="如何:即复制属性/样式，又复制行为: $(…).clone(true)"></a>如何:即复制属性/样式，又复制行为: <strong>$(…).clone(true)</strong></h6><h6 id="练习-elem-is-selector"><a href="#练习-elem-is-selector" class="headerlink" title="练习: $(elem).is(selector)"></a>练习: <strong>$(elem).is(selector)</strong></h6><h6 id="判断elem是否符合selector的条件"><a href="#判断elem是否符合selector的条件" class="headerlink" title="判断elem是否符合selector的条件"></a><strong>判断elem是否符合selector的条件</strong></h6><p><img src="https://s2.ax1x.com/2019/07/17/ZLuQ1K.png" alt="我是图片"></p><h4 id="总结-jQuery是对DOM操作的终极简化函数库学jQuery-实际还是学DOM，心里始终想着DOM"><a href="#总结-jQuery是对DOM操作的终极简化函数库学jQuery-实际还是学DOM，心里始终想着DOM" class="headerlink" title="总结: jQuery是对DOM操作的终极简化函数库学jQuery, 实际还是学DOM，心里始终想着DOM"></a><strong>总结</strong>: jQuery是对DOM操作的终极简化函数库学jQuery, 实际还是学DOM，心里始终想着DOM</h4><h6 id="查找元素-1-按选择器查找。2-按节点间关系"><a href="#查找元素-1-按选择器查找。2-按节点间关系" class="headerlink" title="查找元素: 1. 按选择器查找。2. 按节点间关系"></a><strong>查找元素</strong>: 1. 按选择器查找。2. 按节点间关系</h6><h6 id="修改-1-内容-2-属性-3-样式"><a href="#修改-1-内容-2-属性-3-样式" class="headerlink" title="修改: 1. 内容  2. 属性   3. 样式"></a><strong>修改</strong>: 1. 内容  2. 属性   3. 样式</h6><h6 id="添加-2步-1"><a href="#添加-2步-1" class="headerlink" title="添加: 2步 :"></a><strong>添加</strong>: 2步 :</h6><h6 id="1-…-创建新元素-2-将新元素添加到DOM"><a href="#1-…-创建新元素-2-将新元素添加到DOM" class="headerlink" title="1. $(…)创建新元素  2. 将新元素添加到DOM"></a><strong>1</strong>. $(…)创建新元素  <strong>2</strong>. 将新元素添加到DOM</h6><h6 id="删除-…-remove"><a href="#删除-…-remove" class="headerlink" title="删除: $(…).remove();"></a><strong>删除</strong>: $(…).remove();</h6><h6 id="复制-…-clone-true"><a href="#复制-…-clone-true" class="headerlink" title="复制: $(…).clone(true);"></a><strong>复制</strong>: $(…).clone(true);</h6><h6 id="替换-…-replaceWith-…"><a href="#替换-…-replaceWith-…" class="headerlink" title="替换: $(…).replaceWith(…)"></a><strong>替换</strong>: $(…).replaceWith(…)</h6><h6 id="replaceAll"><a href="#replaceAll" class="headerlink" title="replaceAll"></a>replaceAll</h6><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a><strong>事件</strong></h2><h4 id="笔试-jQuery中共有几种事件绑定方式"><a href="#笔试-jQuery中共有几种事件绑定方式" class="headerlink" title="笔试 : jQuery中共有几种事件绑定方式"></a>笔试 : jQuery中共有几种事件绑定方式</h4><h6 id="1、-bind-unbind-gt-单纯代替add-removeEventListener"><a href="#1、-bind-unbind-gt-单纯代替add-removeEventListener" class="headerlink" title="1、.bind/unbind-&gt;单纯代替add/removeEventListener"></a>1、.bind/unbind-&gt;单纯代替add/removeEventListener</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(...).bind(<span class="string">&quot;事件名&quot;</span>,fn)</span><br></pre></td></tr></table></figure><h6 id="强调-1"><a href="#强调-1" class="headerlink" title="强调:"></a><strong>强调</strong>:</h6><h6 id="1-多数情况下-fn可使用匿名函数"><a href="#1-多数情况下-fn可使用匿名函数" class="headerlink" title="1. 多数情况下, fn可使用匿名函数"></a>1. 多数情况下, fn可使用匿名函数</h6><h6 id="2-如果可能移除事件绑定-则fn必须用有名的函数"><a href="#2-如果可能移除事件绑定-则fn必须用有名的函数" class="headerlink" title="2. 如果可能移除事件绑定,则fn必须用有名的函数"></a>2. 如果可能移除事件绑定,则fn必须用有名的函数</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(...).unbind(<span class="string">&quot;事件名&quot;</span>,fn)</span><br></pre></td></tr></table></figure><h6 id="简写"><a href="#简写" class="headerlink" title="简写:"></a><strong>简写</strong>:</h6><h6 id="1-省略fn-表示移除该事件绑定的所有处理函数"><a href="#1-省略fn-表示移除该事件绑定的所有处理函数" class="headerlink" title="1. 省略fn, 表示移除该事件绑定的所有处理函数"></a>1. 省略fn, 表示移除该事件绑定的所有处理函数</h6><h6 id="2-都省略-表示移除元素的所有事件绑定"><a href="#2-都省略-表示移除元素的所有事件绑定" class="headerlink" title="2. 都省略, 表示移除元素的所有事件绑定"></a>2. 都省略, 表示移除元素的所有事件绑定</h6><p><img src="https://s2.ax1x.com/2019/07/17/ZLuMp6.png" alt="我是图片"></p><h6 id="2、-one-…-用法同bind，绑定事件处理函数后，只执行一次，就自动解绑"><a href="#2、-one-…-用法同bind，绑定事件处理函数后，只执行一次，就自动解绑" class="headerlink" title="2、.one(…) : 用法同bind，绑定事件处理函数后，只执行一次，就自动解绑"></a>2、.one(…) : 用法同bind，绑定事件处理函数后，只执行一次，就自动解绑</h6><h6 id="3、简写-jq对部分常用事件的绑定提供了简写的函数"><a href="#3、简写-jq对部分常用事件的绑定提供了简写的函数" class="headerlink" title="3、简写: jq对部分常用事件的绑定提供了简写的函数:"></a>3、<strong>简写</strong>: jq对部分常用事件的绑定提供了简写的函数:</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(...).事件名(funciton()&#123;...&#125;)  -à&gt;&gt;  $(...).click(fn)</span><br></pre></td></tr></table></figure><h6 id="比较"><a href="#比较" class="headerlink" title="比较:"></a><strong>比较</strong>:</h6><h6 id="mouseover-moueout-mousemove-mouseenter-mouseleave"><a href="#mouseover-moueout-mousemove-mouseenter-mouseleave" class="headerlink" title="mouseover  moueout  mousemove mouseenter mouseleave"></a>mouseover  moueout  mousemove mouseenter mouseleave</h6><h6 id="mouseover-鼠标进入时触发一次（进入子元素，同样会冒泡触发父元素）"><a href="#mouseover-鼠标进入时触发一次（进入子元素，同样会冒泡触发父元素）" class="headerlink" title="mouseover 鼠标进入时触发一次（进入子元素，同样会冒泡触发父元素）"></a>mouseover 鼠标进入时触发一次（进入子元素，同样会冒泡触发父元素）</h6><h6 id="mouseleave-鼠标移出时触发一次，会触发父元素"><a href="#mouseleave-鼠标移出时触发一次，会触发父元素" class="headerlink" title="mouseleave 鼠标移出时触发一次，会触发父元素"></a>mouseleave 鼠标移出时触发一次，会触发父元素</h6><h6 id="mouseenter-进入子元素，不再触发父元素的事件"><a href="#mouseenter-进入子元素，不再触发父元素的事件" class="headerlink" title="mouseenter 进入子元素，不再触发父元素的事件"></a>mouseenter 进入子元素，不再触发父元素的事件</h6><h6 id="mouseout-鼠标移出时触发一次"><a href="#mouseout-鼠标移出时触发一次" class="headerlink" title="mouseout 鼠标移出时触发一次"></a>mouseout 鼠标移出时触发一次</h6><h3 id="利用冒泡-——事件委托"><a href="#利用冒泡-——事件委托" class="headerlink" title="利用冒泡:——事件委托"></a><strong>利用冒泡:——事件委托</strong></h3><h3 id="难题"><a href="#难题" class="headerlink" title="难题:"></a><strong>难题</strong>:</h3><h5 id="1-获取目标元素-e-target"><a href="#1-获取目标元素-e-target" class="headerlink" title="1.获取目标元素: e.target"></a>1.获取目标元素: e.target</h5><h5 id="2-鉴别目标元素是否想要-if-target-is-selector"><a href="#2-鉴别目标元素是否想要-if-target-is-selector" class="headerlink" title="2.鉴别目标元素是否想要:    if($(target).is(selector))"></a>2.鉴别目标元素是否想要:    if($(target).is(selector))</h5><h3 id="delegate-事件委托-其实就是简化版的利用冒泡"><a href="#delegate-事件委托-其实就是简化版的利用冒泡" class="headerlink" title="delegate: 事件委托 其实就是简化版的利用冒泡"></a><strong>delegate</strong>: 事件委托 其实就是简化版的利用冒泡</h3><h6 id="什么是-将事件处理函数绑定在父元素，所有子元素共用"><a href="#什么是-将事件处理函数绑定在父元素，所有子元素共用" class="headerlink" title="什么是: 将事件处理函数绑定在父元素，所有子元素共用"></a><strong>什么是</strong>: 将事件处理函数绑定在父元素，所有子元素共用</h6><h6 id="何时-只要利用冒泡，就可用delegate"><a href="#何时-只要利用冒泡，就可用delegate" class="headerlink" title="何时: 只要利用冒泡，就可用delegate"></a><strong>何时</strong>: 只要利用冒泡，就可用delegate</h6><h6 id="如何-parent-delegate-“selector”-”事件名”-fn"><a href="#如何-parent-delegate-“selector”-”事件名”-fn" class="headerlink" title="如何: $(parent).delegate(“selector”,”事件名”,fn)"></a><strong>如何</strong>: $(parent).delegate(“selector”,”事件名”,fn)</h6><h6 id="其中-“selector”只有满足selector的元素才能出发事件——本质-用选择器代替了-判断"><a href="#其中-“selector”只有满足selector的元素才能出发事件——本质-用选择器代替了-判断" class="headerlink" title="其中: “selector”只有满足selector的元素才能出发事件——本质: 用选择器代替了### 判断"></a><strong>其中</strong>: “selector”只有满足selector的元素才能出发事件——本质: 用选择器代替了### <strong>判断</strong></h6><h3 id="fn中this-gt-target目标元素"><a href="#fn中this-gt-target目标元素" class="headerlink" title="fn中this-&gt;target目标元素"></a><strong>fn中this-&gt;target目标元素</strong></h3><p><img src="https://s2.ax1x.com/2019/07/17/ZLu8ne.jpg" alt="我是图片"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;按节点间关系&quot;&gt;&lt;a href=&quot;#按节点间关系&quot; class=&quot;headerlink&quot; title=&quot;按节点间关系&quot;&gt;&lt;/a&gt;按节点间关系&lt;/h2&gt;&lt;h6 id=&quot;何时：如果已经获得一个元素，找周围的元素时&quot;&gt;&lt;a href=&quot;#何时：如果已经获得一个元素，找周</summary>
      
    
    
    
    <category term="jQuery" scheme="http://example.com/categories/jQuery/"/>
    
    
  </entry>
  
  <entry>
    <title>jQuery基础、查找（过滤、内容、属性选择器）</title>
    <link href="http://example.com/2018/06/30/jQuery%E5%9F%BA%E7%A1%80%E3%80%81%E6%9F%A5%E6%89%BE%EF%BC%88%E8%BF%87%E6%BB%A4%E3%80%81%E5%86%85%E5%AE%B9%E3%80%81%E5%B1%9E%E6%80%A7%E9%80%89%E6%8B%A9%E5%99%A8%EF%BC%89/"/>
    <id>http://example.com/2018/06/30/jQuery%E5%9F%BA%E7%A1%80%E3%80%81%E6%9F%A5%E6%89%BE%EF%BC%88%E8%BF%87%E6%BB%A4%E3%80%81%E5%86%85%E5%AE%B9%E3%80%81%E5%B1%9E%E6%80%A7%E9%80%89%E6%8B%A9%E5%99%A8%EF%BC%89/</id>
    <published>2018-06-30T05:06:43.000Z</published>
    <updated>2019-07-17T08:24:24.255Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是jQuery"><a href="#什么是jQuery" class="headerlink" title="什么是jQuery"></a>什么是jQuery</h2><h6 id="第三方开发的，快速，简洁的javascript函数库（极简化的DOM操作的函数库）"><a href="#第三方开发的，快速，简洁的javascript函数库（极简化的DOM操作的函数库）" class="headerlink" title="第三方开发的，快速，简洁的javascript函数库（极简化的DOM操作的函数库）"></a>第三方开发的，快速，简洁的javascript函数库（极简化的DOM操作的函数库）</h6><h2 id="为什么用jQuery"><a href="#为什么用jQuery" class="headerlink" title="为什么用jQuery"></a>为什么用jQuery</h2><h6 id="是DOM操作的终极简化-学jQuery还是在学DOM，只不过API更简单-write-less-do-more"><a href="#是DOM操作的终极简化-学jQuery还是在学DOM，只不过API更简单-write-less-do-more" class="headerlink" title="是DOM操作的终极简化: 学jQuery还是在学DOM，只不过API更简单 write less do more"></a>是DOM操作的终极简化: 学jQuery还是在学DOM，只不过API更简单 write less do more</h6><h6 id="核心DOM：万能，API太繁琐"><a href="#核心DOM：万能，API太繁琐" class="headerlink" title="核心DOM：万能，API太繁琐"></a>核心DOM：万能，API太繁琐</h6><h6 id="HTML-DOM：简洁，不是万能"><a href="#HTML-DOM：简洁，不是万能" class="headerlink" title="HTML DOM：简洁，不是万能"></a>HTML DOM：简洁，不是万能</h6><h6 id="jQuery简化了："><a href="#jQuery简化了：" class="headerlink" title="jQuery简化了："></a>jQuery简化了：</h6><h6 id="1-DOM四大操作：增删改查-2-事件-3-动画-4-AJAX"><a href="#1-DOM四大操作：增删改查-2-事件-3-动画-4-AJAX" class="headerlink" title="1.DOM四大操作：增删改查  2.事件  3.动画 4.AJAX"></a>1.DOM四大操作：增删改查  2.事件  3.动画 4.AJAX</h6><h6 id="2、解决了兼容性问题：凡是jQuery允许使用的，都解决了兼容性问题"><a href="#2、解决了兼容性问题：凡是jQuery允许使用的，都解决了兼容性问题" class="headerlink" title="2、解决了兼容性问题：凡是jQuery允许使用的，都解决了兼容性问题"></a>2、解决了兼容性问题：凡是jQuery允许使用的，都解决了兼容性问题</h6><h6 id="3、如何使用-第三方：不是浏览器内置的，也不是开发人员自己编写的，由其他第三方组织或个人编写的"><a href="#3、如何使用-第三方：不是浏览器内置的，也不是开发人员自己编写的，由其他第三方组织或个人编写的" class="headerlink" title="3、如何使用: 第三方：不是浏览器内置的，也不是开发人员自己编写的，由其他第三方组织或个人编写的"></a>3、如何使用: 第三方：不是浏览器内置的，也不是开发人员自己编写的，由其他第三方组织或个人编写的</h6><blockquote><p>下载: 官网jquery.com<br>版本: 1.x 兼容旧浏览器<br>jquery-1.x.3.js     未压缩 体积大 可读性好——学习<br>jquery-1.x.min.js        压缩  体积小 可读性差——生产环境<br>差别: 去掉了注释和空字符(空格，缩进，换行)<br>极简化了变量和参数名<br>使用专门的压缩软件生成的<br>2.x 不再兼容旧浏览器</p></blockquote><h6 id="CDN-内容分发网络"><a href="#CDN-内容分发网络" class="headerlink" title="CDN: 内容分发网络"></a>CDN: 内容分发网络</h6><h6 id="共享的资源在网络中多台服务器上都有副本，客户端请求资源时，CDN网络会智能选择离客户端最近，网络最优的服务器下载资源。"><a href="#共享的资源在网络中多台服务器上都有副本，客户端请求资源时，CDN网络会智能选择离客户端最近，网络最优的服务器下载资源。" class="headerlink" title="共享的资源在网络中多台服务器上都有副本，客户端请求资源时，CDN网络会智能选择离客户端最近，网络最优的服务器下载资源。"></a>共享的资源在网络中多台服务器上都有副本，客户端请求资源时，CDN网络会智能选择离客户端最近，网络最优的服务器下载资源。</h6><h6 id="为什么：就近快速获得资源"><a href="#为什么：就近快速获得资源" class="headerlink" title="为什么：就近快速获得资源"></a>为什么：就近快速获得资源</h6><h6 id="何时：只要公共的、通用的库、框架都从CDN网络中"><a href="#何时：只要公共的、通用的库、框架都从CDN网络中" class="headerlink" title="何时：只要公共的、通用的库、框架都从CDN网络中"></a>何时：只要公共的、通用的库、框架都从CDN网络中</h6><h6 id="script-src-”http-CDN地址-“"><a href="#script-src-”http-CDN地址-“" class="headerlink" title="script src=”http://CDN地址 “"></a>script src=”<a href="http://cdn地址/">http://CDN地址</a> “</h6><h6 id="百度："><a href="#百度：" class="headerlink" title="百度："></a>百度：</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>src=<span class="string">&quot;http://libs.baidu.com/jquery/1.8.3/jquery.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h6 id="使用jQuery之前，必须先引入jQuery-js文件"><a href="#使用jQuery之前，必须先引入jQuery-js文件" class="headerlink" title="使用jQuery之前，必须先引入jQuery.js文件"></a>使用jQuery之前，必须先引入jQuery.js文件</h6><h6 id="引入"><a href="#引入" class="headerlink" title="引入:"></a>引入:</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;jquery-1.11.3.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h6 id="1-向window中加入了一个jQuery构造-工厂函数-查找，创建"><a href="#1-向window中加入了一个jQuery构造-工厂函数-查找，创建" class="headerlink" title="1. 向window中加入了一个jQuery构造/工厂函数(查找，创建)"></a>1. 向window中加入了一个jQuery构造/工厂函数(查找，创建)</h6><h6 id="2-为今后生成的jQuery对象添加了公共的原型对象"><a href="#2-为今后生成的jQuery对象添加了公共的原型对象" class="headerlink" title="2. 为今后生成的jQuery对象添加了公共的原型对象:"></a>2. 为今后生成的jQuery对象添加了公共的原型对象:</h6><h6 id="jQuery-fn-其中封装了所有jQuery的简化版API"><a href="#jQuery-fn-其中封装了所有jQuery的简化版API" class="headerlink" title="jQuery.fn:其中封装了所有jQuery的简化版API"></a>jQuery.fn:其中封装了所有jQuery的简化版API</h6><h2 id="使用API-jQuery对象"><a href="#使用API-jQuery对象" class="headerlink" title="使用API: jQuery对象"></a>使用API: jQuery对象</h2><h5 id="什么是：用jQuery工厂函数包装DOM对象后形成的新对象。"><a href="#什么是：用jQuery工厂函数包装DOM对象后形成的新对象。" class="headerlink" title="什么是：用jQuery工厂函数包装DOM对象后形成的新对象。"></a>什么是：用jQuery工厂函数包装DOM对象后形成的新对象。</h5><h5 id="为什么：普通的DOM对象不包含jQuery简化版API"><a href="#为什么：普通的DOM对象不包含jQuery简化版API" class="headerlink" title="为什么：普通的DOM对象不包含jQuery简化版API"></a>为什么：普通的DOM对象不包含jQuery简化版API</h5><h5 id="何时：只要希望使用jQuery简化版API之前，都要将DOM对象包装为jQuery对象"><a href="#何时：只要希望使用jQuery简化版API之前，都要将DOM对象包装为jQuery对象" class="headerlink" title="何时：只要希望使用jQuery简化版API之前，都要将DOM对象包装为jQuery对象"></a>何时：只要希望使用jQuery简化版API之前，都要将DOM对象包装为jQuery对象</h5><h5 id="如何：1、将现有DOM对象包装为jQuery对象"><a href="#如何：1、将现有DOM对象包装为jQuery对象" class="headerlink" title="如何：1、将现有DOM对象包装为jQuery对象"></a>如何：1、将现有DOM对象包装为jQuery对象</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $xxx = jQuery(DOM对象)</span><br><span class="line">何时：如果已经获得一个DOM对象，想用简化版API时</span><br><span class="line">比如：<span class="built_in">this</span>  e.target转为jQuery对象</span><br><span class="line"><span class="keyword">var</span> $this=jQuery(<span class="built_in">this</span>);</span><br><span class="line"><span class="keyword">var</span> $target=jQuery(e.target);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn=<span class="built_in">document</span>.getElementById(<span class="string">&quot;bt1&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> $btn=jQuery(btn);</span><br><span class="line">----------------------→</span><br><span class="line">$btn.click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="built_in">this</span>.innerHTML);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="jQuery工厂函数查找"><a href="#jQuery工厂函数查找" class="headerlink" title="jQuery工厂函数查找"></a>jQuery工厂函数查找</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $xxx=jQuery(“选择器”);</span><br></pre></td></tr></table></figure><h6 id="何时：绝大多数情况，在未获得任何元素时，首选用jQuery工厂函数直接查找元素。"><a href="#何时：绝大多数情况，在未获得任何元素时，首选用jQuery工厂函数直接查找元素。" class="headerlink" title="何时：绝大多数情况，在未获得任何元素时，首选用jQuery工厂函数直接查找元素。"></a>何时：绝大多数情况，在未获得任何元素时，首选用jQuery工厂函数直接查找元素。</h6><h6 id="为什么-原生的DOM元素不具有jQuery的简化版API。必须封装进jQuery对象，才能调用简化版API"><a href="#为什么-原生的DOM元素不具有jQuery的简化版API。必须封装进jQuery对象，才能调用简化版API" class="headerlink" title="为什么: 原生的DOM元素不具有jQuery的简化版API。必须封装进jQuery对象，才能调用简化版API"></a>为什么: 原生的DOM元素不具有jQuery的简化版API。必须封装进jQuery对象，才能调用简化版API</h6><h2 id="简写："><a href="#简写：" class="headerlink" title="简写："></a>简写：</h2><h2 id="引入jQuery-js文件时"><a href="#引入jQuery-js文件时" class="headerlink" title="引入jQuery.js文件时"></a>引入jQuery.js文件时</h2><h6 id="1-向window中添加了一个jQuery工厂函数，用于创建jQuery类型的对象"><a href="#1-向window中添加了一个jQuery工厂函数，用于创建jQuery类型的对象" class="headerlink" title="1.向window中添加了一个jQuery工厂函数，用于创建jQuery类型的对象"></a>1.向window中添加了一个jQuery工厂函数，用于创建jQuery类型的对象</h6><h6 id="2-在jQuery工厂函数中添加了一个原型对象"><a href="#2-在jQuery工厂函数中添加了一个原型对象" class="headerlink" title="2.在jQuery工厂函数中添加了一个原型对象"></a>2.在jQuery工厂函数中添加了一个原型对象</h6><h6 id="在jQuery工厂函数的原型对象中封装了所有简化版API。"><a href="#在jQuery工厂函数的原型对象中封装了所有简化版API。" class="headerlink" title="在jQuery工厂函数的原型对象中封装了所有简化版API。"></a>在jQuery工厂函数的原型对象中封装了所有简化版API。</h6><h6 id="每次使用jQuery工厂函数获得jQuery结果对象都继承自jQuery原型对象，可直接使用原型对象中保存的简化版API"><a href="#每次使用jQuery工厂函数获得jQuery结果对象都继承自jQuery原型对象，可直接使用原型对象中保存的简化版API" class="headerlink" title="每次使用jQuery工厂函数获得jQuery结果对象都继承自jQuery原型对象，可直接使用原型对象中保存的简化版API"></a>每次使用jQuery工厂函数获得jQuery结果对象都继承自jQuery原型对象，可直接使用原型对象中保存的简化版API</h6><h6 id="3-向window中添加全局变量-，引用jQuery工厂函数——所有jQuery都可用-代替"><a href="#3-向window中添加全局变量-，引用jQuery工厂函数——所有jQuery都可用-代替" class="headerlink" title="3.向window中添加全局变量$，引用jQuery工厂函数——所有jQuery都可用$代替"></a>3.向window中添加全局变量$，引用jQuery工厂函数——所有jQuery都可用$代替</h6><h6 id="其实：jQuery对象是一个类数组对象，找到的每个DOM元素都是类数组对象中的一个元素"><a href="#其实：jQuery对象是一个类数组对象，找到的每个DOM元素都是类数组对象中的一个元素" class="headerlink" title="其实：jQuery对象是一个类数组对象，找到的每个DOM元素都是类数组对象中的一个元素"></a>其实：jQuery对象是一个类数组对象，找到的每个DOM元素都是类数组对象中的一个元素</h6><h6 id="且jQuery简化版API都子代forEach（遍历）效果；只需调用一次，即可自动应用到每个DOM对象上"><a href="#且jQuery简化版API都子代forEach（遍历）效果；只需调用一次，即可自动应用到每个DOM对象上" class="headerlink" title="且jQuery简化版API都子代forEach（遍历）效果；只需调用一次，即可自动应用到每个DOM对象上"></a>且jQuery简化版API都子代forEach（遍历）效果；只需调用一次，即可自动应用到每个DOM对象上</h6><h6 id="终极简化-所有jQuery-…-都可简化为-…"><a href="#终极简化-所有jQuery-…-都可简化为-…" class="headerlink" title="终极简化: 所有jQuery(…), 都可简化为$(…)"></a>终极简化: 所有jQuery(…), 都可简化为$(…)</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.jQuery=<span class="built_in">window</span>.$=jQuery;</span><br></pre></td></tr></table></figure><h6 id="Chrome：控制台中也可以使用-“选择器”-查找元素（只提供-函数，并不包含jQuery）"><a href="#Chrome：控制台中也可以使用-“选择器”-查找元素（只提供-函数，并不包含jQuery）" class="headerlink" title="Chrome：控制台中也可以使用$(“选择器”)查找元素（只提供$函数，并不包含jQuery）"></a>Chrome：控制台中也可以使用$(“选择器”)查找元素（只提供$函数，并不包含jQuery）</h6><h6 id="Chrome：控制台也提供了-函数，类似于jQuery的-，但无需引入jQuery也可使用"><a href="#Chrome：控制台也提供了-函数，类似于jQuery的-，但无需引入jQuery也可使用" class="headerlink" title="Chrome：控制台也提供了$函数，类似于jQuery的$，但无需引入jQuery也可使用"></a>Chrome：控制台也提供了$函数，类似于jQuery的$，但无需引入jQuery也可使用</h6><h6 id="如何：只找一个：-“选择器”-相当于querySelector"><a href="#如何：只找一个：-“选择器”-相当于querySelector" class="headerlink" title="如何：只找一个：$(“选择器”)相当于querySelector"></a>如何：只找一个：$(“选择器”)相当于querySelector</h6><h6 id="找多个：-“选择器”-相当于querySelectorAll"><a href="#找多个：-“选择器”-相当于querySelectorAll" class="headerlink" title="找多个：$$(“选择器”)相当于querySelectorAll"></a>找多个：$$(“选择器”)相当于querySelectorAll</h6><h6 id="学习jQuery，还是在学DOM：查找-gt-绑定事件-gt-修改-gt-添加-删除"><a href="#学习jQuery，还是在学DOM：查找-gt-绑定事件-gt-修改-gt-添加-删除" class="headerlink" title="学习jQuery，还是在学DOM：查找-&gt;绑定事件-&gt;修改-&gt;添加/删除"></a>学习jQuery，还是在学DOM：查找-&gt;绑定事件-&gt;修改-&gt;添加/删除</h6><h2 id="查找-选择器：css，jQuery新增"><a href="#查找-选择器：css，jQuery新增" class="headerlink" title="查找: 选择器：css，jQuery新增"></a>查找: 选择器：css，jQuery新增</h2><h4 id="1、按选择器查找"><a href="#1、按选择器查找" class="headerlink" title="1、按选择器查找:"></a>1、按选择器查找:</h4><h3 id="基本选择器-5个-同CSS"><a href="#基本选择器-5个-同CSS" class="headerlink" title="基本选择器: 5个: 同CSS"></a>基本选择器: 5个: 同CSS</h3><h6 id="id"><a href="#id" class="headerlink" title="id"></a>id</h6><h6 id="element"><a href="#element" class="headerlink" title="element"></a>element</h6><h6 id="class"><a href="#class" class="headerlink" title=".class"></a>.class</h6><h6 id=""><a href="#" class="headerlink" title="*"></a>*</h6><h6 id="selector1-selector2-…"><a href="#selector1-selector2-…" class="headerlink" title="selector1,selector2,…"></a>selector1,selector2,…</h6><h4 id="修改css样式-DOM-elem-style-css属性-值"><a href="#修改css样式-DOM-elem-style-css属性-值" class="headerlink" title="修改css样式: DOM: elem.style.css属性=值"></a>修改css样式: DOM: elem.style.css属性=值</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JQ: $(...).css(<span class="string">&quot;属性名&quot;</span>,值);</span><br></pre></td></tr></table></figure><h4 id="绑定事件"><a href="#绑定事件" class="headerlink" title="绑定事件:"></a>绑定事件:</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DOM: elem.onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;...&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JQ:$(...).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;...&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">强调: 对 $(...)调用一次API，相当于自动对 $(...)找到的每个DOM元素分别调用API——自带forEach</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="built_in">this</span>.innerHTML);</span><br><span class="line">&#125;);   <span class="comment">//会给所有button元素绑定单击事件</span></span><br></pre></td></tr></table></figure><h3 id="层级选择器-2组-4个-同CSS"><a href="#层级选择器-2组-4个-同CSS" class="headerlink" title="层级选择器 : 2组 4个: 同CSS"></a>层级选择器 : 2组 4个: 同CSS</h3><h4 id="父子-parent-child-所有后代"><a href="#父子-parent-child-所有后代" class="headerlink" title="父子: parent  child  所有后代"></a>父子: parent  child  所有后代</h4><h4 id="parent-gt-child-直接子代"><a href="#parent-gt-child-直接子代" class="headerlink" title="parent&gt;child 直接子代"></a>parent&gt;child 直接子代</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;div:eq(3)&quot;</span>).css(<span class="string">&quot;border&quot;</span>,<span class="string">&quot;2px solid red&quot;</span>);</span><br><span class="line">$(<span class="string">&quot;div :eq(3)&quot;</span>).css(<span class="string">&quot;border&quot;</span>,<span class="string">&quot;2px solid red&quot;</span>);</span><br></pre></td></tr></table></figure><h6 id="强调：如果div与伪类选择器直接用，则选择的是所有div元素，如果加空格，则为div的后代元素"><a href="#强调：如果div与伪类选择器直接用，则选择的是所有div元素，如果加空格，则为div的后代元素" class="headerlink" title="强调：如果div与伪类选择器直接用，则选择的是所有div元素，如果加空格，则为div的后代元素"></a>强调：如果div与伪类选择器直接用，则选择的是所有div元素，如果加空格，则为div的后代元素</h6><h3 id="兄弟"><a href="#兄弟" class="headerlink" title="兄弟:"></a>兄弟:</h3><h6 id="child1-next-紧邻child1的下一个，且满足next的要求"><a href="#child1-next-紧邻child1的下一个，且满足next的要求" class="headerlink" title="child1+next  紧邻child1的下一个，且满足next的要求"></a>child1+next  紧邻child1的下一个，且满足next的要求</h6><h6 id="child1-nextsiblings-不必紧邻，只要满足nextsiblings的要求"><a href="#child1-nextsiblings-不必紧邻，只要满足nextsiblings的要求" class="headerlink" title="child1~nextsiblings 不必紧邻，只要满足nextsiblings的要求"></a>child1~nextsiblings 不必紧邻，只要满足nextsiblings的要求</h6><h3 id="过滤选择器"><a href="#过滤选择器" class="headerlink" title="过滤选择器"></a>过滤选择器</h3><h5 id="基本过滤：位置过滤——jQuery独有，css没有"><a href="#基本过滤：位置过滤——jQuery独有，css没有" class="headerlink" title="基本过滤：位置过滤——jQuery独有，css没有"></a>基本过滤：位置过滤——jQuery独有，css没有</h5><h5 id="什么是：根据元素在查找结果集合中的下标位置选择元素；从0开始"><a href="#什么是：根据元素在查找结果集合中的下标位置选择元素；从0开始" class="headerlink" title="什么是：根据元素在查找结果集合中的下标位置选择元素；从0开始"></a>什么是：根据元素在查找结果集合中的下标位置选择元素；从0开始</h5><h5 id="何时：只要希望根据元素在结果集合中的位置查找元素"><a href="#何时：只要希望根据元素在结果集合中的位置查找元素" class="headerlink" title="何时：只要希望根据元素在结果集合中的位置查找元素"></a>何时：只要希望根据元素在结果集合中的位置查找元素</h5><h5 id="强调："><a href="#强调：" class="headerlink" title="强调："></a>强调：</h5><h6 id="1-将所有元素先查找到集合中，再按下表过滤"><a href="#1-将所有元素先查找到集合中，再按下表过滤" class="headerlink" title="1.将所有元素先查找到集合中，再按下表过滤"></a>1.将所有元素先查找到集合中，再按下表过滤</h6><h6 id="2-下标从0开始"><a href="#2-下标从0开始" class="headerlink" title="2.下标从0开始"></a>2.下标从0开始</h6><h6 id="3-和元素在父元素中的相对位置无关"><a href="#3-和元素在父元素中的相对位置无关" class="headerlink" title="3.和元素在父元素中的相对位置无关"></a>3.和元素在父元素中的相对位置无关</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">:first/last      获取结果集合中第一个/最后一个元素，一个集合中只能找到一个</span><br><span class="line">:odd/even    获取结果集合中偶数/奇数位置的元素</span><br><span class="line">:eq/gt/lt(i)    获取结果集合中小于等于/大于等于/等于 i 位置的元素</span><br></pre></td></tr></table></figure><h6 id="强调：用此选择器时需要注意在冒号前加父元素-如果不加则会按照html-gt-head-gt-body顺序查找"><a href="#强调：用此选择器时需要注意在冒号前加父元素-如果不加则会按照html-gt-head-gt-body顺序查找" class="headerlink" title="强调：用此选择器时需要注意在冒号前加父元素,如果不加则会按照html-&gt;head-&gt;body顺序查找"></a>强调：用此选择器时需要注意在冒号前加父元素,如果不加则会按照html-&gt;head-&gt;body顺序查找</h6><h6 id="如果不加父元素会从html到body中按照深度优先的顺序查找元素"><a href="#如果不加父元素会从html到body中按照深度优先的顺序查找元素" class="headerlink" title="如果不加父元素会从html到body中按照深度优先的顺序查找元素"></a>如果不加父元素会从html到body中按照深度优先的顺序查找元素</h6><p><img src="http://imagehosting.biz/images/2018/04/10/2017612633162420421.jpg" alt="我是图片"></p><h6 id="特殊"><a href="#特殊" class="headerlink" title="特殊"></a>特殊</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">:animated     选择正在播放动画的元素</span><br><span class="line">:not(selector)      否定伪类,同CSS  </span><br></pre></td></tr></table></figure><h6 id="选择class不为one的div元素"><a href="#选择class不为one的div元素" class="headerlink" title="选择class不为one的div元素"></a>选择class不为one的div元素</h6><h6 id="练习-同时修改多个css属性"><a href="#练习-同时修改多个css属性" class="headerlink" title="练习: 同时修改多个css属性;"></a>练习: 同时修改多个css属性;</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    $(...).css(&#123;</span><br><span class="line">     属性名:”值”,</span><br><span class="line">     属性名:”值”,</span><br><span class="line">       ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h6 id="强调-1-jQuery中的css属性名都要去横线变驼峰"><a href="#强调-1-jQuery中的css属性名都要去横线变驼峰" class="headerlink" title="强调:1. jQuery中的css属性名都要去横线变驼峰"></a>强调:1. jQuery中的css属性名都要去横线变驼峰</h6><h6 id="强烈建议：只要在js中css样式都要去横线变驼峰"><a href="#强烈建议：只要在js中css样式都要去横线变驼峰" class="headerlink" title="强烈建议：只要在js中css样式都要去横线变驼峰"></a>强烈建议：只要在js中css样式都要去横线变驼峰</h6><h6 id="2-如果属性值为数字，可不用加引号，且可省略单位，仅限单个数字，像padding需要多个数字则需要引号"><a href="#2-如果属性值为数字，可不用加引号，且可省略单位，仅限单个数字，像padding需要多个数字则需要引号" class="headerlink" title="2.如果属性值为数字，可不用加引号，且可省略单位，仅限单个数字，像padding需要多个数字则需要引号"></a>2.如果属性值为数字，可不用加引号，且可省略单位，仅限单个数字，像padding需要多个数字则需要引号</h6><p><img src="http://imagehosting.biz/images/2018/04/10/1905304117454696340.jpg" alt="我是图片"></p><h3 id="子元素过滤：选择在父元素下指定位置的子元素"><a href="#子元素过滤：选择在父元素下指定位置的子元素" class="headerlink" title="子元素过滤：选择在父元素下指定位置的子元素"></a>子元素过滤：选择在父元素下指定位置的子元素</h3><h6 id="什么是：根据元素在其父元素中的相对位置选择"><a href="#什么是：根据元素在其父元素中的相对位置选择" class="headerlink" title="什么是：根据元素在其父元素中的相对位置选择"></a>什么是：根据元素在其父元素中的相对位置选择</h6><h6 id="何时：只要根据元素再起父元素中位置选择"><a href="#何时：只要根据元素再起父元素中位置选择" class="headerlink" title="何时：只要根据元素再起父元素中位置选择"></a>何时：只要根据元素再起父元素中位置选择</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">:first-child第一个子元素</span><br><span class="line">:last-child最后一个子元素</span><br><span class="line">:nth-child(n/even/odd/<span class="number">2n</span>/<span class="number">2n</span>+<span class="number">1</span>)获得结果在其父元素中的位置，此时下标从<span class="number">1</span>开始</span><br><span class="line">:only-child选择仅有的一个子元素（选择独生子女）</span><br></pre></td></tr></table></figure><p><img src="http://imagehosting.biz/images/2018/04/10/1855483046576991784.jpg" alt="我是图片"><br><img src="http://imagehosting.biz/images/2018/04/10/6631637312725988121.jpg" alt="我是图片"></p><h6 id="问题-旧浏览器不支持-last-child-nth-child"><a href="#问题-旧浏览器不支持-last-child-nth-child" class="headerlink" title="问题: 旧浏览器不支持:last-child,:nth-child"></a>问题: 旧浏览器不支持:last-child,:nth-child</h6><h6 id="解决-凡是jQuery让使用的，都已经解决了兼容性问题"><a href="#解决-凡是jQuery让使用的，都已经解决了兼容性问题" class="headerlink" title="解决: 凡是jQuery让使用的，都已经解决了兼容性问题"></a>解决: 凡是jQuery让使用的，都已经解决了兼容性问题</h6><h3 id="基本过滤-vs-子元素过滤"><a href="#基本过滤-vs-子元素过滤" class="headerlink" title="基本过滤 vs 子元素过滤"></a>基本过滤 vs 子元素过滤</h3><h6 id="子元素过滤-相对于自己的父元素内定位，下标从1开始"><a href="#子元素过滤-相对于自己的父元素内定位，下标从1开始" class="headerlink" title="子元素过滤 相对于自己的父元素内定位，下标从1开始"></a>子元素过滤 相对于自己的父元素内定位，下标从1开始</h6><h6 id="基本过滤-先将所有元素放入结果集合，再在结果集合中定义，下标从0开始"><a href="#基本过滤-先将所有元素放入结果集合，再在结果集合中定义，下标从0开始" class="headerlink" title="基本过滤  先将所有元素放入结果集合，再在结果集合中定义，下标从0开始"></a>基本过滤  先将所有元素放入结果集合，再在结果集合中定义，下标从0开始</h6><h5 id="内容过滤-根据元素的内容，选择满足条件的父元素"><a href="#内容过滤-根据元素的内容，选择满足条件的父元素" class="headerlink" title="内容过滤: 根据元素的内容，选择满足条件的父元素"></a>内容过滤: 根据元素的内容，选择满足条件的父元素</h5><h3 id="contains-text-选择内容中包含指定文本的父元素"><a href="#contains-text-选择内容中包含指定文本的父元素" class="headerlink" title="contains(text)选择内容中包含指定文本的父元素"></a><strong>contains(text)选择内容中包含指定文本的父元素</strong></h3><h6 id="比如-span-contains-“购物车”"><a href="#比如-span-contains-“购物车”" class="headerlink" title="比如: span:contains(“购物车”)"></a>比如: span:contains(“购物车”)</h6><h4 id="强调：只能是文字中包含text的，如果是标签名中包含则不选择"><a href="#强调：只能是文字中包含text的，如果是标签名中包含则不选择" class="headerlink" title="强调：只能是文字中包含text的，如果是标签名中包含则不选择"></a>强调：只能是文字中包含text的，如果是标签名中包含则不选择</h4><h6 id="empty-选择不包含任何内容的空的父元素"><a href="#empty-选择不包含任何内容的空的父元素" class="headerlink" title=":empty  选择不包含任何内容的空的父元素"></a>:empty  选择不包含任何内容的空的父元素</h6><h6 id="parent-选择内容不为空的元素。-not-empty-选择只要包含内容（文字-子元素（标签））的任意父元素"><a href="#parent-选择内容不为空的元素。-not-empty-选择只要包含内容（文字-子元素（标签））的任意父元素" class="headerlink" title=":parent  选择内容不为空的元素。:not(:empty)选择只要包含内容（文字,子元素（标签））的任意父元素"></a>:parent  选择内容不为空的元素。:not(:empty)选择只要包含内容（文字,子元素（标签））的任意父元素</h6><h6 id="has-selector-选择内容中包含符合selector要求的子元素的父元素"><a href="#has-selector-选择内容中包含符合selector要求的子元素的父元素" class="headerlink" title=":has(selector) 选择内容中包含符合selector要求的子元素的父元素"></a>:has(selector) 选择内容中包含符合selector要求的子元素的父元素</h6><h6 id="选择包含class为active的子元素的父元素li-li-has-a-active"><a href="#选择包含class为active的子元素的父元素li-li-has-a-active" class="headerlink" title="选择包含class为active的子元素的父元素li        li:has(a.active)"></a>选择包含class为active的子元素的父元素li        li:has(a.active)</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">aclass=active</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="可见性过滤-visible-选择所有可见元素"><a href="#可见性过滤-visible-选择所有可见元素" class="headerlink" title="可见性过滤: :visible    选择所有可见元素"></a>可见性过滤: :visible    选择所有可见元素</h6><h6 id="hidden选择所有不可见的元素"><a href="#hidden选择所有不可见的元素" class="headerlink" title=":hidden选择所有不可见的元素"></a>:hidden选择所有不可见的元素</h6><h6 id="只能选择display-none-input-type-hidden的"><a href="#只能选择display-none-input-type-hidden的" class="headerlink" title="只能选择display:none;  input type=hidden的"></a>只能选择display:none;  input type=hidden的</h6><h6 id="网页中所有隐藏样式：display-none-visibility-hidden-opacity-0-type-”hidden”"><a href="#网页中所有隐藏样式：display-none-visibility-hidden-opacity-0-type-”hidden”" class="headerlink" title="网页中所有隐藏样式：display:none;      visibility:hidden;  opacity:0; type=”hidden”"></a>网页中所有隐藏样式：display:none;      visibility:hidden;  opacity:0; type=”hidden”</h6><h3 id="属性选择器-同CSS"><a href="#属性选择器-同CSS" class="headerlink" title="属性选择器: 同CSS"></a><strong>属性选择器: 同CSS</strong></h3><h6 id="什么是：按照任意属性的任意值选择元素"><a href="#什么是：按照任意属性的任意值选择元素" class="headerlink" title="什么是：按照任意属性的任意值选择元素"></a>什么是：按照任意属性的任意值选择元素</h6><h6 id="何时：只要按-除id，元素，class之外的其他属性作为条件查找时，甚至模糊查找时"><a href="#何时：只要按-除id，元素，class之外的其他属性作为条件查找时，甚至模糊查找时" class="headerlink" title="何时：只要按 除id，元素，class之外的其他属性作为条件查找时，甚至模糊查找时"></a>何时：只要按 除id，元素，class之外的其他属性作为条件查找时，甚至模糊查找时</h6><h6 id="属性名-选择包含指定属性的元素"><a href="#属性名-选择包含指定属性的元素" class="headerlink" title="[属性名]选择包含指定属性的元素"></a>[属性名]选择包含指定属性的元素</h6><h6 id="属性名-值-选择包含指定属性且属性值为指定值的元素"><a href="#属性名-值-选择包含指定属性且属性值为指定值的元素" class="headerlink" title="[属性名=值]选择包含指定属性且属性值为指定值的元素"></a>[属性名=值]选择包含指定属性且属性值为指定值的元素</h6><h6 id="属性名-值-以值开头"><a href="#属性名-值-以值开头" class="headerlink" title="[属性名^=值]以值开头"></a>[属性名^=值]以值开头</h6><h6 id="属性名-值-以值结尾"><a href="#属性名-值-以值结尾" class="headerlink" title="[属性名$=值]以值结尾"></a>[属性名$=值]以值结尾</h6><h6 id="属性名-值-选择属性值包含指定值的元素"><a href="#属性名-值-选择属性值包含指定值的元素" class="headerlink" title="[属性名*=值]选择属性值包含指定值的元素"></a>[属性名*=值]选择属性值包含指定值的元素</h6><h6 id="属性名-值-not-属性名-值-选择属性值不等于指定值的元素"><a href="#属性名-值-not-属性名-值-选择属性值不等于指定值的元素" class="headerlink" title="[属性名!=值]:not([属性名=值]) 选择属性值不等于指定值的元素"></a>[属性名!=值]:not([属性名=值]) 选择属性值不等于指定值的元素</h6><h6 id="强调-即选择包含title属性，但值不符合"><a href="#强调-即选择包含title属性，但值不符合" class="headerlink" title="强调: 即选择包含title属性，但值不符合"></a>强调: 即选择包含title属性，但值不符合</h6><h6 id="也选择不包含title属性的"><a href="#也选择不包含title属性的" class="headerlink" title="也选择不包含title属性的"></a>也选择不包含title属性的</h6><h6 id="特殊：-属性选择器1-属性选择器2-…-而且"><a href="#特殊：-属性选择器1-属性选择器2-…-而且" class="headerlink" title="特殊：[属性选择器1][属性选择器2]…  而且"></a>特殊：[属性选择器1][属性选择器2]…  而且</h6><h6 id="练习-jQuery事件处理函数的this可获得当前DOM对象"><a href="#练习-jQuery事件处理函数的this可获得当前DOM对象" class="headerlink" title="练习: jQuery事件处理函数的this可获得当前DOM对象"></a>练习: jQuery事件处理函数的this可获得当前DOM对象</h6><h6 id="但无法使用jQuery简化版API"><a href="#但无法使用jQuery简化版API" class="headerlink" title="但无法使用jQuery简化版API"></a>但无法使用jQuery简化版API</h6><h6 id="需要-this"><a href="#需要-this" class="headerlink" title="需要$(this)"></a>需要$(this)</h6><h6 id="点击菜单-菜单切换"><a href="#点击菜单-菜单切换" class="headerlink" title="点击菜单/菜单切换"></a>点击菜单/菜单切换</h6><p><img src="http://imagehosting.biz/images/2018/04/10/1494913601410482119.jpg" alt="我是图片"></p><p><img src="http://imagehosting.biz/images/2018/04/10/795166809307966232.jpg" alt="我是图片"></p><h3 id="jQuery-API通用规律"><a href="#jQuery-API通用规律" class="headerlink" title="jQuery API通用规律"></a><strong>jQuery API通用规律</strong></h3><h4 id="1、所有API自带遍历-子代forEach"><a href="#1、所有API自带遍历-子代forEach" class="headerlink" title="1、所有API自带遍历: 子代forEach"></a>1、所有API自带遍历: 子代forEach</h4><h6 id="对jQuery对象调用的修改，会自动应用到集合中每个DOM元素上"><a href="#对jQuery对象调用的修改，会自动应用到集合中每个DOM元素上" class="headerlink" title="对jQuery对象调用的修改，会自动应用到集合中每个DOM元素上"></a>对jQuery对象调用的修改，会自动应用到集合中每个DOM元素上</h6><h4 id="2、所有API都返回正在查询的结果集合，可使用链式操作对同一个结果集合执行多个操作。"><a href="#2、所有API都返回正在查询的结果集合，可使用链式操作对同一个结果集合执行多个操作。" class="headerlink" title="2、所有API都返回正在查询的结果集合，可使用链式操作对同一个结果集合执行多个操作。"></a>2、所有API都返回正在查询的结果集合，可使用链式操作对同一个结果集合执行多个操作。</h4><h4 id="3、一个API两用-如果提供了新值，就修改。没提供新值就获取"><a href="#3、一个API两用-如果提供了新值，就修改。没提供新值就获取" class="headerlink" title="3、一个API两用: 如果提供了新值，就修改。没提供新值就获取"></a>3、一个API两用: 如果提供了新值，就修改。没提供新值就获取</h4><h6 id="修改-…-css-属性名-值"><a href="#修改-…-css-属性名-值" class="headerlink" title="修改: $(…).css(属性名,值)"></a>修改: $(…).css(属性名,值)</h6><h6 id="获取-var-value-…-css-属性名"><a href="#获取-var-value-…-css-属性名" class="headerlink" title="获取: var value=$(…).css(属性名)"></a>获取: var value=$(…).css(属性名)</h6><h3 id="表单元素选择器"><a href="#表单元素选择器" class="headerlink" title="表单元素选择器"></a><strong>表单元素选择器</strong></h3><h4 id="什么是：利用表单元素的标签名和type属性值选择表单中的元素"><a href="#什么是：利用表单元素的标签名和type属性值选择表单中的元素" class="headerlink" title="什么是：利用表单元素的标签名和type属性值选择表单中的元素"></a>什么是：利用表单元素的标签名和type属性值选择表单中的元素</h4><h4 id="何时：只要查找表单中的表单元素时"><a href="#何时：只要查找表单中的表单元素时" class="headerlink" title="何时：只要查找表单中的表单元素时"></a>何时：只要查找表单中的表单元素时</h4><h5 id="input选择所有表单元素（input-select-textarea-button）"><a href="#input选择所有表单元素（input-select-textarea-button）" class="headerlink" title=":input选择所有表单元素（input select textarea button）"></a>:input选择所有表单元素（input select textarea button）</h5><h5 id="type-按type属性查找"><a href="#type-按type属性查找" class="headerlink" title=":[type]按type属性查找:"></a>:[type]按type属性查找:</h5><h6 id="比如-text-password-checkbox-radio"><a href="#比如-text-password-checkbox-radio" class="headerlink" title="比如: :text  :password   :checkbox  :radio"></a>比如: :text  :password   :checkbox  :radio</h6><h6 id="submit-reset-button-hidden-file-image"><a href="#submit-reset-button-hidden-file-image" class="headerlink" title=":submit :reset :button   :hidden  :file :image"></a>:submit :reset :button   :hidden  :file :image</h6><h3 id="状态过滤选择器"><a href="#状态过滤选择器" class="headerlink" title="状态过滤选择器"></a><strong>状态过滤选择器</strong></h3><h4 id="什么是：选择处于三大状态之一的元素；"><a href="#什么是：选择处于三大状态之一的元素；" class="headerlink" title="什么是：选择处于三大状态之一的元素；"></a>什么是：选择处于三大状态之一的元素；</h4><h4 id="何时：只要根据元素状态选择元素时"><a href="#何时：只要根据元素状态选择元素时" class="headerlink" title="何时：只要根据元素状态选择元素时"></a>何时：只要根据元素状态选择元素时</h4><h6 id="enabled-disabled-checked-selected"><a href="#enabled-disabled-checked-selected" class="headerlink" title=":enabled :disabled  :checked  :selected"></a>:enabled :disabled  :checked  :selected</h6><p><img src="http://imagehosting.biz/images/2018/04/10/2605050909477263008.jpg" alt="我是图片"></p><p><img src="http://imagehosting.biz/images/2018/04/10/6597985659844640270.jpg" alt="我是图片"></p><h3 id="问题1-css只能修改css属性"><a href="#问题1-css只能修改css属性" class="headerlink" title="问题1: .css只能修改css属性"></a><strong>问题1: .css只能修改css属性</strong></h3><h6 id="解决-attr-“属性名”-新值-可修改标准属性"><a href="#解决-attr-“属性名”-新值-可修改标准属性" class="headerlink" title="解决:.attr(“属性名”,新值) 可修改标准属性"></a>解决:.attr(“属性名”,新值) 可修改标准属性</h6><h6 id="attr-“属性名”-获取属性值"><a href="#attr-“属性名”-获取属性值" class="headerlink" title=".attr(“属性名”) 获取属性值"></a>.attr(“属性名”) 获取属性值</h6><h3 id="总结-jQuery-API第二大特定"><a href="#总结-jQuery-API第二大特定" class="headerlink" title="总结: jQuery API第二大特定:"></a><strong>总结: jQuery API第二大特定:</strong></h3><h5 id="一个函数两用-没提供新值，就读取属性现有值；提供了新值，就修改属性为新值"><a href="#一个函数两用-没提供新值，就读取属性现有值；提供了新值，就修改属性为新值" class="headerlink" title="一个函数两用: 没提供新值，就读取属性现有值；提供了新值，就修改属性为新值"></a>一个函数两用: 没提供新值，就读取属性现有值；提供了新值，就修改属性为新值</h5><h3 id="问题2-attr无法访问三大状态属性"><a href="#问题2-attr无法访问三大状态属性" class="headerlink" title="问题2: .attr无法访问三大状态属性"></a><strong>问题2: .attr无法访问三大状态属性</strong></h3><h6 id="解决-prop-专门操作三大状态属性"><a href="#解决-prop-专门操作三大状态属性" class="headerlink" title="解决: .prop() 专门操作三大状态属性"></a>解决: .prop() 专门操作三大状态属性</h6>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;什么是jQuery&quot;&gt;&lt;a href=&quot;#什么是jQuery&quot; class=&quot;headerlink&quot; title=&quot;什么是jQuery&quot;&gt;&lt;/a&gt;什么是jQuery&lt;/h2&gt;&lt;h6 id=&quot;第三方开发的，快速，简洁的javascript函数库（极简化的DOM操作的</summary>
      
    
    
    
    <category term="jQuery" scheme="http://example.com/categories/jQuery/"/>
    
    
  </entry>
  
  <entry>
    <title>5 种JavaScript编码规范</title>
    <link href="http://example.com/2018/06/28/5%20%E7%A7%8DJavaScript%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/"/>
    <id>http://example.com/2018/06/28/5%20%E7%A7%8DJavaScript%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/</id>
    <published>2018-06-28T05:06:43.000Z</published>
    <updated>2019-07-17T08:18:28.788Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是编码规范"><a href="#什么是编码规范" class="headerlink" title="什么是编码规范"></a>什么是编码规范</h2><h6 id="编码规范就是指导如何编写和组织代码的一系列标准。通过阅读这些编码规范，你可以知道在各个公司里代码是如何编写的。"><a href="#编码规范就是指导如何编写和组织代码的一系列标准。通过阅读这些编码规范，你可以知道在各个公司里代码是如何编写的。" class="headerlink" title="编码规范就是指导如何编写和组织代码的一系列标准。通过阅读这些编码规范，你可以知道在各个公司里代码是如何编写的。"></a>编码规范就是指导如何编写和组织代码的一系列标准。通过阅读这些编码规范，你可以知道在各个公司里代码是如何编写的。</h6><h2 id="我们为什么需要编码规范"><a href="#我们为什么需要编码规范" class="headerlink" title="我们为什么需要编码规范"></a>我们为什么需要编码规范</h2><h6 id="一个主要的原因是：每个人写代码的方式都是不同的。我可能喜欢这么写，而你喜欢用另一种方法写。如果我们只处理自己的代码，这样并没有什么问题。但如果有成千上万的程序员同时在一个代码库上面工作呢？如果没有规范，事情很快会变得一团糟。代码规范可以让新人迅速的熟悉相关的代码，并且也能写出让其他程序员简单易懂的代码。"><a href="#一个主要的原因是：每个人写代码的方式都是不同的。我可能喜欢这么写，而你喜欢用另一种方法写。如果我们只处理自己的代码，这样并没有什么问题。但如果有成千上万的程序员同时在一个代码库上面工作呢？如果没有规范，事情很快会变得一团糟。代码规范可以让新人迅速的熟悉相关的代码，并且也能写出让其他程序员简单易懂的代码。" class="headerlink" title="一个主要的原因是：每个人写代码的方式都是不同的。我可能喜欢这么写，而你喜欢用另一种方法写。如果我们只处理自己的代码，这样并没有什么问题。但如果有成千上万的程序员同时在一个代码库上面工作呢？如果没有规范，事情很快会变得一团糟。代码规范可以让新人迅速的熟悉相关的代码，并且也能写出让其他程序员简单易懂的代码。"></a>一个主要的原因是：每个人写代码的方式都是不同的。我可能喜欢这么写，而你喜欢用另一种方法写。如果我们只处理自己的代码，这样并没有什么问题。但如果有成千上万的程序员同时在一个代码库上面工作呢？如果没有规范，事情很快会变得一团糟。代码规范可以让新人迅速的熟悉相关的代码，并且也能写出让其他程序员简单易懂的代码。</h6><h2 id="Airbnb-JavaScript-Style-Guide"><a href="#Airbnb-JavaScript-Style-Guide" class="headerlink" title="Airbnb JavaScript Style Guide"></a>Airbnb JavaScript Style Guide</h2><h6 id="号称是“最合理的编写-JavaScript-代码的方式”。"><a href="#号称是“最合理的编写-JavaScript-代码的方式”。" class="headerlink" title="号称是“最合理的编写 JavaScript 代码的方式”。"></a>号称是“最合理的编写 JavaScript 代码的方式”。</h6><h6 id="Airbnb-的这个代码规范可能是互联网最流行的-JavaScript-代码规范了，它在-Github-上足有-6-万-star，几乎覆盖了-JavaScript-的每一项特性。"><a href="#Airbnb-的这个代码规范可能是互联网最流行的-JavaScript-代码规范了，它在-Github-上足有-6-万-star，几乎覆盖了-JavaScript-的每一项特性。" class="headerlink" title="Airbnb 的这个代码规范可能是互联网最流行的 JavaScript 代码规范了，它在 Github 上足有 6 万 star，几乎覆盖了 JavaScript 的每一项特性。"></a>Airbnb 的这个代码规范可能是互联网最流行的 JavaScript 代码规范了，它在 Github 上足有 6 万 star，几乎覆盖了 JavaScript 的每一项特性。</h6><h2 id="Google-JavaScript-Style-Guide"><a href="#Google-JavaScript-Style-Guide" class="headerlink" title="Google JavaScript Style Guide"></a>Google JavaScript Style Guide</h2><h6 id="只有遵守了这里的规则，一个-JavaScript-源文件才能被称为“Google-Style”。很霸气，我行我素，同时也被不少公司沿用。"><a href="#只有遵守了这里的规则，一个-JavaScript-源文件才能被称为“Google-Style”。很霸气，我行我素，同时也被不少公司沿用。" class="headerlink" title="只有遵守了这里的规则，一个 JavaScript 源文件才能被称为“Google Style”。很霸气，我行我素，同时也被不少公司沿用。"></a>只有遵守了这里的规则，一个 JavaScript 源文件才能被称为“Google Style”。很霸气，我行我素，同时也被不少公司沿用。</h6><h2 id="Idiomatic-JavaScript-Style-Guide"><a href="#Idiomatic-JavaScript-Style-Guide" class="headerlink" title="Idiomatic JavaScript Style Guide"></a>Idiomatic JavaScript Style Guide</h2><h6 id="符合语言习惯的-JavaScript-代码规范。"><a href="#符合语言习惯的-JavaScript-代码规范。" class="headerlink" title="符合语言习惯的 JavaScript 代码规范。"></a>符合语言习惯的 JavaScript 代码规范。</h6><h6 id="不管有多少人参与，不管是否在同一个代码库，所有的-JavaScript-代码风格都必须像同一个人写的。"><a href="#不管有多少人参与，不管是否在同一个代码库，所有的-JavaScript-代码风格都必须像同一个人写的。" class="headerlink" title="不管有多少人参与，不管是否在同一个代码库，所有的 JavaScript 代码风格都必须像同一个人写的。"></a>不管有多少人参与，不管是否在同一个代码库，所有的 JavaScript 代码风格都必须像同一个人写的。</h6><h5 id="另一个很强势的同时也很流行的-JavaScript-编码规范。它的野心也很大，不止想规范-JavaScript，其它语言也都想管起来。"><a href="#另一个很强势的同时也很流行的-JavaScript-编码规范。它的野心也很大，不止想规范-JavaScript，其它语言也都想管起来。" class="headerlink" title="另一个很强势的同时也很流行的 JavaScript 编码规范。它的野心也很大，不止想规范 JavaScript，其它语言也都想管起来。"></a>另一个很强势的同时也很流行的 JavaScript 编码规范。它的野心也很大，不止想规范 JavaScript，其它语言也都想管起来。</h5><h6 id="地球上所有的代码都像同一个人写的？想想让人觉得不寒而栗啊……"><a href="#地球上所有的代码都像同一个人写的？想想让人觉得不寒而栗啊……" class="headerlink" title="地球上所有的代码都像同一个人写的？想想让人觉得不寒而栗啊……"></a>地球上所有的代码都像同一个人写的？想想让人觉得不寒而栗啊……</h6><h2 id="JavaScript-Standard-Style-Guide"><a href="#JavaScript-Standard-Style-Guide" class="headerlink" title="JavaScript Standard Style Guide"></a>JavaScript Standard Style Guide</h2><h6 id="一个功能强大的-JavaScript-代码规范，自带-linter-和自动代码纠正，无需配置，自动格式化代码。可以在编码早期就发现代码中的低级错误。这个代码规范被很多知名公司所采用，比如-NPM、GitHub、mongoDB-等。"><a href="#一个功能强大的-JavaScript-代码规范，自带-linter-和自动代码纠正，无需配置，自动格式化代码。可以在编码早期就发现代码中的低级错误。这个代码规范被很多知名公司所采用，比如-NPM、GitHub、mongoDB-等。" class="headerlink" title="一个功能强大的 JavaScript 代码规范，自带 linter 和自动代码纠正，无需配置，自动格式化代码。可以在编码早期就发现代码中的低级错误。这个代码规范被很多知名公司所采用，比如 NPM、GitHub、mongoDB 等。"></a>一个功能强大的 JavaScript 代码规范，自带 linter 和自动代码纠正，无需配置，自动格式化代码。可以在编码早期就发现代码中的低级错误。这个代码规范被很多知名公司所采用，比如 NPM、GitHub、mongoDB 等。</h6><h6 id="（这个-Github-地址霸气到不行。）"><a href="#（这个-Github-地址霸气到不行。）" class="headerlink" title="（这个 Github 地址霸气到不行。）"></a>（这个 Github 地址霸气到不行。）</h6><h2 id="jQuery-JavaScript-Style-Guide"><a href="#jQuery-JavaScript-Style-Guide" class="headerlink" title="jQuery JavaScript Style Guide"></a>jQuery JavaScript Style Guide</h2><h6 id="jQuery-是多少人入门前端的好帮手啊，可惜如今只剩回忆了。它们的这个规范算是很早期的一个代码规范了，主要是针对它们的代码以及早期-JavaScript-版本进行规定。"><a href="#jQuery-是多少人入门前端的好帮手啊，可惜如今只剩回忆了。它们的这个规范算是很早期的一个代码规范了，主要是针对它们的代码以及早期-JavaScript-版本进行规定。" class="headerlink" title="jQuery 是多少人入门前端的好帮手啊，可惜如今只剩回忆了。它们的这个规范算是很早期的一个代码规范了，主要是针对它们的代码以及早期 JavaScript 版本进行规定。"></a>jQuery 是多少人入门前端的好帮手啊，可惜如今只剩回忆了。它们的这个规范算是很早期的一个代码规范了，主要是针对它们的代码以及早期 JavaScript 版本进行规定。</h6>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;什么是编码规范&quot;&gt;&lt;a href=&quot;#什么是编码规范&quot; class=&quot;headerlink&quot; title=&quot;什么是编码规范&quot;&gt;&lt;/a&gt;什么是编码规范&lt;/h2&gt;&lt;h6 id=&quot;编码规范就是指导如何编写和组织代码的一系列标准。通过阅读这些编码规范，你可以知道在各个公司</summary>
      
    
    
    
    <category term="js初级" scheme="http://example.com/categories/js%E5%88%9D%E7%BA%A7/"/>
    
    
  </entry>
  
  <entry>
    <title>CSS的一些零碎总结</title>
    <link href="http://example.com/2018/06/27/CSS%E7%9A%84%E4%B8%80%E4%BA%9B%E9%9B%B6%E7%A2%8E%E6%80%BB%E7%BB%93/"/>
    <id>http://example.com/2018/06/27/CSS%E7%9A%84%E4%B8%80%E4%BA%9B%E9%9B%B6%E7%A2%8E%E6%80%BB%E7%BB%93/</id>
    <published>2018-06-27T05:06:43.000Z</published>
    <updated>2019-07-17T08:20:39.839Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、CSS-伪元素用于向某些选择器设置特殊效果（用来当作一个东西的，跟一个元素差不多，但不是元素）。"><a href="#1、CSS-伪元素用于向某些选择器设置特殊效果（用来当作一个东西的，跟一个元素差不多，但不是元素）。" class="headerlink" title="1、CSS 伪元素用于向某些选择器设置特殊效果（用来当作一个东西的，跟一个元素差不多，但不是元素）。"></a>1、CSS 伪元素用于向某些选择器设置特殊效果（用来当作一个东西的，跟一个元素差不多，但不是元素）。</h3><h4 id="①-frist-line伪元素：用于向文本首行设置特殊样式，但是只能用于块级元素。"><a href="#①-frist-line伪元素：用于向文本首行设置特殊样式，但是只能用于块级元素。" class="headerlink" title="① :frist-line伪元素：用于向文本首行设置特殊样式，但是只能用于块级元素。"></a>① :frist-line伪元素：用于向文本首行设置特殊样式，但是只能用于块级元素。</h4><h4 id="以下属性可应用于-“-frist-line-”-伪元素："><a href="#以下属性可应用于-“-frist-line-”-伪元素：" class="headerlink" title="以下属性可应用于 “ frist-line ” 伪元素："></a>以下属性可应用于 “ frist-line ” 伪元素：</h4><blockquote><p>font、color、background、word-spacing、letter-spacing、text-decoration、vertical-align、text-transform、line-height、clear 。</p></blockquote><h4 id="②-first-letter伪元素：用于向文本首字母设置特殊样式，只能用于块级元素。"><a href="#②-first-letter伪元素：用于向文本首字母设置特殊样式，只能用于块级元素。" class="headerlink" title="② :first-letter伪元素：用于向文本首字母设置特殊样式，只能用于块级元素。"></a>② :first-letter伪元素：用于向文本首字母设置特殊样式，只能用于块级元素。</h4><h3 id="以下属性可应用于-“-first-letter-”-伪元素："><a href="#以下属性可应用于-“-first-letter-”-伪元素：" class="headerlink" title="以下属性可应用于 “ first-letter ” 伪元素："></a>以下属性可应用于 “ first-letter ” 伪元素：</h3><blockquote><p>font、color、background、margin、padding、border、text-decoration、vertical-align(仅当float为none时)、text-transform、line-height、float、clear 。</p></blockquote><ul><li><p>③ 伪元素和css类可以配合使用：p.article: first-letter { }，可以使所有 class 为 article 的段落的首字母样式改变 。</p></li><li><p>④ 多重伪元素：可以结合多个伪元素来使用。p: first-letter { }，p: first-line { }：段落的第一个字母根据p: first-letter具体样式显示，第一行其余文本根据p: first-line具体样式显示，段落中其余文本以具体段落设置的其他样式显示。</p></li><li><p>⑤ :before伪元素：可以在元素内容前面插入新内容 。</p></li><li><p>⑥ :after伪元素：可以在元素的内容之后插入新内容 。</p></li><li><p>⑦ 许多人喜欢给 blockquote 引用段添加巨大的引号作为背景，这种时候我们就可以用 :before 来代替 background 了，既可以给背景留下空间，还可以直接使用文字而非图片：</p></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">blockquote</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: open-quote;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">z-index</span>: -<span class="number">1</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#DDD</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">120px</span>;</span><br><span class="line">    <span class="attribute">font-family</span>: serif;</span><br><span class="line">    <span class="attribute">font-weight</span>: bolder;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="⑧-清除浮动："><a href="#⑧-清除浮动：" class="headerlink" title="⑧ 清除浮动："></a>⑧ 清除浮动：</h3><h5 id="clear-fix-overflow-hidden-zoom-1-clear-fix-after-display-table-content-“”-width-0-clear-both"><a href="#clear-fix-overflow-hidden-zoom-1-clear-fix-after-display-table-content-“”-width-0-clear-both" class="headerlink" title=".clear-fix { *overflow: hidden; *zoom: 1; }.clear-fix:after { display: table; content: “”; width: 0; clear: both; }"></a>.clear-fix { *overflow: hidden; *zoom: 1; }.clear-fix:after { display: table; content: “”; width: 0; clear: both; }</h5><h4 id="2、CSS-伪类用于向某些选择器添加特殊的效果（用来选择的）"><a href="#2、CSS-伪类用于向某些选择器添加特殊的效果（用来选择的）" class="headerlink" title="2、CSS 伪类用于向某些选择器添加特殊的效果（用来选择的）"></a>2、CSS 伪类用于向某些选择器添加特殊的效果（用来选择的）</h4><ul><li><p>① :active：向被激活的元素添加样式</p></li><li><p>② :focus：向拥有键盘输入焦点的元素添加样式</p></li><li><p>③ :hover：当鼠标悬浮在元素上方时，向元素添加样式</p></li><li><p>④ :link：向未被访问的链接添加样式</p></li><li><p>⑤ :visiter：向已被访问的链接添加样式</p></li><li><p>⑥ :first-child：向元素的第一个子元素添加样式</p></li><li><p>⑦ :lang：向带有指定lang属性的元素添加样式，使你有能力为不同的语言定义特殊的规则：</p></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">q</span><span class="selector-pseudo">:lang(no)</span></span><br><span class="line">   &#123;</span><br><span class="line">   <span class="attribute">quotes</span>: <span class="string">&quot;~&quot;</span> <span class="string">&quot;~&quot;</span></span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">&lt;p&gt;文字&lt;q lang=&quot;no&quot;&gt;段落中的引用的文字&lt;/q&gt;文字&lt;/p&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3、解决塌陷，清除浮动"><a href="#3、解决塌陷，清除浮动" class="headerlink" title="3、解决塌陷，清除浮动"></a>3、解决塌陷，清除浮动</h3><ul><li>① 添加空元素</li></ul><h5 id="经典的解决方法，就是在浮动元素下方添加一个非浮动元素。"><a href="#经典的解决方法，就是在浮动元素下方添加一个非浮动元素。" class="headerlink" title="经典的解决方法，就是在浮动元素下方添加一个非浮动元素。"></a>经典的解决方法，就是在浮动元素下方添加一个非浮动元素。</h5><h5 id="代码这样写："><a href="#代码这样写：" class="headerlink" title="代码这样写："></a>代码这样写：</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;float:left;width:45%;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;float:right;width:45%;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;clear:both;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="原理是父容器现在必须考虑非浮动子元素的位置，而后者肯定出现在浮动元素下方，所以显示出来，父容器就把所有子元素都包括进去了。这种方法比较简单，但是要在页面中增加冗余标签，违背了语义网的原则。"><a href="#原理是父容器现在必须考虑非浮动子元素的位置，而后者肯定出现在浮动元素下方，所以显示出来，父容器就把所有子元素都包括进去了。这种方法比较简单，但是要在页面中增加冗余标签，违背了语义网的原则。" class="headerlink" title="原理是父容器现在必须考虑非浮动子元素的位置，而后者肯定出现在浮动元素下方，所以显示出来，父容器就把所有子元素都包括进去了。这种方法比较简单，但是要在页面中增加冗余标签，违背了语义网的原则。"></a>原理是父容器现在必须考虑非浮动子元素的位置，而后者肯定出现在浮动元素下方，所以显示出来，父容器就把所有子元素都包括进去了。这种方法比较简单，但是要在页面中增加冗余标签，违背了语义网的原则。</h5><ul><li>② 浮动的父容器</li></ul><h4 id="另一种思路是，索性将父容器也改成浮动定位，这样它就可以带着子元素一起浮动了。"><a href="#另一种思路是，索性将父容器也改成浮动定位，这样它就可以带着子元素一起浮动了。" class="headerlink" title="另一种思路是，索性将父容器也改成浮动定位，这样它就可以带着子元素一起浮动了。"></a>另一种思路是，索性将父容器也改成浮动定位，这样它就可以带着子元素一起浮动了。</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;float:left;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;float:left;width:45%;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;float:right;width:45%;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="这种方法不用修改HTML代码，但是缺点在于父容器变成浮动以后，会影响到后面元素的定位，而且有时候，父容器是定位死的，无法变成浮动。"><a href="#这种方法不用修改HTML代码，但是缺点在于父容器变成浮动以后，会影响到后面元素的定位，而且有时候，父容器是定位死的，无法变成浮动。" class="headerlink" title="这种方法不用修改HTML代码，但是缺点在于父容器变成浮动以后，会影响到后面元素的定位，而且有时候，父容器是定位死的，无法变成浮动。"></a>这种方法不用修改HTML代码，但是缺点在于父容器变成浮动以后，会影响到后面元素的定位，而且有时候，父容器是定位死的，无法变成浮动。</h4><ul><li>③  浮动元素的自动clearing<h4 id="让父容器变得可以自动”清理”（clearing）子元素的浮动，从而能够识别出浮动子元素的位置，不会出现显示上的差错。"><a href="#让父容器变得可以自动”清理”（clearing）子元素的浮动，从而能够识别出浮动子元素的位置，不会出现显示上的差错。" class="headerlink" title="让父容器变得可以自动”清理”（clearing）子元素的浮动，从而能够识别出浮动子元素的位置，不会出现显示上的差错。"></a>让父容器变得可以自动”清理”（clearing）子元素的浮动，从而能够识别出浮动子元素的位置，不会出现显示上的差错。</h4></li></ul><h4 id="要做到这点，只要为父容器加上一条”overflow-hidden”的CSS语句就行了。代码这样写："><a href="#要做到这点，只要为父容器加上一条”overflow-hidden”的CSS语句就行了。代码这样写：" class="headerlink" title="要做到这点，只要为父容器加上一条”overflow: hidden”的CSS语句就行了。代码这样写："></a>要做到这点，只要为父容器加上一条”overflow: hidden”的CSS语句就行了。代码这样写：</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;overflow: hidden;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;float:left;width:45%;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;float:right;width:45%;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="这种方法的缺点主要有二个，一个是IE-6不支持，另一个是一旦子元素的大小超过父容器的大小，就会出显示问题。"><a href="#这种方法的缺点主要有二个，一个是IE-6不支持，另一个是一旦子元素的大小超过父容器的大小，就会出显示问题。" class="headerlink" title="这种方法的缺点主要有二个，一个是IE 6不支持，另一个是一旦子元素的大小超过父容器的大小，就会出显示问题。"></a>这种方法的缺点主要有二个，一个是IE 6不支持，另一个是一旦子元素的大小超过父容器的大小，就会出显示问题。</h4><ul><li>④ 通过CSS语句添加子元素呢，这样就不用修改HTML代码</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;<span class="attribute">content</span>: <span class="string">&quot;\0020&quot;</span>;<span class="attribute">display</span>: block;<span class="attribute">height</span>: <span class="number">0</span>;<span class="attribute">clear</span>: both;&#125;<span class="selector-class">.clearfix</span> &#123;<span class="attribute">zoom</span>: <span class="number">1</span>;&#125;</span><br></pre></td></tr></table></figure><h4 id="“clearfix”是父容器的class名称，”content-”020”-”是在父容器的结尾处放一个空白字符，”height-0-”是让这个这个空白字符不显示出来，”display-block-clear-both-”是确保这个空白字符是非浮动的独立区块。添加一条IE-6的独有命令”zoom-1-”就行了，这条命令的作用是激活父元素的”hasLayout”属性，让父元素拥有自己的布局。IE-6会读取这条命令，其他浏览器则会直接忽略它。"><a href="#“clearfix”是父容器的class名称，”content-”020”-”是在父容器的结尾处放一个空白字符，”height-0-”是让这个这个空白字符不显示出来，”display-block-clear-both-”是确保这个空白字符是非浮动的独立区块。添加一条IE-6的独有命令”zoom-1-”就行了，这条命令的作用是激活父元素的”hasLayout”属性，让父元素拥有自己的布局。IE-6会读取这条命令，其他浏览器则会直接忽略它。" class="headerlink" title="“clearfix”是父容器的class名称，”content:”020”;”是在父容器的结尾处放一个空白字符，”height: 0;”是让这个这个空白字符不显示出来，”display: block; clear: both;”是确保这个空白字符是非浮动的独立区块。添加一条IE 6的独有命令”zoom:1;”就行了，这条命令的作用是激活父元素的”hasLayout”属性，让父元素拥有自己的布局。IE 6会读取这条命令，其他浏览器则会直接忽略它。"></a>“clearfix”是父容器的class名称，”content:”020”;”是在父容器的结尾处放一个空白字符，”height: 0;”是让这个这个空白字符不显示出来，”display: block; clear: both;”是确保这个空白字符是非浮动的独立区块。添加一条IE 6的独有命令”zoom:1;”就行了，这条命令的作用是激活父元素的”hasLayout”属性，让父元素拥有自己的布局。IE 6会读取这条命令，其他浏览器则会直接忽略它。</h4><h4 id="4、什么情况下hidden不起作用"><a href="#4、什么情况下hidden不起作用" class="headerlink" title="4、什么情况下hidden不起作用"></a>4、什么情况下hidden不起作用</h4><h4 id="position设置成fixed，overflow的hidden不起作用。"><a href="#position设置成fixed，overflow的hidden不起作用。" class="headerlink" title="position设置成fixed，overflow的hidden不起作用。"></a>position设置成fixed，overflow的hidden不起作用。</h4><h4 id="5、css盒子模型，问的是border、padding、margin三个属性如何作用在一个块级元素上？"><a href="#5、css盒子模型，问的是border、padding、margin三个属性如何作用在一个块级元素上？" class="headerlink" title="5、css盒子模型，问的是border、padding、margin三个属性如何作用在一个块级元素上？"></a>5、css盒子模型，问的是border、padding、margin三个属性如何作用在一个块级元素上？</h4><h4 id="一个盒子的宽度-border-padding-width-content内容的宽度-。"><a href="#一个盒子的宽度-border-padding-width-content内容的宽度-。" class="headerlink" title="一个盒子的宽度 = border + padding + width(content内容的宽度)。"></a>一个盒子的宽度 = border + padding + width(content内容的宽度)。</h4><h4 id="我想给一个给一个盒子加一个宽度，然后再加一个padding，但是这个盒子原本的宽度不改变，也就是说，width的值没有改变，且不会因为加了padding而往外扩增，该如何做？"><a href="#我想给一个给一个盒子加一个宽度，然后再加一个padding，但是这个盒子原本的宽度不改变，也就是说，width的值没有改变，且不会因为加了padding而往外扩增，该如何做？" class="headerlink" title="我想给一个给一个盒子加一个宽度，然后再加一个padding，但是这个盒子原本的宽度不改变，也就是说，width的值没有改变，且不会因为加了padding而往外扩增，该如何做？"></a>我想给一个给一个盒子加一个宽度，然后再加一个padding，但是这个盒子原本的宽度不改变，也就是说，width的值没有改变，且不会因为加了padding而往外扩增，该如何做？</h4><h4 id="有两种方式："><a href="#有两种方式：" class="headerlink" title="有两种方式："></a>有两种方式：</h4><ul><li><p>① 当一个块元素没有设置width时，这个盒子的宽度是默认填充父元素的宽度，这时随便给这个块元素加padding都是向内扩展的，不会向外扩展。</p></li><li><p>② border-sizing: content-box / border-box / inherit ;</p></li></ul><h4 id="content-box：宽度和高度分别应用到元素的内容框，在宽度和高度之外绘制元素的内边距和边框。"><a href="#content-box：宽度和高度分别应用到元素的内容框，在宽度和高度之外绘制元素的内边距和边框。" class="headerlink" title="content-box：宽度和高度分别应用到元素的内容框，在宽度和高度之外绘制元素的内边距和边框。"></a>content-box：宽度和高度分别应用到元素的内容框，在宽度和高度之外绘制元素的内边距和边框。</h4><h4 id="border-box：为元素设定的宽度和高度决定了元素的边框盒，就是说-用border的宽度来指代width，把加上border、padding之后的宽度，用width强行给限制住，然后宽度也就会变成向内扩展。"><a href="#border-box：为元素设定的宽度和高度决定了元素的边框盒，就是说-用border的宽度来指代width，把加上border、padding之后的宽度，用width强行给限制住，然后宽度也就会变成向内扩展。" class="headerlink" title="border-box：为元素设定的宽度和高度决定了元素的边框盒，就是说,用border的宽度来指代width，把加上border、padding之后的宽度，用width强行给限制住，然后宽度也就会变成向内扩展。"></a>border-box：为元素设定的宽度和高度决定了元素的边框盒，就是说,用border的宽度来指代width，把加上border、padding之后的宽度，用width强行给限制住，然后宽度也就会变成向内扩展。</h4><h4 id="inherit：规定应从父元素继承-box-sizing-属性的值。"><a href="#inherit：规定应从父元素继承-box-sizing-属性的值。" class="headerlink" title="inherit：规定应从父元素继承 box-sizing 属性的值。"></a>inherit：规定应从父元素继承 box-sizing 属性的值。</h4><p>##6、关于字体的，说一下rem这个单位（移动端），（产生和设置）</p><h4 id="em是相对于父元素的font-size，rem是相对于根元素的font-size。"><a href="#em是相对于父元素的font-size，rem是相对于根元素的font-size。" class="headerlink" title="em是相对于父元素的font-size，rem是相对于根元素的font-size。"></a>em是相对于父元素的font-size，rem是相对于根元素的font-size。</h4><h4 id="rem的补充："><a href="#rem的补充：" class="headerlink" title="rem的补充："></a>rem的补充：</h4><ul><li><p>① 对于不支持它的浏览器，应对方法也很简单，就是多写一个绝对单位的声明。这些浏览器会忽略用rem设定的字体大小；</p></li><li><p>② IE9/IE10在用于伪元素时或者使用字体简写声明时不支持rem；</p></li><li><p>③ IOS Safari5.0-5.1虽然支持rem，但是在使用媒体查询时不支持rem。</p></li></ul><h2 id="7、如何在css代码里提升代码的优先级？"><a href="#7、如何在css代码里提升代码的优先级？" class="headerlink" title="7、如何在css代码里提升代码的优先级？"></a>7、如何在css代码里提升代码的优先级？</h2><h3 id="a-color-red-用什么方法覆盖掉？-解决："><a href="#a-color-red-用什么方法覆盖掉？-解决：" class="headerlink" title="a { color:red;} 用什么方法覆盖掉？ 解决："></a>a { color:red;} 用什么方法覆盖掉？ 解决：</h3><ul><li><p>① body a { color:red;}</p><h3 id="优先级计算公式：标签-1，id-100，class-10，加起来就是他的优先级。"><a href="#优先级计算公式：标签-1，id-100，class-10，加起来就是他的优先级。" class="headerlink" title="优先级计算公式：标签=1，id=100，class=10，加起来就是他的优先级。"></a>优先级计算公式：标签=1，id=100，class=10，加起来就是他的优先级。</h3></li><li><p>② 在color后面加一个!important，强行将优先级提升到最大。</p></li><li><p>③ !important提升指定样式规则的应用优先权。</p></li></ul><p>##8、有两个CSS语句能起到隐藏节点的作用visibility和display</p><h4 id="（1）visibility"><a href="#（1）visibility" class="headerlink" title="（1）visibility"></a>（1）visibility</h4><blockquote><p>规定了元素是否可见，即使不可见也会占用上面的空间，在这里就是在指它与display的不一样了。</p></blockquote><h4 id="（2）display"><a href="#（2）display" class="headerlink" title="（2）display"></a>（2）display</h4><blockquote><p>这个属性用于定义建立布局时元素生成的显示框类型。对于 HTML 等文档类型，如果使用 display 不谨慎会很危险，因为可能违反 HTML 中已经定义的显示层次结构。对于 XML，由于 XML 没有内置的这种层次结构，所有 display 是绝对必要的。</p></blockquote><h4 id="（3）对比："><a href="#（3）对比：" class="headerlink" title="（3）对比："></a>（3）对比：</h4><h4 id="相同点：都有相同的功能就是隐藏。"><a href="#相同点：都有相同的功能就是隐藏。" class="headerlink" title="相同点：都有相同的功能就是隐藏。"></a>相同点：都有相同的功能就是隐藏。</h4><h4 id="不同点：当我们定义了display后，在渲染树中不会引擎是不会去构建这个框的。而visibility当我们使它隐藏的时候，他在渲染树中会构建，只是不去渲染。这也就是W3c上面所说的不可见会占空间的原因。他们两者在优化中visibility会显得更好，因为我们不会因为它而去改变了文档中已经定义好的显示层次结构了。"><a href="#不同点：当我们定义了display后，在渲染树中不会引擎是不会去构建这个框的。而visibility当我们使它隐藏的时候，他在渲染树中会构建，只是不去渲染。这也就是W3c上面所说的不可见会占空间的原因。他们两者在优化中visibility会显得更好，因为我们不会因为它而去改变了文档中已经定义好的显示层次结构了。" class="headerlink" title="不同点：当我们定义了display后，在渲染树中不会引擎是不会去构建这个框的。而visibility当我们使它隐藏的时候，他在渲染树中会构建，只是不去渲染。这也就是W3c上面所说的不可见会占空间的原因。他们两者在优化中visibility会显得更好，因为我们不会因为它而去改变了文档中已经定义好的显示层次结构了。"></a>不同点：当我们定义了display后，在渲染树中不会引擎是不会去构建这个框的。而visibility当我们使它隐藏的时候，他在渲染树中会构建，只是不去渲染。这也就是W3c上面所说的不可见会占空间的原因。他们两者在优化中visibility会显得更好，因为我们不会因为它而去改变了文档中已经定义好的显示层次结构了。</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1、CSS-伪元素用于向某些选择器设置特殊效果（用来当作一个东西的，跟一个元素差不多，但不是元素）。&quot;&gt;&lt;a href=&quot;#1、CSS-伪元素用于向某些选择器设置特殊效果（用来当作一个东西的，跟一个元素差不多，但不是元素）。&quot; class=&quot;headerlink&quot;</summary>
      
    
    
    
    <category term="CSS" scheme="http://example.com/categories/CSS/"/>
    
    
  </entry>
  
  <entry>
    <title>分分钟理解闭包</title>
    <link href="http://example.com/2018/06/26/%E5%88%86%E5%88%86%E9%92%9F%E7%90%86%E8%A7%A3%E9%97%AD%E5%8C%85/"/>
    <id>http://example.com/2018/06/26/%E5%88%86%E5%88%86%E9%92%9F%E7%90%86%E8%A7%A3%E9%97%AD%E5%8C%85/</id>
    <published>2018-06-26T05:06:43.000Z</published>
    <updated>2019-07-17T08:18:56.087Z</updated>
    
    <content type="html"><![CDATA[<h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><h5 id="是-Javascript-比较重要的一个概念，对于初学者来讲，闭包是一个特别抽象的概念，特别是ECMAScript-规范给的定义，如果没有实战经验，很难从定义去理解它。因此，本文不会对闭包的概念进行大篇幅描述，直接上干货，让你分分钟理解闭包！"><a href="#是-Javascript-比较重要的一个概念，对于初学者来讲，闭包是一个特别抽象的概念，特别是ECMAScript-规范给的定义，如果没有实战经验，很难从定义去理解它。因此，本文不会对闭包的概念进行大篇幅描述，直接上干货，让你分分钟理解闭包！" class="headerlink" title="是 Javascript 比较重要的一个概念，对于初学者来讲，闭包是一个特别抽象的概念，特别是ECMAScript 规范给的定义，如果没有实战经验，很难从定义去理解它。因此，本文不会对闭包的概念进行大篇幅描述，直接上干货，让你分分钟理解闭包！"></a>是 Javascript 比较重要的一个概念，对于初学者来讲，闭包是一个特别抽象的概念，特别是ECMAScript 规范给的定义，如果没有实战经验，很难从定义去理解它。因此，本文不会对闭包的概念进行大篇幅描述，直接上干货，让你分分钟理解闭包！</h5><h3 id="闭包，一睹为快"><a href="#闭包，一睹为快" class="headerlink" title="闭包，一睹为快"></a>闭包，一睹为快</h3><h5 id="在接触一个新技术的时候，我首先会做的一件事就是找它的-demo。对于我们来说，看代码比自然语言更能理解一个事物的本质。其实，闭包无处不在，比如：jQuery、zepto的核心代码都包含在一个大的闭包中，所以下面我先写一个最简单最原始的闭包，以便让你在大脑里产生闭包的画面："><a href="#在接触一个新技术的时候，我首先会做的一件事就是找它的-demo。对于我们来说，看代码比自然语言更能理解一个事物的本质。其实，闭包无处不在，比如：jQuery、zepto的核心代码都包含在一个大的闭包中，所以下面我先写一个最简单最原始的闭包，以便让你在大脑里产生闭包的画面：" class="headerlink" title="在接触一个新技术的时候，我首先会做的一件事就是找它的 demo。对于我们来说，看代码比自然语言更能理解一个事物的本质。其实，闭包无处不在，比如：jQuery、zepto的核心代码都包含在一个大的闭包中，所以下面我先写一个最简单最原始的闭包，以便让你在大脑里产生闭包的画面："></a>在接触一个新技术的时候，我首先会做的一件事就是找它的 demo。对于我们来说，看代码比自然语言更能理解一个事物的本质。其实，闭包无处不在，比如：jQuery、zepto的核心代码都包含在一个大的闭包中，所以下面我先写一个最简单最原始的闭包，以便让你在大脑里产生闭包的画面：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>)</span>&#123;   </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params"></span>)</span>&#123;   </span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">&quot;Hello Closure!&quot;</span>);   </span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="keyword">return</span> B;   </span><br><span class="line">&#125;   </span><br><span class="line"><span class="keyword">var</span> C = A();   </span><br><span class="line">C();<span class="comment">//Hello Closure!</span></span><br></pre></td></tr></table></figure><h5 id="这是最简单的闭包。"><a href="#这是最简单的闭包。" class="headerlink" title="这是最简单的闭包。"></a>这是最简单的闭包。</h5><h5 id="有了初步认识后，我们简单分析一下它和普通函数有什么不同，上面代码翻译成自然语言如下："><a href="#有了初步认识后，我们简单分析一下它和普通函数有什么不同，上面代码翻译成自然语言如下：" class="headerlink" title="有了初步认识后，我们简单分析一下它和普通函数有什么不同，上面代码翻译成自然语言如下："></a>有了初步认识后，我们简单分析一下它和普通函数有什么不同，上面代码翻译成自然语言如下：</h5><h6 id="（1）定义普通函数-A"><a href="#（1）定义普通函数-A" class="headerlink" title="（1）定义普通函数 A"></a>（1）定义普通函数 A</h6><h6 id="（2）在-A-中定义普通函数-B"><a href="#（2）在-A-中定义普通函数-B" class="headerlink" title="（2）在 A 中定义普通函数 B"></a>（2）在 A 中定义普通函数 B</h6><h6 id="（3）在-A-中返回-B"><a href="#（3）在-A-中返回-B" class="headerlink" title="（3）在 A 中返回 B"></a>（3）在 A 中返回 B</h6><h6 id="（4）执行-A-并把-A-的返回结果赋值给变量-C"><a href="#（4）执行-A-并把-A-的返回结果赋值给变量-C" class="headerlink" title="（4）执行 A, 并把 A 的返回结果赋值给变量 C"></a>（4）执行 A, 并把 A 的返回结果赋值给变量 C</h6><h6 id="（5）执行-C"><a href="#（5）执行-C" class="headerlink" title="（5）执行 C"></a>（5）执行 C</h6><h2 id="把这5步操作总结成一句话就是："><a href="#把这5步操作总结成一句话就是：" class="headerlink" title="把这5步操作总结成一句话就是："></a>把这5步操作总结成一句话就是：</h2><h6 id="函数A的内部函数B被函数A外的一个变量-c-引用。"><a href="#函数A的内部函数B被函数A外的一个变量-c-引用。" class="headerlink" title="函数A的内部函数B被函数A外的一个变量 c 引用。"></a>函数A的内部函数B被函数A外的一个变量 c 引用。</h6><h6 id="把这句话再加工一下就变成了闭包的定义："><a href="#把这句话再加工一下就变成了闭包的定义：" class="headerlink" title="把这句话再加工一下就变成了闭包的定义："></a>把这句话再加工一下就变成了闭包的定义：</h6><h6 id="当一个内部函数被其外部函数之外的变量引用时，就形成了一个闭包。"><a href="#当一个内部函数被其外部函数之外的变量引用时，就形成了一个闭包。" class="headerlink" title="当一个内部函数被其外部函数之外的变量引用时，就形成了一个闭包。"></a>当一个内部函数被其外部函数之外的变量引用时，就形成了一个闭包。</h6><h6 id="因此，当你执行上述5步操作时，就已经定义了一个闭包！"><a href="#因此，当你执行上述5步操作时，就已经定义了一个闭包！" class="headerlink" title="因此，当你执行上述5步操作时，就已经定义了一个闭包！"></a>因此，当你执行上述5步操作时，就已经定义了一个闭包！</h6><h6 id="这就是闭包。"><a href="#这就是闭包。" class="headerlink" title="这就是闭包。"></a>这就是闭包。</h6><h2 id="闭包的用途"><a href="#闭包的用途" class="headerlink" title="闭包的用途"></a>闭包的用途</h2><h5 id="在了解闭包的作用之前，我们先了解一下-Javascript-中的GC机制"><a href="#在了解闭包的作用之前，我们先了解一下-Javascript-中的GC机制" class="headerlink" title="在了解闭包的作用之前，我们先了解一下 Javascript 中的GC机制:"></a>在了解闭包的作用之前，我们先了解一下 Javascript 中的GC机制:</h5><h6 id="在-Javascript-中，如果一个对象不再被引用，那么这个对象就会被-GC-回收，否则这个对象一直会保存在内存中。"><a href="#在-Javascript-中，如果一个对象不再被引用，那么这个对象就会被-GC-回收，否则这个对象一直会保存在内存中。" class="headerlink" title="在 Javascript 中，如果一个对象不再被引用，那么这个对象就会被 GC 回收，否则这个对象一直会保存在内存中。"></a>在 Javascript 中，如果一个对象不再被引用，那么这个对象就会被 GC 回收，否则这个对象一直会保存在内存中。</h6><h6 id="在上述例子中，B-定义在-A-中，因此-B-依赖于-A-而外部变量-C-又引用了-B-所以A间接的被-C-引用。"><a href="#在上述例子中，B-定义在-A-中，因此-B-依赖于-A-而外部变量-C-又引用了-B-所以A间接的被-C-引用。" class="headerlink" title="在上述例子中，B 定义在 A 中，因此 B 依赖于 A ,而外部变量 C 又引用了 B , 所以A间接的被 C 引用。"></a>在上述例子中，B 定义在 A 中，因此 B 依赖于 A ,而外部变量 C 又引用了 B , 所以A间接的被 C 引用。</h6><h6 id="也就是说，A-不会被-GC-回收，会一直保存在内存中。为了证明我们的推理，上面的例子稍作改进："><a href="#也就是说，A-不会被-GC-回收，会一直保存在内存中。为了证明我们的推理，上面的例子稍作改进：" class="headerlink" title="也就是说，A 不会被 GC 回收，会一直保存在内存中。为了证明我们的推理，上面的例子稍作改进："></a>也就是说，A 不会被 GC 回收，会一直保存在内存中。为了证明我们的推理，上面的例子稍作改进：</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>)</span>&#123;   </span><br><span class="line">    <span class="keyword">var</span> count = <span class="number">0</span>;   </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params"></span>)</span>&#123;   </span><br><span class="line">       count ++;   </span><br><span class="line">       <span class="built_in">console</span>.log(count);   </span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="keyword">return</span> B;   </span><br><span class="line">&#125;   </span><br><span class="line"><span class="keyword">var</span> C = A();   </span><br><span class="line">C();<span class="comment">// 1   </span></span><br><span class="line">C();<span class="comment">// 2   </span></span><br><span class="line">C();<span class="comment">// 3</span></span><br></pre></td></tr></table></figure><blockquote><p>count 是函数A 中的一个变量，它的值在函数B 中被改变，函数B 每执行一次，count 的值就在原来的基础上累加 1 。因此，函数A中的 count 变量会一直保存在内存中。</p></blockquote><h4 id="当我们需要在模块中定义一些变量，并希望这些变量一直保存在内存中但又不会“污染”全局的变量时，就可以用闭包来定义这个模块。"><a href="#当我们需要在模块中定义一些变量，并希望这些变量一直保存在内存中但又不会“污染”全局的变量时，就可以用闭包来定义这个模块。" class="headerlink" title="当我们需要在模块中定义一些变量，并希望这些变量一直保存在内存中但又不会“污染”全局的变量时，就可以用闭包来定义这个模块。"></a>当我们需要在模块中定义一些变量，并希望这些变量一直保存在内存中但又不会“污染”全局的变量时，就可以用闭包来定义这个模块。</h4><h2 id="闭包的高级写法"><a href="#闭包的高级写法" class="headerlink" title="闭包的高级写法"></a>闭包的高级写法</h2><h6 id="上面的写法其实是最原始的写法，而在实际应用中，会将闭包和匿名函数联系在一起使用。下面就是一个闭包常用的写法："><a href="#上面的写法其实是最原始的写法，而在实际应用中，会将闭包和匿名函数联系在一起使用。下面就是一个闭包常用的写法：" class="headerlink" title="上面的写法其实是最原始的写法，而在实际应用中，会将闭包和匿名函数联系在一起使用。下面就是一个闭包常用的写法："></a>上面的写法其实是最原始的写法，而在实际应用中，会将闭包和匿名函数联系在一起使用。下面就是一个闭包常用的写法：</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">document</span>)</span>&#123;   </span><br><span class="line">    <span class="keyword">var</span> viewport;   </span><br><span class="line">    <span class="keyword">var</span> obj = &#123;   </span><br><span class="line">        init:<span class="function"><span class="keyword">function</span>(<span class="params">id</span>)</span>&#123;   </span><br><span class="line">           viewport = <span class="built_in">document</span>.querySelector(<span class="string">&quot;#&quot;</span>+id);   </span><br><span class="line">        &#125;,   </span><br><span class="line">        addChild:<span class="function"><span class="keyword">function</span>(<span class="params">child</span>)</span>&#123;   </span><br><span class="line">            viewport.appendChild(child);   </span><br><span class="line">        &#125;,   </span><br><span class="line">        removeChild:<span class="function"><span class="keyword">function</span>(<span class="params">child</span>)</span>&#123;   </span><br><span class="line">            viewport.removeChild(child);   </span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="built_in">window</span>.jView = obj;   </span><br><span class="line">&#125;)(<span class="built_in">document</span>);</span><br></pre></td></tr></table></figure><blockquote><p>这个组件的作用是：初始化一个容器，然后可以给这个容器添加子容器，也可以移除一个容器。</p></blockquote><h6 id="功能很简单，但这里涉及到了另外一个概念：立即执行函数。-简单了解一下就行，需要重点理解的是这种写法是如何实现闭包功能的。"><a href="#功能很简单，但这里涉及到了另外一个概念：立即执行函数。-简单了解一下就行，需要重点理解的是这种写法是如何实现闭包功能的。" class="headerlink" title="功能很简单，但这里涉及到了另外一个概念：立即执行函数。 简单了解一下就行，需要重点理解的是这种写法是如何实现闭包功能的。"></a>功能很简单，但这里涉及到了另外一个概念：立即执行函数。 简单了解一下就行，需要重点理解的是这种写法是如何实现闭包功能的。</h6><h6 id="可以将上面的代码拆分成两部分：-function-和-第1个-是一个表达式，而这个表达式本身是一个匿名函数，所以在这个表达式后面加-就表示执行这个匿名函数。"><a href="#可以将上面的代码拆分成两部分：-function-和-第1个-是一个表达式，而这个表达式本身是一个匿名函数，所以在这个表达式后面加-就表示执行这个匿名函数。" class="headerlink" title="可以将上面的代码拆分成两部分：(function(){}) 和 () , 第1个() 是一个表达式，而这个表达式本身是一个匿名函数，所以在这个表达式后面加 () 就表示执行这个匿名函数。"></a>可以将上面的代码拆分成两部分：(function(){}) 和 () , 第1个() 是一个表达式，而这个表达式本身是一个匿名函数，所以在这个表达式后面加 () 就表示执行这个匿名函数。</h6><h6 id="因此这段代码执行执行过程可以分解如下："><a href="#因此这段代码执行执行过程可以分解如下：" class="headerlink" title="因此这段代码执行执行过程可以分解如下："></a>因此这段代码执行执行过程可以分解如下：</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span>(<span class="params">document</span>)</span>&#123;   </span><br><span class="line">    <span class="keyword">var</span> viewport;   </span><br><span class="line">    <span class="keyword">var</span> obj = &#123;   </span><br><span class="line">        init:<span class="function"><span class="keyword">function</span>(<span class="params">id</span>)</span>&#123;   </span><br><span class="line">            viewport = <span class="built_in">document</span>.querySelector(<span class="string">&quot;#&quot;</span>+id);   </span><br><span class="line">        &#125;,   </span><br><span class="line">        addChild:<span class="function"><span class="keyword">function</span>(<span class="params">child</span>)</span>&#123;   </span><br><span class="line">            viewport.appendChild(child);   </span><br><span class="line">        &#125;,   </span><br><span class="line">        removeChild:<span class="function"><span class="keyword">function</span>(<span class="params">child</span>)</span>&#123;   </span><br><span class="line">            viewport.removeChild(child);   </span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="built_in">window</span>.jView = obj;   </span><br><span class="line">&#125;;   </span><br><span class="line">f(<span class="built_in">document</span>);</span><br></pre></td></tr></table></figure><h6 id="在这段代码中似乎看到了闭包的影子，但-f-中没有任何返回值，似乎不具备闭包的条件，注意这句代码："><a href="#在这段代码中似乎看到了闭包的影子，但-f-中没有任何返回值，似乎不具备闭包的条件，注意这句代码：" class="headerlink" title="在这段代码中似乎看到了闭包的影子，但 f 中没有任何返回值，似乎不具备闭包的条件，注意这句代码："></a>在这段代码中似乎看到了闭包的影子，但 f 中没有任何返回值，似乎不具备闭包的条件，注意这句代码：</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.jView = obj;;</span><br></pre></td></tr></table></figure><blockquote><p>obj 是在函数 f 中定义的一个对象，这个对象中定义了一系列方法， 执行window.jView = obj 就是在 window 全局对象定义了一个变量 jView，并将这个变量指向 obj 对象，即全局变量 jView 引用了 obj . 而 obj 对象中的函数又引用了函数 f 中的变量 viewport ,因此函数 f 中的 viewport 不会被 GC 回收，viewport 会一直保存到内存中，所以这种写法满足了闭包的条件。</p></blockquote><h3 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h3><ol><li>逻辑连续，当闭包作为另一个函数调用的参数时，避免你脱离当前逻辑而单独编写额外逻辑。</li><li>方便调用上下文的局部变量。</li><li>加强封装性，第2点的延伸，可以达到对变量的保护作用。</li></ol><h3 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h3><ol><li><p>由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。</p></li><li><p>闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。</p></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h4 id="这是对闭包最简单的理解，当然闭包还有其更深层次的理解，这个就涉及的多了，你需要了解JS的执行环境-execution-context-、活动对象-activation-object-以及作用域-scope-和作用域链-scope-chain-的运行机制。但作为初学者，暂时不必了解这些，有了简单的理解之后，一定要在实际项目中用起来，等你用的多了，对于闭包，你自然会有更深层次的理解！"><a href="#这是对闭包最简单的理解，当然闭包还有其更深层次的理解，这个就涉及的多了，你需要了解JS的执行环境-execution-context-、活动对象-activation-object-以及作用域-scope-和作用域链-scope-chain-的运行机制。但作为初学者，暂时不必了解这些，有了简单的理解之后，一定要在实际项目中用起来，等你用的多了，对于闭包，你自然会有更深层次的理解！" class="headerlink" title="这是对闭包最简单的理解，当然闭包还有其更深层次的理解，这个就涉及的多了，你需要了解JS的执行环境(execution context)、活动对象(activation object)以及作用域(scope)和作用域链(scope chain)的运行机制。但作为初学者，暂时不必了解这些，有了简单的理解之后，一定要在实际项目中用起来，等你用的多了，对于闭包，你自然会有更深层次的理解！"></a>这是对闭包最简单的理解，当然闭包还有其更深层次的理解，这个就涉及的多了，你需要了解JS的执行环境(execution context)、活动对象(activation object)以及作用域(scope)和作用域链(scope chain)的运行机制。但作为初学者，暂时不必了解这些，有了简单的理解之后，一定要在实际项目中用起来，等你用的多了，对于闭包，你自然会有更深层次的理解！</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;闭包&quot;&gt;&lt;a href=&quot;#闭包&quot; class=&quot;headerlink&quot; title=&quot;闭包&quot;&gt;&lt;/a&gt;闭包&lt;/h2&gt;&lt;h5 id=&quot;是-Javascript-比较重要的一个概念，对于初学者来讲，闭包是一个特别抽象的概念，特别是ECMAScript-规范给的定义，</summary>
      
    
    
    
    <category term="js高级" scheme="http://example.com/categories/js%E9%AB%98%E7%BA%A7/"/>
    
    
  </entry>
  
  <entry>
    <title>CANVAS</title>
    <link href="http://example.com/2018/06/24/CANVAS/"/>
    <id>http://example.com/2018/06/24/CANVAS/</id>
    <published>2018-06-24T05:06:43.000Z</published>
    <updated>2019-07-17T08:21:09.402Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是canvas"><a href="#什么是canvas" class="headerlink" title="什么是canvas"></a>什么是canvas</h2><h5 id="canvas-元素用于在网页上绘制图形。HTML5-的-canvas-元素使用-JavaScript-在网页上绘制2D图像。在矩形区域的画布上，控制其每一像素，JavaScript-来绘制-2D或3D图形，逐像素进行渲染。可以通过多种方法使用canvas-元素绘制路径、矩形、圆形、字符以及添加图像。"><a href="#canvas-元素用于在网页上绘制图形。HTML5-的-canvas-元素使用-JavaScript-在网页上绘制2D图像。在矩形区域的画布上，控制其每一像素，JavaScript-来绘制-2D或3D图形，逐像素进行渲染。可以通过多种方法使用canvas-元素绘制路径、矩形、圆形、字符以及添加图像。" class="headerlink" title="canvas 元素用于在网页上绘制图形。HTML5 的 canvas 元素使用 JavaScript 在网页上绘制2D图像。在矩形区域的画布上，控制其每一像素，JavaScript 来绘制 2D或3D图形，逐像素进行渲染。可以通过多种方法使用canvas 元素绘制路径、矩形、圆形、字符以及添加图像。"></a>canvas 元素用于在网页上绘制图形。HTML5 的 canvas 元素使用 JavaScript 在网页上绘制2D图像。在矩形区域的画布上，控制其每一像素，JavaScript 来绘制 2D或3D图形，逐像素进行渲染。可以通过多种方法使用canvas 元素绘制路径、矩形、圆形、字符以及添加图像。</h5><h6 id="IE9-0以前的版本不支持"><a href="#IE9-0以前的版本不支持" class="headerlink" title="IE9.0以前的版本不支持"></a>IE9.0以前的版本不支持</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">width</span>=<span class="string">800</span> <span class="attr">height</span>=<span class="string">800</span>&gt;</span>你的浏览器版本太低，请升级最新的浏览器！<span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="获取画布对象"><a href="#获取画布对象" class="headerlink" title="获取画布对象"></a>获取画布对象</h2><blockquote><p>getContext方法可返回一个对象，该对象提供了用于在画布上绘图的方法和属性。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.querySelector(<span class="string">&quot;canvas&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> ctx = canvas.getContext(<span class="string">&quot;2d&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="绘制线条"><a href="#绘制线条" class="headerlink" title="绘制线条"></a>绘制线条</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ctx.beginPath();<span class="comment">//开始一个绘制路径</span></span><br><span class="line">ctx.moveTo(<span class="number">200</span>,<span class="number">0</span>)<span class="comment">//移动绘制的开始点</span></span><br><span class="line">ctx.lineWidth = <span class="number">5</span>;<span class="comment">//线条的宽度</span></span><br><span class="line">ctx.lineTo(<span class="number">200</span>,<span class="number">400</span>)<span class="comment">//从当前绘制点到设置的200，400坐标位置画一条直线</span></span><br><span class="line">ctx.strokeStyle = <span class="string">&quot;red&quot;</span><span class="comment">//设置描边颜色</span></span><br><span class="line">ctx.stroke();<span class="comment">//描边</span></span><br><span class="line">ctx.closePath();<span class="comment">//结束当前绘制路径</span></span><br></pre></td></tr></table></figure><h2 id="绘制文字、阴影"><a href="#绘制文字、阴影" class="headerlink" title="绘制文字、阴影"></a>绘制文字、阴影</h2><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><h6 id="font：设置或返回文本内容的当前字体属性"><a href="#font：设置或返回文本内容的当前字体属性" class="headerlink" title="font：设置或返回文本内容的当前字体属性"></a>font：设置或返回文本内容的当前字体属性</h6><h6 id="textAlign：设置或返回文本内容的当前对齐方式"><a href="#textAlign：设置或返回文本内容的当前对齐方式" class="headerlink" title="textAlign：设置或返回文本内容的当前对齐方式"></a>textAlign：设置或返回文本内容的当前对齐方式</h6><h6 id="textBaseline：设置或返回在绘制文本时使用的当前文本基线"><a href="#textBaseline：设置或返回在绘制文本时使用的当前文本基线" class="headerlink" title="textBaseline：设置或返回在绘制文本时使用的当前文本基线"></a>textBaseline：设置或返回在绘制文本时使用的当前文本基线</h6><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><h6 id="fillText-text-x-y-maxWidth-text表示文字，x、y为坐标、maxWidth可选，为文字最大宽度，防止文字溢出；填充文字"><a href="#fillText-text-x-y-maxWidth-text表示文字，x、y为坐标、maxWidth可选，为文字最大宽度，防止文字溢出；填充文字" class="headerlink" title="fillText(text,x,y,maxWidth): text表示文字，x、y为坐标、maxWidth可选，为文字最大宽度，防止文字溢出；填充文字"></a>fillText(text,x,y,maxWidth): text表示文字，x、y为坐标、maxWidth可选，为文字最大宽度，防止文字溢出；填充文字</h6><h6 id="strokeText-text-x-y-maxWidth-text表示文字，x、y为坐标、maxWidth可选，为文字最大宽度，防止文字溢出；绘制文字"><a href="#strokeText-text-x-y-maxWidth-text表示文字，x、y为坐标、maxWidth可选，为文字最大宽度，防止文字溢出；绘制文字" class="headerlink" title="strokeText(text,x,y,maxWidth): text表示文字，x、y为坐标、maxWidth可选，为文字最大宽度，防止文字溢出；绘制文字"></a>strokeText(text,x,y,maxWidth): text表示文字，x、y为坐标、maxWidth可选，为文字最大宽度，防止文字溢出；绘制文字</h6><h3 id="设置阴影"><a href="#设置阴影" class="headerlink" title="设置阴影"></a>设置阴影</h3><h5 id="shadowColor-阴影颜色"><a href="#shadowColor-阴影颜色" class="headerlink" title="shadowColor 阴影颜色"></a>shadowColor 阴影颜色</h5><h5 id="shadowOffsetX-阴影的左右偏移值"><a href="#shadowOffsetX-阴影的左右偏移值" class="headerlink" title="shadowOffsetX 阴影的左右偏移值"></a>shadowOffsetX 阴影的左右偏移值</h5><h5 id="shadowOffsetY-阴影的上下偏移值"><a href="#shadowOffsetY-阴影的上下偏移值" class="headerlink" title="shadowOffsetY 阴影的上下偏移值"></a>shadowOffsetY 阴影的上下偏移值</h5><h5 id="shadowBlur-阴影模糊度"><a href="#shadowBlur-阴影模糊度" class="headerlink" title="shadowBlur 阴影模糊度"></a>shadowBlur 阴影模糊度</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置阴影函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">textShadow</span>(<span class="params">x,y,blur,color</span>) </span>&#123;</span><br><span class="line">ctx.shadowColor = color;<span class="comment">//颜色</span></span><br><span class="line">ctx.shadowOffsetX = x;<span class="comment">//x偏移</span></span><br><span class="line">ctx.shadowOffsetY = y;<span class="comment">//y偏移</span></span><br><span class="line">ctx.shadowBlur = blur;<span class="comment">//模糊度</span></span><br><span class="line">&#125;</span><br><span class="line">textShadow(<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="string">&quot;red&quot;</span>);<span class="comment">//设置阴影</span></span><br><span class="line">ctx.font = <span class="string">&quot;30px 黑体&quot;</span>;<span class="comment">//设置字体大小和字体类型</span></span><br><span class="line">ctx.textBaseline = <span class="string">&quot;bottom&quot;</span>;<span class="comment">//垂直对齐设置</span></span><br><span class="line">ctx.textAlign = <span class="string">&quot;right&quot;</span>;<span class="comment">//水平对齐设置</span></span><br><span class="line"><span class="comment">// ctx.strokeText(&quot;文字内容&quot;,200,200);//文字描边</span></span><br><span class="line">ctx.fillText(<span class="string">&quot;文字内容&quot;</span>,<span class="number">200</span>,<span class="number">200</span>)<span class="comment">//文字填充</span></span><br><span class="line"></span><br><span class="line">#### save()/restore()保存和返回设置</span><br><span class="line"></span><br><span class="line">save()：用来保存Canvas的状态。可以在调用Canvas的平移、放缩、旋转、错切、裁剪等操作前使用。</span><br><span class="line">restore()：用来恢复Canvas之前保存的状态。防止当前设置的操作对后续的绘制有影响。</span><br><span class="line">ctx.fillStyle = <span class="string">&quot;red&quot;</span>;<span class="comment">//设置填充颜色（红色）</span></span><br><span class="line">ctx.save();<span class="comment">//保存当前的设置</span></span><br><span class="line">ctx.fillStyle = <span class="string">&quot;blue&quot;</span>;<span class="comment">//设置填充颜色（蓝色）</span></span><br><span class="line">ctx.fillText(<span class="string">&quot;文字内容1&quot;</span>,<span class="number">100</span>,<span class="number">100</span>)<span class="comment">//文字填充（蓝色）</span></span><br><span class="line">ctx.restore();<span class="comment">//返回上一次保存的属性值</span></span><br><span class="line">ctx.fillText(<span class="string">&quot;文字内容2&quot;</span>,<span class="number">100</span>,<span class="number">200</span>)<span class="comment">//文字填充红色）</span></span><br></pre></td></tr></table></figure><h2 id="绘制图形"><a href="#绘制图形" class="headerlink" title="绘制图形"></a>绘制图形</h2><h4 id="rect矩形"><a href="#rect矩形" class="headerlink" title="rect矩形"></a>rect矩形</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rect(x,y,w,h)：绘制矩形路径</span><br><span class="line">fillRect(x,y,w,h)：填充绘制矩形</span><br><span class="line">strokeRect(x,y,w,h)：描边绘制矩形</span><br><span class="line">clearRect(x,y,w,h)：清除矩形区域</span><br></pre></td></tr></table></figure><h4 id="描边矩形"><a href="#描边矩形" class="headerlink" title="描边矩形"></a>描边矩形</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ctx.rect(<span class="number">300</span>,<span class="number">300</span>,<span class="number">100</span>,<span class="number">100</span>)</span><br><span class="line">ctx.stroke();</span><br><span class="line"><span class="comment">//以上两句结合为下面一句</span></span><br><span class="line"><span class="comment">//ctx.strokeRect(300,300,100,100)</span></span><br></pre></td></tr></table></figure><h4 id="填充矩形"><a href="#填充矩形" class="headerlink" title="填充矩形"></a>填充矩形</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ctx.rect(<span class="number">300</span>,<span class="number">300</span>,<span class="number">100</span>,<span class="number">100</span>)</span><br><span class="line">ctx.fill();</span><br><span class="line"><span class="comment">//以上两句结合为下面一句</span></span><br><span class="line"><span class="comment">//ctx.fillRect(300,300,100,100)</span></span><br></pre></td></tr></table></figure><h4 id="清除矩形区域"><a href="#清除矩形区域" class="headerlink" title="清除矩形区域"></a>清除矩形区域</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取canvas宽高设置全屏清除</span></span><br><span class="line">ctx.clearRect(<span class="number">0</span>,<span class="number">0</span>,canvas.width,canvas.height);</span><br></pre></td></tr></table></figure><h2 id="arc圆形"><a href="#arc圆形" class="headerlink" title="arc圆形"></a>arc圆形</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">绘制圆路径方法arc(x,y,radius,startAngle,endAngle,bol)</span><br></pre></td></tr></table></figure><p>x,y：中心点<br>radius：半径<br>startAngle：开始角度<br>endAngle：结束角度<br>bol：false:顺时绘制(默认),true:逆时绘制</p><h3 id="绘制下半圆"><a href="#绘制下半圆" class="headerlink" title="绘制下半圆"></a>绘制下半圆</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Math.PI = 180度</span></span><br><span class="line">ctx.arc(<span class="number">200</span>,<span class="number">200</span>,<span class="number">100</span>,<span class="number">0</span>,<span class="built_in">Math</span>.PI,<span class="literal">false</span>)</span><br><span class="line">ctx.stroke();</span><br></pre></td></tr></table></figure><h3 id="绘制上半圆"><a href="#绘制上半圆" class="headerlink" title="绘制上半圆"></a>绘制上半圆</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ctx.arc(<span class="number">200</span>,<span class="number">200</span>,<span class="number">100</span>,<span class="number">0</span>,<span class="built_in">Math</span>.PI,<span class="literal">true</span>)</span><br><span class="line">ctx.stroke();</span><br></pre></td></tr></table></figure><h3 id="绘制整圆"><a href="#绘制整圆" class="headerlink" title="绘制整圆"></a>绘制整圆</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ctx.arc(<span class="number">200</span>,<span class="number">200</span>,<span class="number">100</span>,<span class="number">0</span>,<span class="built_in">Math</span>.PI*<span class="number">2</span>,<span class="literal">true</span>)</span><br><span class="line">ctx.stroke();</span><br></pre></td></tr></table></figure><h3 id="绘制吃豆人"><a href="#绘制吃豆人" class="headerlink" title="绘制吃豆人"></a>绘制吃豆人</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ctx.beginPath();</span><br><span class="line">ctx.moveTo(<span class="number">200</span>,<span class="number">200</span>);</span><br><span class="line">ctx.arc(<span class="number">200</span>,<span class="number">200</span>,<span class="number">100</span>,<span class="number">30</span>*<span class="built_in">Math</span>.PI/<span class="number">180</span>,<span class="number">330</span>*<span class="built_in">Math</span>.PI/<span class="number">180</span>,<span class="literal">false</span>)</span><br><span class="line">ctx.lineTo(<span class="number">200</span>,<span class="number">200</span>)</span><br><span class="line">ctx.fillStyle = <span class="string">&quot;#ebee01&quot;</span>;</span><br><span class="line">ctx.fill()</span><br><span class="line">ctx.closePath();</span><br></pre></td></tr></table></figure><h2 id="arcTo绘制弧度"><a href="#arcTo绘制弧度" class="headerlink" title="arcTo绘制弧度"></a>arcTo绘制弧度</h2><blockquote><p>在坐标50，50的位置画两条线，横长100，竖100，设置一个10像素的圆角</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ctx.beginPath();</span><br><span class="line">ctx.moveTo(<span class="number">50</span>,<span class="number">50</span>);</span><br><span class="line">ctx.lineTo(<span class="number">140</span>,<span class="number">50</span>);</span><br><span class="line">ctx.arcTo(<span class="number">150</span>,<span class="number">50</span>,<span class="number">150</span>,<span class="number">60</span>,<span class="number">10</span>);<span class="comment">//绘制弧度圆角</span></span><br><span class="line">ctx.lineTo(<span class="number">150</span>,<span class="number">150</span>);</span><br><span class="line">ctx.stroke();</span><br></pre></td></tr></table></figure><h2 id="曲线设置"><a href="#曲线设置" class="headerlink" title="曲线设置"></a>曲线设置</h2><blockquote><p>二次贝塞尔曲线方法quadraticCurveTo(cpx,cpy,x,y)</p></blockquote><h3 id="二次贝塞尔曲线，一个控制点，一个终点"><a href="#二次贝塞尔曲线，一个控制点，一个终点" class="headerlink" title="二次贝塞尔曲线，一个控制点，一个终点"></a>二次贝塞尔曲线，一个控制点，一个终点</h3><blockquote><p>三次贝塞尔曲线方法bezierCurveTo(cpx1,cpy1,cpx2,cpy2,x,y)</p></blockquote><h3 id="三次贝塞尔曲线，两个控制点，一个终点"><a href="#三次贝塞尔曲线，两个控制点，一个终点" class="headerlink" title="三次贝塞尔曲线，两个控制点，一个终点"></a>三次贝塞尔曲线，两个控制点，一个终点</h3><h3 id="cpx：曲线控制点x轴位置坐标"><a href="#cpx：曲线控制点x轴位置坐标" class="headerlink" title="cpx：曲线控制点x轴位置坐标"></a>cpx：曲线控制点x轴位置坐标</h3><h3 id="cpy：曲线控制点y轴位置坐标"><a href="#cpy：曲线控制点y轴位置坐标" class="headerlink" title="cpy：曲线控制点y轴位置坐标"></a>cpy：曲线控制点y轴位置坐标</h3><h3 id="x-y：终点位置坐标"><a href="#x-y：终点位置坐标" class="headerlink" title="x,y：终点位置坐标"></a>x,y：终点位置坐标</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//封装画曲线函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params">x,y</span>) </span>&#123;</span><br><span class="line"><span class="comment">//清空画布</span></span><br><span class="line">ctx.clearRect(<span class="number">0</span>,<span class="number">0</span>,canvas.width,canvas.height)</span><br><span class="line"><span class="comment">//绘制曲线</span></span><br><span class="line">ctx.beginPath();</span><br><span class="line">ctx.moveTo(<span class="number">100</span>,<span class="number">100</span>)</span><br><span class="line"><span class="comment">// ctx.lineTo(200,200)</span></span><br><span class="line">ctx.strokeStyle = <span class="string">&quot;blue&quot;</span>;<span class="comment">//设置蓝色</span></span><br><span class="line">ctx.quadraticCurveTo(x,y,<span class="number">200</span>,<span class="number">200</span>)</span><br><span class="line">ctx.stroke();</span><br><span class="line"><span class="comment">//绘制控制点的线</span></span><br><span class="line">ctx.beginPath();</span><br><span class="line">ctx.moveTo(<span class="number">100</span>,<span class="number">100</span>)</span><br><span class="line">ctx.lineTo(x,y)</span><br><span class="line">ctx.strokeStyle = <span class="string">&quot;red&quot;</span>;<span class="comment">//设置红色</span></span><br><span class="line">ctx.stroke();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//拖拽调用画曲线函数查看效果</span></span><br><span class="line"><span class="keyword">var</span> x=<span class="number">0</span>,y=<span class="number">0</span>,bol=<span class="literal">false</span>;</span><br><span class="line">canvas.onmousedown = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">bol = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">canvas.onmousemove = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span> (bol) &#123;</span><br><span class="line">x = e.clientX - canvas.offsetLeft;</span><br><span class="line">y = e.clientY - canvas.offsetTop;</span><br><span class="line">draw(x,y)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">canvas.onmouseup = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">bol = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="转换操作"><a href="#转换操作" class="headerlink" title="转换操作"></a>转换操作</h2><h3 id="缩放scale-x-y"><a href="#缩放scale-x-y" class="headerlink" title="缩放scale(x,y)"></a>缩放scale(x,y)</h3><blockquote><p>缩放当前绘图至更大或更小。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ctx.scale(<span class="number">2</span>,<span class="number">2</span>)<span class="comment">//缩放2倍大小；</span></span><br><span class="line">ctx.fillRect(<span class="number">50</span>,<span class="number">50</span>,<span class="number">100</span>,<span class="number">100</span>)<span class="comment">//绘制出200*200的矩形</span></span><br></pre></td></tr></table></figure><h3 id="旋转rotate-angle"><a href="#旋转rotate-angle" class="headerlink" title="旋转rotate(angle)"></a>旋转rotate(angle)</h3><blockquote><p>旋转当前绘图；angle为旋转的角度，用弧度表示。Math.PI表示180°</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ctx.rotate(<span class="built_in">Math</span>.PI/<span class="number">180</span>*<span class="number">30</span>)<span class="comment">//旋转30度</span></span><br><span class="line">ctx.fillRect(<span class="number">0</span>,<span class="number">0</span>,<span class="number">200</span>,<span class="number">200</span>)<span class="comment">//绘制矩形</span></span><br></pre></td></tr></table></figure><h3 id="偏移translate-x-y"><a href="#偏移translate-x-y" class="headerlink" title="偏移translate(x,y)"></a>偏移translate(x,y)</h3><blockquote><p>为画布的变换矩阵添加水平的和垂直的偏移 ；x、y为在横、纵坐标轴上的偏移量</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ctx.translate(<span class="number">400</span>,<span class="number">400</span>);<span class="comment">//把画布起点位置（0,0）移动到（400,400）的位置</span></span><br><span class="line"><span class="comment">//绘制矩形在画布中心点旋转效果</span></span><br><span class="line"><span class="keyword">var</span> deg = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">deg += <span class="number">1</span>;<span class="comment">//角度递增</span></span><br><span class="line">ctx.save();<span class="comment">//保存当前设置</span></span><br><span class="line"><span class="comment">//清空画布</span></span><br><span class="line">ctx.clearRect(<span class="number">-400</span>,<span class="number">-400</span>,canvas.width,canvas.height)</span><br><span class="line">ctx.rotate(<span class="built_in">Math</span>.PI/<span class="number">180</span>*deg)<span class="comment">//旋转角度</span></span><br><span class="line">ctx.fillRect(<span class="number">-100</span>,<span class="number">-100</span>,<span class="number">200</span>,<span class="number">200</span>)<span class="comment">//绘制矩形</span></span><br><span class="line">ctx.restore();<span class="comment">//返回上一次保存的设置</span></span><br><span class="line">&#125;,<span class="number">30</span>)</span><br></pre></td></tr></table></figure><h2 id="渐变绘制"><a href="#渐变绘制" class="headerlink" title="渐变绘制"></a>渐变绘制</h2><h2 id="线性渐变"><a href="#线性渐变" class="headerlink" title="线性渐变"></a>线性渐变</h2><blockquote><p>createLinearGradient(x1,y1,x2,y2)方法创建线性的渐变对象。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建线性渐变颜色</span></span><br><span class="line"><span class="keyword">var</span> c = ctx.createLinearGradient(<span class="number">0</span>,<span class="number">0</span>,<span class="number">800</span>,<span class="number">800</span>);</span><br><span class="line"><span class="comment">// 添加渐变颜色，渐变百分比0-1；</span></span><br><span class="line">c.addColorStop(<span class="number">0</span>,<span class="string">&quot;red&quot;</span>);</span><br><span class="line">c.addColorStop(<span class="number">0.5</span>,<span class="string">&quot;blue&quot;</span>);</span><br><span class="line">c.addColorStop(<span class="number">1</span>,<span class="string">&quot;yellow&quot;</span>);</span><br><span class="line">ctx.fillStyle = c;<span class="comment">//设置填充颜色为渐变颜色</span></span><br><span class="line">ctx.fillRect(<span class="number">0</span>,<span class="number">0</span>,<span class="number">800</span>,<span class="number">800</span>);<span class="comment">//填充矩形</span></span><br><span class="line">## 径向渐变</span><br><span class="line"></span><br><span class="line">createRadialGradient(x1,y1,r1,x2,y2,r2)方法创建径向的渐变对象。</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建线性渐变颜色</span></span><br><span class="line"><span class="keyword">var</span> c = ctx.createRadialGradient(<span class="number">400</span>,<span class="number">400</span>,<span class="number">0</span>,<span class="number">400</span>,<span class="number">400</span>,<span class="number">400</span>);</span><br><span class="line"><span class="comment">// 添加渐变颜色，渐变百分比0-1；</span></span><br><span class="line">c.addColorStop(<span class="number">0</span>,<span class="string">&quot;red&quot;</span>);</span><br><span class="line">c.addColorStop(<span class="number">0.5</span>,<span class="string">&quot;blue&quot;</span>);</span><br><span class="line">c.addColorStop(<span class="number">1</span>,<span class="string">&quot;yellow&quot;</span>);</span><br><span class="line">ctx.fillStyle = c;<span class="comment">//设置填充颜色为渐变颜色</span></span><br><span class="line">ctx.fillRect(<span class="number">0</span>,<span class="number">0</span>,<span class="number">800</span>,<span class="number">800</span>);<span class="comment">//填充矩形</span></span><br></pre></td></tr></table></figure><h2 id="图像组合"><a href="#图像组合" class="headerlink" title="图像组合"></a>图像组合</h2><h3 id="source-over：为属性globalCompositeOperation属性的默认值表示新图形覆盖在原图形之上"><a href="#source-over：为属性globalCompositeOperation属性的默认值表示新图形覆盖在原图形之上" class="headerlink" title="source-over：为属性globalCompositeOperation属性的默认值表示新图形覆盖在原图形之上"></a>source-over：为属性globalCompositeOperation属性的默认值表示新图形覆盖在原图形之上</h3><h3 id="source-atop：只绘制新图形与原图形相重叠的部分，以及原图形其他部分"><a href="#source-atop：只绘制新图形与原图形相重叠的部分，以及原图形其他部分" class="headerlink" title="source-atop：只绘制新图形与原图形相重叠的部分，以及原图形其他部分"></a>source-atop：只绘制新图形与原图形相重叠的部分，以及原图形其他部分</h3><h3 id="source-in：只绘制新图形与原图形重叠的部分，新图形与原图形其他部分变透明"><a href="#source-in：只绘制新图形与原图形重叠的部分，新图形与原图形其他部分变透明" class="headerlink" title="source-in：只绘制新图形与原图形重叠的部分，新图形与原图形其他部分变透明"></a>source-in：只绘制新图形与原图形重叠的部分，新图形与原图形其他部分变透明</h3><h3 id="source-out：只绘制新图形与原图形不重叠的部分；新图形与原图形其他部分变透明"><a href="#source-out：只绘制新图形与原图形不重叠的部分；新图形与原图形其他部分变透明" class="headerlink" title="source-out：只绘制新图形与原图形不重叠的部分；新图形与原图形其他部分变透明"></a>source-out：只绘制新图形与原图形不重叠的部分；新图形与原图形其他部分变透明</h3><h3 id="destination-over：表示原图形覆盖在新图形之上dest-ination-atop：只绘制原图形与新图形相重叠的部分，以及新图形其他部分"><a href="#destination-over：表示原图形覆盖在新图形之上dest-ination-atop：只绘制原图形与新图形相重叠的部分，以及新图形其他部分" class="headerlink" title="destination-over：表示原图形覆盖在新图形之上dest* ination-atop：只绘制原图形与新图形相重叠的部分，以及新图形其他部分"></a>destination-over：表示原图形覆盖在新图形之上dest* ination-atop：只绘制原图形与新图形相重叠的部分，以及新图形其他部分</h3><h3 id="destination-in：只绘制原图形与新图形重叠的部分，原图形与新图形其他部分变透明"><a href="#destination-in：只绘制原图形与新图形重叠的部分，原图形与新图形其他部分变透明" class="headerlink" title="destination-in：只绘制原图形与新图形重叠的部分，原图形与新图形其他部分变透明"></a>destination-in：只绘制原图形与新图形重叠的部分，原图形与新图形其他部分变透明</h3><h3 id="destination-out：只绘制原图形与新图形不重叠的部分；原图形与新图形其他部分变透明"><a href="#destination-out：只绘制原图形与新图形不重叠的部分；原图形与新图形其他部分变透明" class="headerlink" title="destination-out：只绘制原图形与新图形不重叠的部分；原图形与新图形其他部分变透明"></a>destination-out：只绘制原图形与新图形不重叠的部分；原图形与新图形其他部分变透明</h3><h3 id="lighter：原有图形与新图形都绘制，重叠部分加色处理"><a href="#lighter：原有图形与新图形都绘制，重叠部分加色处理" class="headerlink" title="lighter：原有图形与新图形都绘制，重叠部分加色处理"></a>lighter：原有图形与新图形都绘制，重叠部分加色处理</h3><h3 id="xor：只绘制原、新图形不重叠之处，其他做透明色"><a href="#xor：只绘制原、新图形不重叠之处，其他做透明色" class="headerlink" title="xor：只绘制原、新图形不重叠之处，其他做透明色"></a>xor：只绘制原、新图形不重叠之处，其他做透明色</h3><h3 id="copy：只绘制新图形，覆盖掉原图"><a href="#copy：只绘制新图形，覆盖掉原图" class="headerlink" title="copy：只绘制新图形，覆盖掉原图"></a>copy：只绘制新图形，覆盖掉原图</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;source-over&#x27;</span>,<span class="string">&#x27;source-in&#x27;</span>,<span class="string">&#x27;source-out&#x27;</span>,<span class="string">&#x27;source-atop&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;destination-over&#x27;</span>,<span class="string">&#x27;destination-in&#x27;</span>,<span class="string">&#x27;destination-out&#x27;</span>,<span class="string">&#x27;destination-atop&#x27;</span>,<span class="string">&#x27;lighter&#x27;</span>,<span class="string">&#x27;xor&#x27;</span>,<span class="string">&#x27;copy&#x27;</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line"><span class="comment">//创建canvas</span></span><br><span class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.createElement(<span class="string">&quot;canvas&quot;</span>);</span><br><span class="line">canvas.width = <span class="number">200</span>;</span><br><span class="line">canvas.height = <span class="number">200</span>;</span><br><span class="line"><span class="keyword">var</span> ctx = canvas.getContext(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//绘制一个矩形</span></span><br><span class="line">ctx.beginPath();</span><br><span class="line">ctx.rect(<span class="number">20</span>,<span class="number">30</span>,<span class="number">100</span>,<span class="number">100</span>);</span><br><span class="line">ctx.fillStyle = <span class="string">&quot;blue&quot;</span>;</span><br><span class="line">ctx.fill()</span><br><span class="line"></span><br><span class="line"><span class="comment">//绘制二个圆</span></span><br><span class="line">ctx.globalCompositeOperation = arr[i];<span class="comment">//设置组合方式</span></span><br><span class="line">ctx.beginPath();</span><br><span class="line">ctx.arc(<span class="number">120</span>,<span class="number">130</span>,<span class="number">50</span>,<span class="number">0</span>,<span class="built_in">Math</span>.PI*<span class="number">2</span>);</span><br><span class="line">ctx.fillStyle = <span class="string">&quot;red&quot;</span>;</span><br><span class="line">ctx.fill()</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.body.appendChild(canvas);</span><br><span class="line"><span class="comment">//输出当前组合效果的属性文字</span></span><br><span class="line">ctx.globalCompositeOperation = arr[<span class="number">0</span>];<span class="comment">//设置为默认的组合方式</span></span><br><span class="line">ctx.font = <span class="string">&quot;20px 黑体&quot;</span>;</span><br><span class="line">ctx.textAlign = <span class="string">&quot;center&quot;</span>;</span><br><span class="line">ctx.textBaseline = <span class="string">&quot;top&quot;</span>;</span><br><span class="line">ctx.fillText(arr[i],<span class="number">100</span>,<span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="绘制图像"><a href="#绘制图像" class="headerlink" title="绘制图像"></a>绘制图像</h2><h3 id="drawImage-img-x-y"><a href="#drawImage-img-x-y" class="headerlink" title="drawImage(img,x,y)"></a>drawImage(img,x,y)</h3><blockquote><p>把图片绘制在画布的指定x,y坐标上</p></blockquote><h6 id="img：图片对象"><a href="#img：图片对象" class="headerlink" title="img：图片对象"></a>img：图片对象</h6><h6 id="x：图片横坐标的起始值"><a href="#x：图片横坐标的起始值" class="headerlink" title="x：图片横坐标的起始值"></a>x：图片横坐标的起始值</h6><h6 id="y：图片纵坐标的起始值"><a href="#y：图片纵坐标的起始值" class="headerlink" title="y：图片纵坐标的起始值"></a>y：图片纵坐标的起始值</h6><h6 id="drawImage-img-x-y-w-h"><a href="#drawImage-img-x-y-w-h" class="headerlink" title="drawImage(img,x,y,w,h)"></a>drawImage(img,x,y,w,h)</h6><blockquote><p>绘制固定宽高的图像</p></blockquote><h6 id="img：图片对象-1"><a href="#img：图片对象-1" class="headerlink" title="img：图片对象"></a>img：图片对象</h6><h6 id="x：图片横坐标的起始值-1"><a href="#x：图片横坐标的起始值-1" class="headerlink" title="x：图片横坐标的起始值"></a>x：图片横坐标的起始值</h6><h6 id="y：图片纵坐标的起始值-1"><a href="#y：图片纵坐标的起始值-1" class="headerlink" title="y：图片纵坐标的起始值"></a>y：图片纵坐标的起始值</h6><h6 id="w：在画布中图片显示的宽度"><a href="#w：在画布中图片显示的宽度" class="headerlink" title="w：在画布中图片显示的宽度"></a>w：在画布中图片显示的宽度</h6><h6 id="h：在画布中图片显示的高度"><a href="#h：在画布中图片显示的高度" class="headerlink" title="h：在画布中图片显示的高度"></a>h：在画布中图片显示的高度</h6><h3 id="drawImage-img-x-y-w-h-rx-ry-rw-rh"><a href="#drawImage-img-x-y-w-h-rx-ry-rw-rh" class="headerlink" title="drawImage(img,x,y,w,h,rx,ry,rw,rh)"></a>drawImage(img,x,y,w,h,rx,ry,rw,rh)</h3><blockquote><p>复制或放大图像局部：</p></blockquote><h6 id="img：图片对象-2"><a href="#img：图片对象-2" class="headerlink" title="img：图片对象"></a>img：图片对象</h6><h6 id="x、y：源图片的起点坐标"><a href="#x、y：源图片的起点坐标" class="headerlink" title="x、y：源图片的起点坐标"></a>x、y：源图片的起点坐标</h6><h6 id="w、h：在源图片上裁剪的宽、高"><a href="#w、h：在源图片上裁剪的宽、高" class="headerlink" title="w、h：在源图片上裁剪的宽、高"></a>w、h：在源图片上裁剪的宽、高</h6><h6 id="rx、ry：显示在画布中的坐标"><a href="#rx、ry：显示在画布中的坐标" class="headerlink" title="rx、ry：显示在画布中的坐标"></a>rx、ry：显示在画布中的坐标</h6><h6 id="rw、rh：显示在画布中的宽、高"><a href="#rw、rh：显示在画布中的宽、高" class="headerlink" title="rw、rh：显示在画布中的宽、高"></a>rw、rh：显示在画布中的宽、高</h6><h2 id="平铺createPattern-img-type"><a href="#平铺createPattern-img-type" class="headerlink" title="平铺createPattern(img,type)"></a>平铺createPattern(img,type)</h2><blockquote><p>创建背景对象可设置平铺</p></blockquote><h6 id="img：图片对象-3"><a href="#img：图片对象-3" class="headerlink" title="img：图片对象"></a>img：图片对象</h6><h6 id="type："><a href="#type：" class="headerlink" title="type："></a>type：</h6><h6 id="repeat：整个画布平铺"><a href="#repeat：整个画布平铺" class="headerlink" title="repeat：整个画布平铺"></a>repeat：整个画布平铺</h6><h6 id="repeat-x：在x轴方向上平铺"><a href="#repeat-x：在x轴方向上平铺" class="headerlink" title="repeat-x：在x轴方向上平铺"></a>repeat-x：在x轴方向上平铺</h6><h6 id="repeat-y：在y轴方向上平铺"><a href="#repeat-y：在y轴方向上平铺" class="headerlink" title="repeat-y：在y轴方向上平铺"></a>repeat-y：在y轴方向上平铺</h6><h6 id="no-repeat：不平铺"><a href="#no-repeat：不平铺" class="headerlink" title="no-repeat：不平铺"></a>no-repeat：不平铺</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bg = ctx.createPattern(img,<span class="string">&quot;repeat&quot;</span>);</span><br><span class="line">ctx.fillStyle = bg;</span><br><span class="line">ctx.fillRect(<span class="number">0</span>,<span class="number">0</span>,canvas.width,canvas.height);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;什么是canvas&quot;&gt;&lt;a href=&quot;#什么是canvas&quot; class=&quot;headerlink&quot; title=&quot;什么是canvas&quot;&gt;&lt;/a&gt;什么是canvas&lt;/h2&gt;&lt;h5 id=&quot;canvas-元素用于在网页上绘制图形。HTML5-的-canvas-元素</summary>
      
    
    
    
    <category term="html5" scheme="http://example.com/categories/html5/"/>
    
    
  </entry>
  
  <entry>
    <title>JavaScript 面向对象</title>
    <link href="http://example.com/2018/06/23/JavaScript%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <id>http://example.com/2018/06/23/JavaScript%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</id>
    <published>2018-06-23T05:06:43.000Z</published>
    <updated>2019-07-17T08:26:31.964Z</updated>
    
    <content type="html"><![CDATA[<h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><h4 id="OOP（Object-oriented-programming）面向对象编程，使用面向对象方法可以使代码更简洁、更易于维护，并且具有更强的可重用性。"><a href="#OOP（Object-oriented-programming）面向对象编程，使用面向对象方法可以使代码更简洁、更易于维护，并且具有更强的可重用性。" class="headerlink" title="OOP（Object-oriented programming）面向对象编程，使用面向对象方法可以使代码更简洁、更易于维护，并且具有更强的可重用性。"></a>OOP（Object-oriented programming）面向对象编程，使用面向对象方法可以使代码更简洁、更易于维护，并且具有更强的可重用性。</h4><h4 id="ECMA关于对象的定义是：”无序属性的集合，其属性可以包含基本值、对象或者函数。“对象的每个属性或方法都有一个名字，而每个名字都映射到一个值。"><a href="#ECMA关于对象的定义是：”无序属性的集合，其属性可以包含基本值、对象或者函数。“对象的每个属性或方法都有一个名字，而每个名字都映射到一个值。" class="headerlink" title="ECMA关于对象的定义是：”无序属性的集合，其属性可以包含基本值、对象或者函数。“对象的每个属性或方法都有一个名字，而每个名字都映射到一个值。"></a>ECMA关于对象的定义是：”无序属性的集合，其属性可以包含基本值、对象或者函数。“对象的每个属性或方法都有一个名字，而每个名字都映射到一个值。</h4><h5 id="对象：属性和方法的集合"><a href="#对象：属性和方法的集合" class="headerlink" title="对象：属性和方法的集合"></a>对象：属性和方法的集合</h5><h5 id="属性：变量"><a href="#属性：变量" class="headerlink" title="属性：变量"></a>属性：变量</h5><h5 id="方法：函数"><a href="#方法：函数" class="headerlink" title="方法：函数"></a>方法：函数</h5><h5 id="类：一组同样属性和方法的对象的集合"><a href="#类：一组同样属性和方法的对象的集合" class="headerlink" title="类：一组同样属性和方法的对象的集合"></a>类：一组同样属性和方法的对象的集合</h5><h5 id="封装：封装就是把对象的属性和行为结合成一个独立的相同单位，并尽可能隐蔽对象的内部细节"><a href="#封装：封装就是把对象的属性和行为结合成一个独立的相同单位，并尽可能隐蔽对象的内部细节" class="headerlink" title="封装：封装就是把对象的属性和行为结合成一个独立的相同单位，并尽可能隐蔽对象的内部细节"></a>封装：封装就是把对象的属性和行为结合成一个独立的相同单位，并尽可能隐蔽对象的内部细节</h5><h5 id="继承：面向对象开发方法建立在继承概念的基础上，这种策略提高了代码的重用性。"><a href="#继承：面向对象开发方法建立在继承概念的基础上，这种策略提高了代码的重用性。" class="headerlink" title="继承：面向对象开发方法建立在继承概念的基础上，这种策略提高了代码的重用性。"></a>继承：面向对象开发方法建立在继承概念的基础上，这种策略提高了代码的重用性。</h5><h5 id="多态：对象的多态性是指在父类中定义的属性或行为被子类继承之后，可以具有不同的数据类型或表现出不同的行为。这使得同一个属性或行为在父类及其各个子类中具有不同的语义。"><a href="#多态：对象的多态性是指在父类中定义的属性或行为被子类继承之后，可以具有不同的数据类型或表现出不同的行为。这使得同一个属性或行为在父类及其各个子类中具有不同的语义。" class="headerlink" title="多态：对象的多态性是指在父类中定义的属性或行为被子类继承之后，可以具有不同的数据类型或表现出不同的行为。这使得同一个属性或行为在父类及其各个子类中具有不同的语义。"></a>多态：对象的多态性是指在父类中定义的属性或行为被子类继承之后，可以具有不同的数据类型或表现出不同的行为。这使得同一个属性或行为在父类及其各个子类中具有不同的语义。</h5><h2 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br></pre></td></tr></table></figure><h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><blockquote><p>工厂模式就是在函数内创建一个对象，给对象添加属性和方法再返回对象。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;<span class="comment">//创建一个空对象</span></span><br><span class="line">obj.name = name;<span class="comment">//给对象加一个name属性</span></span><br><span class="line">obj.show = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">//给对象加一个show方法</span></span><br><span class="line">    <span class="built_in">console</span>.log(obj.name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> obj;<span class="comment">//把创建的对象返回出去</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = Person(<span class="string">&quot;obj&quot;</span>);</span><br><span class="line">obj.show();</span><br></pre></td></tr></table></figure><h2 id="构造函数模式"><a href="#构造函数模式" class="headerlink" title="构造函数模式"></a>构造函数模式</h2><blockquote><p>构造函数是通过new来创建对象，不需要创建一个空对象，直接使用this对象，也不需要返回一个对象，这是构造函数模式比工厂模式要好的地方。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line"><span class="built_in">this</span>.show = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> Person(<span class="string">&quot;obj&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h2><blockquote><p>每个函数都有prototype（原型）属性，通过函数创建的对象有proto（原型）属性，这个属性是一个指针，指向一个对象，所有对象都可以使用原型里面的属性和方法。原型对象都有constructor属性，该属性对应创建所有指向原型的构造函数。</p></blockquote><h5 id="使用构造函数每次创建对象的时候都会重新创建一次方法，创建两次或多次完全相同的方法是很浪费内存的，所以完全相同的方法应该使用原型来创建。"><a href="#使用构造函数每次创建对象的时候都会重新创建一次方法，创建两次或多次完全相同的方法是很浪费内存的，所以完全相同的方法应该使用原型来创建。" class="headerlink" title="使用构造函数每次创建对象的时候都会重新创建一次方法，创建两次或多次完全相同的方法是很浪费内存的，所以完全相同的方法应该使用原型来创建。"></a>使用构造函数每次创建对象的时候都会重新创建一次方法，创建两次或多次完全相同的方法是很浪费内存的，所以完全相同的方法应该使用原型来创建。</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line"><span class="comment">// this.show = function()&#123;</span></span><br><span class="line"><span class="comment">// console.log(this.name);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.show = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj1 = <span class="keyword">new</span> Person(<span class="string">&quot;obj1&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> obj2 = <span class="keyword">new</span> Person(<span class="string">&quot;obj2&quot;</span>);</span><br><span class="line">obj1.show();</span><br><span class="line">obj2.show();</span><br></pre></td></tr></table></figure><h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><blockquote><p>所有对象和原型都有父级原型，这种原型的层层关系叫原型链。</p></blockquote><p><img src="https://s2.ax1x.com/2019/07/17/ZLMjmD.jpg" alt="我是图片"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">this</span>.name = <span class="string">&quot;a&quot;</span>;</span><br><span class="line"><span class="built_in">this</span>.num1 = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//设置B的原型是A的对象</span></span><br><span class="line">B.prototype = <span class="keyword">new</span> A();</span><br><span class="line">B.prototype.constructor = B;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.name = <span class="string">&quot;b&quot;</span>;</span><br><span class="line"><span class="built_in">this</span>.num2 = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//设置C的原型是B的对象</span></span><br><span class="line">C.prototype = <span class="keyword">new</span> B();</span><br><span class="line">C.prototype.constructor = C;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">C</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.name = <span class="string">&quot;c&quot;</span>;</span><br><span class="line"><span class="built_in">this</span>.num3 = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> A();</span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> B();</span><br><span class="line"><span class="keyword">var</span> c = <span class="keyword">new</span> C();</span><br><span class="line"><span class="built_in">console</span>.log(c);<span class="comment">//查看c对象的原型链</span></span><br><span class="line"><span class="comment">/*原型链的作用域</span></span><br><span class="line"><span class="comment">父级获取不了子级的属性</span></span><br><span class="line"><span class="comment">子级可以获取到父级的属性</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">console</span>.log(a.num1,a.num2,a.num3)<span class="comment">//1 undefined undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(b.num1,b.num2,b.num3)<span class="comment">//1 2 undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(c.num1,c.num2,c.num3)<span class="comment">//1 2 3</span></span><br></pre></td></tr></table></figure><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><blockquote><p>有些功能需要多个对象的功能结合起来，所以需要一些对象继承其他对象的一些属性和方法来实现。</p></blockquote><h3 id="call和apply方法继承"><a href="#call和apply方法继承" class="headerlink" title="call和apply方法继承"></a>call和apply方法继承</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line"><span class="built_in">this</span>.show1 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.show2 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//继承Person原型里的属性和方法</span></span><br><span class="line">Son.prototype = <span class="keyword">new</span> Person;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line"><span class="comment">//使用call或者apply继承Person构造函数里的属性和方法，原型的方法是继承不了的</span></span><br><span class="line">Person.apply(<span class="built_in">this</span>,<span class="built_in">arguments</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Son继承了Person后，Son构造出来的对象也可以使用Person的属性和方法</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> Son(<span class="string">&quot;obj&quot;</span>);</span><br><span class="line">obj.show1();<span class="comment">//输出obj</span></span><br><span class="line">obj.show2();<span class="comment">//报错</span></span><br></pre></td></tr></table></figure><h2 id="拷贝继承"><a href="#拷贝继承" class="headerlink" title="拷贝继承"></a>拷贝继承</h2><blockquote><p>通过循环遍历拷贝对象里面的所有属性和方法。</p></blockquote><h2 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h2><blockquote><p>在JS中赋值如果是对象就不知拷贝了，是指向，两个变量都会指向同一个对象。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">copy</span>(<span class="params">child,parent</span>)</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> parent)&#123;</span><br><span class="line">child[key] = parent[key]<span class="comment">//拷贝内容</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">arr:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;&#125;;</span><br><span class="line">copy(obj2,obj1);<span class="comment">//obj2拷贝obj1的内容</span></span><br><span class="line">obj2.arr[<span class="number">1</span>] = <span class="number">6</span>;<span class="comment">//改变obj2里面的数组内容</span></span><br><span class="line"><span class="comment">//改变的是obj2的数组obj1里面的数组也改变了</span></span><br><span class="line"><span class="built_in">console</span>.log(obj1.arr);<span class="comment">//输出1,6,3,4</span></span><br></pre></td></tr></table></figure><h2 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h2><blockquote><p>通过判断是否对象结构递归方法实现对象的拷贝。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//深拷贝函数，使用到递归方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">copy</span>(<span class="params">child,parent</span>)</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> parent)&#123;</span><br><span class="line">   <span class="keyword">if</span> (<span class="keyword">typeof</span> parent[key]==<span class="string">&quot;object&quot;</span>) &#123;<span class="comment">//判断是否对象</span></span><br><span class="line">   child[key] = (parent[key].constructor == <span class="built_in">Array</span>)?[]:&#123;&#125;;<span class="comment">//判断对象是否数组,是创建数组否则创建对象</span></span><br><span class="line">   copy(child[key],parent[key])<span class="comment">//递归循环复制对象内容</span></span><br><span class="line">   &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">   child[key] = parent[key]<span class="comment">//拷贝内容</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">arr:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;&#125;;</span><br><span class="line">copy(obj2,obj1);<span class="comment">//obj2拷贝obj1的内容</span></span><br><span class="line">obj2.arr[<span class="number">1</span>] = <span class="number">6</span>;<span class="comment">//改变obj2里面的数组内容</span></span><br><span class="line"><span class="comment">//通过深拷贝的obj2怎么改变也不会影响到obj1了</span></span><br><span class="line"><span class="built_in">console</span>.log(obj1.arr);<span class="comment">//输出1,2,3,4</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;面向对象&quot;&gt;&lt;a href=&quot;#面向对象&quot; class=&quot;headerlink&quot; title=&quot;面向对象&quot;&gt;&lt;/a&gt;面向对象&lt;/h2&gt;&lt;h4 id=&quot;OOP（Object-oriented-programming）面向对象编程，使用面向对象方法可以使代码更简洁、更</summary>
      
    
    
    
    <category term="js高级" scheme="http://example.com/categories/js%E9%AB%98%E7%BA%A7/"/>
    
    
  </entry>
  
  <entry>
    <title>JavaScript动画</title>
    <link href="http://example.com/2018/06/22/JavaScript%E5%8A%A8%E7%94%BB/"/>
    <id>http://example.com/2018/06/22/JavaScript%E5%8A%A8%E7%94%BB/</id>
    <published>2018-06-22T05:06:43.000Z</published>
    <updated>2019-07-17T08:26:18.412Z</updated>
    
    <content type="html"><![CDATA[<h2 id="动画帧"><a href="#动画帧" class="headerlink" title="动画帧"></a>动画帧</h2><h5 id="帧数就是在1秒钟时间里传输的图片的量，也可以理解为图形处理器每秒钟能够刷新几次，通常用fps（Frames-Per-Second）表示。每一帧都是静止的图象，快速连续地显示帧便形成了运动的假象。高的帧率可以得到更流畅、更逼真的动画。每秒钟帧数-fps-愈多，所显示的动作就会愈流畅。"><a href="#帧数就是在1秒钟时间里传输的图片的量，也可以理解为图形处理器每秒钟能够刷新几次，通常用fps（Frames-Per-Second）表示。每一帧都是静止的图象，快速连续地显示帧便形成了运动的假象。高的帧率可以得到更流畅、更逼真的动画。每秒钟帧数-fps-愈多，所显示的动作就会愈流畅。" class="headerlink" title="帧数就是在1秒钟时间里传输的图片的量，也可以理解为图形处理器每秒钟能够刷新几次，通常用fps（Frames Per Second）表示。每一帧都是静止的图象，快速连续地显示帧便形成了运动的假象。高的帧率可以得到更流畅、更逼真的动画。每秒钟帧数 (fps) 愈多，所显示的动作就会愈流畅。"></a>帧数就是在1秒钟时间里传输的图片的量，也可以理解为图形处理器每秒钟能够刷新几次，通常用fps（Frames Per Second）表示。每一帧都是静止的图象，快速连续地显示帧便形成了运动的假象。高的帧率可以得到更流畅、更逼真的动画。每秒钟帧数 (fps) 愈多，所显示的动作就会愈流畅。</h5><h2 id="元素移动"><a href="#元素移动" class="headerlink" title="元素移动"></a>元素移动</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取元素DIV</span></span><br><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">&quot;div&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> x = <span class="number">0</span>;<span class="comment">//定义x变量用于控制DIVx轴移动</span></span><br><span class="line"><span class="keyword">var</span> timer = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">x += <span class="number">2</span>;<span class="comment">//每帧移动2像素</span></span><br><span class="line"><span class="keyword">if</span> (x&gt;=<span class="number">200</span>) &#123;<span class="comment">//判断移到200像素的位置</span></span><br><span class="line"><span class="built_in">clearInterval</span>(timer);<span class="comment">//停止定时器</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//改变DIV样式left的位置</span></span><br><span class="line">div.style.left = x+<span class="string">&quot;px&quot;</span>;</span><br><span class="line">&#125;,<span class="number">1000</span>/<span class="number">60</span>)<span class="comment">//计算每秒60帧的速度</span></span><br></pre></td></tr></table></figure><h3 id="requestAnimationFrame函数"><a href="#requestAnimationFrame函数" class="headerlink" title="requestAnimationFrame函数"></a>requestAnimationFrame函数</h3><h5 id="用js实现动画一般使用一个定时器来循环每隔几毫秒移元素实现动画效果。在某些性能较差的设备上设置的毫秒数可能会超出设备的速度，从而导致卡顿。requestAnimationFrame-函数就是用优化卡顿问题而出现的。"><a href="#用js实现动画一般使用一个定时器来循环每隔几毫秒移元素实现动画效果。在某些性能较差的设备上设置的毫秒数可能会超出设备的速度，从而导致卡顿。requestAnimationFrame-函数就是用优化卡顿问题而出现的。" class="headerlink" title="用js实现动画一般使用一个定时器来循环每隔几毫秒移元素实现动画效果。在某些性能较差的设备上设置的毫秒数可能会超出设备的速度，从而导致卡顿。requestAnimationFrame()函数就是用优化卡顿问题而出现的。"></a>用js实现动画一般使用一个定时器来循环每隔几毫秒移元素实现动画效果。在某些性能较差的设备上设置的毫秒数可能会超出设备的速度，从而导致卡顿。requestAnimationFrame()函数就是用优化卡顿问题而出现的。</h5><h5 id="requestAnimationFrame会跟着设备的频率速度来执行每一帧的动画，这会减少CPU，内存的压力，节省电池电量。一般浏览器的显示频率是16-7ms也就是每秒60帧。"><a href="#requestAnimationFrame会跟着设备的频率速度来执行每一帧的动画，这会减少CPU，内存的压力，节省电池电量。一般浏览器的显示频率是16-7ms也就是每秒60帧。" class="headerlink" title="requestAnimationFrame会跟着设备的频率速度来执行每一帧的动画，这会减少CPU，内存的压力，节省电池电量。一般浏览器的显示频率是16.7ms也就是每秒60帧。"></a>requestAnimationFrame会跟着设备的频率速度来执行每一帧的动画，这会减少CPU，内存的压力，节省电池电量。一般浏览器的显示频率是16.7ms也就是每秒60帧。</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取元素DIV</span></span><br><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">&quot;div&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> x = <span class="number">0</span>;<span class="comment">//定义x变量用于控制DIVx轴移动</span></span><br><span class="line">requestAnimationFrame(<span class="function"><span class="keyword">function</span> <span class="title">step</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">x += <span class="number">2</span>;<span class="comment">//每帧移动2像素</span></span><br><span class="line"><span class="comment">//改变DIV样式left的位置</span></span><br><span class="line">div.style.left = x+<span class="string">&quot;px&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (x&lt;<span class="number">200</span>) &#123;<span class="comment">//判断移到未到200像素时</span></span><br><span class="line">requestAnimationFrame(step)<span class="comment">//执行下一帧</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">requestAnimationFrame兼容写法如下</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.requestAnimationFrame = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span>  <span class="built_in">window</span>.requestAnimationFrame ||</span><br><span class="line"><span class="built_in">window</span>.webkitRequestAnimationFrame ||</span><br><span class="line"><span class="built_in">window</span>.mozRequestAnimationFrame ||</span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params"> callback </span>)</span>&#123;</span><br><span class="line">    <span class="built_in">window</span>.setTimeout(callback, <span class="number">1000</span> / <span class="number">60</span>);</span><br><span class="line">&#125;;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h2 id="封装动画函数例子"><a href="#封装动画函数例子" class="headerlink" title="封装动画函数例子"></a>封装动画函数例子</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">&quot;div&quot;</span>);</span><br><span class="line"><span class="comment">/*封装move动画函数以下是所需参数</span></span><br><span class="line"><span class="comment">self:获取动画元素</span></span><br><span class="line"><span class="comment">attr:改变的属性</span></span><br><span class="line"><span class="comment">dis:动画移动的距离</span></span><br><span class="line"><span class="comment">endT:动画移动的时间</span></span><br><span class="line"><span class="comment">callback:回调函数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">move</span>(<span class="params">self,attr,dis,endT,callback</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> T = <span class="built_in">Date</span>.now();<span class="comment">//获取当前时间</span></span><br><span class="line">requestAnimationFrame(<span class="function"><span class="keyword">function</span> <span class="title">step</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">// 计算动画时间的进度比例</span></span><br><span class="line"><span class="keyword">var</span> p = <span class="built_in">Math</span>.min(<span class="number">1</span>, (<span class="built_in">Date</span>.now() - T) / endT);</span><br><span class="line"><span class="comment">// dis*p根据比例和距离计算元素移动的位置</span></span><br><span class="line">self.style[attr] = dis*p + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(p &lt; <span class="number">1</span>)&#123;</span><br><span class="line">    <span class="comment">//p小于1时动画时间未结束</span></span><br><span class="line">    requestAnimationFrame(step);<span class="comment">//执行下一帧动画</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">// 判断callback有传参就执行callback函数</span></span><br><span class="line">    callback &amp;&amp; callback();</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//执行动画函数往右移动200像素</span></span><br><span class="line">move(div,<span class="string">&quot;left&quot;</span>,<span class="number">200</span>,<span class="number">2000</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">//执行动画函数往下移动200像素</span></span><br><span class="line">move(div,<span class="string">&quot;top&quot;</span>,<span class="number">200</span>,<span class="number">2000</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="加速度动画"><a href="#加速度动画" class="headerlink" title="加速度动画"></a>加速度动画</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> divs = <span class="built_in">document</span>.querySelectorAll(<span class="string">&quot;div&quot;</span>);</span><br><span class="line"><span class="comment">/*封装动画函数</span></span><br><span class="line"><span class="comment">self:获取动画元素</span></span><br><span class="line"><span class="comment">type:动画类型</span></span><br><span class="line"><span class="comment">attr:改变的属性</span></span><br><span class="line"><span class="comment">dis:动画移动的距离</span></span><br><span class="line"><span class="comment">endT:动画移动的时间</span></span><br><span class="line"><span class="comment">callback:回调函数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">move</span>(<span class="params">self,type,attr,dis,endT,callback</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> T = <span class="built_in">Date</span>.now();<span class="comment">//获取当前时间</span></span><br><span class="line">requestAnimationFrame(<span class="function"><span class="keyword">function</span> <span class="title">step</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">// 计算动画时间的进度比例</span></span><br><span class="line"><span class="keyword">var</span> p = <span class="built_in">Math</span>.min(<span class="number">1</span>, (<span class="built_in">Date</span>.now() - T) / endT);</span><br><span class="line"><span class="keyword">switch</span>(type)&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;linear&quot;</span>:</span><br><span class="line"><span class="comment">// 计算每帧均速移动的位置</span></span><br><span class="line"><span class="keyword">var</span> site = dis*p;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;easeIn&quot;</span>:</span><br><span class="line"><span class="comment">// 计算每帧加速移动的位置</span></span><br><span class="line"><span class="keyword">var</span> site = dis*p*p;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 设置元素移动的位置</span></span><br><span class="line">self.style[attr] = site + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(p &lt; <span class="number">1</span>)&#123;</span><br><span class="line">    <span class="comment">//p小于1时动画时间未结束</span></span><br><span class="line">    requestAnimationFrame(step);<span class="comment">//执行下一帧动画</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">// 判断callback有传参就执行callback函数</span></span><br><span class="line">    callback &amp;&amp; callback();</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//执行动画函数往右移动400像素</span></span><br><span class="line">move(divs[<span class="number">0</span>],<span class="string">&quot;linear&quot;</span>,<span class="string">&quot;left&quot;</span>,<span class="number">400</span>,<span class="number">1000</span>);</span><br><span class="line">move(divs[<span class="number">1</span>],<span class="string">&quot;easeIn&quot;</span>,<span class="string">&quot;left&quot;</span>,<span class="number">400</span>,<span class="number">1000</span>);</span><br></pre></td></tr></table></figure><h2 id="减速度动画"><a href="#减速度动画" class="headerlink" title="减速度动画"></a>减速度动画</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> divs = <span class="built_in">document</span>.querySelectorAll(<span class="string">&quot;div&quot;</span>);</span><br><span class="line"><span class="comment">/*封装动画函数</span></span><br><span class="line"><span class="comment">self:获取动画元素</span></span><br><span class="line"><span class="comment">type:动画类型</span></span><br><span class="line"><span class="comment">attr:改变的属性</span></span><br><span class="line"><span class="comment">dis:动画移动的距离</span></span><br><span class="line"><span class="comment">endT:动画移动的时间</span></span><br><span class="line"><span class="comment">callback:回调函数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">move</span>(<span class="params">self,type,attr,dis,endT,callback</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> T = <span class="built_in">Date</span>.now();<span class="comment">//获取当前时间</span></span><br><span class="line">requestAnimationFrame(<span class="function"><span class="keyword">function</span> <span class="title">step</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">// 计算动画时间的进度比例</span></span><br><span class="line"><span class="keyword">var</span> p = <span class="built_in">Math</span>.min(<span class="number">1</span>, (<span class="built_in">Date</span>.now() - T) / endT);</span><br><span class="line"><span class="keyword">switch</span>(type)&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;linear&quot;</span>:</span><br><span class="line"><span class="comment">// 计算每帧均速移动的位置</span></span><br><span class="line"><span class="keyword">var</span> site = dis*p;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;easeIn&quot;</span>:</span><br><span class="line"><span class="comment">// 计算每帧加速移动的位置</span></span><br><span class="line"><span class="keyword">var</span> site = dis*p*p;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;easeOut&quot;</span>:</span><br><span class="line"><span class="comment">// 计算每帧减速移动的位置</span></span><br><span class="line"><span class="keyword">var</span> site = dis*p*(<span class="number">2</span>-p);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 设置元素移动的位置</span></span><br><span class="line">self.style[attr] = site + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(p &lt; <span class="number">1</span>)&#123;</span><br><span class="line">    <span class="comment">//p小于1时动画时间未结束</span></span><br><span class="line">    requestAnimationFrame(step);<span class="comment">//执行下一帧动画</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">// 判断callback有传参就执行callback函数</span></span><br><span class="line">    callback &amp;&amp; callback();</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//执行动画函数往右移动200像素</span></span><br><span class="line">move(divs[<span class="number">0</span>],<span class="string">&quot;linear&quot;</span>,<span class="string">&quot;left&quot;</span>,<span class="number">400</span>,<span class="number">1000</span>);</span><br><span class="line">move(divs[<span class="number">1</span>],<span class="string">&quot;easeOut&quot;</span>,<span class="string">&quot;left&quot;</span>,<span class="number">400</span>,<span class="number">1000</span>);</span><br></pre></td></tr></table></figure><h2 id="抛物线动画"><a href="#抛物线动画" class="headerlink" title="抛物线动画"></a>抛物线动画</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">&quot;.d2&quot;</span>);</span><br><span class="line"><span class="comment">/*封装动画函数</span></span><br><span class="line"><span class="comment">self:获取动画元素</span></span><br><span class="line"><span class="comment">dis:动画移动的距离</span></span><br><span class="line"><span class="comment">endT:动画移动的时间</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">move</span>(<span class="params">self,dis,endT</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> T = <span class="built_in">Date</span>.now();<span class="comment">//获取当前时间</span></span><br><span class="line">requestAnimationFrame(<span class="function"><span class="keyword">function</span> <span class="title">step</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">// 计算动画时间的进度比例</span></span><br><span class="line"><span class="keyword">var</span> p = <span class="built_in">Math</span>.min(<span class="number">1</span>, (<span class="built_in">Date</span>.now() - T) / endT);</span><br><span class="line"><span class="comment">// x轴和y轴移动速度不一样就可实现抛物线移动</span></span><br><span class="line">self.style.left = dis*p*(<span class="number">2</span>-p) + <span class="string">&#x27;px&#x27;</span>;<span class="comment">//加速移动</span></span><br><span class="line">self.style.top = dis*p*p + <span class="string">&#x27;px&#x27;</span>;<span class="comment">//减速移动</span></span><br><span class="line"><span class="keyword">if</span>(p &lt; <span class="number">1</span>)&#123;</span><br><span class="line">    <span class="comment">//p小于1时动画时间未结束</span></span><br><span class="line">    requestAnimationFrame(step);<span class="comment">//执行下一帧动画</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//执行动画函数往右移动200像素</span></span><br><span class="line">move(div,<span class="number">300</span>,<span class="number">1000</span>);</span><br></pre></td></tr></table></figure><h2 id="Tween-js动画效果库"><a href="#Tween-js动画效果库" class="headerlink" title="Tween.js动画效果库"></a>Tween.js动画效果库</h2><h3 id="Tween-js用法"><a href="#Tween-js用法" class="headerlink" title="Tween.js用法"></a>Tween.js用法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">&quot;div&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> start = <span class="number">0</span>;<span class="comment">//开始位置</span></span><br><span class="line"><span class="keyword">var</span> dis = <span class="number">200</span>;<span class="comment">//移动的距离</span></span><br><span class="line"><span class="keyword">var</span> T = <span class="number">0</span>;<span class="comment">//帧数位置</span></span><br><span class="line"><span class="keyword">var</span> endT = <span class="number">1000</span>/<span class="number">16.7</span>;<span class="comment">//总帧数</span></span><br><span class="line"><span class="keyword">var</span> timer = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">T++;<span class="comment">//执行移动到下一帧</span></span><br><span class="line"><span class="keyword">if</span> (T&gt;=endT) &#123;<span class="comment">//判断到了最后一帧</span></span><br><span class="line"><span class="built_in">clearInterval</span>(timer);<span class="comment">//停止定时器</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//根据Tween.js计算每一帧的位置</span></span><br><span class="line"><span class="keyword">var</span> l = Tween.Bounce.easeOut(T,start,dis,endT);</span><br><span class="line"><span class="comment">//设置DIV的left值位置</span></span><br><span class="line">div.style.left = l + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">&#125;,<span class="number">1000</span>/<span class="number">60</span>)<span class="comment">//计算每秒60帧的速度</span></span><br></pre></td></tr></table></figure><h5 id="把Tween-js加到封装的动画函数里"><a href="#把Tween-js加到封装的动画函数里" class="headerlink" title="把Tween.js加到封装的动画函数里"></a>把Tween.js加到封装的动画函数里</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">&quot;div&quot;</span>);</span><br><span class="line"><span class="comment">/*封装动画函数</span></span><br><span class="line"><span class="comment">self:获取动画元素</span></span><br><span class="line"><span class="comment">Tween:tween的动画算法函数</span></span><br><span class="line"><span class="comment">attr:改变的属性</span></span><br><span class="line"><span class="comment">start:元素开始位置</span></span><br><span class="line"><span class="comment">dis:动画移动的距离</span></span><br><span class="line"><span class="comment">endT:动画移动的时间或总帧数</span></span><br><span class="line"><span class="comment">callback:回调函数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">move</span>(<span class="params">self,Tween,attr,start,dis,endT,callback</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> T = <span class="built_in">Date</span>.now();<span class="comment">//获取当前时间</span></span><br><span class="line">requestAnimationFrame(<span class="function"><span class="keyword">function</span> <span class="title">step</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">// 计算动画时间的进度比例</span></span><br><span class="line"><span class="keyword">var</span> p = <span class="built_in">Math</span>.min(<span class="number">1</span>, (<span class="built_in">Date</span>.now() - T) / endT);</span><br><span class="line"><span class="comment">// 计算当前时间移动到的帧数位置</span></span><br><span class="line"><span class="comment">// Tween(&quot;开始帧数的位置&quot;,&quot;开始位置&quot;,&quot;移动的距离&quot;,&quot;总帧数&quot;)</span></span><br><span class="line"><span class="keyword">var</span> site = Tween(p*endT,start,dis,endT);</span><br><span class="line"><span class="comment">// 设置元素移动的位置</span></span><br><span class="line">self.style[attr] = site + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(p &lt; <span class="number">1</span>)&#123;</span><br><span class="line">    <span class="comment">//p小于1时动画时间未结束</span></span><br><span class="line">    requestAnimationFrame(step);<span class="comment">//执行下一帧动画</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">// 判断callback有传参就执行callback函数</span></span><br><span class="line">    callback &amp;&amp; callback();</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//执行动画函数往右移动200像素</span></span><br><span class="line">move(div,Tween.Linear,<span class="string">&quot;left&quot;</span>,<span class="number">0</span>,<span class="number">500</span>,<span class="number">1000</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;动画帧&quot;&gt;&lt;a href=&quot;#动画帧&quot; class=&quot;headerlink&quot; title=&quot;动画帧&quot;&gt;&lt;/a&gt;动画帧&lt;/h2&gt;&lt;h5 id=&quot;帧数就是在1秒钟时间里传输的图片的量，也可以理解为图形处理器每秒钟能够刷新几次，通常用fps（Frames-Per-Sec</summary>
      
    
    
    
    <category term="js高级" scheme="http://example.com/categories/js%E9%AB%98%E7%BA%A7/"/>
    
    
  </entry>
  
</feed>
