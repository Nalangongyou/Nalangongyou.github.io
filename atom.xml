<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Decade</title>
  
  <subtitle>你终究是一个过客</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2020-11-07T11:58:08.901Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Decade</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JS红宝书之异步</title>
    <link href="http://example.com/2020/11/01/%E7%BA%A2%E5%AE%9D%E4%B9%A612/"/>
    <id>http://example.com/2020/11/01/%E7%BA%A2%E5%AE%9D%E4%B9%A612/</id>
    <published>2020-11-01T05:06:43.000Z</published>
    <updated>2020-11-07T11:58:08.901Z</updated>
    
    <content type="html"><![CDATA[<p>11 异步</p>]]></content>
    
    
    <summary type="html">异步</summary>
    
    
    
    <category term="JavaScript红宝书" scheme="http://example.com/categories/JavaScript%E7%BA%A2%E5%AE%9D%E4%B9%A6/"/>
    
    
    <category term="异步" scheme="http://example.com/tags/%E5%BC%82%E6%AD%A5/"/>
    
  </entry>
  
  <entry>
    <title>JS红宝书之函数</title>
    <link href="http://example.com/2020/10/30/%E7%BA%A2%E5%AE%9D%E4%B9%A611/"/>
    <id>http://example.com/2020/10/30/%E7%BA%A2%E5%AE%9D%E4%B9%A611/</id>
    <published>2020-10-30T05:06:43.000Z</published>
    <updated>2020-11-07T11:51:21.180Z</updated>
    
    <content type="html"><![CDATA[<h1 id="函-数"><a href="#函-数" class="headerlink" title="函 数"></a>函 数</h1><h4 id="函数是ECMAScript中最有意思的部分之一，这主要是因为函数实际上是对象。每个函数都是Function类型的实例，而-Function-也有属性和方法，跟其他引用类型一样。因为函数是对象，所以函数名就是指向函数对象的指针，而且不一定与函数本身紧密绑定。函数通常以函数声明的方式定义"><a href="#函数是ECMAScript中最有意思的部分之一，这主要是因为函数实际上是对象。每个函数都是Function类型的实例，而-Function-也有属性和方法，跟其他引用类型一样。因为函数是对象，所以函数名就是指向函数对象的指针，而且不一定与函数本身紧密绑定。函数通常以函数声明的方式定义" class="headerlink" title="函数是ECMAScript中最有意思的部分之一，这主要是因为函数实际上是对象。每个函数都是Function类型的实例，而 Function 也有属性和方法，跟其他引用类型一样。因为函数是对象，所以函数名就是指向函数对象的指针，而且不一定与函数本身紧密绑定。函数通常以函数声明的方式定义"></a>函数是ECMAScript中最有意思的部分之一，这主要是因为函数实际上是对象。每个函数都是Function类型的实例，而 Function 也有属性和方法，跟其他引用类型一样。因为函数是对象，所以函数名就是指向函数对象的指针，而且不一定与函数本身紧密绑定。函数通常以函数声明的方式定义</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">//声明一个函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myfun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     alert(<span class="string">&quot;我是一个函数&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"> <span class="comment">//函数的调用</span></span><br><span class="line"> myfun();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明一个带有参数的函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">var</span> sum = (num1 + num2);</span><br><span class="line">     <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">3</span>, <span class="number">5</span>));</span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">99</span>, <span class="number">1</span>));</span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">-15</span>, <span class="number">6</span>));</span><br></pre></td></tr></table></figure><hr><h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><h4 id="ECMAScript-6-新增了使用胖箭头（-gt-）语法定义函数表达式的能力。很大程度上，箭头函数实例化的函数对象与正式的函数表达式创建的函数对象行为是相同的。任何可以使用函数表达式的地方，都可以使用箭头函数"><a href="#ECMAScript-6-新增了使用胖箭头（-gt-）语法定义函数表达式的能力。很大程度上，箭头函数实例化的函数对象与正式的函数表达式创建的函数对象行为是相同的。任何可以使用函数表达式的地方，都可以使用箭头函数" class="headerlink" title="ECMAScript 6 新增了使用胖箭头（=&gt;）语法定义函数表达式的能力。很大程度上，箭头函数实例化的函数对象与正式的函数表达式创建的函数对象行为是相同的。任何可以使用函数表达式的地方，都可以使用箭头函数"></a>ECMAScript 6 新增了使用胖箭头（=&gt;）语法定义函数表达式的能力。很大程度上，箭头函数实例化的函数对象与正式的函数表达式创建的函数对象行为是相同的。任何可以使用函数表达式的地方，都可以使用箭头函数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> S = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line"> <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> Sum = <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(S(<span class="number">5</span>, <span class="number">8</span>)); <span class="comment">// 13</span></span><br><span class="line"><span class="built_in">console</span>.log(Sum(<span class="number">5</span>, <span class="number">8</span>)); <span class="comment">// 13 </span></span><br></pre></td></tr></table></figure><h4 id="箭头函数简洁的语法非常适合嵌入函数的场景"><a href="#箭头函数简洁的语法非常适合嵌入函数的场景" class="headerlink" title="箭头函数简洁的语法非常适合嵌入函数的场景"></a>箭头函数简洁的语法非常适合嵌入函数的场景</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// map() 方法返回一个新数组，数组中的元素为原始数组元素调用函数处理后的值。</span></span><br><span class="line"><span class="keyword">let</span> int = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log(</span><br><span class="line">    int.map(<span class="function"><span class="keyword">function</span>(<span class="params">i</span>) </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> i + <span class="number">1</span>; &#125;</span><br><span class="line">    )); </span><br><span class="line">    <span class="comment">// [2, 3, 4]</span></span><br><span class="line"><span class="built_in">console</span>.log(</span><br><span class="line">    int.map(<span class="function">(<span class="params">i</span>) =&gt;</span> &#123; </span><br><span class="line">        <span class="keyword">return</span> i + <span class="number">1</span> </span><br><span class="line">        &#125;)); </span><br><span class="line">        <span class="comment">// [2, 3, 4] </span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="如果只有一个参数，那也可以不用括号。只有没有参数，或者多个参数的情况下，才需要使用括号"><a href="#如果只有一个参数，那也可以不用括号。只有没有参数，或者多个参数的情况下，才需要使用括号" class="headerlink" title="如果只有一个参数，那也可以不用括号。只有没有参数，或者多个参数的情况下，才需要使用括号"></a>如果只有一个参数，那也可以不用括号。只有没有参数，或者多个参数的情况下，才需要使用括号</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 以下两种写法都有效</span></span><br><span class="line"><span class="keyword">let</span> double = <span class="function">(<span class="params">x</span>) =&gt;</span> &#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span> * x; </span><br><span class="line">    &#125;;</span><br><span class="line"><span class="keyword">let</span> triple = <span class="function"><span class="params">x</span> =&gt;</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="number">3</span> * x; </span><br><span class="line">     &#125;;</span><br><span class="line"><span class="comment">// 没有参数需要括号</span></span><br><span class="line"><span class="keyword">let</span> getRandom = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="built_in">Math</span>.random();</span><br><span class="line">      &#125;;</span><br><span class="line"><span class="comment">// 多个参数需要括号</span></span><br><span class="line"><span class="keyword">let</span> sum = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123; </span><br><span class="line">    <span class="keyword">return</span> a + b; </span><br><span class="line">    &#125;;</span><br><span class="line"><span class="comment">// 无效的写法：</span></span><br><span class="line"><span class="keyword">let</span> multiply = a, <span class="function"><span class="params">b</span> =&gt;</span> &#123; </span><br><span class="line">    <span class="keyword">return</span> a * b; </span><br><span class="line">    &#125;; </span><br></pre></td></tr></table></figure><h4 id="箭头函数也可以不用大括号，但这样会改变函数的行为。使用大括号就说明包含“函数体”，可以在一个函数中包含多条语句，跟常规的函数一样。如果不使用大括号，那么箭头后面就只能有一行代码，比如一个赋值操作，或者一个表达式。而且，省略大括号会隐式返回这行代码的值"><a href="#箭头函数也可以不用大括号，但这样会改变函数的行为。使用大括号就说明包含“函数体”，可以在一个函数中包含多条语句，跟常规的函数一样。如果不使用大括号，那么箭头后面就只能有一行代码，比如一个赋值操作，或者一个表达式。而且，省略大括号会隐式返回这行代码的值" class="headerlink" title="箭头函数也可以不用大括号，但这样会改变函数的行为。使用大括号就说明包含“函数体”，可以在一个函数中包含多条语句，跟常规的函数一样。如果不使用大括号，那么箭头后面就只能有一行代码，比如一个赋值操作，或者一个表达式。而且，省略大括号会隐式返回这行代码的值"></a>箭头函数也可以不用大括号，但这样会改变函数的行为。使用大括号就说明包含“函数体”，可以在一个函数中包含多条语句，跟常规的函数一样。如果不使用大括号，那么箭头后面就只能有一行代码，比如一个赋值操作，或者一个表达式。而且，省略大括号会隐式返回这行代码的值</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 以下两种写法都有效，而且返回相应的值</span></span><br><span class="line"><span class="keyword">let</span> double = <span class="function">(<span class="params">x</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="number">2</span> * x; </span><br><span class="line">     &#125;;</span><br><span class="line"><span class="keyword">let</span> triple = <span class="function">(<span class="params">x</span>) =&gt;</span></span><br><span class="line"> <span class="number">3</span> * x;</span><br><span class="line"><span class="comment">// 可以赋值</span></span><br><span class="line"><span class="keyword">let</span> value = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> setName = <span class="function">(<span class="params">x</span>) =&gt;</span> </span><br><span class="line">    x.name = <span class="string">&quot;Matt&quot;</span>;</span><br><span class="line">setName(value);</span><br><span class="line"><span class="built_in">console</span>.log(value.name); <span class="comment">// &quot;Matt&quot;</span></span><br><span class="line"><span class="comment">// 无效的写法：</span></span><br><span class="line"><span class="keyword">let</span> multiply = <span class="function">(<span class="params">a, b</span>) =&gt;</span> </span><br><span class="line"><span class="keyword">return</span> a * b; </span><br></pre></td></tr></table></figure><h4 id="箭头函数虽然语法简洁，但也有很多场合不适用。箭头函数不能使用-arguments、super-和new-target，也不能用作构造函数。此外，箭头函数也没有-prototype-属性。"><a href="#箭头函数虽然语法简洁，但也有很多场合不适用。箭头函数不能使用-arguments、super-和new-target，也不能用作构造函数。此外，箭头函数也没有-prototype-属性。" class="headerlink" title="箭头函数虽然语法简洁，但也有很多场合不适用。箭头函数不能使用 arguments、super 和new.target，也不能用作构造函数。此外，箭头函数也没有 prototype 属性。"></a>箭头函数虽然语法简洁，但也有很多场合不适用。箭头函数不能使用 arguments、super 和new.target，也不能用作构造函数。此外，箭头函数也没有 prototype 属性。</h4><hr><h2 id="函数名"><a href="#函数名" class="headerlink" title="函数名"></a>函数名</h2><h4 id="因为函数名就是指向函数的指针，所以它们跟其他包含对象指针的变量具有相同的行为。这意味着一个函数可以有多个名称"><a href="#因为函数名就是指向函数的指针，所以它们跟其他包含对象指针的变量具有相同的行为。这意味着一个函数可以有多个名称" class="headerlink" title="因为函数名就是指向函数的指针，所以它们跟其他包含对象指针的变量具有相同的行为。这意味着一个函数可以有多个名称"></a>因为函数名就是指向函数的指针，所以它们跟其他包含对象指针的变量具有相同的行为。这意味着一个函数可以有多个名称</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sum(<span class="number">10</span>, <span class="number">10</span>)); <span class="comment">// 20</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> aSum = sum;</span><br><span class="line"><span class="built_in">console</span>.log(aSum(<span class="number">10</span>, <span class="number">10</span>)); <span class="comment">// 20</span></span><br><span class="line">sum = <span class="literal">null</span>;</span><br><span class="line"><span class="built_in">console</span>.log(aSum(<span class="number">10</span>, <span class="number">10</span>)); <span class="comment">// 20 </span></span><br></pre></td></tr></table></figure><h4 id="以上代码定义了一个名为-sum-的函数，用于求两个数之和。然后又声明了一个变量-aSum，并将它的值设置为等于-sum。注意，使用不带括号的函数名会访问函数指针，而不会执行函数。此时，aSum-和-sum-都指向同一个函数。调用-aSum-也可以返回结果。把-sum-设置为-null之后，就切断了它与函数之间的关联。而-aSum-还是可以照常调用，没有问题。"><a href="#以上代码定义了一个名为-sum-的函数，用于求两个数之和。然后又声明了一个变量-aSum，并将它的值设置为等于-sum。注意，使用不带括号的函数名会访问函数指针，而不会执行函数。此时，aSum-和-sum-都指向同一个函数。调用-aSum-也可以返回结果。把-sum-设置为-null之后，就切断了它与函数之间的关联。而-aSum-还是可以照常调用，没有问题。" class="headerlink" title="以上代码定义了一个名为 sum()的函数，用于求两个数之和。然后又声明了一个变量 aSum，并将它的值设置为等于 sum。注意，使用不带括号的函数名会访问函数指针，而不会执行函数。此时，aSum 和 sum 都指向同一个函数。调用 aSum()也可以返回结果。把 sum 设置为 null之后，就切断了它与函数之间的关联。而 aSum()还是可以照常调用，没有问题。"></a>以上代码定义了一个名为 sum()的函数，用于求两个数之和。然后又声明了一个变量 aSum，并将它的值设置为等于 sum。注意，使用不带括号的函数名会访问函数指针，而不会执行函数。此时，aSum 和 sum 都指向同一个函数。调用 aSum()也可以返回结果。把 sum 设置为 null之后，就切断了它与函数之间的关联。而 aSum()还是可以照常调用，没有问题。</h4><h4 id="ECMAScript-6-的所有函数对象都会暴露一个只读的-name-属性，其中包含关于函数的信息。多数情况下，这个属性中保存的就是一个函数标识符，或者说是一个字符串化的变量名。即使函数没有名称，也会如实显示成空字符串。如果它是使用-Function-构造函数创建的，则会标识成”anonymous”："><a href="#ECMAScript-6-的所有函数对象都会暴露一个只读的-name-属性，其中包含关于函数的信息。多数情况下，这个属性中保存的就是一个函数标识符，或者说是一个字符串化的变量名。即使函数没有名称，也会如实显示成空字符串。如果它是使用-Function-构造函数创建的，则会标识成”anonymous”：" class="headerlink" title="ECMAScript 6 的所有函数对象都会暴露一个只读的 name 属性，其中包含关于函数的信息。多数情况下，这个属性中保存的就是一个函数标识符，或者说是一个字符串化的变量名。即使函数没有名称，也会如实显示成空字符串。如果它是使用 Function 构造函数创建的，则会标识成”anonymous”："></a>ECMAScript 6 的所有函数对象都会暴露一个只读的 name 属性，其中包含关于函数的信息。多数情况下，这个属性中保存的就是一个函数标识符，或者说是一个字符串化的变量名。即使函数没有名称，也会如实显示成空字符串。如果它是使用 Function 构造函数创建的，则会标识成”anonymous”：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">let</span> bar = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> baz = <span class="function">() =&gt;</span> &#123;&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(foo.name); <span class="comment">// foo</span></span><br><span class="line"><span class="built_in">console</span>.log(bar.name); <span class="comment">// bar</span></span><br><span class="line"><span class="built_in">console</span>.log(baz.name); <span class="comment">// baz</span></span><br><span class="line"><span class="built_in">console</span>.log((<span class="function">() =&gt;</span> &#123;&#125;).name); <span class="comment">//（空字符串）</span></span><br><span class="line"><span class="built_in">console</span>.log((<span class="keyword">new</span> <span class="built_in">Function</span>()).name); <span class="comment">// anonymous </span></span><br></pre></td></tr></table></figure><h4 id="如果函数是一个获取函数、设置函数，或者使用-bind-实例化，那么标识符前面会加上一个前缀："><a href="#如果函数是一个获取函数、设置函数，或者使用-bind-实例化，那么标识符前面会加上一个前缀：" class="headerlink" title="如果函数是一个获取函数、设置函数，或者使用 bind()实例化，那么标识符前面会加上一个前缀："></a>如果函数是一个获取函数、设置函数，或者使用 bind()实例化，那么标识符前面会加上一个前缀：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="built_in">console</span>.log(foo.bind(<span class="literal">null</span>).name); <span class="comment">// bound foo</span></span><br><span class="line"><span class="keyword">let</span> dog = &#123;</span><br><span class="line"> years: <span class="number">1</span>,</span><br><span class="line"> <span class="keyword">get</span> <span class="title">age</span>() &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="built_in">this</span>.years;</span><br><span class="line"> &#125;,</span><br><span class="line"> <span class="keyword">set</span> <span class="title">age</span>(<span class="params">newAge</span>) &#123;</span><br><span class="line"> <span class="built_in">this</span>.years = newAge;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> propertyDescriptor = <span class="built_in">Object</span>.getOwnPropertyDescriptor(dog, <span class="string">&#x27;age&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(propertyDescriptor.get.name); <span class="comment">// get age</span></span><br><span class="line"><span class="built_in">console</span>.log(propertyDescriptor.set.name); <span class="comment">// set age </span></span><br></pre></td></tr></table></figure><hr><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><h4 id="ECMAScript-函数的参数跟大多数其他语言不同。ECMAScript-函数既不关心传入的参数个数，也不关心这些参数的数据类型。定义函数时要接收两个参数，并不意味着调用时就传两个参数。你可以传一个、三个，甚至一个也不传，解释器都不会报错。"><a href="#ECMAScript-函数的参数跟大多数其他语言不同。ECMAScript-函数既不关心传入的参数个数，也不关心这些参数的数据类型。定义函数时要接收两个参数，并不意味着调用时就传两个参数。你可以传一个、三个，甚至一个也不传，解释器都不会报错。" class="headerlink" title="ECMAScript 函数的参数跟大多数其他语言不同。ECMAScript 函数既不关心传入的参数个数，也不关心这些参数的数据类型。定义函数时要接收两个参数，并不意味着调用时就传两个参数。你可以传一个、三个，甚至一个也不传，解释器都不会报错。"></a>ECMAScript 函数的参数跟大多数其他语言不同。ECMAScript 函数既不关心传入的参数个数，也不关心这些参数的数据类型。定义函数时要接收两个参数，并不意味着调用时就传两个参数。你可以传一个、三个，甚至一个也不传，解释器都不会报错。</h4><h4 id="之所以会这样，主要是因为-ECMAScript-函数的参数在内部表现为一个数组。函数被调用时总会接收一个数组，但函数并不关心这个数组中包含什么。如果数组中什么也没有，那没问题；如果数组的元素超出了要求，那也没问题。事实上，在使用-function-关键字定义（非箭头）函数时，可以在函数内部访问-arguments-对象，从中取得传进来的每个参数值。"><a href="#之所以会这样，主要是因为-ECMAScript-函数的参数在内部表现为一个数组。函数被调用时总会接收一个数组，但函数并不关心这个数组中包含什么。如果数组中什么也没有，那没问题；如果数组的元素超出了要求，那也没问题。事实上，在使用-function-关键字定义（非箭头）函数时，可以在函数内部访问-arguments-对象，从中取得传进来的每个参数值。" class="headerlink" title="之所以会这样，主要是因为 ECMAScript 函数的参数在内部表现为一个数组。函数被调用时总会接收一个数组，但函数并不关心这个数组中包含什么。如果数组中什么也没有，那没问题；如果数组的元素超出了要求，那也没问题。事实上，在使用 function 关键字定义（非箭头）函数时，可以在函数内部访问 arguments 对象，从中取得传进来的每个参数值。"></a>之所以会这样，主要是因为 ECMAScript 函数的参数在内部表现为一个数组。函数被调用时总会接收一个数组，但函数并不关心这个数组中包含什么。如果数组中什么也没有，那没问题；如果数组的元素超出了要求，那也没问题。事实上，在使用 function 关键字定义（非箭头）函数时，可以在函数内部访问 arguments 对象，从中取得传进来的每个参数值。</h4><h4 id="arguments-对象是一个类数组对象（但不是-Array-的实例），因此可以使用中括号语法访问其中的元素（第一个参数是-arguments-0-，第二个参数是-arguments-1-）。而要确定传进来多少个参数，可以访问-arguments-length-属性。"><a href="#arguments-对象是一个类数组对象（但不是-Array-的实例），因此可以使用中括号语法访问其中的元素（第一个参数是-arguments-0-，第二个参数是-arguments-1-）。而要确定传进来多少个参数，可以访问-arguments-length-属性。" class="headerlink" title="arguments 对象是一个类数组对象（但不是 Array 的实例），因此可以使用中括号语法访问其中的元素（第一个参数是 arguments[0]，第二个参数是 arguments[1]）。而要确定传进来多少个参数，可以访问 arguments.length 属性。"></a>arguments 对象是一个类数组对象（但不是 Array 的实例），因此可以使用中括号语法访问其中的元素（第一个参数是 arguments[0]，第二个参数是 arguments[1]）。而要确定传进来多少个参数，可以访问 arguments.length 属性。</h4><h5 id="在下面的例子中，sayHi-函数的第一个参数叫-name："><a href="#在下面的例子中，sayHi-函数的第一个参数叫-name：" class="headerlink" title="在下面的例子中，sayHi()函数的第一个参数叫 name："></a>在下面的例子中，sayHi()函数的第一个参数叫 name：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params">name, message</span>) </span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">&quot;Hello &quot;</span> + name + <span class="string">&quot;, &quot;</span> + message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="可以通过-arguments-0-取得相同的参数值。因此，把函数重写成不声明参数也可以："><a href="#可以通过-arguments-0-取得相同的参数值。因此，把函数重写成不声明参数也可以：" class="headerlink" title="可以通过 arguments[0]取得相同的参数值。因此，把函数重写成不声明参数也可以："></a>可以通过 arguments[0]取得相同的参数值。因此，把函数重写成不声明参数也可以：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">&quot;Hello &quot;</span> + <span class="built_in">arguments</span>[<span class="number">0</span>] + <span class="string">&quot;, &quot;</span> + <span class="built_in">arguments</span>[<span class="number">1</span>]);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h4 id="也可以通过-arguments-对象的-length-属性检查传入的参数个数。下面的例子展示了在每调用一个函数时，都会打印出传入的参数个数："><a href="#也可以通过-arguments-对象的-length-属性检查传入的参数个数。下面的例子展示了在每调用一个函数时，都会打印出传入的参数个数：" class="headerlink" title="也可以通过 arguments 对象的 length 属性检查传入的参数个数。下面的例子展示了在每调用一个函数时，都会打印出传入的参数个数："></a>也可以通过 arguments 对象的 length 属性检查传入的参数个数。下面的例子展示了在每调用一个函数时，都会打印出传入的参数个数：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Args</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>.length);</span><br><span class="line">        &#125;</span><br><span class="line">Args(<span class="string">&quot;string&quot;</span>, <span class="number">45</span>); <span class="comment">// 2   俩参数</span></span><br><span class="line">Args(); <span class="comment">// 0       你就没传参数</span></span><br><span class="line">Args(<span class="number">12</span>); <span class="comment">// 1      一个~！~~</span></span><br></pre></td></tr></table></figure><h4 id="既然如此，那么开发者可以想传多少参数就传多少参数"><a href="#既然如此，那么开发者可以想传多少参数就传多少参数" class="headerlink" title="既然如此，那么开发者可以想传多少参数就传多少参数"></a>既然如此，那么开发者可以想传多少参数就传多少参数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doAdd</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">if</span> (<span class="built_in">arguments</span>.length === <span class="number">1</span>) &#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="built_in">arguments</span>[<span class="number">0</span>] + <span class="number">10</span>);</span><br><span class="line"> &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">arguments</span>.length === <span class="number">2</span>) &#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="built_in">arguments</span>[<span class="number">0</span>] + <span class="built_in">arguments</span>[<span class="number">1</span>]);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">doAdd(<span class="number">10</span>); <span class="comment">// 20</span></span><br><span class="line">doAdd(<span class="number">30</span>, <span class="number">20</span>); <span class="comment">// 50 </span></span><br></pre></td></tr></table></figure><h4 id="还有一个必须理解的重要方面，那就是-arguments-对象可以跟命名参数一起使用，比如"><a href="#还有一个必须理解的重要方面，那就是-arguments-对象可以跟命名参数一起使用，比如" class="headerlink" title="还有一个必须理解的重要方面，那就是 arguments 对象可以跟命名参数一起使用，比如"></a>还有一个必须理解的重要方面，那就是 arguments 对象可以跟命名参数一起使用，比如</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doAdd</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">if</span> (<span class="built_in">arguments</span>.length === <span class="number">1</span>) &#123;</span><br><span class="line"> <span class="built_in">console</span>.log(num1 + <span class="number">10</span>);</span><br><span class="line"> &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">arguments</span>.length === <span class="number">2</span>) &#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="built_in">arguments</span>[<span class="number">0</span>] + num2);</span><br><span class="line"> &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h4 id="arguments-对象的另一个有意思的地方就是，它的值始终会与对应的命名参数同步。"><a href="#arguments-对象的另一个有意思的地方就是，它的值始终会与对应的命名参数同步。" class="headerlink" title="arguments 对象的另一个有意思的地方就是，它的值始终会与对应的命名参数同步。"></a>arguments 对象的另一个有意思的地方就是，它的值始终会与对应的命名参数同步。</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doAdd</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line"> <span class="built_in">arguments</span>[<span class="number">1</span>] = <span class="number">10</span>;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="built_in">arguments</span>[<span class="number">0</span>] + num2);</span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="这个-doAdd-函数把第二个参数的值重写为-10。因为-arguments-对象的值会自动同步到对应的命名参数，所以修改-arguments-1-也会修改-num2-的值，因此两者的值都是-10。但这并不意味着它们都访问同一个内存地址，它们在内存中还是分开的，只不过会保持同步而已。另外还要记住一点：如果只传了一个参数，然后把-arguments-1-设置为某个值，那么这个值并不会反映到第二个命名参数。这是因为-arguments-对象的长度是根据传入的参数个数，而非定义函数时给出的命名参数个数确定的。对于命名参数而言，如果调用函数时没有传这个参数，那么它的值就是-undefined。这就类似于定义了变量而没有初始化。比如，如果只给-doAdd-传了一个参数，那么-num2-的值就是-undefined。"><a href="#这个-doAdd-函数把第二个参数的值重写为-10。因为-arguments-对象的值会自动同步到对应的命名参数，所以修改-arguments-1-也会修改-num2-的值，因此两者的值都是-10。但这并不意味着它们都访问同一个内存地址，它们在内存中还是分开的，只不过会保持同步而已。另外还要记住一点：如果只传了一个参数，然后把-arguments-1-设置为某个值，那么这个值并不会反映到第二个命名参数。这是因为-arguments-对象的长度是根据传入的参数个数，而非定义函数时给出的命名参数个数确定的。对于命名参数而言，如果调用函数时没有传这个参数，那么它的值就是-undefined。这就类似于定义了变量而没有初始化。比如，如果只给-doAdd-传了一个参数，那么-num2-的值就是-undefined。" class="headerlink" title="这个 doAdd()函数把第二个参数的值重写为 10。因为 arguments 对象的值会自动同步到对应的命名参数，所以修改 arguments[1]也会修改 num2 的值，因此两者的值都是 10。但这并不意味着它们都访问同一个内存地址，它们在内存中还是分开的，只不过会保持同步而已。另外还要记住一点：如果只传了一个参数，然后把 arguments[1]设置为某个值，那么这个值并不会反映到第二个命名参数。这是因为 arguments 对象的长度是根据传入的参数个数，而非定义函数时给出的命名参数个数确定的。对于命名参数而言，如果调用函数时没有传这个参数，那么它的值就是 undefined。这就类似于定义了变量而没有初始化。比如，如果只给 doAdd()传了一个参数，那么 num2 的值就是 undefined。"></a>这个 doAdd()函数把第二个参数的值重写为 10。因为 arguments 对象的值会自动同步到对应的命名参数，所以修改 arguments[1]也会修改 num2 的值，因此两者的值都是 10。但这并不意味着它们都访问同一个内存地址，它们在内存中还是分开的，只不过会保持同步而已。另外还要记住一点：如果只传了一个参数，然后把 arguments[1]设置为某个值，那么这个值并不会反映到第二个命名参数。这是因为 arguments 对象的长度是根据传入的参数个数，而非定义函数时给出的命名参数个数确定的。对于命名参数而言，如果调用函数时没有传这个参数，那么它的值就是 undefined。这就类似于定义了变量而没有初始化。比如，如果只给 doAdd()传了一个参数，那么 num2 的值就是 undefined。</h5><h5 id="严格模式下，arguments-会有一些变化。首先，像前面那样给-arguments-1-赋值不会再影响-num2的值。就算把-arguments-1-设置为-10，num2-的值仍然还是传入的值。其次，在函数中尝试重写arguments-对象会导致语法错误。（代码也不会执行。）"><a href="#严格模式下，arguments-会有一些变化。首先，像前面那样给-arguments-1-赋值不会再影响-num2的值。就算把-arguments-1-设置为-10，num2-的值仍然还是传入的值。其次，在函数中尝试重写arguments-对象会导致语法错误。（代码也不会执行。）" class="headerlink" title="严格模式下，arguments 会有一些变化。首先，像前面那样给 arguments[1]赋值不会再影响 num2的值。就算把 arguments[1]设置为 10，num2 的值仍然还是传入的值。其次，在函数中尝试重写arguments 对象会导致语法错误。（代码也不会执行。）"></a>严格模式下，arguments 会有一些变化。首先，像前面那样给 arguments[1]赋值不会再影响 num2的值。就算把 arguments[1]设置为 10，num2 的值仍然还是传入的值。其次，在函数中尝试重写arguments 对象会导致语法错误。（代码也不会执行。）</h5><hr><h2 id="箭头函数中的参数"><a href="#箭头函数中的参数" class="headerlink" title="箭头函数中的参数"></a>箭头函数中的参数</h2><h4 id="如果函数是使用箭头语法定义的，那么传给函数的参数将不能使用-arguments-关键字访问，而只能通过定义的命名参数访问。"><a href="#如果函数是使用箭头语法定义的，那么传给函数的参数将不能使用-arguments-关键字访问，而只能通过定义的命名参数访问。" class="headerlink" title="如果函数是使用箭头语法定义的，那么传给函数的参数将不能使用 arguments 关键字访问，而只能通过定义的命名参数访问。"></a>如果函数是使用箭头语法定义的，那么传给函数的参数将不能使用 arguments 关键字访问，而只能通过定义的命名参数访问。</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="built_in">arguments</span>[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line">foo(<span class="number">5</span>); <span class="comment">// 5</span></span><br><span class="line"></span><br><span class="line">-----</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> bar = <span class="function">() =&gt;</span> &#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="built_in">arguments</span>[<span class="number">0</span>]);</span><br><span class="line">&#125;;</span><br><span class="line">bar(<span class="number">5</span>); <span class="comment">// ReferenceError: arguments is not defined </span></span><br></pre></td></tr></table></figure><h4 id="虽然箭头函数中没有-arguments-对象，但可以在包装函数中把它提供给箭头函数，我们称之为嵌套："><a href="#虽然箭头函数中没有-arguments-对象，但可以在包装函数中把它提供给箭头函数，我们称之为嵌套：" class="headerlink" title="虽然箭头函数中没有 arguments 对象，但可以在包装函数中把它提供给箭头函数，我们称之为嵌套："></a>虽然箭头函数中没有 arguments 对象，但可以在包装函数中把它提供给箭头函数，我们称之为嵌套：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">let</span> bar = <span class="function">() =&gt;</span> &#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="built_in">arguments</span>[<span class="number">0</span>]); <span class="comment">// 5</span></span><br><span class="line"> &#125;;</span><br><span class="line"> bar();</span><br><span class="line">&#125;</span><br><span class="line">foo(<span class="number">5</span>); </span><br></pre></td></tr></table></figure><h4 id="ECMAScript-中的所有参数都按值传递的。不可能按引用传递参数。如果把对象作为参数传递，那么传递的值就是这个对象的引用。"><a href="#ECMAScript-中的所有参数都按值传递的。不可能按引用传递参数。如果把对象作为参数传递，那么传递的值就是这个对象的引用。" class="headerlink" title="ECMAScript 中的所有参数都按值传递的。不可能按引用传递参数。如果把对象作为参数传递，那么传递的值就是这个对象的引用。"></a>ECMAScript 中的所有参数都按值传递的。不可能按引用传递参数。如果把对象作为参数传递，那么传递的值就是这个对象的引用。</h4><hr><h2 id="没有重载"><a href="#没有重载" class="headerlink" title="没有重载"></a>没有重载</h2><h4 id="ECMAScript-函数不能像传统编程那样重载。在其他语言比如-Java-中，一个函数可以有两个定义，只要签名（接收参数的类型和数量）不同就行。如前所述，ECMAScript-函数没有签名，因为参数是由包含零个或多个值的数组表示的。没有函数签名，自然也就没有重载。"><a href="#ECMAScript-函数不能像传统编程那样重载。在其他语言比如-Java-中，一个函数可以有两个定义，只要签名（接收参数的类型和数量）不同就行。如前所述，ECMAScript-函数没有签名，因为参数是由包含零个或多个值的数组表示的。没有函数签名，自然也就没有重载。" class="headerlink" title="ECMAScript 函数不能像传统编程那样重载。在其他语言比如 Java 中，一个函数可以有两个定义，只要签名（接收参数的类型和数量）不同就行。如前所述，ECMAScript 函数没有签名，因为参数是由包含零个或多个值的数组表示的。没有函数签名，自然也就没有重载。"></a>ECMAScript 函数不能像传统编程那样重载。在其他语言比如 Java 中，一个函数可以有两个定义，只要签名（接收参数的类型和数量）不同就行。如前所述，ECMAScript 函数没有签名，因为参数是由包含零个或多个值的数组表示的。没有函数签名，自然也就没有重载。</h4><h4 id="如果在-ECMAScript-中定义了两个同名函数，则后定义的会覆盖先定义的。"><a href="#如果在-ECMAScript-中定义了两个同名函数，则后定义的会覆盖先定义的。" class="headerlink" title="如果在 ECMAScript 中定义了两个同名函数，则后定义的会覆盖先定义的。"></a>如果在 ECMAScript 中定义了两个同名函数，则后定义的会覆盖先定义的。</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">aer</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> num + <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">aer</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> num + <span class="number">200</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> result = aer(<span class="number">100</span>); <span class="comment">// 300 </span></span><br><span class="line"></span><br><span class="line">-----</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> aer = <span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> num + <span class="number">100</span>;</span><br><span class="line">&#125;;</span><br><span class="line">aer = <span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> num + <span class="number">200</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> result = aer(<span class="number">100</span>); <span class="comment">// 300</span></span><br></pre></td></tr></table></figure><hr><h2 id="默认参数值"><a href="#默认参数值" class="headerlink" title="默认参数值"></a>默认参数值</h2><h4 id="在-ECMAScript5-1-及以前，实现默认参数的一种常用方式就是检测某个参数是否等于-undefined，如果是则意味着没有传这个参数"><a href="#在-ECMAScript5-1-及以前，实现默认参数的一种常用方式就是检测某个参数是否等于-undefined，如果是则意味着没有传这个参数" class="headerlink" title="在 ECMAScript5.1 及以前，实现默认参数的一种常用方式就是检测某个参数是否等于 undefined，如果是则意味着没有传这个参数"></a>在 ECMAScript5.1 及以前，实现默认参数的一种常用方式就是检测某个参数是否等于 undefined，如果是则意味着没有传这个参数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mg</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line"> name = (<span class="keyword">typeof</span> name !== <span class="string">&#x27;undefined&#x27;</span>) ? name : <span class="string">&#x27;Henry&#x27;</span>;</span><br><span class="line"> <span class="keyword">return</span> <span class="string">`King <span class="subst">$&#123;name&#125;</span> VIII`</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(mg()); <span class="comment">// &#x27;King Henry VIII&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(mg(<span class="string">&#x27;Louis&#x27;</span>)); <span class="comment">// &#x27;King Louis VIII&#x27; </span></span><br></pre></td></tr></table></figure><h4 id="ECMAScript-6-之后就不用这么麻烦了，因为它支持显式定义默认参数了。下面就是与前面代码等价的-ES6-写法，只要在函数定义中的参数后面用-就可以为参数赋一个默认值"><a href="#ECMAScript-6-之后就不用这么麻烦了，因为它支持显式定义默认参数了。下面就是与前面代码等价的-ES6-写法，只要在函数定义中的参数后面用-就可以为参数赋一个默认值" class="headerlink" title="ECMAScript 6 之后就不用这么麻烦了，因为它支持显式定义默认参数了。下面就是与前面代码等价的 ES6 写法，只要在函数定义中的参数后面用=就可以为参数赋一个默认值"></a>ECMAScript 6 之后就不用这么麻烦了，因为它支持显式定义默认参数了。下面就是与前面代码等价的 ES6 写法，只要在函数定义中的参数后面用=就可以为参数赋一个默认值</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mg</span>(<span class="params">name = <span class="string">&#x27;Henry&#x27;</span></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="string">`King <span class="subst">$&#123;name&#125;</span> VIII`</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(mg(<span class="string">&#x27;Louis&#x27;</span>)); <span class="comment">// &#x27;King Louis VIII&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(mg()); <span class="comment">// &#x27;King Henry VIII&#x27; </span></span><br></pre></td></tr></table></figure><hr><h2 id="参数扩展与收集"><a href="#参数扩展与收集" class="headerlink" title="参数扩展与收集"></a>参数扩展与收集</h2><h4 id="ECMAScript-6-新增了扩展操作符，使用它可以非常简洁地操作和组合集合数据。扩展操作符最有用的场景就是函数定义中的参数列表，在这里它可以充分利用这门语言的弱类型及参数长度可变的特点。扩展操作符既可以用于调用函数时传参，也可以用于定义函数参数。"><a href="#ECMAScript-6-新增了扩展操作符，使用它可以非常简洁地操作和组合集合数据。扩展操作符最有用的场景就是函数定义中的参数列表，在这里它可以充分利用这门语言的弱类型及参数长度可变的特点。扩展操作符既可以用于调用函数时传参，也可以用于定义函数参数。" class="headerlink" title="ECMAScript 6 新增了扩展操作符，使用它可以非常简洁地操作和组合集合数据。扩展操作符最有用的场景就是函数定义中的参数列表，在这里它可以充分利用这门语言的弱类型及参数长度可变的特点。扩展操作符既可以用于调用函数时传参，也可以用于定义函数参数。"></a>ECMAScript 6 新增了扩展操作符，使用它可以非常简洁地操作和组合集合数据。扩展操作符最有用的场景就是函数定义中的参数列表，在这里它可以充分利用这门语言的弱类型及参数长度可变的特点。扩展操作符既可以用于调用函数时传参，也可以用于定义函数参数。</h4><h3 id="扩展参数"><a href="#扩展参数" class="headerlink" title="扩展参数"></a>扩展参数</h3><h4 id="在给函数传参时，有时候可能不需要传一个数组，而是要分别传入数组的元素。假设有如下函数定义，它会将所有传入的参数累加起来："><a href="#在给函数传参时，有时候可能不需要传一个数组，而是要分别传入数组的元素。假设有如下函数定义，它会将所有传入的参数累加起来：" class="headerlink" title="在给函数传参时，有时候可能不需要传一个数组，而是要分别传入数组的元素。假设有如下函数定义，它会将所有传入的参数累加起来："></a>在给函数传参时，有时候可能不需要传一个数组，而是要分别传入数组的元素。假设有如下函数定义，它会将所有传入的参数累加起来：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> vs = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">gm</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; ++i) &#123;</span><br><span class="line"> sum += <span class="built_in">arguments</span>[i];</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> sum;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h4 id="希望将所有加数逐个传进来，然后通过迭代-arguments-对象来实现累加。如果不使用扩展操作符，想把定义在这个函数这面的数组拆分，那么就得求助于-apply-方法："><a href="#希望将所有加数逐个传进来，然后通过迭代-arguments-对象来实现累加。如果不使用扩展操作符，想把定义在这个函数这面的数组拆分，那么就得求助于-apply-方法：" class="headerlink" title="希望将所有加数逐个传进来，然后通过迭代 arguments 对象来实现累加。如果不使用扩展操作符，想把定义在这个函数这面的数组拆分，那么就得求助于 apply()方法："></a>希望将所有加数逐个传进来，然后通过迭代 arguments 对象来实现累加。如果不使用扩展操作符，想把定义在这个函数这面的数组拆分，那么就得求助于 apply()方法：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(getSum.apply(<span class="literal">null</span>, values)); <span class="comment">// 10 </span></span><br></pre></td></tr></table></figure><h4 id="但在-ECMAScript-6-中，可以通过扩展操作符极为简洁地实现这种操作。对可迭代对象应用扩展操作符，并将其作为一个参数传入，可以将可迭代对象拆分，并将迭代返回的每个值单独传入。"><a href="#但在-ECMAScript-6-中，可以通过扩展操作符极为简洁地实现这种操作。对可迭代对象应用扩展操作符，并将其作为一个参数传入，可以将可迭代对象拆分，并将迭代返回的每个值单独传入。" class="headerlink" title="但在 ECMAScript 6 中，可以通过扩展操作符极为简洁地实现这种操作。对可迭代对象应用扩展操作符，并将其作为一个参数传入，可以将可迭代对象拆分，并将迭代返回的每个值单独传入。"></a>但在 ECMAScript 6 中，可以通过扩展操作符极为简洁地实现这种操作。对可迭代对象应用扩展操作符，并将其作为一个参数传入，可以将可迭代对象拆分，并将迭代返回的每个值单独传入。</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(getSum(...values)); <span class="comment">// 10 </span></span><br><span class="line"><span class="built_in">console</span>.log(getSum(<span class="number">-1</span>, ...values)); <span class="comment">// 9</span></span><br><span class="line"><span class="built_in">console</span>.log(getSum(...values, <span class="number">5</span>)); <span class="comment">// 15</span></span><br><span class="line"><span class="built_in">console</span>.log(getSum(<span class="number">-1</span>, ...values, <span class="number">5</span>)); <span class="comment">// 14</span></span><br><span class="line"><span class="built_in">console</span>.log(getSum(...values, ...[<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>])); <span class="comment">// 28 </span></span><br></pre></td></tr></table></figure><h4 id="对函数中的-arguments-对象而言，它并不知道扩展操作符的存在，而是按照调用函数时传入的参数接收每一个值："><a href="#对函数中的-arguments-对象而言，它并不知道扩展操作符的存在，而是按照调用函数时传入的参数接收每一个值：" class="headerlink" title="对函数中的 arguments 对象而言，它并不知道扩展操作符的存在，而是按照调用函数时传入的参数接收每一个值："></a>对函数中的 arguments 对象而言，它并不知道扩展操作符的存在，而是按照调用函数时传入的参数接收每一个值：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> values = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">countArguments</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="built_in">arguments</span>.length);</span><br><span class="line">&#125;</span><br><span class="line">countArguments(<span class="number">-1</span>, ...values); <span class="comment">// 5</span></span><br><span class="line">countArguments(...values, <span class="number">5</span>); <span class="comment">// 5</span></span><br><span class="line">countArguments(<span class="number">-1</span>, ...values, <span class="number">5</span>); <span class="comment">// 6</span></span><br><span class="line">countArguments(...values, ...[<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]); <span class="comment">// 7 </span></span><br></pre></td></tr></table></figure><h4 id="在普通函数和箭头函数中，也可以将扩展操作符用于命名参数，当然同时也可以使用默认参数："><a href="#在普通函数和箭头函数中，也可以将扩展操作符用于命名参数，当然同时也可以使用默认参数：" class="headerlink" title="在普通函数和箭头函数中，也可以将扩展操作符用于命名参数，当然同时也可以使用默认参数："></a>在普通函数和箭头函数中，也可以将扩展操作符用于命名参数，当然同时也可以使用默认参数：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getProduct</span>(<span class="params">a, b, c = <span class="number">1</span></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> a * b * c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> getSum = <span class="function">(<span class="params">a, b, c = <span class="number">0</span></span>) =&gt;</span> &#123;</span><br><span class="line"> <span class="keyword">return</span> a + b + c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(getProduct(...[<span class="number">1</span>,<span class="number">2</span>])); <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(getProduct(...[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])); <span class="comment">// 6</span></span><br><span class="line"><span class="built_in">console</span>.log(getProduct(...[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])); <span class="comment">// 6</span></span><br><span class="line"><span class="built_in">console</span>.log(getSum(...[<span class="number">0</span>,<span class="number">1</span>])); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(getSum(...[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>])); <span class="comment">// 3</span></span><br><span class="line"><span class="built_in">console</span>.log(getSum(...[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])); <span class="comment">// 3 </span></span><br></pre></td></tr></table></figure><h3 id="收集参数"><a href="#收集参数" class="headerlink" title="收集参数"></a>收集参数</h3><h4 id="在构思函数定义时，可以使用扩展操作符把不同长度的独立参数组合为一个数组。这有点类似arguments-对象的构造机制，只不过收集参数的结果会得到一个-Array-实例"><a href="#在构思函数定义时，可以使用扩展操作符把不同长度的独立参数组合为一个数组。这有点类似arguments-对象的构造机制，只不过收集参数的结果会得到一个-Array-实例" class="headerlink" title="在构思函数定义时，可以使用扩展操作符把不同长度的独立参数组合为一个数组。这有点类似arguments 对象的构造机制，只不过收集参数的结果会得到一个 Array 实例"></a>在构思函数定义时，可以使用扩展操作符把不同长度的独立参数组合为一个数组。这有点类似arguments 对象的构造机制，只不过收集参数的结果会得到一个 Array 实例</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">gm</span>(<span class="params">...values</span>) </span>&#123;</span><br><span class="line"> <span class="comment">// 顺序累加 values 中的所有值</span></span><br><span class="line"> <span class="comment">// 初始值的总和为 0</span></span><br><span class="line"> <span class="keyword">return</span> values.reduce(<span class="function">(<span class="params">x, y</span>) =&gt;</span> x + y, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(gm(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)); <span class="comment">// 6 </span></span><br></pre></td></tr></table></figure><h4 id="收集参数的前面如果还有命名参数，则只会收集其余的参数；如果没有则会得到空数组。因为收集参数的结果可变，所以只能把它作为最后一个参数"><a href="#收集参数的前面如果还有命名参数，则只会收集其余的参数；如果没有则会得到空数组。因为收集参数的结果可变，所以只能把它作为最后一个参数" class="headerlink" title="收集参数的前面如果还有命名参数，则只会收集其余的参数；如果没有则会得到空数组。因为收集参数的结果可变，所以只能把它作为最后一个参数"></a>收集参数的前面如果还有命名参数，则只会收集其余的参数；如果没有则会得到空数组。因为收集参数的结果可变，所以只能把它作为最后一个参数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 不可以</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getProduct</span>(<span class="params">...values, lastValue</span>) </span>&#123;&#125;</span><br><span class="line"><span class="comment">// 可以</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ignoreFirst</span>(<span class="params">firstValue, ...values</span>) </span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(values);</span><br><span class="line">&#125;</span><br><span class="line">ignoreFirst(); <span class="comment">// []</span></span><br><span class="line">ignoreFirst(<span class="number">1</span>); <span class="comment">// []</span></span><br><span class="line">ignoreFirst(<span class="number">1</span>,<span class="number">2</span>); <span class="comment">// [2]</span></span><br><span class="line">ignoreFirst(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>); <span class="comment">// [2, 3] </span></span><br></pre></td></tr></table></figure><h4 id="箭头函数虽然不支持-arguments-对象，但支持收集参数的定义方式，因此也可以实现与使用arguments-一样的逻辑"><a href="#箭头函数虽然不支持-arguments-对象，但支持收集参数的定义方式，因此也可以实现与使用arguments-一样的逻辑" class="headerlink" title="箭头函数虽然不支持 arguments 对象，但支持收集参数的定义方式，因此也可以实现与使用arguments 一样的逻辑"></a>箭头函数虽然不支持 arguments 对象，但支持收集参数的定义方式，因此也可以实现与使用arguments 一样的逻辑</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> getSum = <span class="function">(<span class="params">...values</span>) =&gt;</span> &#123;</span><br><span class="line"> <span class="keyword">return</span> values.reduce(<span class="function">(<span class="params">x, y</span>) =&gt;</span> x + y, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(getSum(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)); <span class="comment">// 6 </span></span><br></pre></td></tr></table></figure><hr><h2 id="函数声明与函数表达式"><a href="#函数声明与函数表达式" class="headerlink" title="函数声明与函数表达式"></a>函数声明与函数表达式</h2><h4 id="JavaScript-引擎在任何代码执行之前，会先读取函数声明，并在执行上下文中生成函数定义。而函数表达式必须等到代码执行到它那一行，才会在执行上下文中生成函数定义。"><a href="#JavaScript-引擎在任何代码执行之前，会先读取函数声明，并在执行上下文中生成函数定义。而函数表达式必须等到代码执行到它那一行，才会在执行上下文中生成函数定义。" class="headerlink" title="JavaScript 引擎在任何代码执行之前，会先读取函数声明，并在执行上下文中生成函数定义。而函数表达式必须等到代码执行到它那一行，才会在执行上下文中生成函数定义。"></a>JavaScript 引擎在任何代码执行之前，会先读取函数声明，并在执行上下文中生成函数定义。而函数表达式必须等到代码执行到它那一行，才会在执行上下文中生成函数定义。</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 没问题</span></span><br><span class="line"><span class="built_in">console</span>.log(sum(<span class="number">10</span>, <span class="number">10</span>));</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h4 id="函数声明会在任何代码执行之前先被读取并添加到执行上下文。这个过程叫作函数声明提升（function-declaration-hoisting）。在执行代码时，JavaScript-引擎会先执行一遍扫描，把发现的函数声明提升到源代码树的顶部。因此即使函数定义出现在调用它们的代码之后，引擎也会把函数声明提升到顶部。"><a href="#函数声明会在任何代码执行之前先被读取并添加到执行上下文。这个过程叫作函数声明提升（function-declaration-hoisting）。在执行代码时，JavaScript-引擎会先执行一遍扫描，把发现的函数声明提升到源代码树的顶部。因此即使函数定义出现在调用它们的代码之后，引擎也会把函数声明提升到顶部。" class="headerlink" title="函数声明会在任何代码执行之前先被读取并添加到执行上下文。这个过程叫作函数声明提升（function declaration hoisting）。在执行代码时，JavaScript 引擎会先执行一遍扫描，把发现的函数声明提升到源代码树的顶部。因此即使函数定义出现在调用它们的代码之后，引擎也会把函数声明提升到顶部。"></a>函数声明会在任何代码执行之前先被读取并添加到执行上下文。这个过程叫作函数声明提升（function declaration hoisting）。在执行代码时，JavaScript 引擎会先执行一遍扫描，把发现的函数声明提升到源代码树的顶部。因此即使函数定义出现在调用它们的代码之后，引擎也会把函数声明提升到顶部。</h4><h4 id="把前面代码中的函数声明改为等价的函数表达式，那么执行的时候就会出错"><a href="#把前面代码中的函数声明改为等价的函数表达式，那么执行的时候就会出错" class="headerlink" title="把前面代码中的函数声明改为等价的函数表达式，那么执行的时候就会出错"></a>把前面代码中的函数声明改为等价的函数表达式，那么执行的时候就会出错</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(sum(<span class="number">10</span>, <span class="number">10</span>));</span><br><span class="line"><span class="keyword">let</span> sum = <span class="function"><span class="keyword">function</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;; </span><br></pre></td></tr></table></figure><h4 id="函数定义包含在一个变量初始化语句中，而不是函数声明中。"><a href="#函数定义包含在一个变量初始化语句中，而不是函数声明中。" class="headerlink" title="函数定义包含在一个变量初始化语句中，而不是函数声明中。"></a>函数定义包含在一个变量初始化语句中，而不是函数声明中。</h4><h4 id="这意味着代码如果没有执行到加粗的那一行，那么执行上下文中就没有函数的定义，所以上面的代码会出错。这并不是因为使用-let-而导致的，使用-var-关键字也会碰到同样的问题"><a href="#这意味着代码如果没有执行到加粗的那一行，那么执行上下文中就没有函数的定义，所以上面的代码会出错。这并不是因为使用-let-而导致的，使用-var-关键字也会碰到同样的问题" class="headerlink" title="这意味着代码如果没有执行到加粗的那一行，那么执行上下文中就没有函数的定义，所以上面的代码会出错。这并不是因为使用 let 而导致的，使用 var 关键字也会碰到同样的问题"></a>这意味着代码如果没有执行到加粗的那一行，那么执行上下文中就没有函数的定义，所以上面的代码会出错。这并不是因为使用 let 而导致的，使用 var 关键字也会碰到同样的问题</h4><hr><h2 id="函数作为值"><a href="#函数作为值" class="headerlink" title="函数作为值"></a>函数作为值</h2><h4 id="因为函数名在-ECMAScript-中就是变量，所以函数可以用在任何可以使用变量的地方。"><a href="#因为函数名在-ECMAScript-中就是变量，所以函数可以用在任何可以使用变量的地方。" class="headerlink" title="因为函数名在 ECMAScript 中就是变量，所以函数可以用在任何可以使用变量的地方。"></a>因为函数名在 ECMAScript 中就是变量，所以函数可以用在任何可以使用变量的地方。</h4><h4 id="不仅可以把函数作为参数传给另一个函数，而且还可以在一个函数中返回另一个函数。"><a href="#不仅可以把函数作为参数传给另一个函数，而且还可以在一个函数中返回另一个函数。" class="headerlink" title="不仅可以把函数作为参数传给另一个函数，而且还可以在一个函数中返回另一个函数。"></a>不仅可以把函数作为参数传给另一个函数，而且还可以在一个函数中返回另一个函数。</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add10</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> num + <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> r1 = cn(add10, <span class="number">10</span>);</span><br><span class="line"><span class="built_in">console</span>.log(r1); <span class="comment">// 20</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">gg</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="string">&quot;Hello, &quot;</span> + name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> r2 = cn(gg, <span class="string">&quot;Nicholas&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(r2); <span class="comment">// &quot;Hello, Nicholas&quot; </span></span><br></pre></td></tr></table></figure><h4 id="cn-函数是通用的，第一个参数传入的是什么函数都可以，而且它始终返回调用作为第一个参数传入的函数的结果。"><a href="#cn-函数是通用的，第一个参数传入的是什么函数都可以，而且它始终返回调用作为第一个参数传入的函数的结果。" class="headerlink" title="cn()函数是通用的，第一个参数传入的是什么函数都可以，而且它始终返回调用作为第一个参数传入的函数的结果。"></a>cn()函数是通用的，第一个参数传入的是什么函数都可以，而且它始终返回调用作为第一个参数传入的函数的结果。</h4><h4 id="要注意的是，如果是访问函数而不是调用函数，那就必须不带括号，所以传给-cn-的必须是-add10-和-gg，而不能是它们的执行结果。"><a href="#要注意的是，如果是访问函数而不是调用函数，那就必须不带括号，所以传给-cn-的必须是-add10-和-gg，而不能是它们的执行结果。" class="headerlink" title="要注意的是，如果是访问函数而不是调用函数，那就必须不带括号，所以传给 cn()的必须是 add10 和 gg，而不能是它们的执行结果。"></a>要注意的是，如果是访问函数而不是调用函数，那就必须不带括号，所以传给 cn()的必须是 add10 和 gg，而不能是它们的执行结果。</h4><hr><h2 id="函数内部"><a href="#函数内部" class="headerlink" title="函数内部"></a>函数内部</h2><h4 id="在-ECMAScript-5-中，函数内部存在两个特殊的对象arguments-和-this。ECMAScript-6-又新增了-new-target-属性"><a href="#在-ECMAScript-5-中，函数内部存在两个特殊的对象arguments-和-this。ECMAScript-6-又新增了-new-target-属性" class="headerlink" title="在 ECMAScript 5 中，函数内部存在两个特殊的对象arguments 和 this。ECMAScript 6 又新增了 new.target 属性"></a>在 ECMAScript 5 中，函数内部存在两个特殊的对象arguments 和 this。ECMAScript 6 又新增了 new.target 属性</h4><h3 id="arguments对象"><a href="#arguments对象" class="headerlink" title="arguments对象"></a>arguments对象</h3><h4 id="arguments-对象前面讨论过多次了，它是一个类数组对象，包含调用函数时传入的所有参数。这个对象只有以-function-关键字定义函数（相对于使用箭头语法创建函数）时才会有。虽然主要用于包含函数参数，但-arguments-对象其实还有一个-callee-属性，是一个指向-arguments-对象所在函数的指针。"><a href="#arguments-对象前面讨论过多次了，它是一个类数组对象，包含调用函数时传入的所有参数。这个对象只有以-function-关键字定义函数（相对于使用箭头语法创建函数）时才会有。虽然主要用于包含函数参数，但-arguments-对象其实还有一个-callee-属性，是一个指向-arguments-对象所在函数的指针。" class="headerlink" title="arguments 对象前面讨论过多次了，它是一个类数组对象，包含调用函数时传入的所有参数。这个对象只有以 function 关键字定义函数（相对于使用箭头语法创建函数）时才会有。虽然主要用于包含函数参数，但 arguments 对象其实还有一个 callee 属性，是一个指向 arguments 对象所在函数的指针。"></a>arguments 对象前面讨论过多次了，它是一个类数组对象，包含调用函数时传入的所有参数。这个对象只有以 function 关键字定义函数（相对于使用箭头语法创建函数）时才会有。虽然主要用于包含函数参数，但 arguments 对象其实还有一个 callee 属性，是一个指向 arguments 对象所在函数的指针。</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fl</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">if</span> (num &lt;= <span class="number">1</span>) &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"> <span class="keyword">return</span> num * fl(num - <span class="number">1</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h4 id="只要给函数一个名称，而且这个名称不会变，这样定义就没有问题。但是，这个函数要正确执行就必须保证函数名是-factorial，从而导致了紧密耦合。使用-arguments-callee-就可以让函数逻辑与函数名解耦"><a href="#只要给函数一个名称，而且这个名称不会变，这样定义就没有问题。但是，这个函数要正确执行就必须保证函数名是-factorial，从而导致了紧密耦合。使用-arguments-callee-就可以让函数逻辑与函数名解耦" class="headerlink" title="只要给函数一个名称，而且这个名称不会变，这样定义就没有问题。但是，这个函数要正确执行就必须保证函数名是 factorial，从而导致了紧密耦合。使用 arguments.callee 就可以让函数逻辑与函数名解耦"></a>只要给函数一个名称，而且这个名称不会变，这样定义就没有问题。但是，这个函数要正确执行就必须保证函数名是 factorial，从而导致了紧密耦合。使用 arguments.callee 就可以让函数逻辑与函数名解耦</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fl</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">if</span> (num &lt;= <span class="number">1</span>) &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"> <span class="keyword">return</span> num * <span class="built_in">arguments</span>.callee(num - <span class="number">1</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="this"><a href="#this" class="headerlink" title="this"></a>this</h3><h4 id="在标准函数中，this-引用的是把函数当成方法调用的上下文对象，这时候通常称其为-this-值（在网页的全局上下文中调用函数时，this-指向-windows）。"><a href="#在标准函数中，this-引用的是把函数当成方法调用的上下文对象，这时候通常称其为-this-值（在网页的全局上下文中调用函数时，this-指向-windows）。" class="headerlink" title="在标准函数中，this 引用的是把函数当成方法调用的上下文对象，这时候通常称其为 this 值（在网页的全局上下文中调用函数时，this 指向 windows）。"></a>在标准函数中，this 引用的是把函数当成方法调用的上下文对象，这时候通常称其为 this 值（在网页的全局上下文中调用函数时，this 指向 windows）。</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.color = <span class="string">&#x27;red&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> o = &#123;</span><br><span class="line"> color: <span class="string">&#x27;blue&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sr</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="built_in">this</span>.color);</span><br><span class="line">&#125;</span><br><span class="line">sr(); <span class="comment">// &#x27;red&#x27;</span></span><br><span class="line">o.sr = sr;</span><br><span class="line">o.sr(); <span class="comment">// &#x27;blue&#x27; </span></span><br></pre></td></tr></table></figure><h4 id="定义在全局上下文中的函数-sr-引用了-this-对象。这个-this-到底引用哪个对象必须到函数被调用时才能确定。因此这个值在代码执行的过程中可能会变。如果在全局上下文中调用sr-，这结果会输出”red”，因为-this-指向-window，而-this-color-相当于-window-color。而在把-sr-赋值给-o-之后再调用-o-sr-，this-会指向-o，即-this-color-相当于o-color，所以会显示”blue”。"><a href="#定义在全局上下文中的函数-sr-引用了-this-对象。这个-this-到底引用哪个对象必须到函数被调用时才能确定。因此这个值在代码执行的过程中可能会变。如果在全局上下文中调用sr-，这结果会输出”red”，因为-this-指向-window，而-this-color-相当于-window-color。而在把-sr-赋值给-o-之后再调用-o-sr-，this-会指向-o，即-this-color-相当于o-color，所以会显示”blue”。" class="headerlink" title="定义在全局上下文中的函数 sr()引用了 this 对象。这个 this 到底引用哪个对象必须到函数被调用时才能确定。因此这个值在代码执行的过程中可能会变。如果在全局上下文中调用sr()，这结果会输出”red”，因为 this 指向 window，而 this.color 相当于 window.color。而在把 sr()赋值给 o 之后再调用 o.sr()，this 会指向 o，即 this.color 相当于o.color，所以会显示”blue”。"></a>定义在全局上下文中的函数 sr()引用了 this 对象。这个 this 到底引用哪个对象必须到函数被调用时才能确定。因此这个值在代码执行的过程中可能会变。如果在全局上下文中调用sr()，这结果会输出”red”，因为 this 指向 window，而 this.color 相当于 window.color。而在把 sr()赋值给 o 之后再调用 o.sr()，this 会指向 o，即 this.color 相当于o.color，所以会显示”blue”。</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.color = <span class="string">&#x27;red&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> o = &#123;</span><br><span class="line"> color: <span class="string">&#x27;blue&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> sr = <span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="built_in">this</span>.color);</span><br><span class="line">sr(); <span class="comment">// &#x27;red&#x27;</span></span><br><span class="line">o.sr = sr;</span><br><span class="line">o.sr(); <span class="comment">// &#x27;red&#x27; </span></span><br></pre></td></tr></table></figure><h4 id="在箭头函数中，this引用的是定义箭头函数的上下文。下面的例子演示了这一点。在对sayColor-的两次调用中，this-引用的都是-window-对象，因为这个箭头函数是在-window-上下文中定义的"><a href="#在箭头函数中，this引用的是定义箭头函数的上下文。下面的例子演示了这一点。在对sayColor-的两次调用中，this-引用的都是-window-对象，因为这个箭头函数是在-window-上下文中定义的" class="headerlink" title="在箭头函数中，this引用的是定义箭头函数的上下文。下面的例子演示了这一点。在对sayColor()的两次调用中，this 引用的都是 window 对象，因为这个箭头函数是在 window 上下文中定义的"></a>在箭头函数中，this引用的是定义箭头函数的上下文。下面的例子演示了这一点。在对sayColor()的两次调用中，this 引用的都是 window 对象，因为这个箭头函数是在 window 上下文中定义的</h4><h4 id="在事件回调或定时回调中调用某个函数时，this-值指向的并非想要的对象。此时将回调函数写成箭头函数就可以解决问题。这是因为箭头函数中的-this-会保留定义该函数时的上下文"><a href="#在事件回调或定时回调中调用某个函数时，this-值指向的并非想要的对象。此时将回调函数写成箭头函数就可以解决问题。这是因为箭头函数中的-this-会保留定义该函数时的上下文" class="headerlink" title="在事件回调或定时回调中调用某个函数时，this 值指向的并非想要的对象。此时将回调函数写成箭头函数就可以解决问题。这是因为箭头函数中的 this 会保留定义该函数时的上下文"></a>在事件回调或定时回调中调用某个函数时，this 值指向的并非想要的对象。此时将回调函数写成箭头函数就可以解决问题。这是因为箭头函数中的 this 会保留定义该函数时的上下文</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">King</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="built_in">this</span>.re = <span class="string">&#x27;Henry&#x27;</span>;</span><br><span class="line"> <span class="comment">// this 引用 King 的实例</span></span><br><span class="line"> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="built_in">this</span>.re), <span class="number">1000</span>);</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Queen</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="built_in">this</span>.re = <span class="string">&#x27;Elizabeth&#x27;</span>;</span><br><span class="line"> <span class="comment">// this 引用 window 对象</span></span><br><span class="line"> <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="built_in">this</span>.re); &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> King(); <span class="comment">// Henry</span></span><br><span class="line"><span class="keyword">new</span> Queen(); <span class="comment">// undefined </span></span><br></pre></td></tr></table></figure><h3 id="caller"><a href="#caller" class="headerlink" title="caller"></a>caller</h3><h4 id="ECMAScript-5-也会给函数对象上添加一个属性：caller。虽然-ECMAScript-3-中并没有定义，但所有浏览器除了早期版本的-Opera-都支持这个属性。这个属性引用的是调用当前函数的函数，或者如果是在全局作用域中调用的则为-null。"><a href="#ECMAScript-5-也会给函数对象上添加一个属性：caller。虽然-ECMAScript-3-中并没有定义，但所有浏览器除了早期版本的-Opera-都支持这个属性。这个属性引用的是调用当前函数的函数，或者如果是在全局作用域中调用的则为-null。" class="headerlink" title="ECMAScript 5 也会给函数对象上添加一个属性：caller。虽然 ECMAScript 3 中并没有定义，但所有浏览器除了早期版本的 Opera 都支持这个属性。这个属性引用的是调用当前函数的函数，或者如果是在全局作用域中调用的则为 null。"></a>ECMAScript 5 也会给函数对象上添加一个属性：caller。虽然 ECMAScript 3 中并没有定义，但所有浏览器除了早期版本的 Opera 都支持这个属性。这个属性引用的是调用当前函数的函数，或者如果是在全局作用域中调用的则为 null。</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">outer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> inner();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inner</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(inner.caller);</span><br><span class="line">&#125;</span><br><span class="line">outer();</span><br></pre></td></tr></table></figure><h4 id="以上代码会显示-outer-函数的源代码。这是因为-ourter-调用了-inner-，inner-caller指向-outer-。如果要降低耦合度，则可以通过-arguments-callee-caller-来引用同样的值"><a href="#以上代码会显示-outer-函数的源代码。这是因为-ourter-调用了-inner-，inner-caller指向-outer-。如果要降低耦合度，则可以通过-arguments-callee-caller-来引用同样的值" class="headerlink" title="以上代码会显示 outer()函数的源代码。这是因为 ourter()调用了 inner()，inner.caller指向 outer()。如果要降低耦合度，则可以通过 arguments.callee.caller 来引用同样的值"></a>以上代码会显示 outer()函数的源代码。这是因为 ourter()调用了 inner()，inner.caller指向 outer()。如果要降低耦合度，则可以通过 arguments.callee.caller 来引用同样的值</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">outer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> inner();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inner</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="built_in">arguments</span>.callee.caller);</span><br><span class="line">&#125;</span><br><span class="line">outer(); </span><br></pre></td></tr></table></figure><h4 id="在严格模式下访问-arguments-callee-会报错。ECMAScript-5-也定义了-arguments-caller，但在严格模式下访问它会报错，在非严格模式下则始终是-undefined。这是为了分清-arguments-caller和函数的-caller-而故意为之的。"><a href="#在严格模式下访问-arguments-callee-会报错。ECMAScript-5-也定义了-arguments-caller，但在严格模式下访问它会报错，在非严格模式下则始终是-undefined。这是为了分清-arguments-caller和函数的-caller-而故意为之的。" class="headerlink" title="在严格模式下访问 arguments.callee 会报错。ECMAScript 5 也定义了 arguments.caller，但在严格模式下访问它会报错，在非严格模式下则始终是 undefined。这是为了分清 arguments.caller和函数的 caller 而故意为之的。"></a>在严格模式下访问 arguments.callee 会报错。ECMAScript 5 也定义了 arguments.caller，但在严格模式下访问它会报错，在非严格模式下则始终是 undefined。这是为了分清 arguments.caller和函数的 caller 而故意为之的。</h4><h3 id="new-target"><a href="#new-target" class="headerlink" title="new.target"></a>new.target</h3><h4 id="ECMAScript-中的函数始终可以作为构造函数实例化一个新对象，也可以作为普通函数被调用。ECMAScript-6-新增了检测函数是否使用-new-关键字调用的-new-target-属性。如果函数是正常调用的，则-new-target-的值是-undefined；如果是使用-new-关键字调用的，则-new-target-将引用被调用的构造函数。"><a href="#ECMAScript-中的函数始终可以作为构造函数实例化一个新对象，也可以作为普通函数被调用。ECMAScript-6-新增了检测函数是否使用-new-关键字调用的-new-target-属性。如果函数是正常调用的，则-new-target-的值是-undefined；如果是使用-new-关键字调用的，则-new-target-将引用被调用的构造函数。" class="headerlink" title="ECMAScript 中的函数始终可以作为构造函数实例化一个新对象，也可以作为普通函数被调用。ECMAScript 6 新增了检测函数是否使用 new 关键字调用的 new.target 属性。如果函数是正常调用的，则 new.target 的值是 undefined；如果是使用 new 关键字调用的，则 new.target 将引用被调用的构造函数。"></a>ECMAScript 中的函数始终可以作为构造函数实例化一个新对象，也可以作为普通函数被调用。ECMAScript 6 新增了检测函数是否使用 new 关键字调用的 new.target 属性。如果函数是正常调用的，则 new.target 的值是 undefined；如果是使用 new 关键字调用的，则 new.target 将引用被调用的构造函数。</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">King</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">if</span> (!<span class="keyword">new</span>.target) &#123;</span><br><span class="line"> <span class="keyword">throw</span> <span class="string">&#x27;King must be instantiated using &quot;new&quot;&#x27;</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">&#x27;King instantiated using &quot;new&quot;&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> King(); <span class="comment">// King instantiated using &quot;new&quot;</span></span><br><span class="line">King(); <span class="comment">// Error: King must be instantiated using &quot;new&quot; </span></span><br></pre></td></tr></table></figure><hr><h2 id="函数属性与方法"><a href="#函数属性与方法" class="headerlink" title="函数属性与方法"></a>函数属性与方法</h2><h4 id="ECMAScript-中的函数是对象，因此有属性和方法。每个函数都有两个属性：length和-prototype。其中，length-属性保存函数定义的命名参数的个数"><a href="#ECMAScript-中的函数是对象，因此有属性和方法。每个函数都有两个属性：length和-prototype。其中，length-属性保存函数定义的命名参数的个数" class="headerlink" title="ECMAScript 中的函数是对象，因此有属性和方法。每个函数都有两个属性：length和 prototype。其中，length 属性保存函数定义的命名参数的个数"></a>ECMAScript 中的函数是对象，因此有属性和方法。每个函数都有两个属性：length和 prototype。其中，length 属性保存函数定义的命名参数的个数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayName</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">&quot;hi&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sayName.length); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(sum.length); <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(sayHi.length); <span class="comment">// 0 </span></span><br></pre></td></tr></table></figure><h4 id="sayName-函数有-1-个命名参数，所以其-length-属性为-1。类似地，sum-函数有两个命名参数，所以其-length-属性是-2。而-sayHi-没有命名参数，其-length-属性为-0。"><a href="#sayName-函数有-1-个命名参数，所以其-length-属性为-1。类似地，sum-函数有两个命名参数，所以其-length-属性是-2。而-sayHi-没有命名参数，其-length-属性为-0。" class="headerlink" title="sayName()函数有 1 个命名参数，所以其 length 属性为 1。类似地，sum()函数有两个命名参数，所以其 length 属性是 2。而 sayHi()没有命名参数，其 length 属性为 0。"></a>sayName()函数有 1 个命名参数，所以其 length 属性为 1。类似地，sum()函数有两个命名参数，所以其 length 属性是 2。而 sayHi()没有命名参数，其 length 属性为 0。</h4><h4 id="prototype"><a href="#prototype" class="headerlink" title="prototype"></a>prototype</h4><h4 id="是保存引用类型所有实例方法的地方，这意味着-toString-、valueOf-等方法实际上都保存在-prototype-上，进而由所有实例共享。这个属性在自定义类型时特别重要。（相关内容已经在第-8-章详细介绍过了。）在-ECMAScript-5中，prototype-属性是不可枚举的，因此使用-for-in-循环不会返回这个属性。"><a href="#是保存引用类型所有实例方法的地方，这意味着-toString-、valueOf-等方法实际上都保存在-prototype-上，进而由所有实例共享。这个属性在自定义类型时特别重要。（相关内容已经在第-8-章详细介绍过了。）在-ECMAScript-5中，prototype-属性是不可枚举的，因此使用-for-in-循环不会返回这个属性。" class="headerlink" title="是保存引用类型所有实例方法的地方，这意味着 toString()、valueOf()等方法实际上都保存在 prototype 上，进而由所有实例共享。这个属性在自定义类型时特别重要。（相关内容已经在第 8 章详细介绍过了。）在 ECMAScript 5中，prototype 属性是不可枚举的，因此使用 for-in 循环不会返回这个属性。"></a>是保存引用类型所有实例方法的地方，这意味着 toString()、valueOf()等方法实际上都保存在 prototype 上，进而由所有实例共享。这个属性在自定义类型时特别重要。（相关内容已经在第 8 章详细介绍过了。）在 ECMAScript 5中，prototype 属性是不可枚举的，因此使用 for-in 循环不会返回这个属性。</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callSum1</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> sum.apply(<span class="built_in">this</span>, <span class="built_in">arguments</span>); <span class="comment">// 传入 arguments 对象</span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callSum2</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> sum.apply(<span class="built_in">this</span>, [num1, num2]); <span class="comment">// 传入数组</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(callSum1(<span class="number">10</span>, <span class="number">10</span>)); <span class="comment">// 20</span></span><br><span class="line"><span class="built_in">console</span>.log(callSum2(<span class="number">10</span>, <span class="number">10</span>)); <span class="comment">// 20 </span></span><br></pre></td></tr></table></figure><h4 id="callSum1-会调用-sum-函数，将-this-作为函数体内的-this-值（这里等于window，因为是在全局作用域中调用的）传入，同时还传入了-arguments-对象。callSum2-也会调用-sum-函数，但会传入参数的数组。这两个函数都会执行并返回正确的结果。"><a href="#callSum1-会调用-sum-函数，将-this-作为函数体内的-this-值（这里等于window，因为是在全局作用域中调用的）传入，同时还传入了-arguments-对象。callSum2-也会调用-sum-函数，但会传入参数的数组。这两个函数都会执行并返回正确的结果。" class="headerlink" title="callSum1()会调用 sum()函数，将 this 作为函数体内的 this 值（这里等于window，因为是在全局作用域中调用的）传入，同时还传入了 arguments 对象。callSum2()也会调用 sum()函数，但会传入参数的数组。这两个函数都会执行并返回正确的结果。"></a>callSum1()会调用 sum()函数，将 this 作为函数体内的 this 值（这里等于window，因为是在全局作用域中调用的）传入，同时还传入了 arguments 对象。callSum2()也会调用 sum()函数，但会传入参数的数组。这两个函数都会执行并返回正确的结果。</h4><h4 id="在严格模式下，调用函数时如果没有指定上下文对象，则-this-值不会指向-window。除非使用-apply-或-call-把函数指定给一个对象，否则-this-的值会变成-undefined。"><a href="#在严格模式下，调用函数时如果没有指定上下文对象，则-this-值不会指向-window。除非使用-apply-或-call-把函数指定给一个对象，否则-this-的值会变成-undefined。" class="headerlink" title="在严格模式下，调用函数时如果没有指定上下文对象，则 this 值不会指向 window。除非使用 apply()或 call()把函数指定给一个对象，否则 this 的值会变成 undefined。"></a>在严格模式下，调用函数时如果没有指定上下文对象，则 this 值不会指向 window。除非使用 apply()或 call()把函数指定给一个对象，否则 this 的值会变成 undefined。</h4><h4 id="call-方法与-apply-的作用一样，只是传参的形式不同。第一个参数跟-apply-一样，也是-this值，而剩下的要传给被调用函数的参数则是逐个传递的。换句话说，通过-call-向函数传参时，必须将参数一个一个地列出来"><a href="#call-方法与-apply-的作用一样，只是传参的形式不同。第一个参数跟-apply-一样，也是-this值，而剩下的要传给被调用函数的参数则是逐个传递的。换句话说，通过-call-向函数传参时，必须将参数一个一个地列出来" class="headerlink" title="call()方法与 apply()的作用一样，只是传参的形式不同。第一个参数跟 apply()一样，也是 this值，而剩下的要传给被调用函数的参数则是逐个传递的。换句话说，通过 call()向函数传参时，必须将参数一个一个地列出来"></a>call()方法与 apply()的作用一样，只是传参的形式不同。第一个参数跟 apply()一样，也是 this值，而剩下的要传给被调用函数的参数则是逐个传递的。换句话说，通过 call()向函数传参时，必须将参数一个一个地列出来</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callSum</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> sum.call(<span class="built_in">this</span>, num1, num2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(callSum(<span class="number">10</span>, <span class="number">10</span>)); <span class="comment">// 20 </span></span><br></pre></td></tr></table></figure><h4 id="这里的-callSum-函数必须逐个地把参数传给-call-方法。结果跟-apply-的例子一样。到底是使用-apply-还是-call-，完全取决于怎么给要调用的函数传参更方便。如果想直接传-arguments对象或者一个数组，那就用-apply-；否则，就用-call-。当然，如果不用给被调用的函数传参，则使用哪个方法都一样。"><a href="#这里的-callSum-函数必须逐个地把参数传给-call-方法。结果跟-apply-的例子一样。到底是使用-apply-还是-call-，完全取决于怎么给要调用的函数传参更方便。如果想直接传-arguments对象或者一个数组，那就用-apply-；否则，就用-call-。当然，如果不用给被调用的函数传参，则使用哪个方法都一样。" class="headerlink" title="这里的 callSum()函数必须逐个地把参数传给 call()方法。结果跟 apply()的例子一样。到底是使用 apply()还是 call()，完全取决于怎么给要调用的函数传参更方便。如果想直接传 arguments对象或者一个数组，那就用 apply()；否则，就用 call()。当然，如果不用给被调用的函数传参，则使用哪个方法都一样。"></a>这里的 callSum()函数必须逐个地把参数传给 call()方法。结果跟 apply()的例子一样。到底是使用 apply()还是 call()，完全取决于怎么给要调用的函数传参更方便。如果想直接传 arguments对象或者一个数组，那就用 apply()；否则，就用 call()。当然，如果不用给被调用的函数传参，则使用哪个方法都一样。</h4><h4 id="apply-和-call-真正强大的地方并不是给函数传参，而是控制函数调用上下文即函数体内-this值的能力。"><a href="#apply-和-call-真正强大的地方并不是给函数传参，而是控制函数调用上下文即函数体内-this值的能力。" class="headerlink" title="apply()和 call()真正强大的地方并不是给函数传参，而是控制函数调用上下文即函数体内 this值的能力。"></a>apply()和 call()真正强大的地方并不是给函数传参，而是控制函数调用上下文即函数体内 this值的能力。</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.color = <span class="string">&#x27;red&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> o = &#123;</span><br><span class="line"> color: <span class="string">&#x27;blue&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayColor</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="built_in">this</span>.color);</span><br><span class="line">&#125;</span><br><span class="line">sayColor(); <span class="comment">// red</span></span><br><span class="line">sayColor.call(<span class="built_in">this</span>); <span class="comment">// red</span></span><br><span class="line">sayColor.call(<span class="built_in">window</span>); <span class="comment">// red</span></span><br><span class="line">sayColor.call(o); <span class="comment">// blue </span></span><br></pre></td></tr></table></figure><h4 id="这个例子是在之前那个关于-this-对象的例子基础上修改而成的。同样，sayColor-是一个全局函数，如果在全局作用域中调用它，那么会显示”red”。这是因为-this-color-会求值为-window-color。如果在全局作用域中显式调用-sayColor-call-this-或者-sayColor-call-window-，则同样都会显示”red”。而在使用-sayColor-call-o-把函数的执行上下文即-this-切换为对象-o-之后，结果就变成了显示”blue”了。"><a href="#这个例子是在之前那个关于-this-对象的例子基础上修改而成的。同样，sayColor-是一个全局函数，如果在全局作用域中调用它，那么会显示”red”。这是因为-this-color-会求值为-window-color。如果在全局作用域中显式调用-sayColor-call-this-或者-sayColor-call-window-，则同样都会显示”red”。而在使用-sayColor-call-o-把函数的执行上下文即-this-切换为对象-o-之后，结果就变成了显示”blue”了。" class="headerlink" title="这个例子是在之前那个关于 this 对象的例子基础上修改而成的。同样，sayColor()是一个全局函数，如果在全局作用域中调用它，那么会显示”red”。这是因为 this.color 会求值为 window.color。如果在全局作用域中显式调用 sayColor.call(this)或者 sayColor.call(window)，则同样都会显示”red”。而在使用 sayColor.call(o)把函数的执行上下文即 this 切换为对象 o 之后，结果就变成了显示”blue”了。"></a>这个例子是在之前那个关于 this 对象的例子基础上修改而成的。同样，sayColor()是一个全局函数，如果在全局作用域中调用它，那么会显示”red”。这是因为 this.color 会求值为 window.color。如果在全局作用域中显式调用 sayColor.call(this)或者 sayColor.call(window)，则同样都会显示”red”。而在使用 sayColor.call(o)把函数的执行上下文即 this 切换为对象 o 之后，结果就变成了显示”blue”了。</h4><h2 id="函数表达式"><a href="#函数表达式" class="headerlink" title="函数表达式"></a>函数表达式</h2><h4 id="函数表达式虽然更强大，但也更容易让人迷惑。我们知道，定义函数有两种方式：函数声明和函数表达式。"><a href="#函数表达式虽然更强大，但也更容易让人迷惑。我们知道，定义函数有两种方式：函数声明和函数表达式。" class="headerlink" title="函数表达式虽然更强大，但也更容易让人迷惑。我们知道，定义函数有两种方式：函数声明和函数表达式。"></a>函数表达式虽然更强大，但也更容易让人迷惑。我们知道，定义函数有两种方式：函数声明和函数表达式。</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">functionName</span>(<span class="params">arg0, arg1, arg2</span>) </span>&#123;</span><br><span class="line"> <span class="comment">// 函数体</span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h4 id="函数声明的关键特点是函数声明提升，即函数声明会在代码执行之前获得定义。这意味着函数声明可以出现在调用它的代码之后"><a href="#函数声明的关键特点是函数声明提升，即函数声明会在代码执行之前获得定义。这意味着函数声明可以出现在调用它的代码之后" class="headerlink" title="函数声明的关键特点是函数声明提升，即函数声明会在代码执行之前获得定义。这意味着函数声明可以出现在调用它的代码之后"></a>函数声明的关键特点是函数声明提升，即函数声明会在代码执行之前获得定义。这意味着函数声明可以出现在调用它的代码之后</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sayHi();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">&quot;Hi!&quot;</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h4 id="这个例子不会抛出错误，因为-JavaScript-引擎会先读取函数声明，然后再执行代码。第二种创建函数的方式就是函数表达式。函数表达式有几种不同的形式，最常见的是这样的"><a href="#这个例子不会抛出错误，因为-JavaScript-引擎会先读取函数声明，然后再执行代码。第二种创建函数的方式就是函数表达式。函数表达式有几种不同的形式，最常见的是这样的" class="headerlink" title="这个例子不会抛出错误，因为 JavaScript 引擎会先读取函数声明，然后再执行代码。第二种创建函数的方式就是函数表达式。函数表达式有几种不同的形式，最常见的是这样的"></a>这个例子不会抛出错误，因为 JavaScript 引擎会先读取函数声明，然后再执行代码。第二种创建函数的方式就是函数表达式。函数表达式有几种不同的形式，最常见的是这样的</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> functionName = <span class="function"><span class="keyword">function</span>(<span class="params">arg0, arg1, arg2</span>) </span>&#123;</span><br><span class="line"> <span class="comment">// 函数体</span></span><br><span class="line">&#125;; </span><br></pre></td></tr></table></figure><h4 id="函数表达式看起来就像一个普通的变量定义和赋值，即创建一个函数再把它赋值给一个变量functionName。这样创建的函数叫作匿名函数（anonymous-funtion），因为-function-关键字后面没有标识符。（匿名函数有也时候也被称为兰姆达函数）。未赋值给其他变量的匿名函数的-name-属性是空字符串。"><a href="#函数表达式看起来就像一个普通的变量定义和赋值，即创建一个函数再把它赋值给一个变量functionName。这样创建的函数叫作匿名函数（anonymous-funtion），因为-function-关键字后面没有标识符。（匿名函数有也时候也被称为兰姆达函数）。未赋值给其他变量的匿名函数的-name-属性是空字符串。" class="headerlink" title="函数表达式看起来就像一个普通的变量定义和赋值，即创建一个函数再把它赋值给一个变量functionName。这样创建的函数叫作匿名函数（anonymous funtion），因为 function 关键字后面没有标识符。（匿名函数有也时候也被称为兰姆达函数）。未赋值给其他变量的匿名函数的 name 属性是空字符串。"></a>函数表达式看起来就像一个普通的变量定义和赋值，即创建一个函数再把它赋值给一个变量functionName。这样创建的函数叫作匿名函数（anonymous funtion），因为 function 关键字后面没有标识符。（匿名函数有也时候也被称为兰姆达函数）。未赋值给其他变量的匿名函数的 name 属性是空字符串。</h4><h4 id="函数表达式跟-JavaScript-中的其他表达式一样，需要先赋值再使用。下面的例子会导致错误："><a href="#函数表达式跟-JavaScript-中的其他表达式一样，需要先赋值再使用。下面的例子会导致错误：" class="headerlink" title="函数表达式跟 JavaScript 中的其他表达式一样，需要先赋值再使用。下面的例子会导致错误："></a>函数表达式跟 JavaScript 中的其他表达式一样，需要先赋值再使用。下面的例子会导致错误：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sayHi(); <span class="comment">// Error! function doesn&#x27;t exist yet</span></span><br><span class="line"><span class="keyword">let</span> sayHi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">&quot;Hi!&quot;</span>);</span><br><span class="line">&#125;; </span><br></pre></td></tr></table></figure><h4 id="理解函数声明与函数表达式之间的区别，关键是理解提升。比如，以下代码的执行结果可能会出乎意料："><a href="#理解函数声明与函数表达式之间的区别，关键是理解提升。比如，以下代码的执行结果可能会出乎意料：" class="headerlink" title="理解函数声明与函数表达式之间的区别，关键是理解提升。比如，以下代码的执行结果可能会出乎意料："></a>理解函数声明与函数表达式之间的区别，关键是理解提升。比如，以下代码的执行结果可能会出乎意料：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 千万别这样做！</span></span><br><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">&#x27;Hi!&#x27;</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">&#x27;Yo!&#x27;</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h4 id="这段代码看起来很正常，就是如果-condition-为-true，则使用第一个-sayHi-定义；否则，就使用第二个。事实上，这种写法在-ECAMScript-中不是有效的语法。JavaScript-引擎会尝试将其纠正为适当的声明。问题在于浏览器纠正这个问题的方式并不一致。多数浏览器会忽略-condition-直接返回第二个声明。Firefox-会在-condition-为-true-时返回第一个声明。这种写法很危险，不要使用。不过，如果把上面的函数声明换成函数表达式就没问题了"><a href="#这段代码看起来很正常，就是如果-condition-为-true，则使用第一个-sayHi-定义；否则，就使用第二个。事实上，这种写法在-ECAMScript-中不是有效的语法。JavaScript-引擎会尝试将其纠正为适当的声明。问题在于浏览器纠正这个问题的方式并不一致。多数浏览器会忽略-condition-直接返回第二个声明。Firefox-会在-condition-为-true-时返回第一个声明。这种写法很危险，不要使用。不过，如果把上面的函数声明换成函数表达式就没问题了" class="headerlink" title="这段代码看起来很正常，就是如果 condition 为 true，则使用第一个 sayHi()定义；否则，就使用第二个。事实上，这种写法在 ECAMScript 中不是有效的语法。JavaScript 引擎会尝试将其纠正为适当的声明。问题在于浏览器纠正这个问题的方式并不一致。多数浏览器会忽略 condition 直接返回第二个声明。Firefox 会在 condition 为 true 时返回第一个声明。这种写法很危险，不要使用。不过，如果把上面的函数声明换成函数表达式就没问题了"></a>这段代码看起来很正常，就是如果 condition 为 true，则使用第一个 sayHi()定义；否则，就使用第二个。事实上，这种写法在 ECAMScript 中不是有效的语法。JavaScript 引擎会尝试将其纠正为适当的声明。问题在于浏览器纠正这个问题的方式并不一致。多数浏览器会忽略 condition 直接返回第二个声明。Firefox 会在 condition 为 true 时返回第一个声明。这种写法很危险，不要使用。不过，如果把上面的函数声明换成函数表达式就没问题了</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 没问题</span></span><br><span class="line"><span class="keyword">let</span> sayHi;</span><br><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line"> sayHi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">&quot;Hi!&quot;</span>);</span><br><span class="line"> &#125;;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"> sayHi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">&quot;Yo!&quot;</span>);</span><br><span class="line"> &#125;;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h4 id="根据-condition-的值为变量-sayHi-赋予相应的函数。创建函数并赋值给变量的能力也可以用于在一个函数中把另一个函数当作值返回："><a href="#根据-condition-的值为变量-sayHi-赋予相应的函数。创建函数并赋值给变量的能力也可以用于在一个函数中把另一个函数当作值返回：" class="headerlink" title="根据 condition 的值为变量 sayHi 赋予相应的函数。创建函数并赋值给变量的能力也可以用于在一个函数中把另一个函数当作值返回："></a>根据 condition 的值为变量 sayHi 赋予相应的函数。创建函数并赋值给变量的能力也可以用于在一个函数中把另一个函数当作值返回：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cn</span>(<span class="params">pName</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">object1, object2</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">let</span> value1 = object1[pName];</span><br><span class="line"> <span class="keyword">let</span> value2 = object2[pName];</span><br><span class="line"> <span class="keyword">if</span> (value1 &lt; value2) &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"> &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value1 &gt; value2) &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h4 id="这里的-cn-函数返回一个匿名函数，这个匿名函数要么被赋值给一个变量，要么可以直接调用。但在-cn-内部，那个函数是匿名的。任何时候，只要函数被当作值来使用，它就是一个函数表达式。"><a href="#这里的-cn-函数返回一个匿名函数，这个匿名函数要么被赋值给一个变量，要么可以直接调用。但在-cn-内部，那个函数是匿名的。任何时候，只要函数被当作值来使用，它就是一个函数表达式。" class="headerlink" title="这里的 cn()函数返回一个匿名函数，这个匿名函数要么被赋值给一个变量，要么可以直接调用。但在 cn()内部，那个函数是匿名的。任何时候，只要函数被当作值来使用，它就是一个函数表达式。"></a>这里的 cn()函数返回一个匿名函数，这个匿名函数要么被赋值给一个变量，要么可以直接调用。但在 cn()内部，那个函数是匿名的。任何时候，只要函数被当作值来使用，它就是一个函数表达式。</h4><hr><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><h4 id="递归函数通常的形式是一个函数通过名称调用自己"><a href="#递归函数通常的形式是一个函数通过名称调用自己" class="headerlink" title="递归函数通常的形式是一个函数通过名称调用自己"></a>递归函数通常的形式是一个函数通过名称调用自己</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fl</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">if</span> (num &lt;= <span class="number">1</span>) &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"> <span class="keyword">return</span> num * fl(num - <span class="number">1</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h4 id="这是经典的递归阶乘函数。虽然这样写是可以的，但如果把这个函数赋值给其他变量"><a href="#这是经典的递归阶乘函数。虽然这样写是可以的，但如果把这个函数赋值给其他变量" class="headerlink" title="这是经典的递归阶乘函数。虽然这样写是可以的，但如果把这个函数赋值给其他变量"></a>这是经典的递归阶乘函数。虽然这样写是可以的，但如果把这个函数赋值给其他变量</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> al = fl;</span><br><span class="line">fl = <span class="literal">null</span>;</span><br><span class="line"><span class="built_in">console</span>.log(al(<span class="number">4</span>)); <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure><h4 id="这里把-fl-函数保存在了另一个变量-al-中，然后将-fl-设置为-null，于是只保留了一个对原始函数的引用。而在调用-al-时，要递归调用fl-，但因为它已经不是函数了，所以会出错。在写递归函数时使用-arguments-callee-可以避免这个问题。"><a href="#这里把-fl-函数保存在了另一个变量-al-中，然后将-fl-设置为-null，于是只保留了一个对原始函数的引用。而在调用-al-时，要递归调用fl-，但因为它已经不是函数了，所以会出错。在写递归函数时使用-arguments-callee-可以避免这个问题。" class="headerlink" title="这里把 fl()函数保存在了另一个变量 al 中，然后将 fl 设置为 null，于是只保留了一个对原始函数的引用。而在调用 al()时，要递归调用fl()，但因为它已经不是函数了，所以会出错。在写递归函数时使用 arguments.callee 可以避免这个问题。"></a>这里把 fl()函数保存在了另一个变量 al 中，然后将 fl 设置为 null，于是只保留了一个对原始函数的引用。而在调用 al()时，要递归调用fl()，但因为它已经不是函数了，所以会出错。在写递归函数时使用 arguments.callee 可以避免这个问题。</h4><h4 id="把函数名称替换成-arguments-callee，可以确保无论通过什么变量调用这个函数都不会出问题。因此在编写递归函数时，arguments-callee-是引用当前函数的首选。"><a href="#把函数名称替换成-arguments-callee，可以确保无论通过什么变量调用这个函数都不会出问题。因此在编写递归函数时，arguments-callee-是引用当前函数的首选。" class="headerlink" title="把函数名称替换成 arguments.callee，可以确保无论通过什么变量调用这个函数都不会出问题。因此在编写递归函数时，arguments.callee 是引用当前函数的首选。"></a>把函数名称替换成 arguments.callee，可以确保无论通过什么变量调用这个函数都不会出问题。因此在编写递归函数时，arguments.callee 是引用当前函数的首选。</h4><h4 id="不过，在严格模式下运行的代码是不能访问-arguments-callee-的，因为访问会出错。此时，可以使用命名函数表达式（named-function-expression）达到目的。"><a href="#不过，在严格模式下运行的代码是不能访问-arguments-callee-的，因为访问会出错。此时，可以使用命名函数表达式（named-function-expression）达到目的。" class="headerlink" title="不过，在严格模式下运行的代码是不能访问 arguments.callee 的，因为访问会出错。此时，可以使用命名函数表达式（named function expression）达到目的。"></a>不过，在严格模式下运行的代码是不能访问 arguments.callee 的，因为访问会出错。此时，可以使用命名函数表达式（named function expression）达到目的。</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fl = (<span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">if</span> (num &lt;= <span class="number">1</span>) &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"> <span class="keyword">return</span> num * f(num - <span class="number">1</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;); </span><br></pre></td></tr></table></figure><h4 id="这里创建了一个命名函数表达式-f-，然后将它赋值给了变量-fl。即使把函数赋值给另一个变量，函数表达式的名称-f-也不变，因此递归调用不会有问题。这个模式在严格模式和非严格模式下都可以使用。"><a href="#这里创建了一个命名函数表达式-f-，然后将它赋值给了变量-fl。即使把函数赋值给另一个变量，函数表达式的名称-f-也不变，因此递归调用不会有问题。这个模式在严格模式和非严格模式下都可以使用。" class="headerlink" title="这里创建了一个命名函数表达式 f()，然后将它赋值给了变量 fl。即使把函数赋值给另一个变量，函数表达式的名称 f 也不变，因此递归调用不会有问题。这个模式在严格模式和非严格模式下都可以使用。"></a>这里创建了一个命名函数表达式 f()，然后将它赋值给了变量 fl。即使把函数赋值给另一个变量，函数表达式的名称 f 也不变，因此递归调用不会有问题。这个模式在严格模式和非严格模式下都可以使用。</h4><hr><h2 id="尾调用优化"><a href="#尾调用优化" class="headerlink" title="尾调用优化"></a>尾调用优化</h2><h4 id="ECMAScript-6-规范新增了一项内存管理优化机制，让-JavaScript-引擎在满足条件时可以重用栈帧。具体来说，这项优化非常适合“尾调用”，即外部函数的返回值是一个内部函数的返回值。"><a href="#ECMAScript-6-规范新增了一项内存管理优化机制，让-JavaScript-引擎在满足条件时可以重用栈帧。具体来说，这项优化非常适合“尾调用”，即外部函数的返回值是一个内部函数的返回值。" class="headerlink" title="ECMAScript 6 规范新增了一项内存管理优化机制，让 JavaScript 引擎在满足条件时可以重用栈帧。具体来说，这项优化非常适合“尾调用”，即外部函数的返回值是一个内部函数的返回值。"></a>ECMAScript 6 规范新增了一项内存管理优化机制，让 JavaScript 引擎在满足条件时可以重用栈帧。具体来说，这项优化非常适合“尾调用”，即外部函数的返回值是一个内部函数的返回值。</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">oFun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> iFun(); <span class="comment">// 尾调用</span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h4 id="在-ES6-优化之前，执行这个例子会在内存中发生如下操作"><a href="#在-ES6-优化之前，执行这个例子会在内存中发生如下操作" class="headerlink" title="在 ES6 优化之前，执行这个例子会在内存中发生如下操作"></a>在 ES6 优化之前，执行这个例子会在内存中发生如下操作</h4><ul><li>执行到 oFun 函数体，第一个栈帧被推到栈上。</li><li>执行 oFun 函数体，到 return 语句。计算返回值必须先计算 iFun。</li><li>执行到 iFun 函数体，第二个栈帧被推到栈上。</li><li>执行 iFun 函数体，计算其返回值。</li><li>将返回值传回 oFun，然后 oFun 再返回值。</li><li>将栈帧弹出栈外。<h4 id="ES6-优化之后，执行这个例子会在内存中发生如下操作。"><a href="#ES6-优化之后，执行这个例子会在内存中发生如下操作。" class="headerlink" title="ES6 优化之后，执行这个例子会在内存中发生如下操作。"></a>ES6 优化之后，执行这个例子会在内存中发生如下操作。</h4></li><li>执行到 oFun 函数体，第一个栈帧被推到栈上。</li><li>执行 oFun 函数体，到达 return 语句。为求值返回语句，必须先求值iFun。</li><li>引擎发现把第一个栈帧弹出栈外也没问题，因为 iFun 的返回值也是 oFun<br>的返回值。</li><li>弹出oFun 的栈帧。</li><li>执行到 iFun 函数体，栈帧被推到栈上。</li><li>执行 iFun 函数体，计算其返回值。</li><li>将 iFun 的栈帧弹出栈外。<h4 id="现在还没有办法测试尾调用优化是否起作用。不过，因为这是-ES6-规范所规定的，兼容的浏览器实现都能保证在代码满足条件的情况下应用这个优化。"><a href="#现在还没有办法测试尾调用优化是否起作用。不过，因为这是-ES6-规范所规定的，兼容的浏览器实现都能保证在代码满足条件的情况下应用这个优化。" class="headerlink" title="现在还没有办法测试尾调用优化是否起作用。不过，因为这是 ES6 规范所规定的，兼容的浏览器实现都能保证在代码满足条件的情况下应用这个优化。"></a>现在还没有办法测试尾调用优化是否起作用。不过，因为这是 ES6 规范所规定的，兼容的浏览器实现都能保证在代码满足条件的情况下应用这个优化。</h4></li></ul><h3 id="尾调用优化的条件"><a href="#尾调用优化的条件" class="headerlink" title="尾调用优化的条件"></a>尾调用优化的条件</h3><ul><li>代码在严格模式下执行；</li><li>外部函数的返回值是对尾调用函数的调用；</li><li>尾调用函数返回后不需要执行额外的逻辑；</li><li>尾调用函数不是引用外部函数作用域中自由变量的闭包。</li></ul><h3 id="尾调用优化的代码"><a href="#尾调用优化的代码" class="headerlink" title="尾调用优化的代码"></a>尾调用优化的代码</h3><h4 id="可以通过把简单的递归函数转换为待优化的代码来加深对尾调用优化的理解。下面是一个通过递归计算斐波纳契数列的函数"><a href="#可以通过把简单的递归函数转换为待优化的代码来加深对尾调用优化的理解。下面是一个通过递归计算斐波纳契数列的函数" class="headerlink" title="可以通过把简单的递归函数转换为待优化的代码来加深对尾调用优化的理解。下面是一个通过递归计算斐波纳契数列的函数"></a>可以通过把简单的递归函数转换为待优化的代码来加深对尾调用优化的理解。下面是一个通过递归计算斐波纳契数列的函数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fib</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">if</span> (n &lt; <span class="number">2</span>) &#123;</span><br><span class="line"> <span class="keyword">return</span> n;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> fib(n - <span class="number">1</span>) + fib(n - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(fib(<span class="number">0</span>)); <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(fib(<span class="number">1</span>)); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(fib(<span class="number">2</span>)); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(fib(<span class="number">3</span>)); <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(fib(<span class="number">4</span>)); <span class="comment">// 3</span></span><br><span class="line"><span class="built_in">console</span>.log(fib(<span class="number">5</span>)); <span class="comment">// 5</span></span><br><span class="line"><span class="built_in">console</span>.log(fib(<span class="number">6</span>)); <span class="comment">// 8 </span></span><br></pre></td></tr></table></figure><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><h4 id="匿名函数经常被人误认为是闭包（closure）"><a href="#匿名函数经常被人误认为是闭包（closure）" class="headerlink" title="匿名函数经常被人误认为是闭包（closure）"></a>匿名函数经常被人误认为是闭包（closure）</h4><h4 id="闭包是一个拥有许多变量和绑定这些变量的环境表达式"><a href="#闭包是一个拥有许多变量和绑定这些变量的环境表达式" class="headerlink" title="闭包是一个拥有许多变量和绑定这些变量的环境表达式"></a>闭包是一个拥有许多变量和绑定这些变量的环境表达式</h4><h4 id="闭包指的是那些引用了另一个函数作用域中变量的函数，通常是在嵌套函数中实现的。"><a href="#闭包指的是那些引用了另一个函数作用域中变量的函数，通常是在嵌套函数中实现的。" class="headerlink" title="闭包指的是那些引用了另一个函数作用域中变量的函数，通常是在嵌套函数中实现的。"></a>闭包指的是那些引用了另一个函数作用域中变量的函数，通常是在嵌套函数中实现的。</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cFun</span>(<span class="params">propertyName</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">obj1, obj2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> v1 = obj1[propertyName];</span><br><span class="line">    <span class="keyword">let</span> v2 = obj2[propertyName];</span><br><span class="line">          <span class="keyword">if</span> (v1 &lt; v2) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (v1 &gt; v2) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="其中引用了外部函数的变量-propertyName。在这个内部函数被返回并在其他地方被使用后，它仍然引用着那个变量。这是因为内部函数的作用域链包含cFunn-函数的作用域。要理解为什么会这样，可以想想第一次调用这个函数时会发生什么"><a href="#其中引用了外部函数的变量-propertyName。在这个内部函数被返回并在其他地方被使用后，它仍然引用着那个变量。这是因为内部函数的作用域链包含cFunn-函数的作用域。要理解为什么会这样，可以想想第一次调用这个函数时会发生什么" class="headerlink" title="其中引用了外部函数的变量 propertyName。在这个内部函数被返回并在其他地方被使用后，它仍然引用着那个变量。这是因为内部函数的作用域链包含cFunn()函数的作用域。要理解为什么会这样，可以想想第一次调用这个函数时会发生什么"></a>其中引用了外部函数的变量 propertyName。在这个内部函数被返回并在其他地方被使用后，它仍然引用着那个变量。这是因为内部函数的作用域链包含cFunn()函数的作用域。要理解为什么会这样，可以想想第一次调用这个函数时会发生什么</h4><h4 id="因为闭包会保留它们包含函数的作用域，所以比其他函数更占用内存。过度使用闭包可能导致内存过度占用，因此建议仅在十分必要时使用。V8-等优化的-JavaScript-引擎会努力回收被闭包困住的内存，不过我们还是建议在使用闭包时要谨慎。"><a href="#因为闭包会保留它们包含函数的作用域，所以比其他函数更占用内存。过度使用闭包可能导致内存过度占用，因此建议仅在十分必要时使用。V8-等优化的-JavaScript-引擎会努力回收被闭包困住的内存，不过我们还是建议在使用闭包时要谨慎。" class="headerlink" title="因为闭包会保留它们包含函数的作用域，所以比其他函数更占用内存。过度使用闭包可能导致内存过度占用，因此建议仅在十分必要时使用。V8 等优化的 JavaScript 引擎会努力回收被闭包困住的内存，不过我们还是建议在使用闭包时要谨慎。"></a>因为闭包会保留它们包含函数的作用域，所以比其他函数更占用内存。过度使用闭包可能导致内存过度占用，因此建议仅在十分必要时使用。V8 等优化的 JavaScript 引擎会努力回收被闭包困住的内存，不过我们还是建议在使用闭包时要谨慎。</h4><h3 id="this-对象"><a href="#this-对象" class="headerlink" title="this 对象"></a>this 对象</h3><h4 id="在闭包中使用-this-会让代码变复杂。如果内部函数没有使用箭头函数定义，则-this-对象会在运行时绑定到执行函数的上下文。如果在全局函数中调用，则-this-在非严格模式下等于-window，在严格模式下等于-undefined。如果作为某个对象的方法调用，则-this-等于这个对象。匿名函数在这种情况下不会绑定到某个对象，这就意味着-this-会指向-window，除非在严格模式下-this-是-undefined。不过，由于闭包的写法所致，这个事实有时候没有那么容易看出来。"><a href="#在闭包中使用-this-会让代码变复杂。如果内部函数没有使用箭头函数定义，则-this-对象会在运行时绑定到执行函数的上下文。如果在全局函数中调用，则-this-在非严格模式下等于-window，在严格模式下等于-undefined。如果作为某个对象的方法调用，则-this-等于这个对象。匿名函数在这种情况下不会绑定到某个对象，这就意味着-this-会指向-window，除非在严格模式下-this-是-undefined。不过，由于闭包的写法所致，这个事实有时候没有那么容易看出来。" class="headerlink" title="在闭包中使用 this 会让代码变复杂。如果内部函数没有使用箭头函数定义，则 this 对象会在运行时绑定到执行函数的上下文。如果在全局函数中调用，则 this 在非严格模式下等于 window，在严格模式下等于 undefined。如果作为某个对象的方法调用，则 this 等于这个对象。匿名函数在这种情况下不会绑定到某个对象，这就意味着 this 会指向 window，除非在严格模式下 this 是 undefined。不过，由于闭包的写法所致，这个事实有时候没有那么容易看出来。"></a>在闭包中使用 this 会让代码变复杂。如果内部函数没有使用箭头函数定义，则 this 对象会在运行时绑定到执行函数的上下文。如果在全局函数中调用，则 this 在非严格模式下等于 window，在严格模式下等于 undefined。如果作为某个对象的方法调用，则 this 等于这个对象。匿名函数在这种情况下不会绑定到某个对象，这就意味着 this 会指向 window，除非在严格模式下 this 是 undefined。不过，由于闭包的写法所致，这个事实有时候没有那么容易看出来。</h4><h4 id="每个函数在被调用时都会自动创建两个特殊变量：this-和-arguments。内部函数永远不可能直接访问外部函数的这两个变量。但是，如果把-this-保存到闭包可以访问的另一个变量中，则是行得通的。"><a href="#每个函数在被调用时都会自动创建两个特殊变量：this-和-arguments。内部函数永远不可能直接访问外部函数的这两个变量。但是，如果把-this-保存到闭包可以访问的另一个变量中，则是行得通的。" class="headerlink" title="每个函数在被调用时都会自动创建两个特殊变量：this 和 arguments。内部函数永远不可能直接访问外部函数的这两个变量。但是，如果把 this 保存到闭包可以访问的另一个变量中，则是行得通的。"></a>每个函数在被调用时都会自动创建两个特殊变量：this 和 arguments。内部函数永远不可能直接访问外部函数的这两个变量。但是，如果把 this 保存到闭包可以访问的另一个变量中，则是行得通的。</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.identity = <span class="string">&#x27;The Window&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> object = &#123;</span><br><span class="line"> identity: <span class="string">&#x27;My Object&#x27;</span>,</span><br><span class="line"> getIdentityFunc() &#123;</span><br><span class="line"> <span class="keyword">let</span> that = <span class="built_in">this</span>;</span><br><span class="line"> <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> that.identity;</span><br><span class="line"> &#125;;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="在定义匿名函数之前，先把外部函数的-this-保存到变量-that-中。然后在定义闭包时，就可以让它访问-that，因为这是包含函数中名称没有任何冲突的一个变量。即使在外部函数返回之后，that-仍然指向-object，所以调用-object-getIdentityFunc-就会返回”My-Object”。"><a href="#在定义匿名函数之前，先把外部函数的-this-保存到变量-that-中。然后在定义闭包时，就可以让它访问-that，因为这是包含函数中名称没有任何冲突的一个变量。即使在外部函数返回之后，that-仍然指向-object，所以调用-object-getIdentityFunc-就会返回”My-Object”。" class="headerlink" title="在定义匿名函数之前，先把外部函数的 this 保存到变量 that 中。然后在定义闭包时，就可以让它访问 that，因为这是包含函数中名称没有任何冲突的一个变量。即使在外部函数返回之后，that 仍然指向 object，所以调用 object.getIdentityFunc()()就会返回”My Object”。"></a>在定义匿名函数之前，先把外部函数的 this 保存到变量 that 中。然后在定义闭包时，就可以让它访问 that，因为这是包含函数中名称没有任何冲突的一个变量。即使在外部函数返回之后，that 仍然指向 object，所以调用 object.getIdentityFunc()()就会返回”My Object”。</h4><h4 id="注意-this-和-arguments-都是不能直接在内部函数中访问的。如果想访问包含作用域中的-arguments-对象，则同样需要将其引用先保存到闭包能访问的另一个变量中。"><a href="#注意-this-和-arguments-都是不能直接在内部函数中访问的。如果想访问包含作用域中的-arguments-对象，则同样需要将其引用先保存到闭包能访问的另一个变量中。" class="headerlink" title="注意 this 和 arguments 都是不能直接在内部函数中访问的。如果想访问包含作用域中的 arguments 对象，则同样需要将其引用先保存到闭包能访问的另一个变量中。"></a>注意 this 和 arguments 都是不能直接在内部函数中访问的。如果想访问包含作用域中的 arguments 对象，则同样需要将其引用先保存到闭包能访问的另一个变量中。</h4><h4 id="在一些特殊情况下，this-值可能并不是我们所期待的值。"><a href="#在一些特殊情况下，this-值可能并不是我们所期待的值。" class="headerlink" title="在一些特殊情况下，this 值可能并不是我们所期待的值。"></a>在一些特殊情况下，this 值可能并不是我们所期待的值。</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.identity = <span class="string">&#x27;The Window&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> object = &#123;</span><br><span class="line"> identity: <span class="string">&#x27;My Object&#x27;</span>,</span><br><span class="line"> getIdentity () &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="built_in">this</span>.identity;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="getIdentity-方法就是返回-this-identity-的值。以下是几种调用-object-getIdentity-的方式及返回值："><a href="#getIdentity-方法就是返回-this-identity-的值。以下是几种调用-object-getIdentity-的方式及返回值：" class="headerlink" title="getIdentity()方法就是返回 this.identity 的值。以下是几种调用 object.getIdentity()的方式及返回值："></a>getIdentity()方法就是返回 this.identity 的值。以下是几种调用 object.getIdentity()的方式及返回值：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">object.getIdentity(); <span class="comment">// &#x27;My Object&#x27;</span></span><br><span class="line">(object.getIdentity)(); <span class="comment">// &#x27;My Object&#x27;</span></span><br><span class="line">(object.getIdentity = object.getIdentity)(); <span class="comment">// &#x27;The Window&#x27; </span></span><br></pre></td></tr></table></figure><h4 id="第一行调用-object-getIdentity-是正常调用，会返回”My-Object”，因为-this-identity就是-object-identity。第二行在调用时把-object-getIdentity-放在了括号里。虽然加了括号之后看起来是对一个函数的引用，但-this-值并没有变。这是因为按照规范，object-getIdentity-和-object-getIdentity-是相等的。第三行执行了一次赋值，然后再调用赋值后的结果。因为赋值表达式的值是函数本身，this-值不再与任何对象绑定，所以返回的是”The-Window”。"><a href="#第一行调用-object-getIdentity-是正常调用，会返回”My-Object”，因为-this-identity就是-object-identity。第二行在调用时把-object-getIdentity-放在了括号里。虽然加了括号之后看起来是对一个函数的引用，但-this-值并没有变。这是因为按照规范，object-getIdentity-和-object-getIdentity-是相等的。第三行执行了一次赋值，然后再调用赋值后的结果。因为赋值表达式的值是函数本身，this-值不再与任何对象绑定，所以返回的是”The-Window”。" class="headerlink" title="第一行调用 object.getIdentity()是正常调用，会返回”My Object”，因为 this.identity就是 object.identity。第二行在调用时把 object.getIdentity 放在了括号里。虽然加了括号之后看起来是对一个函数的引用，但 this 值并没有变。这是因为按照规范，object.getIdentity 和(object.getIdentity)是相等的。第三行执行了一次赋值，然后再调用赋值后的结果。因为赋值表达式的值是函数本身，this 值不再与任何对象绑定，所以返回的是”The Window”。"></a>第一行调用 object.getIdentity()是正常调用，会返回”My Object”，因为 this.identity就是 object.identity。第二行在调用时把 object.getIdentity 放在了括号里。虽然加了括号之后看起来是对一个函数的引用，但 this 值并没有变。这是因为按照规范，object.getIdentity 和(object.getIdentity)是相等的。第三行执行了一次赋值，然后再调用赋值后的结果。因为赋值表达式的值是函数本身，this 值不再与任何对象绑定，所以返回的是”The Window”。</h4><h2 id="内存泄漏"><a href="#内存泄漏" class="headerlink" title="内存泄漏"></a>内存泄漏</h2><h4 id="由于-IE-在-IE9-之前对-JScript-对象和-COM-对象使用了不同的垃圾回收机制，所以闭包在这些旧版本-IE-中可能会导致问题。在这些版本的-IE-中，把-HTML-元素保存在某个闭包的作用域中，就相当于宣布该元素不能被销毁。"><a href="#由于-IE-在-IE9-之前对-JScript-对象和-COM-对象使用了不同的垃圾回收机制，所以闭包在这些旧版本-IE-中可能会导致问题。在这些版本的-IE-中，把-HTML-元素保存在某个闭包的作用域中，就相当于宣布该元素不能被销毁。" class="headerlink" title="由于 IE 在 IE9 之前对 JScript 对象和 COM 对象使用了不同的垃圾回收机制，所以闭包在这些旧版本 IE 中可能会导致问题。在这些版本的 IE 中，把 HTML 元素保存在某个闭包的作用域中，就相当于宣布该元素不能被销毁。"></a>由于 IE 在 IE9 之前对 JScript 对象和 COM 对象使用了不同的垃圾回收机制，所以闭包在这些旧版本 IE 中可能会导致问题。在这些版本的 IE 中，把 HTML 元素保存在某个闭包的作用域中，就相当于宣布该元素不能被销毁。</h4><h2 id="立即调用的函数表达式"><a href="#立即调用的函数表达式" class="headerlink" title="立即调用的函数表达式"></a>立即调用的函数表达式</h2><h4 id="立即调用的匿名函数又被称作立即调用的函数表达式（IIFE，Immediately-Invoked-FunctionExpression）。它类似于函数声明，但由于被包含在括号中，所以会被解释为函数表达式。紧跟在第一组括号后面的第二组括号会立即调用前面的函数表达式。"><a href="#立即调用的匿名函数又被称作立即调用的函数表达式（IIFE，Immediately-Invoked-FunctionExpression）。它类似于函数声明，但由于被包含在括号中，所以会被解释为函数表达式。紧跟在第一组括号后面的第二组括号会立即调用前面的函数表达式。" class="headerlink" title="立即调用的匿名函数又被称作立即调用的函数表达式（IIFE，Immediately Invoked FunctionExpression）。它类似于函数声明，但由于被包含在括号中，所以会被解释为函数表达式。紧跟在第一组括号后面的第二组括号会立即调用前面的函数表达式。"></a>立即调用的匿名函数又被称作立即调用的函数表达式（IIFE，Immediately Invoked FunctionExpression）。它类似于函数声明，但由于被包含在括号中，所以会被解释为函数表达式。紧跟在第一组括号后面的第二组括号会立即调用前面的函数表达式。</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="comment">// 块级作用域</span></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h2 id="私有变量"><a href="#私有变量" class="headerlink" title="私有变量"></a>私有变量</h2><h4 id="严格来讲，JavaScript-没有私有成员的概念，所有对象属性都公有的。不过，倒是有私有变量的概念。任何定义在函数或块中的变量，都可以认为是私有的，因为在这个函数或块的外部无法访问其中的变量。私有变量包括函数参数、局部变量，以及函数内部定义的其他函数。"><a href="#严格来讲，JavaScript-没有私有成员的概念，所有对象属性都公有的。不过，倒是有私有变量的概念。任何定义在函数或块中的变量，都可以认为是私有的，因为在这个函数或块的外部无法访问其中的变量。私有变量包括函数参数、局部变量，以及函数内部定义的其他函数。" class="headerlink" title="严格来讲，JavaScript 没有私有成员的概念，所有对象属性都公有的。不过，倒是有私有变量的概念。任何定义在函数或块中的变量，都可以认为是私有的，因为在这个函数或块的外部无法访问其中的变量。私有变量包括函数参数、局部变量，以及函数内部定义的其他函数。"></a>严格来讲，JavaScript 没有私有成员的概念，所有对象属性都公有的。不过，倒是有私有变量的概念。任何定义在函数或块中的变量，都可以认为是私有的，因为在这个函数或块的外部无法访问其中的变量。私有变量包括函数参数、局部变量，以及函数内部定义的其他函数。</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">let</span> sum = num1 + num2;</span><br><span class="line"> <span class="keyword">return</span> sum;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h4 id="函数-add-有-3-个私有变量：num1、num2-和-sum。这几个变量只能在函数内部使用，不能在函数外部访问。如果这个函数中创建了一个闭包，则这个闭包能通过其作用域链访问其外部的这-3-个变量。基于这一点，就可以创建出能够访问私有变量的公有方法。"><a href="#函数-add-有-3-个私有变量：num1、num2-和-sum。这几个变量只能在函数内部使用，不能在函数外部访问。如果这个函数中创建了一个闭包，则这个闭包能通过其作用域链访问其外部的这-3-个变量。基于这一点，就可以创建出能够访问私有变量的公有方法。" class="headerlink" title="函数 add()有 3 个私有变量：num1、num2 和 sum。这几个变量只能在函数内部使用，不能在函数外部访问。如果这个函数中创建了一个闭包，则这个闭包能通过其作用域链访问其外部的这 3 个变量。基于这一点，就可以创建出能够访问私有变量的公有方法。"></a>函数 add()有 3 个私有变量：num1、num2 和 sum。这几个变量只能在函数内部使用，不能在函数外部访问。如果这个函数中创建了一个闭包，则这个闭包能通过其作用域链访问其外部的这 3 个变量。基于这一点，就可以创建出能够访问私有变量的公有方法。</h4><h2 id="特权方法"><a href="#特权方法" class="headerlink" title="特权方法"></a>特权方法</h2><h4 id="是能够访问函数私有变量（及私有函数）的公有方法。在对象上有两种方式创建特权方法。第一种是在构造函数中实现"><a href="#是能够访问函数私有变量（及私有函数）的公有方法。在对象上有两种方式创建特权方法。第一种是在构造函数中实现" class="headerlink" title="是能够访问函数私有变量（及私有函数）的公有方法。在对象上有两种方式创建特权方法。第一种是在构造函数中实现"></a>是能够访问函数私有变量（及私有函数）的公有方法。在对象上有两种方式创建特权方法。第一种是在构造函数中实现</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyObject</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="comment">// 私有变量和私有函数</span></span><br><span class="line"> <span class="keyword">let</span> privateVariable = <span class="number">10</span>;</span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">privateFunction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">// 特权方法</span></span><br><span class="line"> <span class="built_in">this</span>.publicMethod = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> privateVariable++;</span><br><span class="line"> <span class="keyword">return</span> privateFunction();</span><br><span class="line"> &#125;;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="静态私有变量"><a href="#静态私有变量" class="headerlink" title="静态私有变量"></a>静态私有变量</h2><h4 id="特权方法也可以通过使用私有作用域定义私有变量和函数来实现。"><a href="#特权方法也可以通过使用私有作用域定义私有变量和函数来实现。" class="headerlink" title="特权方法也可以通过使用私有作用域定义私有变量和函数来实现。"></a>特权方法也可以通过使用私有作用域定义私有变量和函数来实现。</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 私有变量和私有函数</span></span><br><span class="line"> <span class="keyword">let</span> privateVariable = <span class="number">10</span>;</span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">privateFunction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">// 构造函数</span></span><br><span class="line"> MyObject = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"> <span class="comment">// 公有和特权方法</span></span><br><span class="line"> MyObject.prototype.publicMethod = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> privateVariable++;</span><br><span class="line"> <span class="keyword">return</span> privateFunction();</span><br><span class="line"> &#125;;</span><br><span class="line">&#125;)(); </span><br></pre></td></tr></table></figure><h4 id="在这个模式中，匿名函数表达式创建了一个包含构造函数及其方法的私有作用域。首先定义的是私有变量和私有函数，然后又定义了构造函数和公有方法。公有方法定义在构造函数的原型上，与典型的原型模式一样。注意，这个模式定义的构造函数没有使用函数声明，使用的是函数表达式。函数声明会创建内部函数，在这里并不是必需的。基于同样的原因（但操作相反），这里声明-MyObject-并没有使用任何关键字。因为不使用关键字声明的变量会创建在全局作用域中，所以-MyObject-变成了全局变量，可以在这个私有作用域外部被访问。注意在严格模式下给未声明的变量赋值会导致错误。"><a href="#在这个模式中，匿名函数表达式创建了一个包含构造函数及其方法的私有作用域。首先定义的是私有变量和私有函数，然后又定义了构造函数和公有方法。公有方法定义在构造函数的原型上，与典型的原型模式一样。注意，这个模式定义的构造函数没有使用函数声明，使用的是函数表达式。函数声明会创建内部函数，在这里并不是必需的。基于同样的原因（但操作相反），这里声明-MyObject-并没有使用任何关键字。因为不使用关键字声明的变量会创建在全局作用域中，所以-MyObject-变成了全局变量，可以在这个私有作用域外部被访问。注意在严格模式下给未声明的变量赋值会导致错误。" class="headerlink" title="在这个模式中，匿名函数表达式创建了一个包含构造函数及其方法的私有作用域。首先定义的是私有变量和私有函数，然后又定义了构造函数和公有方法。公有方法定义在构造函数的原型上，与典型的原型模式一样。注意，这个模式定义的构造函数没有使用函数声明，使用的是函数表达式。函数声明会创建内部函数，在这里并不是必需的。基于同样的原因（但操作相反），这里声明 MyObject 并没有使用任何关键字。因为不使用关键字声明的变量会创建在全局作用域中，所以 MyObject 变成了全局变量，可以在这个私有作用域外部被访问。注意在严格模式下给未声明的变量赋值会导致错误。"></a>在这个模式中，匿名函数表达式创建了一个包含构造函数及其方法的私有作用域。首先定义的是私有变量和私有函数，然后又定义了构造函数和公有方法。公有方法定义在构造函数的原型上，与典型的原型模式一样。注意，这个模式定义的构造函数没有使用函数声明，使用的是函数表达式。函数声明会创建内部函数，在这里并不是必需的。基于同样的原因（但操作相反），这里声明 MyObject 并没有使用任何关键字。因为不使用关键字声明的变量会创建在全局作用域中，所以 MyObject 变成了全局变量，可以在这个私有作用域外部被访问。注意在严格模式下给未声明的变量赋值会导致错误。</h4><h4 id="像这样创建静态私有变量可以利用原型更好地重用代码，只是每个实例没有了自己的私有变量。最终，到底是把私有变量放在实例中，还是作为静态私有变量，都需要根据自己的需求来确定。"><a href="#像这样创建静态私有变量可以利用原型更好地重用代码，只是每个实例没有了自己的私有变量。最终，到底是把私有变量放在实例中，还是作为静态私有变量，都需要根据自己的需求来确定。" class="headerlink" title="像这样创建静态私有变量可以利用原型更好地重用代码，只是每个实例没有了自己的私有变量。最终，到底是把私有变量放在实例中，还是作为静态私有变量，都需要根据自己的需求来确定。"></a>像这样创建静态私有变量可以利用原型更好地重用代码，只是每个实例没有了自己的私有变量。最终，到底是把私有变量放在实例中，还是作为静态私有变量，都需要根据自己的需求来确定。</h4><h4 id="注意-使用闭包和私有变量会导致作用域链变长，作用域链越长，则查找变量所需的时间也越多。"><a href="#注意-使用闭包和私有变量会导致作用域链变长，作用域链越长，则查找变量所需的时间也越多。" class="headerlink" title="注意 使用闭包和私有变量会导致作用域链变长，作用域链越长，则查找变量所需的时间也越多。"></a>注意 使用闭包和私有变量会导致作用域链变长，作用域链越长，则查找变量所需的时间也越多。</h4><h2 id="模块模式"><a href="#模块模式" class="headerlink" title="模块模式"></a>模块模式</h2><h4 id="前面的模式通过自定义类型创建了私有变量和特权方法。而下面要讨论的-Douglas-Crockford-所说的模块模式，则在一个单例对象上实现了相同的隔离和封装。单例对象（singleton）就是只有一个实例的对象。按照惯例，JavaScript-是通过对象字面量来创建单例对象的"><a href="#前面的模式通过自定义类型创建了私有变量和特权方法。而下面要讨论的-Douglas-Crockford-所说的模块模式，则在一个单例对象上实现了相同的隔离和封装。单例对象（singleton）就是只有一个实例的对象。按照惯例，JavaScript-是通过对象字面量来创建单例对象的" class="headerlink" title="前面的模式通过自定义类型创建了私有变量和特权方法。而下面要讨论的 Douglas Crockford 所说的模块模式，则在一个单例对象上实现了相同的隔离和封装。单例对象（singleton）就是只有一个实例的对象。按照惯例，JavaScript 是通过对象字面量来创建单例对象的"></a>前面的模式通过自定义类型创建了私有变量和特权方法。而下面要讨论的 Douglas Crockford 所说的模块模式，则在一个单例对象上实现了相同的隔离和封装。单例对象（singleton）就是只有一个实例的对象。按照惯例，JavaScript 是通过对象字面量来创建单例对象的</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> singleton = &#123;</span><br><span class="line"> name: value, </span><br><span class="line"> method() &#123;</span><br><span class="line"> <span class="comment">// 方法的代码</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="模块增强模式"><a href="#模块增强模式" class="headerlink" title="模块增强模式"></a>模块增强模式</h2><h4 id="另一个利用模块模式的做法是在返回对象之前先对其进行增强。这适合单例对象需要是某个特定类型的实例，但又必须给它添加额外属性或方法的场景。"><a href="#另一个利用模块模式的做法是在返回对象之前先对其进行增强。这适合单例对象需要是某个特定类型的实例，但又必须给它添加额外属性或方法的场景。" class="headerlink" title="另一个利用模块模式的做法是在返回对象之前先对其进行增强。这适合单例对象需要是某个特定类型的实例，但又必须给它添加额外属性或方法的场景。"></a>另一个利用模块模式的做法是在返回对象之前先对其进行增强。这适合单例对象需要是某个特定类型的实例，但又必须给它添加额外属性或方法的场景。</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> singleton = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="comment">// 私有变量和私有函数</span></span><br><span class="line"> <span class="keyword">let</span> privateVariable = <span class="number">10</span>;</span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">privateFunction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">// 创建对象</span></span><br><span class="line"> <span class="keyword">let</span> object = <span class="keyword">new</span> CustomType();</span><br><span class="line"> <span class="comment">// 添加特权/公有属性和方法</span></span><br><span class="line"> object.publicProperty = <span class="literal">true</span>;</span><br><span class="line"> object.publicMethod = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> privateVariable++;</span><br><span class="line"> <span class="keyword">return</span> privateFunction();</span><br><span class="line"> &#125;;</span><br><span class="line"> <span class="comment">// 返回对象</span></span><br><span class="line"> <span class="keyword">return</span> object;</span><br><span class="line">&#125;(); </span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">函数</summary>
    
    
    
    <category term="JavaScript红宝书" scheme="http://example.com/categories/JavaScript%E7%BA%A2%E5%AE%9D%E4%B9%A6/"/>
    
    
    <category term="函数" scheme="http://example.com/tags/%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>JS红宝书之对象与数组</title>
    <link href="http://example.com/2020/10/27/%E7%BA%A2%E5%AE%9D%E4%B9%A610/"/>
    <id>http://example.com/2020/10/27/%E7%BA%A2%E5%AE%9D%E4%B9%A610/</id>
    <published>2020-10-27T05:06:43.000Z</published>
    <updated>2020-11-07T08:32:54.610Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h1><h5 id="到目前为止，大多数引用值的示例使用的是-Object-类型。Object-是-ECMAScript-中最常用的类型之一。虽然-Object-的实例没有多少功能，但很适合存储和在应用程序间交换数据。"><a href="#到目前为止，大多数引用值的示例使用的是-Object-类型。Object-是-ECMAScript-中最常用的类型之一。虽然-Object-的实例没有多少功能，但很适合存储和在应用程序间交换数据。" class="headerlink" title="到目前为止，大多数引用值的示例使用的是 Object 类型。Object 是 ECMAScript 中最常用的类型之一。虽然 Object 的实例没有多少功能，但很适合存储和在应用程序间交换数据。"></a>到目前为止，大多数引用值的示例使用的是 Object 类型。Object 是 ECMAScript 中最常用的类型之一。虽然 Object 的实例没有多少功能，但很适合存储和在应用程序间交换数据。</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> decade = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">decade.name = <span class="string">&quot;MSS&quot;</span>;</span><br><span class="line">decade.age = <span class="number">29</span>; </span><br></pre></td></tr></table></figure><h5 id="另一种方式是使用对象字面量（object-literal）表示法。对象字面量是对象定义的简写形式，目的是为了简化包含大量属性的对象的创建。"><a href="#另一种方式是使用对象字面量（object-literal）表示法。对象字面量是对象定义的简写形式，目的是为了简化包含大量属性的对象的创建。" class="headerlink" title="另一种方式是使用对象字面量（object literal）表示法。对象字面量是对象定义的简写形式，目的是为了简化包含大量属性的对象的创建。"></a>另一种方式是使用对象字面量（object literal）表示法。对象字面量是对象定义的简写形式，目的是为了简化包含大量属性的对象的创建。</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;  <span class="comment">// 与 new Object()相同</span></span><br><span class="line"> name: <span class="string">&quot;Nicholas&quot;</span>,</span><br><span class="line"> age: <span class="number">29</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h1><h2 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h2><h5 id="有几种基本的方式可以创建数组。一种是使用-Array-构造函数，比如："><a href="#有几种基本的方式可以创建数组。一种是使用-Array-构造函数，比如：" class="headerlink" title="有几种基本的方式可以创建数组。一种是使用 Array 构造函数，比如："></a>有几种基本的方式可以创建数组。一种是使用 Array 构造函数，比如：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> colors = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> colors = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">20</span>); <span class="comment">//创建一个初始 length 为 20 的数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> colors = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">&quot;red&quot;</span>, <span class="string">&quot;blue&quot;</span>, <span class="string">&quot;green&quot;</span>); <span class="comment">//创建一个包含 3 个元素的数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> names = []; <span class="comment">// 创建一个空数组</span></span><br><span class="line"><span class="keyword">let</span> values = [<span class="number">1</span>,<span class="number">2</span>,]; <span class="comment">// 创建一个包含 2 个元素的数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> colors = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">3</span>); <span class="comment">// 创建一个包含 3 个元素的数组</span></span><br><span class="line"><span class="keyword">let</span> names = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">&quot;Greg&quot;</span>); <span class="comment">// 创建一个只包含一个元素，即字符串&quot;Greg&quot;的数组</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="数组空位"><a href="#数组空位" class="headerlink" title="数组空位"></a>数组空位</h2><h4 id="使用数组字面量初始化数组时，可以使用一串逗号来创建空位（hole）。ECMAScript-会将逗号之间相应索引位置的值当成空位，ES6-规范重新定义了该如何处理这些空位。"><a href="#使用数组字面量初始化数组时，可以使用一串逗号来创建空位（hole）。ECMAScript-会将逗号之间相应索引位置的值当成空位，ES6-规范重新定义了该如何处理这些空位。" class="headerlink" title="使用数组字面量初始化数组时，可以使用一串逗号来创建空位（hole）。ECMAScript 会将逗号之间相应索引位置的值当成空位，ES6 规范重新定义了该如何处理这些空位。"></a>使用数组字面量初始化数组时，可以使用一串逗号来创建空位（hole）。ECMAScript 会将逗号之间相应索引位置的值当成空位，ES6 规范重新定义了该如何处理这些空位。</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> options = [,,,,,]; <span class="comment">// 创建包含 5 个元素的数组</span></span><br><span class="line"><span class="built_in">console</span>.log(options.length); <span class="comment">// 5</span></span><br><span class="line"><span class="built_in">console</span>.log(options); <span class="comment">// [,,,,,] </span></span><br></pre></td></tr></table></figure><h2 id="数组索引"><a href="#数组索引" class="headerlink" title="数组索引"></a>数组索引</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> colors = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;blue&quot;</span>, <span class="string">&quot;green&quot;</span>]; <span class="comment">// 定义一个字符串数组</span></span><br><span class="line">alert(colors[<span class="number">0</span>]); <span class="comment">// 显示第一项</span></span><br><span class="line">colors[<span class="number">2</span>] = <span class="string">&quot;black&quot;</span>; <span class="comment">// 修改第三项</span></span><br><span class="line">colors[<span class="number">3</span>] = <span class="string">&quot;brown&quot;</span>; <span class="comment">// 添加第四项</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="数组-length-属性的独特之处在于，它不是只读的。通过修改-length-属性，可以从数组末尾删除或添加元素。"><a href="#数组-length-属性的独特之处在于，它不是只读的。通过修改-length-属性，可以从数组末尾删除或添加元素。" class="headerlink" title="数组 length 属性的独特之处在于，它不是只读的。通过修改 length 属性，可以从数组末尾删除或添加元素。"></a>数组 length 属性的独特之处在于，它不是只读的。通过修改 length 属性，可以从数组末尾删除或添加元素。</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> colors = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;blue&quot;</span>, <span class="string">&quot;green&quot;</span>]; <span class="comment">// 创建一个包含 3 个字符串的数组</span></span><br><span class="line">colors.length = <span class="number">2</span>;</span><br><span class="line">alert(colors[<span class="number">2</span>]); <span class="comment">// undefined </span></span><br></pre></td></tr></table></figure><h2 id="检测数组"><a href="#检测数组" class="headerlink" title="检测数组"></a>检测数组</h2><h4 id="一个经典的-ECMAScript-问题是判断一个对象是不是数组。在只有一个网页（因而只有一个全局作用域）的情况下，使用-instanceof-操作符就足矣"><a href="#一个经典的-ECMAScript-问题是判断一个对象是不是数组。在只有一个网页（因而只有一个全局作用域）的情况下，使用-instanceof-操作符就足矣" class="headerlink" title="一个经典的 ECMAScript 问题是判断一个对象是不是数组。在只有一个网页（因而只有一个全局作用域）的情况下，使用 instanceof 操作符就足矣"></a>一个经典的 ECMAScript 问题是判断一个对象是不是数组。在只有一个网页（因而只有一个全局作用域）的情况下，使用 instanceof 操作符就足矣</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (value <span class="keyword">instanceof</span> <span class="built_in">Array</span>)&#123;</span><br><span class="line"> <span class="comment">// 操作数组</span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h4 id="Array-isArray-方法这个方法的目的就是确定一个值是否为数组，而不用管它是在哪个全局执行上下文中创建的。"><a href="#Array-isArray-方法这个方法的目的就是确定一个值是否为数组，而不用管它是在哪个全局执行上下文中创建的。" class="headerlink" title="Array.isArray()方法这个方法的目的就是确定一个值是否为数组，而不用管它是在哪个全局执行上下文中创建的。"></a>Array.isArray()方法这个方法的目的就是确定一个值是否为数组，而不用管它是在哪个全局执行上下文中创建的。</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(value))&#123;</span><br><span class="line"> <span class="comment">// 操作数组</span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="迭代器方法"><a href="#迭代器方法" class="headerlink" title="迭代器方法"></a>迭代器方法</h2><h4 id="在-ES6-中，Array-的原型上暴露了-3-个用于检索数组内容的方法：keys-、values-和entries-。keys-返回数组索引的迭代器，values-返回数组元素的迭代器，而-entries-返回索引-值对的迭代器"><a href="#在-ES6-中，Array-的原型上暴露了-3-个用于检索数组内容的方法：keys-、values-和entries-。keys-返回数组索引的迭代器，values-返回数组元素的迭代器，而-entries-返回索引-值对的迭代器" class="headerlink" title="在 ES6 中，Array 的原型上暴露了 3 个用于检索数组内容的方法：keys()、values()和entries()。keys()返回数组索引的迭代器，values()返回数组元素的迭代器，而 entries()返回索引/值对的迭代器"></a>在 ES6 中，Array 的原型上暴露了 3 个用于检索数组内容的方法：keys()、values()和entries()。keys()返回数组索引的迭代器，values()返回数组元素的迭代器，而 entries()返回索引/值对的迭代器</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> a = [<span class="string">&quot;foo&quot;</span>, <span class="string">&quot;bar&quot;</span>, <span class="string">&quot;baz&quot;</span>, <span class="string">&quot;qux&quot;</span>];</span><br><span class="line"><span class="comment">// 因为这些方法都返回迭代器，所以可以将它们的内容</span></span><br><span class="line"><span class="comment">// 通过 Array.from()直接转换为数组实例</span></span><br><span class="line"><span class="keyword">const</span> aKeys = <span class="built_in">Array</span>.from(a.keys());</span><br><span class="line"><span class="keyword">const</span> aValues = <span class="built_in">Array</span>.from(a.values());</span><br><span class="line"><span class="keyword">const</span> aEntries = <span class="built_in">Array</span>.from(a.entries());</span><br><span class="line"><span class="built_in">console</span>.log(aKeys); <span class="comment">// [0, 1, 2, 3]</span></span><br><span class="line"><span class="built_in">console</span>.log(aValues); <span class="comment">// [&quot;foo&quot;, &quot;bar&quot;, &quot;baz&quot;, &quot;qux&quot;]</span></span><br><span class="line"><span class="built_in">console</span>.log(aEntries); <span class="comment">// [[0, &quot;foo&quot;], [1, &quot;bar&quot;], [2, &quot;baz&quot;], [3, &quot;qux&quot;]]</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="复制和填充方法"><a href="#复制和填充方法" class="headerlink" title="复制和填充方法"></a>复制和填充方法</h2><h4 id="ES6-新增了两个方法：批量复制方法-copyWithin-，以及填充数组方法-fill-。这两个方法的函数签名类似，都需要指定既有数组实例上的一个范围，包含开始索引，不包含结束索引。使用这个方法不会改变数组的大小。"><a href="#ES6-新增了两个方法：批量复制方法-copyWithin-，以及填充数组方法-fill-。这两个方法的函数签名类似，都需要指定既有数组实例上的一个范围，包含开始索引，不包含结束索引。使用这个方法不会改变数组的大小。" class="headerlink" title="ES6 新增了两个方法：批量复制方法 copyWithin()，以及填充数组方法 fill()。这两个方法的函数签名类似，都需要指定既有数组实例上的一个范围，包含开始索引，不包含结束索引。使用这个方法不会改变数组的大小。"></a>ES6 新增了两个方法：批量复制方法 copyWithin()，以及填充数组方法 fill()。这两个方法的函数签名类似，都需要指定既有数组实例上的一个范围，包含开始索引，不包含结束索引。使用这个方法不会改变数组的大小。</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> zeroes = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>];</span><br><span class="line"><span class="comment">// 用 5 填充整个数组</span></span><br><span class="line">zeroes.fill(<span class="number">5</span>);</span><br><span class="line"><span class="built_in">console</span>.log(zeroes); <span class="comment">// [5, 5, 5, 5, 5]</span></span><br><span class="line">zeroes.fill(<span class="number">0</span>); <span class="comment">// 重置</span></span><br><span class="line"><span class="comment">// 用 6 填充索引大于等于 3 的元素</span></span><br><span class="line">zeroes.fill(<span class="number">6</span>, <span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(zeroes); <span class="comment">// [0, 0, 0, 6, 6]</span></span><br><span class="line">zeroes.fill(<span class="number">0</span>); <span class="comment">// 重置</span></span><br><span class="line"><span class="comment">// 用 7 填充索引大于等于 1 且小于 3 的元素</span></span><br><span class="line">zeroes.fill(<span class="number">7</span>, <span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(zeroes); <span class="comment">// [0, 7, 7, 0, 0];</span></span><br><span class="line">zeroes.fill(<span class="number">0</span>); <span class="comment">// 重置</span></span><br><span class="line"><span class="comment">// 用 8 填充索引大于等于 1 且小于 4 的元素</span></span><br><span class="line"><span class="comment">// (-4 + zeroes.length = 1)</span></span><br><span class="line"><span class="comment">// (-1 + zeroes.length = 4)</span></span><br><span class="line">zeroes.fill(<span class="number">8</span>, <span class="number">-4</span>, <span class="number">-1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(zeroes); <span class="comment">// [0, 8, 8, 8, 0]; </span></span><br></pre></td></tr></table></figure><h4 id="与-fill-不同，copyWithin-会按照指定范围浅复制数组中的部分内容，然后将它们插入到指定索引开始的位置。开始索引和结束索引则与-fill-使用同样的计算方法"><a href="#与-fill-不同，copyWithin-会按照指定范围浅复制数组中的部分内容，然后将它们插入到指定索引开始的位置。开始索引和结束索引则与-fill-使用同样的计算方法" class="headerlink" title="与 fill()不同，copyWithin()会按照指定范围浅复制数组中的部分内容，然后将它们插入到指定索引开始的位置。开始索引和结束索引则与 fill()使用同样的计算方法"></a>与 fill()不同，copyWithin()会按照指定范围浅复制数组中的部分内容，然后将它们插入到指定索引开始的位置。开始索引和结束索引则与 fill()使用同样的计算方法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ints,</span><br><span class="line"> reset = <span class="function">() =&gt;</span> ints = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>];</span><br><span class="line">reset();</span><br><span class="line"><span class="comment">// 从 ints 中复制索引 0 开始的内容，插入到索引 5 开始的位置</span></span><br><span class="line"><span class="comment">// 在源索引或目标索引到达数组边界时停止</span></span><br><span class="line">ints.copyWithin(<span class="number">5</span>);</span><br><span class="line"><span class="built_in">console</span>.log(ints); <span class="comment">// [0, 1, 2, 3, 4, 0, 1, 2, 3, 4]</span></span><br><span class="line">reset();</span><br><span class="line"><span class="comment">// 从 ints 中复制索引 5 开始的内容，插入到索引 0 开始的位置</span></span><br><span class="line">ints.copyWithin(<span class="number">0</span>, <span class="number">5</span>);</span><br><span class="line"><span class="built_in">console</span>.log(ints); <span class="comment">// [5, 6, 7, 8, 9, 5, 6, 7, 8, 9] </span></span><br><span class="line">reset();</span><br><span class="line"><span class="comment">// 从 ints 中复制索引 0 开始到索引 3 结束的内容</span></span><br><span class="line"><span class="comment">// 插入到索引 4 开始的位置</span></span><br><span class="line">ints.copyWithin(<span class="number">4</span>, <span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">alert(ints); <span class="comment">// [0, 1, 2, 3, 0, 1, 2, 7, 8, 9]</span></span><br><span class="line">reset();</span><br><span class="line"><span class="comment">// JavaScript 引擎在插值前会完整复制范围内的值</span></span><br><span class="line"><span class="comment">// 因此复制期间不存在重写的风险</span></span><br><span class="line">ints.copyWithin(<span class="number">2</span>, <span class="number">0</span>, <span class="number">6</span>);</span><br><span class="line">alert(ints); <span class="comment">// [0, 1, 0, 1, 2, 3, 4, 5, 8, 9]</span></span><br><span class="line">reset();</span><br><span class="line"><span class="comment">// 支持负索引值，与 fill()相对于数组末尾计算正向索引的过程是一样的</span></span><br><span class="line">ints.copyWithin(<span class="number">-4</span>, <span class="number">-7</span>, <span class="number">-3</span>);</span><br><span class="line">alert(ints); <span class="comment">// [0, 1, 2, 3, 4, 5, 3, 4, 5, 6]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="转换方法"><a href="#转换方法" class="headerlink" title="转换方法"></a>转换方法</h2><h4 id="前面提到过，所有对象都有-toLocaleString-、toString-和-valueOf-方法。其中，valueOf-返回的还是数组本身。而-toString-返回由数组中每个值的等效字符串拼接而成的一个逗号分隔的字符串。也就是说，对数组的每个值都会调用其-toString-方法，以得到最终的字符串。"><a href="#前面提到过，所有对象都有-toLocaleString-、toString-和-valueOf-方法。其中，valueOf-返回的还是数组本身。而-toString-返回由数组中每个值的等效字符串拼接而成的一个逗号分隔的字符串。也就是说，对数组的每个值都会调用其-toString-方法，以得到最终的字符串。" class="headerlink" title="前面提到过，所有对象都有 toLocaleString()、toString()和 valueOf()方法。其中，valueOf()返回的还是数组本身。而 toString()返回由数组中每个值的等效字符串拼接而成的一个逗号分隔的字符串。也就是说，对数组的每个值都会调用其 toString()方法，以得到最终的字符串。"></a>前面提到过，所有对象都有 toLocaleString()、toString()和 valueOf()方法。其中，valueOf()返回的还是数组本身。而 toString()返回由数组中每个值的等效字符串拼接而成的一个逗号分隔的字符串。也就是说，对数组的每个值都会调用其 toString()方法，以得到最终的字符串。</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> colors = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;blue&quot;</span>, <span class="string">&quot;green&quot;</span>]; <span class="comment">// 创建一个包含 3 个字符串的数组</span></span><br><span class="line">alert(colors.toString()); <span class="comment">// red,blue,green</span></span><br><span class="line">alert(colors.valueOf()); <span class="comment">// red,blue,green</span></span><br><span class="line">alert(colors); <span class="comment">// red,blue,green </span></span><br></pre></td></tr></table></figure><h2 id="join"><a href="#join" class="headerlink" title="join()"></a>join()</h2><h4 id="join-方法接收一个参数，即字符串分隔符，返回包含所有项的字符串。"><a href="#join-方法接收一个参数，即字符串分隔符，返回包含所有项的字符串。" class="headerlink" title="join()方法接收一个参数，即字符串分隔符，返回包含所有项的字符串。"></a>join()方法接收一个参数，即字符串分隔符，返回包含所有项的字符串。</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> colors = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>, <span class="string">&quot;blue&quot;</span>];</span><br><span class="line">alert(colors.join(<span class="string">&quot;,&quot;</span>)); <span class="comment">// red,green,blue</span></span><br><span class="line">alert(colors.join(<span class="string">&quot;||&quot;</span>)); <span class="comment">// red||green||blue </span></span><br></pre></td></tr></table></figure><hr><h2 id="push"><a href="#push" class="headerlink" title="push()"></a>push()</h2><h4 id="push-方法接收任意数量的参数，并将它们添加到数组末尾，返回数组的最新长度。"><a href="#push-方法接收任意数量的参数，并将它们添加到数组末尾，返回数组的最新长度。" class="headerlink" title="push()方法接收任意数量的参数，并将它们添加到数组末尾，返回数组的最新长度。"></a>push()方法接收任意数量的参数，并将它们添加到数组末尾，返回数组的最新长度。</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr.push(<span class="number">4</span>, <span class="string">&#x27;pink&#x27;</span>)); <span class="comment">// 5;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr);<span class="comment">//[1, 2, 3,4, &#x27;pink&#x27;];</span></span><br></pre></td></tr></table></figure><hr><h2 id="pop"><a href="#pop" class="headerlink" title="pop()"></a>pop()</h2><h4 id="pop-方法则用于删除数组的最后一项，同时减少数组的-length-值，返回被删除的项。"><a href="#pop-方法则用于删除数组的最后一项，同时减少数组的-length-值，返回被删除的项。" class="headerlink" title="pop()方法则用于删除数组的最后一项，同时减少数组的 length 值，返回被删除的项。"></a>pop()方法则用于删除数组的最后一项，同时减少数组的 length 值，返回被删除的项。</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.pop()); <span class="comment">//3</span></span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">//[1,2]</span></span><br></pre></td></tr></table></figure><hr><h2 id="shift"><a href="#shift" class="headerlink" title="shift()"></a>shift()</h2><h4 id="它会删除数组的第一项并返回它，然后数组长度减-1。"><a href="#它会删除数组的第一项并返回它，然后数组长度减-1。" class="headerlink" title="它会删除数组的第一项并返回它，然后数组长度减 1。"></a>它会删除数组的第一项并返回它，然后数组长度减 1。</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.shift()); <span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(arr);<span class="comment">//[2，3]</span></span><br></pre></td></tr></table></figure><hr><h2 id="unshift"><a href="#unshift" class="headerlink" title="unshift()"></a>unshift()</h2><h4 id="在数组开头添加任意多个值，然后返回新的数组长度。"><a href="#在数组开头添加任意多个值，然后返回新的数组长度。" class="headerlink" title="在数组开头添加任意多个值，然后返回新的数组长度。"></a>在数组开头添加任意多个值，然后返回新的数组长度。</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.unshift(<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;purple&#x27;</span>));<span class="comment">//5</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr);<span class="comment">//[&#x27;red&#x27;, &#x27;purple&#x27;,1, 2, 3]</span></span><br></pre></td></tr></table></figure><h2 id="concat"><a href="#concat" class="headerlink" title="concat()"></a>concat()</h2><h4 id="用于连接两个或多个数组"><a href="#用于连接两个或多个数组" class="headerlink" title="用于连接两个或多个数组"></a>用于连接两个或多个数组</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr1=[<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>],</span><br><span class="line"> arr2=[<span class="string">&quot;d&quot;</span>,<span class="string">&quot;e&quot;</span>,<span class="number">1</span>,<span class="number">3</span>],</span><br><span class="line"> arr3;</span><br><span class="line"><span class="comment">// concat</span></span><br><span class="line">arr3=arr1.concat(arr2,[<span class="string">&quot;m&quot;</span>,<span class="number">99</span>,<span class="number">8</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(arr3);</span><br></pre></td></tr></table></figure><h2 id="slice"><a href="#slice" class="headerlink" title="slice()"></a>slice()</h2><h4 id="从已有的数组返回选定元素"><a href="#从已有的数组返回选定元素" class="headerlink" title="从已有的数组返回选定元素"></a>从已有的数组返回选定元素</h4><h4 id="如果没有指定end，那么切分的数组包含从start到数组结束的所有元素"><a href="#如果没有指定end，那么切分的数组包含从start到数组结束的所有元素" class="headerlink" title="如果没有指定end，那么切分的数组包含从start到数组结束的所有元素"></a>如果没有指定end，那么切分的数组包含从start到数组结束的所有元素</h4><h4 id="如果slice-方法的参数有一个负数，则用数组长度加上该数确定相应位置"><a href="#如果slice-方法的参数有一个负数，则用数组长度加上该数确定相应位置" class="headerlink" title="如果slice()方法的参数有一个负数，则用数组长度加上该数确定相应位置"></a>如果slice()方法的参数有一个负数，则用数组长度加上该数确定相应位置</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// slice(start,end) end下标</span></span><br><span class="line"><span class="keyword">var</span> colors=[<span class="string">&quot;red&quot;</span>,<span class="string">&quot;green&quot;</span>,<span class="string">&quot;blue&quot;</span>,<span class="string">&quot;yellow&quot;</span>,<span class="string">&quot;orange&quot;</span>];</span><br><span class="line"><span class="comment">//var newColors=colors.slice(1,3);   //[&quot;green&quot;,&quot;blue&quot;]</span></span><br><span class="line"><span class="comment">//var newColors2=colors.slice(2,4);   //[&quot;blue&quot;,&quot;yellow&quot;]</span></span><br><span class="line"><span class="keyword">var</span> newColors3=colors.slice(<span class="number">-4</span>,<span class="number">3</span>); <span class="comment">// 1,3 [&quot;green&quot;,&quot;blue&quot;]</span></span><br><span class="line"><span class="built_in">console</span>.log(newColors3);</span><br></pre></td></tr></table></figure><h2 id="splice"><a href="#splice" class="headerlink" title="splice()"></a>splice()</h2><h4 id="删除从index处开始的零个或多个元素"><a href="#删除从index处开始的零个或多个元素" class="headerlink" title="删除从index处开始的零个或多个元素"></a>删除从index处开始的零个或多个元素</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>, <span class="string">&quot;e&quot;</span>, <span class="string">&quot;f&quot;</span>];</span><br><span class="line">  <span class="comment">// 删除</span></span><br><span class="line">  <span class="keyword">var</span> delArr = arr.splice(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(arr); <span class="comment">// [a,b,f]</span></span><br><span class="line">  <span class="comment">// 插入</span></span><br><span class="line">  <span class="keyword">var</span> insertArr = arr.splice(<span class="number">3</span>, <span class="number">0</span>, <span class="string">&quot;m&quot;</span>, <span class="string">&quot;n&quot;</span>, <span class="number">88</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(arr); <span class="comment">//[&quot;a&quot;, &quot;b&quot;, &quot;f&quot;, &quot;m&quot;, &quot;n&quot;, 88]</span></span><br><span class="line">  <span class="comment">// 替换</span></span><br><span class="line">  <span class="keyword">var</span> replaceArr = arr.splice(<span class="number">1</span>, <span class="number">2</span>, <span class="string">&quot;x&quot;</span>, <span class="string">&quot;y&quot;</span>, <span class="string">&quot;z&quot;</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(arr); <span class="comment">//[&quot;a&quot;, &quot;x&quot;, &quot;y&quot;, &quot;z&quot;, &quot;m&quot;, &quot;n&quot;, 88]</span></span><br></pre></td></tr></table></figure><hr><h2 id="reverse"><a href="#reverse" class="headerlink" title="reverse()"></a>reverse()</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> values = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">values.reverse();</span><br><span class="line">alert(values); <span class="comment">// 5,4,3,2,1 </span></span><br></pre></td></tr></table></figure><hr><h2 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> values = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>];</span><br><span class="line">values.sort();</span><br><span class="line">alert(values); <span class="comment">// 0,1,10,15,5 </span></span><br></pre></td></tr></table></figure><h2 id="indexOf-、"><a href="#indexOf-、" class="headerlink" title="indexOf()、"></a>indexOf()、</h2><h4 id="接收两个参数：要查找的元素和一个可选的起始搜索位置。从数组前头（第一项）开始向后搜索"><a href="#接收两个参数：要查找的元素和一个可选的起始搜索位置。从数组前头（第一项）开始向后搜索" class="headerlink" title="接收两个参数：要查找的元素和一个可选的起始搜索位置。从数组前头（第一项）开始向后搜索"></a>接收两个参数：要查找的元素和一个可选的起始搜索位置。从数组前头（第一项）开始向后搜索</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]; </span><br><span class="line">alert(numbers.indexOf(<span class="number">4</span>)); <span class="comment">// 3</span></span><br><span class="line">alert(numbers.indexOf(<span class="number">4</span>, <span class="number">4</span>)); <span class="comment">// 5 </span></span><br></pre></td></tr></table></figure><h2 id="lastIndexOf"><a href="#lastIndexOf" class="headerlink" title="lastIndexOf()"></a>lastIndexOf()</h2><h4 id="接收两个参数：要查找的元素和一个可选的起始搜索位置。lastIndexOf-从数组末尾（最后一项）开始向前搜索。"><a href="#接收两个参数：要查找的元素和一个可选的起始搜索位置。lastIndexOf-从数组末尾（最后一项）开始向前搜索。" class="headerlink" title="接收两个参数：要查找的元素和一个可选的起始搜索位置。lastIndexOf()从数组末尾（最后一项）开始向前搜索。"></a>接收两个参数：要查找的元素和一个可选的起始搜索位置。lastIndexOf()从数组末尾（最后一项）开始向前搜索。</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]; </span><br><span class="line">alert(numbers.lastIndexOf(<span class="number">4</span>)); <span class="comment">// 5</span></span><br><span class="line">alert(numbers.lastIndexOf(<span class="number">4</span>, <span class="number">4</span>)); <span class="comment">// 3 </span></span><br></pre></td></tr></table></figure><h2 id="includes"><a href="#includes" class="headerlink" title="includes()"></a>includes()</h2><h4 id="接收两个参数：要查找的元素和一个可选的起始搜索位置。从数组前头（第一项）开始向后搜索-1"><a href="#接收两个参数：要查找的元素和一个可选的起始搜索位置。从数组前头（第一项）开始向后搜索-1" class="headerlink" title="接收两个参数：要查找的元素和一个可选的起始搜索位置。从数组前头（第一项）开始向后搜索"></a>接收两个参数：要查找的元素和一个可选的起始搜索位置。从数组前头（第一项）开始向后搜索</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]; </span><br><span class="line">alert(numbers.includes(<span class="number">4</span>)); <span class="comment">// true </span></span><br><span class="line">alert(numbers.includes(<span class="number">4</span>, <span class="number">7</span>)); <span class="comment">// false </span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">数组与对象</summary>
    
    
    
    <category term="JavaScript红宝书" scheme="http://example.com/categories/JavaScript%E7%BA%A2%E5%AE%9D%E4%B9%A6/"/>
    
    
    <category term="数组与对象" scheme="http://example.com/tags/%E6%95%B0%E7%BB%84%E4%B8%8E%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>JS红宝书之字符串增删改查</title>
    <link href="http://example.com/2020/10/26/%E7%BA%A2%E5%AE%9D%E4%B9%A69/"/>
    <id>http://example.com/2020/10/26/%E7%BA%A2%E5%AE%9D%E4%B9%A69/</id>
    <published>2020-10-26T05:06:43.000Z</published>
    <updated>2020-11-06T06:21:01.018Z</updated>
    
    <content type="html"><![CDATA[<h1 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h1><h2 id="字符串操作方法"><a href="#字符串操作方法" class="headerlink" title="字符串操作方法"></a>字符串操作方法</h2><h3 id="concat"><a href="#concat" class="headerlink" title="concat()"></a>concat()</h3><h5 id="用于将一个或多个字符串拼接成一个新字符串。来看下面的例子"><a href="#用于将一个或多个字符串拼接成一个新字符串。来看下面的例子" class="headerlink" title="用于将一个或多个字符串拼接成一个新字符串。来看下面的例子"></a>用于将一个或多个字符串拼接成一个新字符串。来看下面的例子</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;hello &quot;</span>;</span><br><span class="line"><span class="keyword">let</span> res = str.concat(<span class="string">&quot;world&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(res); <span class="comment">// &quot;hello world&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(str); <span class="comment">// &quot;hello&quot; </span></span><br></pre></td></tr></table></figure><h5 id="也可以操控多个参数"><a href="#也可以操控多个参数" class="headerlink" title="也可以操控多个参数"></a>也可以操控多个参数</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;hello &quot;</span>;</span><br><span class="line"><span class="keyword">let</span> res = str.concat(<span class="string">&quot;world&quot;</span>, <span class="string">&quot;!&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(res); <span class="comment">// &quot;hello world!&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(str); <span class="comment">// &quot;hello&quot; </span></span><br></pre></td></tr></table></figure><h3 id="slice"><a href="#slice" class="headerlink" title="slice()"></a>slice()</h3><h5 id="返回调用它们的字符串的一个子字符串，而且都接收一或两个参数。第一个参数表示子字符串开始的位置，第二个参数表示子字符串结束的位置。"><a href="#返回调用它们的字符串的一个子字符串，而且都接收一或两个参数。第一个参数表示子字符串开始的位置，第二个参数表示子字符串结束的位置。" class="headerlink" title="返回调用它们的字符串的一个子字符串，而且都接收一或两个参数。第一个参数表示子字符串开始的位置，第二个参数表示子字符串结束的位置。"></a>返回调用它们的字符串的一个子字符串，而且都接收一或两个参数。第一个参数表示子字符串开始的位置，第二个参数表示子字符串结束的位置。</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.slice(<span class="number">3</span>)); <span class="comment">// &quot;lo world&quot; </span></span><br><span class="line"><span class="built_in">console</span>.log(str.slice(<span class="number">3</span>, <span class="number">7</span>)); <span class="comment">// &quot;lo w&quot; </span></span><br><span class="line"><span class="built_in">console</span>.log(str.slice(<span class="number">-3</span>)); <span class="comment">// &quot;rld&quot; </span></span><br><span class="line"><span class="built_in">console</span>.log(str.slice(<span class="number">3</span>, <span class="number">-4</span>)); <span class="comment">// &quot;lo w&quot; </span></span><br></pre></td></tr></table></figure><h3 id="substr"><a href="#substr" class="headerlink" title="substr()"></a>substr()</h3><h5 id="返回调用它们的字符串的一个子字符串，而且都接收一或两个参数。第一个参数表示子字符串开始的位置，第二个参数表示子字符串结束的位置。-1"><a href="#返回调用它们的字符串的一个子字符串，而且都接收一或两个参数。第一个参数表示子字符串开始的位置，第二个参数表示子字符串结束的位置。-1" class="headerlink" title="返回调用它们的字符串的一个子字符串，而且都接收一或两个参数。第一个参数表示子字符串开始的位置，第二个参数表示子字符串结束的位置。"></a>返回调用它们的字符串的一个子字符串，而且都接收一或两个参数。第一个参数表示子字符串开始的位置，第二个参数表示子字符串结束的位置。</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;hello world&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(str.substr(<span class="number">3</span>)); <span class="comment">// &quot;lo world&quot; </span></span><br><span class="line"><span class="built_in">console</span>.log(str.substr(<span class="number">3</span>, <span class="number">7</span>)); <span class="comment">// &quot;lo worl&quot; </span></span><br><span class="line"><span class="built_in">console</span>.log(str.substr(<span class="number">-3</span>)); <span class="comment">// &quot;rld&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(str.substr(<span class="number">3</span>, <span class="number">-4</span>)); <span class="comment">// &quot;&quot; (empty string)</span></span><br></pre></td></tr></table></figure><h3 id="substring"><a href="#substring" class="headerlink" title="substring()"></a>substring()</h3><h5 id="返回调用它们的字符串的一个子字符串，而且都接收一或两个参数。第一个参数表示子字符串开始的位置，第二个参数表示子字符串结束的位置。-2"><a href="#返回调用它们的字符串的一个子字符串，而且都接收一或两个参数。第一个参数表示子字符串开始的位置，第二个参数表示子字符串结束的位置。-2" class="headerlink" title="返回调用它们的字符串的一个子字符串，而且都接收一或两个参数。第一个参数表示子字符串开始的位置，第二个参数表示子字符串结束的位置。"></a>返回调用它们的字符串的一个子字符串，而且都接收一或两个参数。第一个参数表示子字符串开始的位置，第二个参数表示子字符串结束的位置。</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;hello world&quot;</span>; </span><br><span class="line"><span class="built_in">console</span>.log(str.substring(<span class="number">3</span>)); <span class="comment">// &quot;lo world&quot; </span></span><br><span class="line"><span class="built_in">console</span>.log(str.substring(<span class="number">3</span>,<span class="number">7</span>)); <span class="comment">// &quot;lo w&quot; </span></span><br><span class="line"><span class="built_in">console</span>.log(str.substring(<span class="number">-3</span>)); <span class="comment">// &quot;hello world&quot; </span></span><br><span class="line"><span class="built_in">console</span>.log(str.substring(<span class="number">3</span>, <span class="number">-4</span>)); <span class="comment">// &quot;hel&quot;</span></span><br></pre></td></tr></table></figure><h3 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf()"></a>indexOf()</h3><h5 id="从字符串中搜索传入的字符串，并返回位置（如果没找到，则返回-1）从字符串开头开始查找子字符串"><a href="#从字符串中搜索传入的字符串，并返回位置（如果没找到，则返回-1）从字符串开头开始查找子字符串" class="headerlink" title="从字符串中搜索传入的字符串，并返回位置（如果没找到，则返回-1）从字符串开头开始查找子字符串"></a>从字符串中搜索传入的字符串，并返回位置（如果没找到，则返回-1）从字符串开头开始查找子字符串</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.indexOf(<span class="string">&quot;o&quot;</span>)); <span class="comment">// 4 </span></span><br><span class="line"><span class="built_in">console</span>.log(str.indexOf(<span class="string">&quot;o&quot;</span>, <span class="number">6</span>)); <span class="comment">// 7 </span></span><br></pre></td></tr></table></figure><h3 id="lastIndexOf"><a href="#lastIndexOf" class="headerlink" title="lastIndexOf()"></a>lastIndexOf()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;hello world&quot;</span>; </span><br><span class="line"><span class="built_in">console</span>.log(str.lastIndexOf(<span class="string">&quot;o&quot;</span>)); <span class="comment">// 7</span></span><br><span class="line"><span class="built_in">console</span>.log(str.lastIndexOf(<span class="string">&quot;o&quot;</span>, <span class="number">6</span>)); <span class="comment">// 4 </span></span><br></pre></td></tr></table></figure><h5 id="从字符串中搜索传入的字符串，并返回位置（如果没找到，则返回-1）从字符串末尾开始查找子字符串"><a href="#从字符串中搜索传入的字符串，并返回位置（如果没找到，则返回-1）从字符串末尾开始查找子字符串" class="headerlink" title="从字符串中搜索传入的字符串，并返回位置（如果没找到，则返回-1）从字符串末尾开始查找子字符串"></a>从字符串中搜索传入的字符串，并返回位置（如果没找到，则返回-1）从字符串末尾开始查找子字符串</h5><h3 id="split"><a href="#split" class="headerlink" title="split()"></a>split()</h3><h5 id="把一个字符串分割成字符串数组"><a href="#把一个字符串分割成字符串数组" class="headerlink" title="把一个字符串分割成字符串数组"></a>把一个字符串分割成字符串数组</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">&#x27;welcome-to-beijing&#x27;</span>;</span><br><span class="line"><span class="comment">//使用split将str转换为数组</span></span><br><span class="line"> <span class="keyword">var</span> arr=str.split(<span class="string">&quot;-&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> date=<span class="string">&#x27;2016/05/05&#x27;</span>;</span><br><span class="line"><span class="comment">//[&quot;welcome&quot;,&quot;to&quot;,&quot;beijing&quot;]</span></span><br><span class="line"><span class="keyword">var</span> dateArr=date.split(<span class="string">&quot;/&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(dateArr);</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="replace"><a href="#replace" class="headerlink" title="replace()"></a>replace()</h3><h5 id="在字符串用一些字符串替换另一些字符，或替换一个与正则表达式匹配的字符串"><a href="#在字符串用一些字符串替换另一些字符，或替换一个与正则表达式匹配的字符串" class="headerlink" title="在字符串用一些字符串替换另一些字符，或替换一个与正则表达式匹配的字符串"></a>在字符串用一些字符串替换另一些字符，或替换一个与正则表达式匹配的字符串</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tel=<span class="string">&#x27;010-62971268,400-100-9098,010-86789889&#x27;</span>;</span><br><span class="line"><span class="comment">//newTel被替换之后的字符串</span></span><br><span class="line"><span class="keyword">var</span> newTel=tel.replace(<span class="string">&#x27;,&#x27;</span>,<span class="string">&quot;  &quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(newTel);</span><br><span class="line"><span class="comment">//010-62971268  400-100-9098,010-86789889</span></span><br></pre></td></tr></table></figure><h3 id="startsWith"><a href="#startsWith" class="headerlink" title="startsWith()"></a>startsWith()</h3><h5 id="用于判断字符串中是否包含另一个字符串的方法这些方法都会从字符串中搜索传入的字符串，并返回一个表示是否包含的布尔值。startsWith-检查开始于索引-0-的匹配项"><a href="#用于判断字符串中是否包含另一个字符串的方法这些方法都会从字符串中搜索传入的字符串，并返回一个表示是否包含的布尔值。startsWith-检查开始于索引-0-的匹配项" class="headerlink" title="用于判断字符串中是否包含另一个字符串的方法这些方法都会从字符串中搜索传入的字符串，并返回一个表示是否包含的布尔值。startsWith()检查开始于索引 0 的匹配项"></a>用于判断字符串中是否包含另一个字符串的方法这些方法都会从字符串中搜索传入的字符串，并返回一个表示是否包含的布尔值。startsWith()检查开始于索引 0 的匹配项</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mes = <span class="string">&quot;foobarbaz&quot;</span>; </span><br><span class="line"><span class="built_in">console</span>.log(mes.startsWith(<span class="string">&quot;foo&quot;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(mes.startsWith(<span class="string">&quot;bar&quot;</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="endsWith"><a href="#endsWith" class="headerlink" title="endsWith()"></a>endsWith()</h3><h5 id="用于判断字符串中是否包含另一个字符串的方法这些方法都会从字符串中搜索传入的字符串，并返回一个表示是否包含的布尔值。endsWith-检查开始于索引-string-length-substring-length-的匹配项"><a href="#用于判断字符串中是否包含另一个字符串的方法这些方法都会从字符串中搜索传入的字符串，并返回一个表示是否包含的布尔值。endsWith-检查开始于索引-string-length-substring-length-的匹配项" class="headerlink" title="用于判断字符串中是否包含另一个字符串的方法这些方法都会从字符串中搜索传入的字符串，并返回一个表示是否包含的布尔值。endsWith()检查开始于索引(string.length - substring.length)的匹配项"></a>用于判断字符串中是否包含另一个字符串的方法这些方法都会从字符串中搜索传入的字符串，并返回一个表示是否包含的布尔值。endsWith()检查开始于索引(string.length - substring.length)的匹配项</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mes = <span class="string">&quot;foobarbaz&quot;</span>; </span><br><span class="line"><span class="built_in">console</span>.log(mes.endsWith(<span class="string">&quot;baz&quot;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(mes.endsWith(<span class="string">&quot;bar&quot;</span>)); <span class="comment">// false </span></span><br></pre></td></tr></table></figure><h3 id="includes"><a href="#includes" class="headerlink" title="includes()"></a>includes()</h3><h5 id="用于判断字符串中是否包含另一个字符串的方法这些方法都会从字符串中搜索传入的字符串，并返回一个表示是否包含的布尔值。includes-检查整个字符串"><a href="#用于判断字符串中是否包含另一个字符串的方法这些方法都会从字符串中搜索传入的字符串，并返回一个表示是否包含的布尔值。includes-检查整个字符串" class="headerlink" title="用于判断字符串中是否包含另一个字符串的方法这些方法都会从字符串中搜索传入的字符串，并返回一个表示是否包含的布尔值。includes()检查整个字符串"></a>用于判断字符串中是否包含另一个字符串的方法这些方法都会从字符串中搜索传入的字符串，并返回一个表示是否包含的布尔值。includes()检查整个字符串</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mes = <span class="string">&quot;foobarbaz&quot;</span>; </span><br><span class="line"><span class="built_in">console</span>.log(mes.includes(<span class="string">&quot;bar&quot;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(mes.includes(<span class="string">&quot;qux&quot;</span>)); <span class="comment">// false </span></span><br></pre></td></tr></table></figure><h3 id="trim-方法"><a href="#trim-方法" class="headerlink" title="trim()方法"></a>trim()方法</h3><h5 id="ECMAScript-在所有字符串上都提供了-trim-方法。这个方法会创建字符串的一个副本，删除前、后所有空格符，再返回结果。"><a href="#ECMAScript-在所有字符串上都提供了-trim-方法。这个方法会创建字符串的一个副本，删除前、后所有空格符，再返回结果。" class="headerlink" title="ECMAScript 在所有字符串上都提供了 trim()方法。这个方法会创建字符串的一个副本，删除前、后所有空格符，再返回结果。"></a>ECMAScript 在所有字符串上都提供了 trim()方法。这个方法会创建字符串的一个副本，删除前、后所有空格符，再返回结果。</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot; hello world &quot;</span>;</span><br><span class="line"><span class="keyword">let</span> tri = str.trim();</span><br><span class="line"><span class="built_in">console</span>.log(str); <span class="comment">// &quot; hello world &quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(tri); <span class="comment">// &quot;hello world&quot; </span></span><br></pre></td></tr></table></figure><h3 id="repeat-方法"><a href="#repeat-方法" class="headerlink" title="repeat()方法"></a>repeat()方法</h3><h5 id="ECMAScript-在所有字符串上都提供了-repeat-方法。这个方法接收一个整数参数，表示要将字符串复制多少次，然后返回拼接所有副本后的结果。"><a href="#ECMAScript-在所有字符串上都提供了-repeat-方法。这个方法接收一个整数参数，表示要将字符串复制多少次，然后返回拼接所有副本后的结果。" class="headerlink" title="ECMAScript 在所有字符串上都提供了 repeat()方法。这个方法接收一个整数参数，表示要将字符串复制多少次，然后返回拼接所有副本后的结果。"></a>ECMAScript 在所有字符串上都提供了 repeat()方法。这个方法接收一个整数参数，表示要将字符串复制多少次，然后返回拼接所有副本后的结果。</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;de &quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.repeat(<span class="number">4</span>) + <span class="string">&quot;decade&quot;</span>);</span><br><span class="line"><span class="comment">// de de de de decade </span></span><br></pre></td></tr></table></figure><h3 id="padStart"><a href="#padStart" class="headerlink" title="padStart()"></a>padStart()</h3><h5 id="会复制字符串，如果小于指定长度，则在相应一边填充字符，直至满足长度条件。这两个方法的第一个参数是长度，第二个参数是可选的填充字符串，默认为空格"><a href="#会复制字符串，如果小于指定长度，则在相应一边填充字符，直至满足长度条件。这两个方法的第一个参数是长度，第二个参数是可选的填充字符串，默认为空格" class="headerlink" title="会复制字符串，如果小于指定长度，则在相应一边填充字符，直至满足长度条件。这两个方法的第一个参数是长度，第二个参数是可选的填充字符串，默认为空格"></a>会复制字符串，如果小于指定长度，则在相应一边填充字符，直至满足长度条件。这两个方法的第一个参数是长度，第二个参数是可选的填充字符串，默认为空格</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;foo&quot;</span>; </span><br><span class="line"><span class="built_in">console</span>.log(str(<span class="number">6</span>)); <span class="comment">// &quot; foo&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(str(<span class="number">9</span>, <span class="string">&quot;.&quot;</span>)); <span class="comment">// &quot;......foo&quot; </span></span><br></pre></td></tr></table></figure><h3 id="padEnd"><a href="#padEnd" class="headerlink" title="padEnd()"></a>padEnd()</h3><h5 id="会复制字符串，如果小于指定长度，则在相应一边填充字符，直至满足长度条件。这两个方法的第一个参数是长度，第二个参数是可选的填充字符串，默认为空格-1"><a href="#会复制字符串，如果小于指定长度，则在相应一边填充字符，直至满足长度条件。这两个方法的第一个参数是长度，第二个参数是可选的填充字符串，默认为空格-1" class="headerlink" title="会复制字符串，如果小于指定长度，则在相应一边填充字符，直至满足长度条件。这两个方法的第一个参数是长度，第二个参数是可选的填充字符串，默认为空格"></a>会复制字符串，如果小于指定长度，则在相应一边填充字符，直至满足长度条件。这两个方法的第一个参数是长度，第二个参数是可选的填充字符串，默认为空格</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stringValue = <span class="string">&quot;foo&quot;</span>; </span><br><span class="line"><span class="built_in">console</span>.log(str.padEnd(<span class="number">6</span>)); <span class="comment">// &quot;foo &quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(str.padEnd(<span class="number">9</span>, <span class="string">&quot;.&quot;</span>)); <span class="comment">// &quot;foo......&quot; </span></span><br></pre></td></tr></table></figure><h3 id="toLowerCase-、toUpperCase-、toLocaleLowerCase-和toLocaleUpperCase"><a href="#toLowerCase-、toUpperCase-、toLocaleLowerCase-和toLocaleUpperCase" class="headerlink" title="toLowerCase()、toUpperCase()、toLocaleLowerCase()和toLocaleUpperCase()"></a>toLowerCase()、toUpperCase()、toLocaleLowerCase()和toLocaleUpperCase()</h3><h5 id="字符串大小写转换"><a href="#字符串大小写转换" class="headerlink" title="字符串大小写转换"></a>字符串大小写转换</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.toLocaleUpperCase()); <span class="comment">// &quot;HELLO WORLD&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(str.toUpperCase()); <span class="comment">// &quot;HELLO WORLD&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(str.toLocaleLowerCase()); <span class="comment">// &quot;hello world&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(str.toLowerCase()); <span class="comment">// &quot;hello world&quot; </span></span><br></pre></td></tr></table></figure><h3 id="localeCompare-方法"><a href="#localeCompare-方法" class="headerlink" title="localeCompare()方法"></a>localeCompare()方法</h3><h5 id="最后一个方法是-localeCompare-，这个方法比较两个字符串，返回如下-3-个值中的一个"><a href="#最后一个方法是-localeCompare-，这个方法比较两个字符串，返回如下-3-个值中的一个" class="headerlink" title="最后一个方法是 localeCompare()，这个方法比较两个字符串，返回如下 3 个值中的一个"></a>最后一个方法是 localeCompare()，这个方法比较两个字符串，返回如下 3 个值中的一个</h5><ol><li>如果按照字母表顺序，字符串应该排在字符串参数前头，则返回负值。（通常是-1，具体还要看<br>与实际值相关的实现。）</li><li>如果字符串与字符串参数相等，则返回 0。</li><li>如果按照字母表顺序，字符串应该排在字符串参数后头，则返回正值。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stringValue = <span class="string">&quot;yellow&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(stringValue.localeCompare(<span class="string">&quot;brick&quot;</span>)); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(stringValue.localeCompare(<span class="string">&quot;yellow&quot;</span>)); <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(stringValue.localeCompare(<span class="string">&quot;zoo&quot;</span>)); <span class="comment">// -1 </span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;增删改查&quot;&gt;&lt;a href=&quot;#增删改查&quot; class=&quot;headerlink&quot; title=&quot;增删改查&quot;&gt;&lt;/a&gt;增删改查&lt;/h1&gt;&lt;h2 id=&quot;字符串操作方法&quot;&gt;&lt;a href=&quot;#字符串操作方法&quot; class=&quot;headerlink&quot; title=&quot;字符串</summary>
      
    
    
    
    <category term="JavaScript红宝书" scheme="http://example.com/categories/JavaScript%E7%BA%A2%E5%AE%9D%E4%B9%A6/"/>
    
    
    <category term="字符串增删改查" scheme="http://example.com/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/"/>
    
  </entry>
  
  <entry>
    <title>电商网站构图之商品详情</title>
    <link href="http://example.com/2020/10/25/%E7%94%B5%E5%95%86%E7%BD%91%E7%AB%99%E6%80%9D%E6%83%B33/"/>
    <id>http://example.com/2020/10/25/%E7%94%B5%E5%95%86%E7%BD%91%E7%AB%99%E6%80%9D%E6%83%B33/</id>
    <published>2020-10-25T05:06:43.000Z</published>
    <updated>2020-11-06T06:17:48.310Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-品优购项目-四"><a href="#1-品优购项目-四" class="headerlink" title="1. 品优购项目(四)"></a>1. 品优购项目(四)</h1><h2 id="1-详情页-detail-html-常用单词"><a href="#1-详情页-detail-html-常用单词" class="headerlink" title="1). 详情页 detail.html  常用单词"></a>1). 详情页 detail.html  常用单词</h2><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>主体</td><td>de_container</td></tr><tr><td>面包屑导航</td><td>crumb_wrap</td></tr><tr><td>产品介绍</td><td>product_intro   （ introduction介绍）</td></tr><tr><td>预览包</td><td>preview_wrap（左侧部分）</td></tr><tr><td>预览缩略图</td><td>preview_img</td></tr><tr><td>预览列表</td><td>preview_list</td></tr><tr><td>左按钮</td><td>arrow_prev</td></tr><tr><td>右按钮</td><td>arrow_next</td></tr><tr><td>小图列表</td><td>preview_items</td></tr><tr><td>产品详细信息区域</td><td>itemInfo_wrap （右侧部分）</td></tr><tr><td>头部名称</td><td>sku_name       skull  头骨</td></tr><tr><td>新闻</td><td>news</td></tr><tr><td>摘要</td><td>summary</td></tr><tr><td>评价</td><td>remark</td></tr><tr><td>价格摘要</td><td>summary_price</td></tr><tr><td>配送至</td><td>summary_stock</td></tr><tr><td>支持</td><td>summary_support</td></tr><tr><td>选择</td><td>choose</td></tr><tr><td>选择按钮组</td><td>choose_btns</td></tr><tr><td>选择数量</td><td>choose_amount</td></tr><tr><td>减去</td><td>reduce</td></tr><tr><td>加入购物车</td><td>addshopcar</td></tr><tr><td>产品细节</td><td>product_detail      （   detail描述）</td></tr><tr><td>左侧边</td><td>aside</td></tr><tr><td>详细描述</td><td>detail</td></tr></tbody></table><h2 id="2-面包屑导航"><a href="#2-面包屑导航" class="headerlink" title="2). 面包屑导航"></a>2). 面包屑导航</h2><p><img src="https://s1.ax1x.com/2020/11/06/BfJfx0.png" alt="我是图片"></p><ul><li>crumb_wrap   面包屑导航</li><li>关于面包屑导航的由来是源于一则童话故事的一个词语：汉泽尔和格蕾特尔两个人在穿过森林是，为了避免找不到回家的路，他们在沿途走过的地方都会撒下面包屑以便于根据这些面包屑找到回家的路。</li></ul><h2 id="3-产品介绍-模块"><a href="#3-产品介绍-模块" class="headerlink" title="3). 产品介绍 模块"></a>3). 产品介绍 模块</h2><p><img src="https://s1.ax1x.com/2020/11/06/BfJ5rT.png" alt="我是图片"></p><ul><li>1号盒子 本模块 命名为产品模块   product_intro   （ introduction介绍）</li><li>此模块不要给高度  因为右侧的模块内容高度不固定</li><li>里面有2个盒子  分为是2号盒子 和  3号盒子  </li><li>2号盒子为  预览区域  preview_wrap   给宽度，给高度， 左浮动</li><li>3号盒子为  产品详细信息区域  itemInfo_wrap 给宽度 ，不要给高度  左侧浮动 </li></ul><h3 id="3-1-preview-list-制作"><a href="#3-1-preview-list-制作" class="headerlink" title="3.1 preview_list 制作"></a>3.1 preview_list 制作</h3><p><img src="https://s1.ax1x.com/2020/11/06/BftxED.png" alt="我是图片"></p><ul><li>盒子 有左右按钮   arrow_prev   arrow_next  用定位即可 </li><li>中间 用 ul  命名为    list-item    给宽度和高度 然后  margin: 0 auto;  水平居中对齐即可</li></ul><h2 id="4-预览区域制作"><a href="#4-预览区域制作" class="headerlink" title="4).  预览区域制作"></a>4).  预览区域制作</h2><p><img src="https://s1.ax1x.com/2020/11/06/BfJ4MV.png" alt="我是图片"></p><ul><li>1号盒子 为  图片预览   命名为   preview_img    注意里面的图片，我们切图的时候是 398*398 像素的</li><li>2号盒子 为 预览列表   命名为  preview_list</li></ul><h2 id="5-产品详细信息区域制作-itemInfo-wrap"><a href="#5-产品详细信息区域制作-itemInfo-wrap" class="headerlink" title="5). 产品详细信息区域制作 itemInfo_wrap"></a>5). 产品详细信息区域制作 itemInfo_wrap</h2><p><img src="https://s1.ax1x.com/2020/11/06/BfJTZF.png" alt="我是图片"></p><ul><li><p>此盒子命名为 itemInfo</p></li><li><p>1 号盒子 为 头部 sku_name    </p></li><li><p>2 号盒子 为 最新新闻  news  </p></li><li><p>3号盒子 为  产品详细摘要  我们命名为  summary （摘要的意思）   之所以下面都是摘要部分，因为里面格式基本相同。</p></li><li><p>下面为详细命名</p><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>头部名称</td><td>sku_name       skull  头骨</td></tr><tr><td>新闻</td><td>news</td></tr><tr><td>摘要</td><td>summary</td></tr><tr><td>评价</td><td>remark</td></tr><tr><td>价格摘要</td><td>summary_price</td></tr><tr><td>促销摘要</td><td>summary_promotion</td></tr><tr><td>配送至</td><td>summary_stock</td></tr><tr><td>支持</td><td>summary_support</td></tr><tr><td>选择</td><td>choose</td></tr><tr><td>选择版本</td><td>choose_version</td></tr><tr><td>选择类型</td><td>choose_type</td></tr><tr><td>选择按钮组</td><td>choose_btns</td></tr><tr><td>选择数量</td><td>choose_amount        add 是加的意思</td></tr><tr><td>减去</td><td>reduce     cursor: not-allowed;  禁止符号</td></tr><tr><td>加入购物车</td><td>addshopcar</td></tr></tbody></table></li></ul><h2 id="6-产品细节模块-product-detail"><a href="#6-产品细节模块-product-detail" class="headerlink" title="6).  产品细节模块 product_detail"></a>6).  产品细节模块 product_detail</h2><p><img src="https://s1.ax1x.com/2020/11/06/BfJIqU.png" alt="我是图片"></p><ul><li>大盒子为 product_detail 模块 不要给高度 ，别忘记清除浮动</li><li>1号盒子 左侧浮动 命名为 aside  有宽度 不给高度</li><li>2号盒子 右侧浮动  命名为 detail   有宽度不给高度</li></ul><h3 id="6-1-aside-布局"><a href="#6-1-aside-布局" class="headerlink" title="6.1) aside 布局"></a>6.1) aside 布局</h3><p><img src="https://s1.ax1x.com/2020/11/06/BfJzqO.png" alt="我是图片"><br><img src="https://s1.ax1x.com/2020/11/06/BftwB8.png" alt="我是图片"></p><ul><li>1 号盒子 命名为 tab_list   给高度就好了 ，里面 放 ul 和 li   注意这是 tab栏切换布局</li><li>2 号盒子  命名为  tab_con    里面还包含 很多个ul.item 和 上面的 tab_list 里面的li一一对应。   </li></ul><h3 id="6-2-detail-布局"><a href="#6-2-detail-布局" class="headerlink" title="6.2) detail 布局"></a>6.2) detail 布局</h3><p><img src="https://s1.ax1x.com/2020/11/06/Bftdnf.png" alt="我是图片"></p><ul><li>1 号盒子 命名为 detail_tab_list   给高度就好了 ，里面 放 ul 和 li   注意这是 tab栏切换布局</li><li>2 号盒子  命名为  detail_tab_con    里面还包含 很多个ul.item 和 上面的 tab_list 里面的li一一对应。   </li></ul><h2 id="1-html-我们学的就是常用标签，-就是基本盒子"><a href="#1-html-我们学的就是常用标签，-就是基本盒子" class="headerlink" title="1. html 我们学的就是常用标签， 就是基本盒子"></a>1. html 我们学的就是常用标签， 就是基本盒子</h2><h2 id="2-css-就是用来美化布局网页。"><a href="#2-css-就是用来美化布局网页。" class="headerlink" title="2. css 就是用来美化布局网页。"></a>2. css 就是用来美化布局网页。</h2><h2 id="3-html-css-是没有逻辑可言的，基本就是搭积木摆放盒子的过程，你需要的是耐心。"><a href="#3-html-css-是没有逻辑可言的，基本就是搭积木摆放盒子的过程，你需要的是耐心。" class="headerlink" title="3. html+css 是没有逻辑可言的，基本就是搭积木摆放盒子的过程，你需要的是耐心。"></a>3. html+css 是没有逻辑可言的，基本就是搭积木摆放盒子的过程，你需要的是耐心。</h2><h2 id="4-对同学们来说，现在最困难的是-布局结构-。欠缺分析页面布局的能力"><a href="#4-对同学们来说，现在最困难的是-布局结构-。欠缺分析页面布局的能力" class="headerlink" title="4. 对同学们来说，现在最困难的是 布局结构 。欠缺分析页面布局的能力"></a>4. 对同学们来说，现在最困难的是 布局结构 。欠缺分析页面布局的能力</h2><h2 id="5-多看别人写的页面，模仿人家的布局，每次写页面总会有新的收获。"><a href="#5-多看别人写的页面，模仿人家的布局，每次写页面总会有新的收获。" class="headerlink" title="5. 多看别人写的页面，模仿人家的布局，每次写页面总会有新的收获。"></a>5. 多看别人写的页面，模仿人家的布局，每次写页面总会有新的收获。</h2><h2 id="6-错误总是在所难免，一定要学会利用chrome-调试工具，-他们能快速帮我们排查错误。你还需要细心。"><a href="#6-错误总是在所难免，一定要学会利用chrome-调试工具，-他们能快速帮我们排查错误。你还需要细心。" class="headerlink" title="6. 错误总是在所难免，一定要学会利用chrome 调试工具， 他们能快速帮我们排查错误。你还需要细心。"></a>6. 错误总是在所难免，一定要学会利用chrome 调试工具， 他们能快速帮我们排查错误。你还需要细心。</h2><h2 id="7-学好定位，对后面学习JavaScript-有很大的帮助。"><a href="#7-学好定位，对后面学习JavaScript-有很大的帮助。" class="headerlink" title="7. 学好定位，对后面学习JavaScript 有很大的帮助。"></a>7. 学好定位，对后面学习JavaScript 有很大的帮助。</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-品优购项目-四&quot;&gt;&lt;a href=&quot;#1-品优购项目-四&quot; class=&quot;headerlink&quot; title=&quot;1. 品优购项目(四)&quot;&gt;&lt;/a&gt;1. 品优购项目(四)&lt;/h1&gt;&lt;h2 id=&quot;1-详情页-detail-html-常用单词&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    <category term="电商网站构图思想" scheme="http://example.com/categories/%E7%94%B5%E5%95%86%E7%BD%91%E7%AB%99%E6%9E%84%E5%9B%BE%E6%80%9D%E6%83%B3/"/>
    
    
    <category term="项目" scheme="http://example.com/tags/%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>JS红宝书之基本引用类型</title>
    <link href="http://example.com/2020/10/24/%E7%BA%A2%E5%AE%9D%E4%B9%A68/"/>
    <id>http://example.com/2020/10/24/%E7%BA%A2%E5%AE%9D%E4%B9%A68/</id>
    <published>2020-10-24T05:06:43.000Z</published>
    <updated>2020-11-06T06:20:41.768Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h1><h4 id="Date-类型将日期保存为自协调世界时（UTC，Universal-Time-Coordinated）时间-1970-年-1-月-1-日午夜（零时）至今所经过的毫秒数。使用这种存储格式，Date-类型可以精确表示-1970-年-1-月-1-日之前及之后-285-616-年的日期。"><a href="#Date-类型将日期保存为自协调世界时（UTC，Universal-Time-Coordinated）时间-1970-年-1-月-1-日午夜（零时）至今所经过的毫秒数。使用这种存储格式，Date-类型可以精确表示-1970-年-1-月-1-日之前及之后-285-616-年的日期。" class="headerlink" title="Date 类型将日期保存为自协调世界时（UTC，Universal Time Coordinated）时间 1970 年 1 月 1 日午夜（零时）至今所经过的毫秒数。使用这种存储格式，Date 类型可以精确表示 1970 年 1 月 1 日之前及之后 285 616 年的日期。"></a>Date 类型将日期保存为自协调世界时（UTC，Universal Time Coordinated）时间 1970 年 1 月 1 日午夜（零时）至今所经过的毫秒数。使用这种存储格式，Date 类型可以精确表示 1970 年 1 月 1 日之前及之后 285 616 年的日期。</h4><h4 id="要创建日期对象，就使用-new-操作符来调用-Date-构造函数："><a href="#要创建日期对象，就使用-new-操作符来调用-Date-构造函数：" class="headerlink" title="要创建日期对象，就使用 new 操作符来调用 Date 构造函数："></a>要创建日期对象，就使用 new 操作符来调用 Date 构造函数：</h4><h4 id="创建时间对象，在不传参数的情况下，返回当前日期时间对象。"><a href="#创建时间对象，在不传参数的情况下，返回当前日期时间对象。" class="headerlink" title="创建时间对象，在不传参数的情况下，返回当前日期时间对象。"></a>创建时间对象，在不传参数的情况下，返回当前日期时间对象。</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>(); </span><br></pre></td></tr></table></figure><h4 id="获取时间的方法"><a href="#获取时间的方法" class="headerlink" title="获取时间的方法"></a>获取时间的方法</h4><table><thead><tr><th align="center">代码</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">getFullYear()</td><td align="center">返回4位数的年份</td></tr><tr><td align="center">getMonth()</td><td align="center">返回日期中的月份，返回值0-11</td></tr><tr><td align="center">getDate()</td><td align="center">返回月份中的天数</td></tr><tr><td align="center">getDay()</td><td align="center">返回星期，返回值为0-6</td></tr><tr><td align="center">getHours()</td><td align="center">返回小时</td></tr><tr><td align="center">getMinutes()</td><td align="center">返回分钟</td></tr><tr><td align="center">getMinutes()</td><td align="center">返回分钟</td></tr><tr><td align="center">getSeconds()</td><td align="center">返回秒</td></tr><tr><td align="center">getTime()</td><td align="center">返回日期的毫秒数</td></tr></tbody></table><hr><h4 id="设置时间的方法"><a href="#设置时间的方法" class="headerlink" title="设置时间的方法"></a>设置时间的方法</h4><table><thead><tr><th align="center">代码</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">setFullYear(year)</td><td align="center">设置4位数的年份</td></tr><tr><td align="center">setMonth(mon)</td><td align="center">设置日期中的月份，返回值0-11</td></tr><tr><td align="center">setDate()</td><td align="center">设置月份中的天数</td></tr><tr><td align="center">setDay()</td><td align="center">设置星期，返回值为0-6</td></tr><tr><td align="center">setHours()</td><td align="center">设置小时</td></tr><tr><td align="center">setMinutes()</td><td align="center">设置分钟</td></tr><tr><td align="center">setMinutes()</td><td align="center">设置分钟</td></tr><tr><td align="center">setSeconds()</td><td align="center">设置秒</td></tr><tr><td align="center">setTime()</td><td align="center">设置日期的毫秒数</td></tr></tbody></table><h4 id="获取一个日期时间对象"><a href="#获取一个日期时间对象" class="headerlink" title="获取一个日期时间对象"></a>获取一个日期时间对象</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">   </span><br><span class="line"><span class="keyword">var</span> weeks=[<span class="string">&quot;日&quot;</span>,<span class="string">&quot;一&quot;</span>,<span class="string">&quot;二&quot;</span>,<span class="string">&quot;三&quot;</span>,<span class="string">&quot;四&quot;</span>,<span class="string">&quot;五&quot;</span>,<span class="string">&quot;六&quot;</span>],</span><br><span class="line">    today=<span class="keyword">new</span> <span class="built_in">Date</span>(),</span><br><span class="line">    year=today.getFullYear(),</span><br><span class="line">    month=today.getMonth()+<span class="number">1</span>,</span><br><span class="line">    date=today.getDate(),</span><br><span class="line">    week=today.getDay(),</span><br><span class="line">    hours=today.getHours(),</span><br><span class="line">    minutes=today.getMinutes(),</span><br><span class="line">    seconds=today.getSeconds(),</span><br><span class="line">    times=today.getTime(),</span><br><span class="line">    time=year+<span class="string">&#x27;年&#x27;</span>+month+<span class="string">&#x27;月&#x27;</span>+date+<span class="string">&#x27;日&#x27;</span>+hours+<span class="string">&#x27;时&#x27;</span>+minutes+<span class="string">&#x27;分&#x27;</span>+seconds+<span class="string">&#x27;秒 星期&#x27;</span>+weeks[week];</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;现在是：&quot;</span>+time);</span><br><span class="line"><span class="built_in">console</span>.log(times);</span><br><span class="line">  </span><br></pre></td></tr></table></figure><h4 id="设置一个日期时间对象"><a href="#设置一个日期时间对象" class="headerlink" title="设置一个日期时间对象"></a>设置一个日期时间对象</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> today=<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">      <span class="comment">//today.setFullYear(2017);</span></span><br><span class="line">      <span class="comment">//today.setMonth(15);</span></span><br><span class="line">      <span class="comment">//console.log(today.getFullYear());</span></span><br><span class="line">      <span class="comment">//  50天之后是星期</span></span><br><span class="line">      <span class="comment">// 第一种做法</span></span><br><span class="line">      <span class="comment">//today.setDate(today.getDate()+50);</span></span><br><span class="line">      <span class="comment">//console.log(today.getDay());</span></span><br><span class="line">      <span class="comment">// 第二种做法</span></span><br><span class="line">      <span class="keyword">var</span> weeks=[<span class="string">&quot;日&quot;</span>,<span class="string">&quot;一&quot;</span>,<span class="string">&quot;二&quot;</span>,<span class="string">&quot;三&quot;</span>,<span class="string">&quot;四&quot;</span>,<span class="string">&quot;五&quot;</span>,<span class="string">&quot;六&quot;</span>];</span><br><span class="line">      <span class="keyword">var</span> year=today.getFullYear();</span><br><span class="line">      <span class="keyword">var</span> month=today.getMonth();</span><br><span class="line">      <span class="keyword">var</span> day=today.getDate();</span><br><span class="line">      <span class="comment">// 创建了一个目标日期对象,年,月,日,时,分,秒</span></span><br><span class="line">      <span class="keyword">var</span> temp=<span class="keyword">new</span> <span class="built_in">Date</span>(year+<span class="number">1</span>,month,day);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;50天后的今天是：&quot;</span>+temp.getFullYear()+<span class="string">&#x27;-&#x27;</span>+(temp.getMonth()+<span class="number">1</span>)+<span class="string">&#x27;-&#x27;</span>+temp.getDate()+<span class="string">&#x27;-&#x27;</span>+<span class="string">&#x27;星期&#x27;</span>+weeks[temp.getDay()]);</span><br></pre></td></tr></table></figure><h1 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h1><h4 id="ECMAScript-提供了-Math-对象作为保存数学公式、信息和计算的地方。Math-对象提供了一些辅助计算的属性和方法。"><a href="#ECMAScript-提供了-Math-对象作为保存数学公式、信息和计算的地方。Math-对象提供了一些辅助计算的属性和方法。" class="headerlink" title="ECMAScript 提供了 Math 对象作为保存数学公式、信息和计算的地方。Math 对象提供了一些辅助计算的属性和方法。"></a>ECMAScript 提供了 Math 对象作为保存数学公式、信息和计算的地方。Math 对象提供了一些辅助计算的属性和方法。</h4><h4 id="注意-Math-对象上提供的计算要比直接在-JavaScript-实现的快得多，因为-Math-对象上的计算使用了-JavaScript-引擎中更高效的实现和处理器指令。但使用-Math-计算的问题是精度会因浏览器、操作系统、指令集和硬件而异。"><a href="#注意-Math-对象上提供的计算要比直接在-JavaScript-实现的快得多，因为-Math-对象上的计算使用了-JavaScript-引擎中更高效的实现和处理器指令。但使用-Math-计算的问题是精度会因浏览器、操作系统、指令集和硬件而异。" class="headerlink" title="注意 Math 对象上提供的计算要比直接在 JavaScript 实现的快得多，因为 Math 对象上的计算使用了 JavaScript 引擎中更高效的实现和处理器指令。但使用 Math 计算的问题是精度会因浏览器、操作系统、指令集和硬件而异。"></a>注意 Math 对象上提供的计算要比直接在 JavaScript 实现的快得多，因为 Math 对象上的计算使用了 JavaScript 引擎中更高效的实现和处理器指令。但使用 Math 计算的问题是精度会因浏览器、操作系统、指令集和硬件而异。</h4><h3 id="1-Math-对象属性"><a href="#1-Math-对象属性" class="headerlink" title="1. Math 对象属性"></a>1. Math 对象属性</h3><table><thead><tr><th align="center">属 性</th><th align="center">说 明</th></tr></thead><tbody><tr><td align="center">Math.E</td><td align="center">自然对数的基数 e 的值</td></tr><tr><td align="center">Math.LN10</td><td align="center">10 为底的自然对数</td></tr><tr><td align="center">Math.LN2</td><td align="center">2 为底的自然对数</td></tr><tr><td align="center">Math.LOG2E</td><td align="center">以 2 为底 e 的对数</td></tr><tr><td align="center">Math.LOG10E</td><td align="center">以 10 为底 e 的对数</td></tr><tr><td align="center">Math.PI</td><td align="center">π 的值</td></tr><tr><td align="center">Math.SQRT1_2</td><td align="center">1/2 的平方根</td></tr><tr><td align="center">Math.SQRT2</td><td align="center">2 的平方根</td></tr></tbody></table><h3 id="2-min-和-max-方法"><a href="#2-min-和-max-方法" class="headerlink" title="2. min()和 max()方法"></a>2. min()和 max()方法</h3><h5 id="Math-对象也提供了很多辅助执行简单或复杂数学计算的方法。"><a href="#Math-对象也提供了很多辅助执行简单或复杂数学计算的方法。" class="headerlink" title="Math 对象也提供了很多辅助执行简单或复杂数学计算的方法。"></a>Math 对象也提供了很多辅助执行简单或复杂数学计算的方法。</h5><h5 id="min-和-max-方法用于确定一组数值中的最小值和最大值。这两个方法都接收任意多个参数"><a href="#min-和-max-方法用于确定一组数值中的最小值和最大值。这两个方法都接收任意多个参数" class="headerlink" title="min()和 max()方法用于确定一组数值中的最小值和最大值。这两个方法都接收任意多个参数"></a>min()和 max()方法用于确定一组数值中的最小值和最大值。这两个方法都接收任意多个参数</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> max = <span class="built_in">Math</span>.max(<span class="number">3</span>, <span class="number">54</span>, <span class="number">32</span>, <span class="number">16</span>);</span><br><span class="line"><span class="built_in">console</span>.log(max); <span class="comment">// 54</span></span><br><span class="line"><span class="keyword">let</span> min = <span class="built_in">Math</span>.min(<span class="number">3</span>, <span class="number">54</span>, <span class="number">32</span>, <span class="number">16</span>);</span><br><span class="line"><span class="built_in">console</span>.log(min); <span class="comment">// 3 </span></span><br></pre></td></tr></table></figure><h3 id="3-舍入方法"><a href="#3-舍入方法" class="headerlink" title="3. 舍入方法"></a>3. 舍入方法</h3><ol><li>Math.ceil()方法始终向上舍入为最接近的整数。</li><li>Math.floor()方法始终向下舍入为最接近的整数。</li><li>Math.round()方法执行四舍五入。</li><li>Math.fround()方法返回数值最接近的单精度（32 位）浮点值表示。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.ceil(<span class="number">25.9</span>)); <span class="comment">// 26</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.ceil(<span class="number">25.5</span>)); <span class="comment">// 26</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.ceil(<span class="number">25.1</span>)); <span class="comment">// 26</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.round(<span class="number">25.9</span>)); <span class="comment">// 26</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.round(<span class="number">25.5</span>)); <span class="comment">// 26</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.round(<span class="number">25.1</span>)); <span class="comment">// 25</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.fround(<span class="number">0.4</span>)); <span class="comment">// 0.4000000059604645</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.fround(<span class="number">0.5</span>)); <span class="comment">// 0.5</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.fround(<span class="number">25.9</span>)); <span class="comment">// 25.899999618530273</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.floor(<span class="number">25.9</span>)); <span class="comment">// 25</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.floor(<span class="number">25.5</span>)); <span class="comment">// 25</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.floor(<span class="number">25.1</span>)); <span class="comment">// 25 </span></span><br></pre></td></tr></table></figure></li></ol><h3 id="4-random-方法"><a href="#4-random-方法" class="headerlink" title="4. random()方法"></a>4. random()方法</h3><h5 id="Math-random-方法返回一个-0-1-范围内的随机数，其中包含-0-但不包含-1。对于希望显示随机名言或随机新闻的网页，这个方法是非常方便的。可以基于如下公式使用-Math-random-从一组整数中随机选择一个数"><a href="#Math-random-方法返回一个-0-1-范围内的随机数，其中包含-0-但不包含-1。对于希望显示随机名言或随机新闻的网页，这个方法是非常方便的。可以基于如下公式使用-Math-random-从一组整数中随机选择一个数" class="headerlink" title="Math.random()方法返回一个 0~1 范围内的随机数，其中包含 0 但不包含 1。对于希望显示随机名言或随机新闻的网页，这个方法是非常方便的。可以基于如下公式使用 Math.random()从一组整数中随机选择一个数"></a>Math.random()方法返回一个 0~1 范围内的随机数，其中包含 0 但不包含 1。对于希望显示随机名言或随机新闻的网页，这个方法是非常方便的。可以基于如下公式使用 Math.random()从一组整数中随机选择一个数</h5><h5 id="注意-Math-random-方法在这里出于演示目的是没有问题的。如果是为了加密而需要生成随机数（传给生成器的输入需要较高的不确定性），那么建议使用-window-crypto-getRandomValues-。"><a href="#注意-Math-random-方法在这里出于演示目的是没有问题的。如果是为了加密而需要生成随机数（传给生成器的输入需要较高的不确定性），那么建议使用-window-crypto-getRandomValues-。" class="headerlink" title="注意 Math.random()方法在这里出于演示目的是没有问题的。如果是为了加密而需要生成随机数（传给生成器的输入需要较高的不确定性），那么建议使用 window.crypto.getRandomValues()。"></a>注意 Math.random()方法在这里出于演示目的是没有问题的。如果是为了加密而需要生成随机数（传给生成器的输入需要较高的不确定性），那么建议使用 window.crypto.getRandomValues()。</h5><h3 id="5-Math-abs"><a href="#5-Math-abs" class="headerlink" title="5.Math.abs()"></a>5.Math.abs()</h3><h5 id="返回绝对值"><a href="#返回绝对值" class="headerlink" title="返回绝对值"></a>返回绝对值</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> abs = <span class="built_in">Math</span>.abs(<span class="number">-3</span>, <span class="number">-54</span>, <span class="number">-32</span>, <span class="number">-16</span>);</span><br><span class="line"><span class="built_in">console</span>.log(abs); <span class="comment">// (3, 54, 32, 16)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="原始值包装类型"><a href="#原始值包装类型" class="headerlink" title="原始值包装类型"></a>原始值包装类型</h1><h5 id="为了方便操作原始值，ECMAScript-提供了-3-种特殊的引用类型：Boolean、Number-和-String。"><a href="#为了方便操作原始值，ECMAScript-提供了-3-种特殊的引用类型：Boolean、Number-和-String。" class="headerlink" title="为了方便操作原始值，ECMAScript 提供了 3 种特殊的引用类型：Boolean、Number 和 String。"></a>为了方便操作原始值，ECMAScript 提供了 3 种特殊的引用类型：Boolean、Number 和 String。</h5><h2 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean"></a>Boolean</h2><h5 id="Boolean-是对应布尔值的引用类型。要创建一个-Boolean-对象，就使用-Boolean-构造函数并传入true-或-false，如下例所示："><a href="#Boolean-是对应布尔值的引用类型。要创建一个-Boolean-对象，就使用-Boolean-构造函数并传入true-或-false，如下例所示：" class="headerlink" title="Boolean 是对应布尔值的引用类型。要创建一个 Boolean 对象，就使用 Boolean 构造函数并传入true 或 false，如下例所示："></a>Boolean 是对应布尔值的引用类型。要创建一个 Boolean 对象，就使用 Boolean 构造函数并传入true 或 false，如下例所示：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> booleanObject = <span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="literal">true</span>); </span><br></pre></td></tr></table></figure><h5 id="Boolean-的实例会重写-valueOf-方法，返回一个原始值-true-或-false。toString-方法被调用时也会被覆盖，返回字符串”true”或”false”。不过，Boolean-对象在-ECMAScript-中用得很少。不仅如此，它们还容易引起误会，尤其是在布尔表达式中使用-Boolean-对象时"><a href="#Boolean-的实例会重写-valueOf-方法，返回一个原始值-true-或-false。toString-方法被调用时也会被覆盖，返回字符串”true”或”false”。不过，Boolean-对象在-ECMAScript-中用得很少。不仅如此，它们还容易引起误会，尤其是在布尔表达式中使用-Boolean-对象时" class="headerlink" title="Boolean 的实例会重写 valueOf()方法，返回一个原始值 true 或 false。toString()方法被调用时也会被覆盖，返回字符串”true”或”false”。不过，Boolean 对象在 ECMAScript 中用得很少。不仅如此，它们还容易引起误会，尤其是在布尔表达式中使用 Boolean 对象时"></a>Boolean 的实例会重写 valueOf()方法，返回一个原始值 true 或 false。toString()方法被调用时也会被覆盖，返回字符串”true”或”false”。不过，Boolean 对象在 ECMAScript 中用得很少。不仅如此，它们还容易引起误会，尤其是在布尔表达式中使用 Boolean 对象时</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> falseObject = <span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">let</span> result = falseObject &amp;&amp; <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// true</span></span><br><span class="line"><span class="keyword">let</span> falseValue = <span class="literal">false</span>;</span><br><span class="line">result = falseValue &amp;&amp; <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h2 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h2><h5 id="Number-是对应数值的引用类型。要创建一个-Number-对象，就使用-Number-构造函数并传入一个数值"><a href="#Number-是对应数值的引用类型。要创建一个-Number-对象，就使用-Number-构造函数并传入一个数值" class="headerlink" title="Number 是对应数值的引用类型。要创建一个 Number 对象，就使用 Number 构造函数并传入一个数值"></a>Number 是对应数值的引用类型。要创建一个 Number 对象，就使用 Number 构造函数并传入一个数值</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num.toString()); <span class="comment">// &quot;10&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(num.toString(<span class="number">2</span>)); <span class="comment">// &quot;1010&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(num.toString(<span class="number">8</span>)); <span class="comment">// &quot;12&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(num.toString(<span class="number">10</span>)); <span class="comment">// &quot;10&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(num.toString(<span class="number">16</span>)); <span class="comment">// &quot;a&quot; </span></span><br></pre></td></tr></table></figure><h3 id="toFixed-方法返回包含指定小数点位数的数值字符串"><a href="#toFixed-方法返回包含指定小数点位数的数值字符串" class="headerlink" title="toFixed()方法返回包含指定小数点位数的数值字符串"></a>toFixed()方法返回包含指定小数点位数的数值字符串</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num.toFixed(<span class="number">2</span>)); <span class="comment">// &quot;10.00&quot; </span></span><br></pre></td></tr></table></figure><h3 id="这里的-toFixed-方法接收了参数-2，表示返回的数值字符串要包含两位小数。结果返回值为”10-00”，小数位填充了-0。如果数值本身的小数位超过了参数指定的位数，则四舍五入到最接近的小数位："><a href="#这里的-toFixed-方法接收了参数-2，表示返回的数值字符串要包含两位小数。结果返回值为”10-00”，小数位填充了-0。如果数值本身的小数位超过了参数指定的位数，则四舍五入到最接近的小数位：" class="headerlink" title="这里的 toFixed()方法接收了参数 2，表示返回的数值字符串要包含两位小数。结果返回值为”10.00”，小数位填充了 0。如果数值本身的小数位超过了参数指定的位数，则四舍五入到最接近的小数位："></a>这里的 toFixed()方法接收了参数 2，表示返回的数值字符串要包含两位小数。结果返回值为”10.00”，小数位填充了 0。如果数值本身的小数位超过了参数指定的位数，则四舍五入到最接近的小数位：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">10.005</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num.toFixed(<span class="number">2</span>)); <span class="comment">// &quot;10.01&quot; </span></span><br></pre></td></tr></table></figure><h3 id="toPrecision-方法会根据情况返回最合理的输出结果，可能是固定长度，也可能是科学记数法形式。这个方法接收一个参数，表示结果中数字的总位数（不包含指数）。"><a href="#toPrecision-方法会根据情况返回最合理的输出结果，可能是固定长度，也可能是科学记数法形式。这个方法接收一个参数，表示结果中数字的总位数（不包含指数）。" class="headerlink" title="toPrecision()方法会根据情况返回最合理的输出结果，可能是固定长度，也可能是科学记数法形式。这个方法接收一个参数，表示结果中数字的总位数（不包含指数）。"></a>toPrecision()方法会根据情况返回最合理的输出结果，可能是固定长度，也可能是科学记数法形式。这个方法接收一个参数，表示结果中数字的总位数（不包含指数）。</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> num = <span class="number">99</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num.toPrecision(<span class="number">1</span>)); <span class="comment">// &quot;1e+2&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(num.toPrecision(<span class="number">2</span>)); <span class="comment">// &quot;99&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(num.toPrecision(<span class="number">3</span>)); <span class="comment">// &quot;99.0&quot; </span></span><br></pre></td></tr></table></figure><h3 id="isInteger-方法与安全整数"><a href="#isInteger-方法与安全整数" class="headerlink" title="isInteger()方法与安全整数"></a>isInteger()方法与安全整数</h3><h5 id="ES6-新增了-Number-isInteger-方法，用于辨别一个数值是否保存为整数。"><a href="#ES6-新增了-Number-isInteger-方法，用于辨别一个数值是否保存为整数。" class="headerlink" title="ES6 新增了 Number.isInteger()方法，用于辨别一个数值是否保存为整数。"></a>ES6 新增了 Number.isInteger()方法，用于辨别一个数值是否保存为整数。</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isInteger(<span class="number">1</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isInteger(<span class="number">1.00</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isInteger(<span class="number">1.01</span>)); <span class="comment">// false </span></span><br></pre></td></tr></table></figure><h1 id="String"><a href="#String" class="headerlink" title="String"></a>String</h1><h5 id="String-是对应字符串的引用类型。要创建一个-String-对象，使用-String-构造函数并传入一个数值"><a href="#String-是对应字符串的引用类型。要创建一个-String-对象，使用-String-构造函数并传入一个数值" class="headerlink" title="String 是对应字符串的引用类型。要创建一个 String 对象，使用 String 构造函数并传入一个数值"></a>String 是对应字符串的引用类型。要创建一个 String 对象，使用 String 构造函数并传入一个数值</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stringObject = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">&quot;hello world&quot;</span>); </span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="每个-String-对象都有一个-length-属性，表示字符串中字符的数量。"><a href="#每个-String-对象都有一个-length-属性，表示字符串中字符的数量。" class="headerlink" title="每个 String 对象都有一个 length 属性，表示字符串中字符的数量。"></a>每个 String 对象都有一个 length 属性，表示字符串中字符的数量。</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stringValue = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(stringValue.length); <span class="comment">// &quot;11&quot; </span></span><br></pre></td></tr></table></figure><h2 id="JavaScript-字符"><a href="#JavaScript-字符" class="headerlink" title="JavaScript 字符"></a>JavaScript 字符</h2><h5 id="JavaScript-字符串由-16-位码元（code-unit）组成。对多数字符来说，每-16-位码元对应一个字符。换句话说，字符串的-length-属性表示字符串包含多少-16-位码元"><a href="#JavaScript-字符串由-16-位码元（code-unit）组成。对多数字符来说，每-16-位码元对应一个字符。换句话说，字符串的-length-属性表示字符串包含多少-16-位码元" class="headerlink" title="JavaScript 字符串由 16 位码元（code unit）组成。对多数字符来说，每 16 位码元对应一个字符。换句话说，字符串的 length 属性表示字符串包含多少 16 位码元"></a>JavaScript 字符串由 16 位码元（code unit）组成。对多数字符来说，每 16 位码元对应一个字符。换句话说，字符串的 length 属性表示字符串包含多少 16 位码元</h5><h2 id="normalize-方法某些-Unicode-字符可以有多种编码方式。有的字符既可以通过一个-BMP-字符表示，也可以通过一个代理对表示。"><a href="#normalize-方法某些-Unicode-字符可以有多种编码方式。有的字符既可以通过一个-BMP-字符表示，也可以通过一个代理对表示。" class="headerlink" title="normalize()方法某些 Unicode 字符可以有多种编码方式。有的字符既可以通过一个 BMP 字符表示，也可以通过一个代理对表示。"></a>normalize()方法某些 Unicode 字符可以有多种编码方式。有的字符既可以通过一个 BMP 字符表示，也可以通过一个代理对表示。</h2><h1 id="Global"><a href="#Global" class="headerlink" title="Global"></a>Global</h1><h5 id="Global-对象是-ECMAScript-中最特别的对象，因为代码不会显式地访问它。ECMA-262-规定-Global对象为一种兜底对象，它所针对的是不属于任何对象的属性和方法。事实上，不存在全局变量或全局函数这种东西。"><a href="#Global-对象是-ECMAScript-中最特别的对象，因为代码不会显式地访问它。ECMA-262-规定-Global对象为一种兜底对象，它所针对的是不属于任何对象的属性和方法。事实上，不存在全局变量或全局函数这种东西。" class="headerlink" title="Global 对象是 ECMAScript 中最特别的对象，因为代码不会显式地访问它。ECMA-262 规定 Global对象为一种兜底对象，它所针对的是不属于任何对象的属性和方法。事实上，不存在全局变量或全局函数这种东西。"></a>Global 对象是 ECMAScript 中最特别的对象，因为代码不会显式地访问它。ECMA-262 规定 Global对象为一种兜底对象，它所针对的是不属于任何对象的属性和方法。事实上，不存在全局变量或全局函数这种东西。</h5><h3 id="1-URL-编码方法"><a href="#1-URL-编码方法" class="headerlink" title="1.URL 编码方法"></a>1.URL 编码方法</h3><h5 id="encodeURI-和-encodeURIComponent-方法用于编码统一资源标识符（URI），以便传给浏览器。有效的-URI-不能包含某些字符，比如空格。使用-URI-编码方法来编码-URI-可以让浏览器能够理解它们，同时又以特殊的-UTF-8-编码替换掉所有无效字符。"><a href="#encodeURI-和-encodeURIComponent-方法用于编码统一资源标识符（URI），以便传给浏览器。有效的-URI-不能包含某些字符，比如空格。使用-URI-编码方法来编码-URI-可以让浏览器能够理解它们，同时又以特殊的-UTF-8-编码替换掉所有无效字符。" class="headerlink" title="encodeURI()和 encodeURIComponent()方法用于编码统一资源标识符（URI），以便传给浏览器。有效的 URI 不能包含某些字符，比如空格。使用 URI 编码方法来编码 URI 可以让浏览器能够理解它们，同时又以特殊的 UTF-8 编码替换掉所有无效字符。"></a>encodeURI()和 encodeURIComponent()方法用于编码统一资源标识符（URI），以便传给浏览器。有效的 URI 不能包含某些字符，比如空格。使用 URI 编码方法来编码 URI 可以让浏览器能够理解它们，同时又以特殊的 UTF-8 编码替换掉所有无效字符。</h5><h3 id="2-eval-方法"><a href="#2-eval-方法" class="headerlink" title="2. eval()方法"></a>2. eval()方法</h3><h5 id="最后一个方法可能是整个-ECMAScript-语言中最强大的了，它就是-eval-。这个方法就是一个完整的-ECMAScript-解释器，它接收一个参数，即一个要执行的-ECMAScript（JavaScript）字符串。"><a href="#最后一个方法可能是整个-ECMAScript-语言中最强大的了，它就是-eval-。这个方法就是一个完整的-ECMAScript-解释器，它接收一个参数，即一个要执行的-ECMAScript（JavaScript）字符串。" class="headerlink" title="最后一个方法可能是整个 ECMAScript 语言中最强大的了，它就是 eval()。这个方法就是一个完整的 ECMAScript 解释器，它接收一个参数，即一个要执行的 ECMAScript（JavaScript）字符串。"></a>最后一个方法可能是整个 ECMAScript 语言中最强大的了，它就是 eval()。这个方法就是一个完整的 ECMAScript 解释器，它接收一个参数，即一个要执行的 ECMAScript（JavaScript）字符串。</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span>(<span class="string">&quot;console.log(&#x27;hi&#x27;)&quot;</span>); </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;hi&quot;</span>); </span><br></pre></td></tr></table></figure><h3 id="3-Global-对象属性"><a href="#3-Global-对象属性" class="headerlink" title="3.Global 对象属性"></a>3.Global 对象属性</h3><table><thead><tr><th align="center">属 性</th><th align="center">说 明</th></tr></thead><tbody><tr><td align="center">undefined</td><td align="center">特殊值 undefined</td></tr><tr><td align="center">NaN</td><td align="center">特殊值 NaN</td></tr><tr><td align="center">Infinity</td><td align="center">特殊值 Infinity</td></tr><tr><td align="center">Object</td><td align="center">Object 的构造函数</td></tr><tr><td align="center">Array</td><td align="center">Array 的构造函数</td></tr><tr><td align="center">Function</td><td align="center">Function 的构造函数</td></tr><tr><td align="center">Boolean</td><td align="center">Boolean 的构造函数</td></tr><tr><td align="center">String</td><td align="center">String 的构造函数</td></tr><tr><td align="center">Number</td><td align="center">Number 的构造函数</td></tr><tr><td align="center">Date</td><td align="center">Date 的构造函数</td></tr><tr><td align="center">RegExp</td><td align="center">RegExp 的构造函数</td></tr><tr><td align="center">Symbol</td><td align="center">Symbol 的伪构造函数</td></tr><tr><td align="center">Error</td><td align="center">Error 的构造函数</td></tr><tr><td align="center">EvalError</td><td align="center">EvalError 的构造函数</td></tr><tr><td align="center">RangeError</td><td align="center">RangeError 的构造函数</td></tr><tr><td align="center">ReferenceError</td><td align="center">ReferenceError 的构造函数</td></tr><tr><td align="center">SyntaxError</td><td align="center">SyntaxError 的构造函数</td></tr><tr><td align="center">TypeError</td><td align="center">TypeError 的构造函数</td></tr><tr><td align="center">URIError</td><td align="center">URIError 的构造函数</td></tr></tbody></table><h3 id="4-window-对象"><a href="#4-window-对象" class="headerlink" title="4.window 对象"></a>4.window 对象</h3><h5 id="虽然-ECMA-262-没有规定直接访问-Global-对象的方式，但浏览器将-window-对象实现为-Global对象的代理。"><a href="#虽然-ECMA-262-没有规定直接访问-Global-对象的方式，但浏览器将-window-对象实现为-Global对象的代理。" class="headerlink" title="虽然 ECMA-262 没有规定直接访问 Global 对象的方式，但浏览器将 window 对象实现为 Global对象的代理。"></a>虽然 ECMA-262 没有规定直接访问 Global 对象的方式，但浏览器将 window 对象实现为 Global对象的代理。</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> color = <span class="string">&quot;red&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayColor</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="built_in">window</span>.color);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.sayColor(); <span class="comment">// &quot;red&quot; </span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Date&quot;&gt;&lt;a href=&quot;#Date&quot; class=&quot;headerlink&quot; title=&quot;Date&quot;&gt;&lt;/a&gt;Date&lt;/h1&gt;&lt;h4 id=&quot;Date-类型将日期保存为自协调世界时（UTC，Universal-Time-Coordinated）时间-197</summary>
      
    
    
    
    <category term="JavaScript红宝书" scheme="http://example.com/categories/JavaScript%E7%BA%A2%E5%AE%9D%E4%B9%A6/"/>
    
    
    <category term="Date" scheme="http://example.com/tags/Date/"/>
    
  </entry>
  
  <entry>
    <title>JS红宝书之垃圾回收</title>
    <link href="http://example.com/2020/10/23/%E7%BA%A2%E5%AE%9D%E4%B9%A67/"/>
    <id>http://example.com/2020/10/23/%E7%BA%A2%E5%AE%9D%E4%B9%A67/</id>
    <published>2020-10-23T05:06:43.000Z</published>
    <updated>2020-11-06T06:20:29.800Z</updated>
    
    <content type="html"><![CDATA[<h1 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h1><h4 id="JavaScript-是使用垃圾回收的语言，也就是说执行环境负责在代码执行时管理内存。"><a href="#JavaScript-是使用垃圾回收的语言，也就是说执行环境负责在代码执行时管理内存。" class="headerlink" title="JavaScript 是使用垃圾回收的语言，也就是说执行环境负责在代码执行时管理内存。"></a>JavaScript 是使用垃圾回收的语言，也就是说执行环境负责在代码执行时管理内存。</h4><h4 id="基本思路很简单：确定哪个变量不会再使用，然后释放它占用的内存。这个过程是周期性的，即垃圾回收程序每隔一定时间（或者说在代码执行过程中某个预定的收集时间）就会自动运行。"><a href="#基本思路很简单：确定哪个变量不会再使用，然后释放它占用的内存。这个过程是周期性的，即垃圾回收程序每隔一定时间（或者说在代码执行过程中某个预定的收集时间）就会自动运行。" class="headerlink" title="基本思路很简单：确定哪个变量不会再使用，然后释放它占用的内存。这个过程是周期性的，即垃圾回收程序每隔一定时间（或者说在代码执行过程中某个预定的收集时间）就会自动运行。"></a>基本思路很简单：确定哪个变量不会再使用，然后释放它占用的内存。这个过程是周期性的，即垃圾回收程序每隔一定时间（或者说在代码执行过程中某个预定的收集时间）就会自动运行。</h4><h4 id="垃圾回收过程是一个近似且不完美的方案，因为某块内存是否还有用，属于“不可判定的”问题，意味着靠算法是解决不了的。"><a href="#垃圾回收过程是一个近似且不完美的方案，因为某块内存是否还有用，属于“不可判定的”问题，意味着靠算法是解决不了的。" class="headerlink" title="垃圾回收过程是一个近似且不完美的方案，因为某块内存是否还有用，属于“不可判定的”问题，意味着靠算法是解决不了的。"></a>垃圾回收过程是一个近似且不完美的方案，因为某块内存是否还有用，属于“不可判定的”问题，意味着靠算法是解决不了的。</h4><h2 id="标记清理"><a href="#标记清理" class="headerlink" title="标记清理"></a>标记清理</h2><h4 id="JavaScript-最常用的垃圾回收策略是标记清理（mark-and-sweep）。当变量进入上下文，比如在函数内部声明一个变量时，这个变量会被加上存在于上下文中的标记。而在上下文中的变量，逻辑上讲，永远不应该释放它们的内存，因为只要上下文中的代码在运行，就有可能用到它们。当变量离开上下文时，也会被加上离开上下文的标记。"><a href="#JavaScript-最常用的垃圾回收策略是标记清理（mark-and-sweep）。当变量进入上下文，比如在函数内部声明一个变量时，这个变量会被加上存在于上下文中的标记。而在上下文中的变量，逻辑上讲，永远不应该释放它们的内存，因为只要上下文中的代码在运行，就有可能用到它们。当变量离开上下文时，也会被加上离开上下文的标记。" class="headerlink" title="JavaScript 最常用的垃圾回收策略是标记清理（mark-and-sweep）。当变量进入上下文，比如在函数内部声明一个变量时，这个变量会被加上存在于上下文中的标记。而在上下文中的变量，逻辑上讲，永远不应该释放它们的内存，因为只要上下文中的代码在运行，就有可能用到它们。当变量离开上下文时，也会被加上离开上下文的标记。"></a>JavaScript 最常用的垃圾回收策略是标记清理（mark-and-sweep）。当变量进入上下文，比如在函数内部声明一个变量时，这个变量会被加上存在于上下文中的标记。而在上下文中的变量，逻辑上讲，永远不应该释放它们的内存，因为只要上下文中的代码在运行，就有可能用到它们。当变量离开上下文时，也会被加上离开上下文的标记。</h4><h4 id="垃圾回收程序运行的时候，会标记内存中存储的所有变量（记住，标记方法有很多种）。然后，它会将所有在上下文中的变量，以及被在上下文中的变量引用的变量的标记去掉。在此之后再被加上标记的变量就是待删除的了，原因是任何在上下文中的变量都访问不到它们了。随后垃圾回收程序做一次内存清理，销毁带标记的所有值并收回它们的内存。"><a href="#垃圾回收程序运行的时候，会标记内存中存储的所有变量（记住，标记方法有很多种）。然后，它会将所有在上下文中的变量，以及被在上下文中的变量引用的变量的标记去掉。在此之后再被加上标记的变量就是待删除的了，原因是任何在上下文中的变量都访问不到它们了。随后垃圾回收程序做一次内存清理，销毁带标记的所有值并收回它们的内存。" class="headerlink" title="垃圾回收程序运行的时候，会标记内存中存储的所有变量（记住，标记方法有很多种）。然后，它会将所有在上下文中的变量，以及被在上下文中的变量引用的变量的标记去掉。在此之后再被加上标记的变量就是待删除的了，原因是任何在上下文中的变量都访问不到它们了。随后垃圾回收程序做一次内存清理，销毁带标记的所有值并收回它们的内存。"></a>垃圾回收程序运行的时候，会标记内存中存储的所有变量（记住，标记方法有很多种）。然后，它会将所有在上下文中的变量，以及被在上下文中的变量引用的变量的标记去掉。在此之后再被加上标记的变量就是待删除的了，原因是任何在上下文中的变量都访问不到它们了。随后垃圾回收程序做一次内存清理，销毁带标记的所有值并收回它们的内存。</h4><h2 id="引用计数"><a href="#引用计数" class="headerlink" title="引用计数"></a>引用计数</h2><h4 id="没那么常用的垃圾回收策略是引用计数（reference-counting）。"><a href="#没那么常用的垃圾回收策略是引用计数（reference-counting）。" class="headerlink" title="没那么常用的垃圾回收策略是引用计数（reference counting）。"></a>没那么常用的垃圾回收策略是引用计数（reference counting）。</h4><h4 id="其思路是对每个值都记录它被引用的次数。声明变量并给它赋一个引用值时，这个值的引用数为-1。如果同一个值又被赋给另一个变量，那么引用数加-1。类似地，如果保存对该值引用的变量被其他值给覆盖了，那么引用数减-1。当一个值的引用数为-0-时，就说明没办法再访问到这个值了，因此可以安全地收回其内存了。垃圾回收程序下次运行的时候就会释放引用数为-0-的值的内存。"><a href="#其思路是对每个值都记录它被引用的次数。声明变量并给它赋一个引用值时，这个值的引用数为-1。如果同一个值又被赋给另一个变量，那么引用数加-1。类似地，如果保存对该值引用的变量被其他值给覆盖了，那么引用数减-1。当一个值的引用数为-0-时，就说明没办法再访问到这个值了，因此可以安全地收回其内存了。垃圾回收程序下次运行的时候就会释放引用数为-0-的值的内存。" class="headerlink" title="其思路是对每个值都记录它被引用的次数。声明变量并给它赋一个引用值时，这个值的引用数为 1。如果同一个值又被赋给另一个变量，那么引用数加 1。类似地，如果保存对该值引用的变量被其他值给覆盖了，那么引用数减 1。当一个值的引用数为 0 时，就说明没办法再访问到这个值了，因此可以安全地收回其内存了。垃圾回收程序下次运行的时候就会释放引用数为 0 的值的内存。"></a>其思路是对每个值都记录它被引用的次数。声明变量并给它赋一个引用值时，这个值的引用数为 1。如果同一个值又被赋给另一个变量，那么引用数加 1。类似地，如果保存对该值引用的变量被其他值给覆盖了，那么引用数减 1。当一个值的引用数为 0 时，就说明没办法再访问到这个值了，因此可以安全地收回其内存了。垃圾回收程序下次运行的时候就会释放引用数为 0 的值的内存。</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">problem</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">let</span> objectA = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"> <span class="keyword">let</span> objectB = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"> objectA.someOtherObject = objectB;</span><br><span class="line"> objectB.anotherObject = objectA;</span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="objectA-和-objectB-通过各自的属性相互引用，意味着它们的引用数都是-2。在标记清理策略下，这不是问题，因为在函数结束后，这两个对象都不在作用域中。而在引用计数策略下，objectA-和-objectB-在函数结束后还会存在，因为它们的引用数永远不会变成-0。如果函数被多次调用，则会导致大量内存永远不会被释放。为此，Netscape-在-4-0-版放弃了引用计数，转而采用标记清理。事实上，引用计数策略的问题还不止于此。"><a href="#objectA-和-objectB-通过各自的属性相互引用，意味着它们的引用数都是-2。在标记清理策略下，这不是问题，因为在函数结束后，这两个对象都不在作用域中。而在引用计数策略下，objectA-和-objectB-在函数结束后还会存在，因为它们的引用数永远不会变成-0。如果函数被多次调用，则会导致大量内存永远不会被释放。为此，Netscape-在-4-0-版放弃了引用计数，转而采用标记清理。事实上，引用计数策略的问题还不止于此。" class="headerlink" title="objectA 和 objectB 通过各自的属性相互引用，意味着它们的引用数都是 2。在标记清理策略下，这不是问题，因为在函数结束后，这两个对象都不在作用域中。而在引用计数策略下，objectA 和 objectB 在函数结束后还会存在，因为它们的引用数永远不会变成 0。如果函数被多次调用，则会导致大量内存永远不会被释放。为此，Netscape 在 4.0 版放弃了引用计数，转而采用标记清理。事实上，引用计数策略的问题还不止于此。"></a>objectA 和 objectB 通过各自的属性相互引用，意味着它们的引用数都是 2。在标记清理策略下，这不是问题，因为在函数结束后，这两个对象都不在作用域中。而在引用计数策略下，objectA 和 objectB 在函数结束后还会存在，因为它们的引用数永远不会变成 0。如果函数被多次调用，则会导致大量内存永远不会被释放。为此，Netscape 在 4.0 版放弃了引用计数，转而采用标记清理。事实上，引用计数策略的问题还不止于此。</h4><h2 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h2><h4 id="JavaScript-引擎的垃圾回收程序被调优为动态改变分配变量、字面量或数组槽位等会触发垃圾回收的阈值。IE7-的起始阈值都与-IE6-的相同。如果垃圾回收程序回收的内存不到已分配的-15-，这些变量、字面量或数组槽位的阈值就会翻倍。如果有一次回收的内存达到已分配的-85-，则阈值重置为默认值。这么一个简单的修改，极大地提升了重度依赖-JavaScript-的网页在浏览器中的性能。"><a href="#JavaScript-引擎的垃圾回收程序被调优为动态改变分配变量、字面量或数组槽位等会触发垃圾回收的阈值。IE7-的起始阈值都与-IE6-的相同。如果垃圾回收程序回收的内存不到已分配的-15-，这些变量、字面量或数组槽位的阈值就会翻倍。如果有一次回收的内存达到已分配的-85-，则阈值重置为默认值。这么一个简单的修改，极大地提升了重度依赖-JavaScript-的网页在浏览器中的性能。" class="headerlink" title="JavaScript 引擎的垃圾回收程序被调优为动态改变分配变量、字面量或数组槽位等会触发垃圾回收的阈值。IE7 的起始阈值都与 IE6 的相同。如果垃圾回收程序回收的内存不到已分配的 15%，这些变量、字面量或数组槽位的阈值就会翻倍。如果有一次回收的内存达到已分配的 85%，则阈值重置为默认值。这么一个简单的修改，极大地提升了重度依赖 JavaScript 的网页在浏览器中的性能。"></a>JavaScript 引擎的垃圾回收程序被调优为动态改变分配变量、字面量或数组槽位等会触发垃圾回收的阈值。IE7 的起始阈值都与 IE6 的相同。如果垃圾回收程序回收的内存不到已分配的 15%，这些变量、字面量或数组槽位的阈值就会翻倍。如果有一次回收的内存达到已分配的 85%，则阈值重置为默认值。这么一个简单的修改，极大地提升了重度依赖 JavaScript 的网页在浏览器中的性能。</h4><h3 id="警告-在某些浏览器中是有可能（但不推荐）主动触发垃圾回收的。在-IE-中，window-CollectGarbage-方法会立即触发垃圾回收。在-Opera-7-及更高版本中，调用-window-opera-collect-也会启动垃圾回收程序。"><a href="#警告-在某些浏览器中是有可能（但不推荐）主动触发垃圾回收的。在-IE-中，window-CollectGarbage-方法会立即触发垃圾回收。在-Opera-7-及更高版本中，调用-window-opera-collect-也会启动垃圾回收程序。" class="headerlink" title="警告 在某些浏览器中是有可能（但不推荐）主动触发垃圾回收的。在 IE 中，window.CollectGarbage()方法会立即触发垃圾回收。在 Opera 7 及更高版本中，调用 window.opera.collect()也会启动垃圾回收程序。"></a>警告 在某些浏览器中是有可能（但不推荐）主动触发垃圾回收的。在 IE 中，window.CollectGarbage()方法会立即触发垃圾回收。在 Opera 7 及更高版本中，调用 window.opera.collect()也会启动垃圾回收程序。</h3><h2 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h2><h4 id="在使用垃圾回收的编程环境中，开发者通常无须关心内存管理。不过，JavaScript-运行在一个内存管理与垃圾回收都很特殊的环境。分配给浏览器的内存通常比分配给桌面软件的要少很多，分配给移动浏览器的就更少了。这更多出于安全考虑而不是别的，就是为了避免运行大量-JavaScript-的网页耗尽系统内存而导致操作系统崩溃。这个内存限制不仅影响变量分配，也影响调用栈以及能够同时在一个线程中执行的语句数量。"><a href="#在使用垃圾回收的编程环境中，开发者通常无须关心内存管理。不过，JavaScript-运行在一个内存管理与垃圾回收都很特殊的环境。分配给浏览器的内存通常比分配给桌面软件的要少很多，分配给移动浏览器的就更少了。这更多出于安全考虑而不是别的，就是为了避免运行大量-JavaScript-的网页耗尽系统内存而导致操作系统崩溃。这个内存限制不仅影响变量分配，也影响调用栈以及能够同时在一个线程中执行的语句数量。" class="headerlink" title="在使用垃圾回收的编程环境中，开发者通常无须关心内存管理。不过，JavaScript 运行在一个内存管理与垃圾回收都很特殊的环境。分配给浏览器的内存通常比分配给桌面软件的要少很多，分配给移动浏览器的就更少了。这更多出于安全考虑而不是别的，就是为了避免运行大量 JavaScript 的网页耗尽系统内存而导致操作系统崩溃。这个内存限制不仅影响变量分配，也影响调用栈以及能够同时在一个线程中执行的语句数量。"></a>在使用垃圾回收的编程环境中，开发者通常无须关心内存管理。不过，JavaScript 运行在一个内存管理与垃圾回收都很特殊的环境。分配给浏览器的内存通常比分配给桌面软件的要少很多，分配给移动浏览器的就更少了。这更多出于安全考虑而不是别的，就是为了避免运行大量 JavaScript 的网页耗尽系统内存而导致操作系统崩溃。这个内存限制不仅影响变量分配，也影响调用栈以及能够同时在一个线程中执行的语句数量。</h4><h3 id="1-通过-const-和-let-声明提升性能"><a href="#1-通过-const-和-let-声明提升性能" class="headerlink" title="1.通过 const 和 let 声明提升性能"></a>1.通过 const 和 let 声明提升性能</h3><h4 id="ES6-增加这两个关键字不仅有助于改善代码风格，而且同样有助于改进垃圾回收的过程。因为-const和-let-都以块（而非函数）为作用域，所以相比于使用-var，使用这两个新关键字可能会更早地让垃圾回收程序介入，尽早回收应该回收的内存。在块作用域比函数作用域更早终止的情况下，这就有可能发生。"><a href="#ES6-增加这两个关键字不仅有助于改善代码风格，而且同样有助于改进垃圾回收的过程。因为-const和-let-都以块（而非函数）为作用域，所以相比于使用-var，使用这两个新关键字可能会更早地让垃圾回收程序介入，尽早回收应该回收的内存。在块作用域比函数作用域更早终止的情况下，这就有可能发生。" class="headerlink" title="ES6 增加这两个关键字不仅有助于改善代码风格，而且同样有助于改进垃圾回收的过程。因为 const和 let 都以块（而非函数）为作用域，所以相比于使用 var，使用这两个新关键字可能会更早地让垃圾回收程序介入，尽早回收应该回收的内存。在块作用域比函数作用域更早终止的情况下，这就有可能发生。"></a>ES6 增加这两个关键字不仅有助于改善代码风格，而且同样有助于改进垃圾回收的过程。因为 const和 let 都以块（而非函数）为作用域，所以相比于使用 var，使用这两个新关键字可能会更早地让垃圾回收程序介入，尽早回收应该回收的内存。在块作用域比函数作用域更早终止的情况下，这就有可能发生。</h4><h3 id="2-隐藏类和删除操作"><a href="#2-隐藏类和删除操作" class="headerlink" title="2.隐藏类和删除操作"></a>2.隐藏类和删除操作</h3><h4 id="根据-JavaScript-所在的运行环境，有时候需要根据浏览器使用的-JavaScript-引擎来采取不同的性能优化策略。截至-2017-年，Chrome-是最流行的浏览器，使用-V8-JavaScript-引擎。V8-在将解释后的-JavaScript代码编译为实际的机器码时会利用“隐藏类”。如果你的代码非常注重性能，那么这一点可能对你很重要。"><a href="#根据-JavaScript-所在的运行环境，有时候需要根据浏览器使用的-JavaScript-引擎来采取不同的性能优化策略。截至-2017-年，Chrome-是最流行的浏览器，使用-V8-JavaScript-引擎。V8-在将解释后的-JavaScript代码编译为实际的机器码时会利用“隐藏类”。如果你的代码非常注重性能，那么这一点可能对你很重要。" class="headerlink" title="根据 JavaScript 所在的运行环境，有时候需要根据浏览器使用的 JavaScript 引擎来采取不同的性能优化策略。截至 2017 年，Chrome 是最流行的浏览器，使用 V8 JavaScript 引擎。V8 在将解释后的 JavaScript代码编译为实际的机器码时会利用“隐藏类”。如果你的代码非常注重性能，那么这一点可能对你很重要。"></a>根据 JavaScript 所在的运行环境，有时候需要根据浏览器使用的 JavaScript 引擎来采取不同的性能优化策略。截至 2017 年，Chrome 是最流行的浏览器，使用 V8 JavaScript 引擎。V8 在将解释后的 JavaScript代码编译为实际的机器码时会利用“隐藏类”。如果你的代码非常注重性能，那么这一点可能对你很重要。</h4><h3 id="3-内存泄漏"><a href="#3-内存泄漏" class="headerlink" title="3.内存泄漏"></a>3.内存泄漏</h3><h4 id="写得不好的-JavaScript-可能出现难以察觉且有害的内存泄漏问题。在内存有限的设备上，或者在函数会被调用很多次的情况下，内存泄漏可能是个大问题。JavaScript-中的内存泄漏大部分是由不合理的引用导致的。"><a href="#写得不好的-JavaScript-可能出现难以察觉且有害的内存泄漏问题。在内存有限的设备上，或者在函数会被调用很多次的情况下，内存泄漏可能是个大问题。JavaScript-中的内存泄漏大部分是由不合理的引用导致的。" class="headerlink" title="写得不好的 JavaScript 可能出现难以察觉且有害的内存泄漏问题。在内存有限的设备上，或者在函数会被调用很多次的情况下，内存泄漏可能是个大问题。JavaScript 中的内存泄漏大部分是由不合理的引用导致的。"></a>写得不好的 JavaScript 可能出现难以察觉且有害的内存泄漏问题。在内存有限的设备上，或者在函数会被调用很多次的情况下，内存泄漏可能是个大问题。JavaScript 中的内存泄漏大部分是由不合理的引用导致的。</h4><h3 id="4-静态分配与对象池"><a href="#4-静态分配与对象池" class="headerlink" title="4. 静态分配与对象池"></a>4. 静态分配与对象池</h3><h4 id="为了提升-JavaScript-性能，最后要考虑的一点往往就是压榨浏览器了。此时，一个关键问题就是如何减少浏览器执行垃圾回收的次数。开发者无法直接控制什么时候开始收集垃圾，但可以间接控制触发垃圾回收的条件。理论上，如果能够合理使用分配的内存，同时避免多余的垃圾回收，那就可以保住因释放内存而损失的性能。"><a href="#为了提升-JavaScript-性能，最后要考虑的一点往往就是压榨浏览器了。此时，一个关键问题就是如何减少浏览器执行垃圾回收的次数。开发者无法直接控制什么时候开始收集垃圾，但可以间接控制触发垃圾回收的条件。理论上，如果能够合理使用分配的内存，同时避免多余的垃圾回收，那就可以保住因释放内存而损失的性能。" class="headerlink" title="为了提升 JavaScript 性能，最后要考虑的一点往往就是压榨浏览器了。此时，一个关键问题就是如何减少浏览器执行垃圾回收的次数。开发者无法直接控制什么时候开始收集垃圾，但可以间接控制触发垃圾回收的条件。理论上，如果能够合理使用分配的内存，同时避免多余的垃圾回收，那就可以保住因释放内存而损失的性能。"></a>为了提升 JavaScript 性能，最后要考虑的一点往往就是压榨浏览器了。此时，一个关键问题就是如何减少浏览器执行垃圾回收的次数。开发者无法直接控制什么时候开始收集垃圾，但可以间接控制触发垃圾回收的条件。理论上，如果能够合理使用分配的内存，同时避免多余的垃圾回收，那就可以保住因释放内存而损失的性能。</h4><h2 id="注意-静态分配是优化的一种极端形式。如果你的应用程序被垃圾回收严重地拖了后腿，可以利用它提升性能。但这种情况并不多见。大多数情况下，这都属于过早优化，因此不用考虑。"><a href="#注意-静态分配是优化的一种极端形式。如果你的应用程序被垃圾回收严重地拖了后腿，可以利用它提升性能。但这种情况并不多见。大多数情况下，这都属于过早优化，因此不用考虑。" class="headerlink" title="注意 静态分配是优化的一种极端形式。如果你的应用程序被垃圾回收严重地拖了后腿，可以利用它提升性能。但这种情况并不多见。大多数情况下，这都属于过早优化，因此不用考虑。"></a>注意 静态分配是优化的一种极端形式。如果你的应用程序被垃圾回收严重地拖了后腿，可以利用它提升性能。但这种情况并不多见。大多数情况下，这都属于过早优化，因此不用考虑。</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;垃圾回收&quot;&gt;&lt;a href=&quot;#垃圾回收&quot; class=&quot;headerlink&quot; title=&quot;垃圾回收&quot;&gt;&lt;/a&gt;垃圾回收&lt;/h1&gt;&lt;h4 id=&quot;JavaScript-是使用垃圾回收的语言，也就是说执行环境负责在代码执行时管理内存。&quot;&gt;&lt;a href=&quot;#Ja</summary>
      
    
    
    
    <category term="JavaScript红宝书" scheme="http://example.com/categories/JavaScript%E7%BA%A2%E5%AE%9D%E4%B9%A6/"/>
    
    
    <category term="垃圾回收" scheme="http://example.com/tags/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/"/>
    
  </entry>
  
  <entry>
    <title>JS红宝书之变量、作用域</title>
    <link href="http://example.com/2020/10/22/%E7%BA%A2%E5%AE%9D%E4%B9%A66/"/>
    <id>http://example.com/2020/10/22/%E7%BA%A2%E5%AE%9D%E4%B9%A66/</id>
    <published>2020-10-22T05:06:43.000Z</published>
    <updated>2020-11-06T06:20:24.147Z</updated>
    
    <content type="html"><![CDATA[<h1 id="变量、作用域"><a href="#变量、作用域" class="headerlink" title="变量、作用域"></a>变量、作用域</h1><h5 id="相比于其他语言，JavaScript-中的变量可谓独树一帜。正如-ECMA-262-所规定的，JavaScript-变量是松散类型的，而且变量不过就是特定时间点一个特定值的名称而已。由于没有规则定义变量必须包含什么数据类型，变量的值和数据类型在脚本生命期内可以改变。这样的变量很有意思，很强大，当然也有不少问题。"><a href="#相比于其他语言，JavaScript-中的变量可谓独树一帜。正如-ECMA-262-所规定的，JavaScript-变量是松散类型的，而且变量不过就是特定时间点一个特定值的名称而已。由于没有规则定义变量必须包含什么数据类型，变量的值和数据类型在脚本生命期内可以改变。这样的变量很有意思，很强大，当然也有不少问题。" class="headerlink" title="相比于其他语言，JavaScript 中的变量可谓独树一帜。正如 ECMA-262 所规定的，JavaScript 变量是松散类型的，而且变量不过就是特定时间点一个特定值的名称而已。由于没有规则定义变量必须包含什么数据类型，变量的值和数据类型在脚本生命期内可以改变。这样的变量很有意思，很强大，当然也有不少问题。"></a>相比于其他语言，JavaScript 中的变量可谓独树一帜。正如 ECMA-262 所规定的，JavaScript 变量是松散类型的，而且变量不过就是特定时间点一个特定值的名称而已。由于没有规则定义变量必须包含什么数据类型，变量的值和数据类型在脚本生命期内可以改变。这样的变量很有意思，很强大，当然也有不少问题。</h5><h2 id="原始值与引用值"><a href="#原始值与引用值" class="headerlink" title="原始值与引用值"></a>原始值与引用值</h2><h4 id="ECMAScript-变量可以包含两种不同类型的数据："><a href="#ECMAScript-变量可以包含两种不同类型的数据：" class="headerlink" title="ECMAScript 变量可以包含两种不同类型的数据："></a>ECMAScript 变量可以包含两种不同类型的数据：</h4><h5 id="原始值（primitive-value）就是最简单的数据"><a href="#原始值（primitive-value）就是最简单的数据" class="headerlink" title="原始值（primitive value）就是最简单的数据"></a>原始值（primitive value）就是最简单的数据</h5><h5 id="引用值（reference-value）则是由多个值构成的对象"><a href="#引用值（reference-value）则是由多个值构成的对象" class="headerlink" title="引用值（reference value）则是由多个值构成的对象"></a>引用值（reference value）则是由多个值构成的对象</h5><h3 id="动态属性"><a href="#动态属性" class="headerlink" title="动态属性"></a>动态属性</h3><h5 id="原始值和引用值的定义方式很类似，都是创建一个变量，然后给它赋一个值。对于引用值而言，可以随时添加、修改和删除其属性和方法。"><a href="#原始值和引用值的定义方式很类似，都是创建一个变量，然后给它赋一个值。对于引用值而言，可以随时添加、修改和删除其属性和方法。" class="headerlink" title="原始值和引用值的定义方式很类似，都是创建一个变量，然后给它赋一个值。对于引用值而言，可以随时添加、修改和删除其属性和方法。"></a>原始值和引用值的定义方式很类似，都是创建一个变量，然后给它赋一个值。对于引用值而言，可以随时添加、修改和删除其属性和方法。</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">person.name = <span class="string">&quot;Nicholas&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person.name); <span class="comment">// &quot;Nicholas&quot; </span></span><br></pre></td></tr></table></figure><h3 id="复制值"><a href="#复制值" class="headerlink" title="复制值"></a>复制值</h3><h4 id="除了存储方式不同，原始值和引用值在通过变量复制时也有所不同。在通过变量把一个原始值赋值到另一个变量时，原始值会被复制到新变量的位置。"><a href="#除了存储方式不同，原始值和引用值在通过变量复制时也有所不同。在通过变量把一个原始值赋值到另一个变量时，原始值会被复制到新变量的位置。" class="headerlink" title="除了存储方式不同，原始值和引用值在通过变量复制时也有所不同。在通过变量把一个原始值赋值到另一个变量时，原始值会被复制到新变量的位置。"></a>除了存储方式不同，原始值和引用值在通过变量复制时也有所不同。在通过变量把一个原始值赋值到另一个变量时，原始值会被复制到新变量的位置。</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num1 = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">let</span> num2 = num1; </span><br></pre></td></tr></table></figure><h4 id="这里，num1-包含数值-5。当把-num2-初始化为-num1-时，num2-也会得到数值-5。这个值跟存储在num1-中的-5-是完全独立的，因为它是那个值的副本。"><a href="#这里，num1-包含数值-5。当把-num2-初始化为-num1-时，num2-也会得到数值-5。这个值跟存储在num1-中的-5-是完全独立的，因为它是那个值的副本。" class="headerlink" title="这里，num1 包含数值 5。当把 num2 初始化为 num1 时，num2 也会得到数值 5。这个值跟存储在num1 中的 5 是完全独立的，因为它是那个值的副本。"></a>这里，num1 包含数值 5。当把 num2 初始化为 num1 时，num2 也会得到数值 5。这个值跟存储在num1 中的 5 是完全独立的，因为它是那个值的副本。</h4><h3 id="传递参数"><a href="#传递参数" class="headerlink" title="传递参数"></a>传递参数</h3><h4 id="ECMAScript-中所有函数的参数都是按值传递的。这意味着函数外的值会被复制到函数内部的参数中，就像从一个变量复制到另一个变量一样。如果是原始值，那么就跟原始值变量的复制一样，如果是引用值，那么就跟引用值变量的复制一样。对很多开发者来说，这一块可能会不好理解，毕竟变量有按值和按引用访问，而传参则只有按值传递。"><a href="#ECMAScript-中所有函数的参数都是按值传递的。这意味着函数外的值会被复制到函数内部的参数中，就像从一个变量复制到另一个变量一样。如果是原始值，那么就跟原始值变量的复制一样，如果是引用值，那么就跟引用值变量的复制一样。对很多开发者来说，这一块可能会不好理解，毕竟变量有按值和按引用访问，而传参则只有按值传递。" class="headerlink" title="ECMAScript 中所有函数的参数都是按值传递的。这意味着函数外的值会被复制到函数内部的参数中，就像从一个变量复制到另一个变量一样。如果是原始值，那么就跟原始值变量的复制一样，如果是引用值，那么就跟引用值变量的复制一样。对很多开发者来说，这一块可能会不好理解，毕竟变量有按值和按引用访问，而传参则只有按值传递。"></a>ECMAScript 中所有函数的参数都是按值传递的。这意味着函数外的值会被复制到函数内部的参数中，就像从一个变量复制到另一个变量一样。如果是原始值，那么就跟原始值变量的复制一样，如果是引用值，那么就跟引用值变量的复制一样。对很多开发者来说，这一块可能会不好理解，毕竟变量有按值和按引用访问，而传参则只有按值传递。</h4><h3 id="确定类型"><a href="#确定类型" class="headerlink" title="确定类型"></a>确定类型</h3><h4 id="前一章提到的-typeof-操作符最适合用来判断一个变量是否为原始类型。更确切地说，它是判断一个变量是否为字符串、数值、布尔值或-undefined-的最好方式。"><a href="#前一章提到的-typeof-操作符最适合用来判断一个变量是否为原始类型。更确切地说，它是判断一个变量是否为字符串、数值、布尔值或-undefined-的最好方式。" class="headerlink" title="前一章提到的 typeof 操作符最适合用来判断一个变量是否为原始类型。更确切地说，它是判断一个变量是否为字符串、数值、布尔值或 undefined 的最好方式。"></a>前一章提到的 typeof 操作符最适合用来判断一个变量是否为原始类型。更确切地说，它是判断一个变量是否为字符串、数值、布尔值或 undefined 的最好方式。</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> s = <span class="string">&quot;Nicholas&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">let</span> i = <span class="number">22</span>;</span><br><span class="line"><span class="keyword">let</span> u;</span><br><span class="line"><span class="keyword">let</span> n = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">let</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> s); <span class="comment">// string</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> i); <span class="comment">// number</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> b); <span class="comment">// boolean</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> u); <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> n); <span class="comment">// object</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> o); <span class="comment">// object</span></span><br></pre></td></tr></table></figure><h3 id="执行上下文与作用域"><a href="#执行上下文与作用域" class="headerlink" title="执行上下文与作用域"></a>执行上下文与作用域</h3><h4 id="变量或函数的上下文决定了它们可以访问哪些数据，以及它们的行为。每个上下文都有一个关联的变量对象（variable-object），而这个上下文中定义的所有变量和函数都存在于这个对象上。虽然无法通过代码访问变量对象，但后台处理数据会用到它。"><a href="#变量或函数的上下文决定了它们可以访问哪些数据，以及它们的行为。每个上下文都有一个关联的变量对象（variable-object），而这个上下文中定义的所有变量和函数都存在于这个对象上。虽然无法通过代码访问变量对象，但后台处理数据会用到它。" class="headerlink" title="变量或函数的上下文决定了它们可以访问哪些数据，以及它们的行为。每个上下文都有一个关联的变量对象（variable object），而这个上下文中定义的所有变量和函数都存在于这个对象上。虽然无法通过代码访问变量对象，但后台处理数据会用到它。"></a>变量或函数的上下文决定了它们可以访问哪些数据，以及它们的行为。每个上下文都有一个关联的变量对象（variable object），而这个上下文中定义的所有变量和函数都存在于这个对象上。虽然无法通过代码访问变量对象，但后台处理数据会用到它。</h4><h3 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h3><h4 id="1-使用-var-的函数作用域声明"><a href="#1-使用-var-的函数作用域声明" class="headerlink" title="1. 使用 var 的函数作用域声明"></a>1. 使用 var 的函数作用域声明</h4><h5 id="在使用-var-声明变量时，变量会被自动添加到最接近的上下文。在函数中，最接近的上下文就是函数的局部上下文。在-with-语句中，最接近的上下文也是函数上下文。如果变量未经声明就被初始化了那么它就会自动被添加到全局上下文"><a href="#在使用-var-声明变量时，变量会被自动添加到最接近的上下文。在函数中，最接近的上下文就是函数的局部上下文。在-with-语句中，最接近的上下文也是函数上下文。如果变量未经声明就被初始化了那么它就会自动被添加到全局上下文" class="headerlink" title="在使用 var 声明变量时，变量会被自动添加到最接近的上下文。在函数中，最接近的上下文就是函数的局部上下文。在 with 语句中，最接近的上下文也是函数上下文。如果变量未经声明就被初始化了那么它就会自动被添加到全局上下文"></a>在使用 var 声明变量时，变量会被自动添加到最接近的上下文。在函数中，最接近的上下文就是函数的局部上下文。在 with 语句中，最接近的上下文也是函数上下文。如果变量未经声明就被初始化了那么它就会自动被添加到全局上下文</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> sum = num1 + num2;</span><br><span class="line"> <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> result = add(<span class="number">10</span>, <span class="number">20</span>); <span class="comment">// 30</span></span><br><span class="line"><span class="built_in">console</span>.log(sum); <span class="comment">// 报错：sum 在这里不是有效变量</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="函数-add-定义了一个局部变量-sum，保存加法操作的结果。这个值作为函数的值被返回，但变量-sum-在函数外部是访问不到的。如果省略上面例子中的关键字-var，那么-sum-在-add-被调用之后就变成可以访问的了，"><a href="#函数-add-定义了一个局部变量-sum，保存加法操作的结果。这个值作为函数的值被返回，但变量-sum-在函数外部是访问不到的。如果省略上面例子中的关键字-var，那么-sum-在-add-被调用之后就变成可以访问的了，" class="headerlink" title="函数 add()定义了一个局部变量 sum，保存加法操作的结果。这个值作为函数的值被返回，但变量 sum 在函数外部是访问不到的。如果省略上面例子中的关键字 var，那么 sum 在 add()被调用之后就变成可以访问的了，"></a>函数 add()定义了一个局部变量 sum，保存加法操作的结果。这个值作为函数的值被返回，但变量 sum 在函数外部是访问不到的。如果省略上面例子中的关键字 var，那么 sum 在 add()被调用之后就变成可以访问的了，</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line"> sum = num1 + num2;</span><br><span class="line"> <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> result = add(<span class="number">10</span>, <span class="number">20</span>); <span class="comment">// 30</span></span><br><span class="line"><span class="built_in">console</span>.log(sum); <span class="comment">// 30 </span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="这一次，变量-sum-被用加法操作的结果初始化时并没有使用-var-声明。在调用-add-之后，sum被添加到了全局上下文，在函数退出之后依然存在，从而在后面可以访问到。"><a href="#这一次，变量-sum-被用加法操作的结果初始化时并没有使用-var-声明。在调用-add-之后，sum被添加到了全局上下文，在函数退出之后依然存在，从而在后面可以访问到。" class="headerlink" title="这一次，变量 sum 被用加法操作的结果初始化时并没有使用 var 声明。在调用 add()之后，sum被添加到了全局上下文，在函数退出之后依然存在，从而在后面可以访问到。"></a>这一次，变量 sum 被用加法操作的结果初始化时并没有使用 var 声明。在调用 add()之后，sum被添加到了全局上下文，在函数退出之后依然存在，从而在后面可以访问到。</h5><h4 id="2-使用-let-的块级作用域声明"><a href="#2-使用-let-的块级作用域声明" class="headerlink" title="2. 使用 let 的块级作用域声明"></a>2. 使用 let 的块级作用域声明</h4><h5 id="ES6-新增的-let-关键字跟-var-很相似，但它的作用域是块级的，这也是-JavaScript-中的新概念。块级作用域由最近的一对包含花括号-界定。换句话说，if-块、while-块、function-块，甚至连单独的块也是-let-声明变量的作用域。"><a href="#ES6-新增的-let-关键字跟-var-很相似，但它的作用域是块级的，这也是-JavaScript-中的新概念。块级作用域由最近的一对包含花括号-界定。换句话说，if-块、while-块、function-块，甚至连单独的块也是-let-声明变量的作用域。" class="headerlink" title="ES6 新增的 let 关键字跟 var 很相似，但它的作用域是块级的，这也是 JavaScript 中的新概念。块级作用域由最近的一对包含花括号{}界定。换句话说，if 块、while 块、function 块，甚至连单独的块也是 let 声明变量的作用域。"></a>ES6 新增的 let 关键字跟 var 很相似，但它的作用域是块级的，这也是 JavaScript 中的新概念。块级作用域由最近的一对包含花括号{}界定。换句话说，if 块、while 块、function 块，甚至连单独的块也是 let 声明变量的作用域。</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"> <span class="keyword">let</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// ReferenceError: a 没有定义</span></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"> <span class="keyword">let</span> b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// ReferenceError: b 没有定义</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">let</span> c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(c); <span class="comment">// ReferenceError: c 没有定义</span></span><br><span class="line"> <span class="comment">// 这没什么可奇怪的</span></span><br><span class="line"> <span class="comment">// var 声明也会导致报错</span></span><br><span class="line"><span class="comment">// 这不是对象字面量，而是一个独立的块</span></span><br><span class="line"><span class="comment">// JavaScript 解释器会根据其中内容识别出它来</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="keyword">let</span> d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(d); <span class="comment">// ReferenceError: d 没有定义</span></span><br></pre></td></tr></table></figure><h5 id="let-与-var-的另一个不同之处是在同一作用域内不能声明两次。重复的-var-声明会被忽略，而重复的-let-声明会抛出-SyntaxError。"><a href="#let-与-var-的另一个不同之处是在同一作用域内不能声明两次。重复的-var-声明会被忽略，而重复的-let-声明会抛出-SyntaxError。" class="headerlink" title="let 与 var 的另一个不同之处是在同一作用域内不能声明两次。重复的 var 声明会被忽略，而重复的 let 声明会抛出 SyntaxError。"></a>let 与 var 的另一个不同之处是在同一作用域内不能声明两次。重复的 var 声明会被忽略，而重复的 let 声明会抛出 SyntaxError。</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="comment">// 不会报错</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="keyword">let</span> b;</span><br><span class="line"> <span class="keyword">let</span> b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// SyntaxError: 标识符 b 已经声明过了</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="let-的行为非常适合在循环中声明迭代变量。使用-var-声明的迭代变量会泄漏到循环外部，这种情况应该避免。"><a href="#let-的行为非常适合在循环中声明迭代变量。使用-var-声明的迭代变量会泄漏到循环外部，这种情况应该避免。" class="headerlink" title="let 的行为非常适合在循环中声明迭代变量。使用 var 声明的迭代变量会泄漏到循环外部，这种情况应该避免。"></a>let 的行为非常适合在循环中声明迭代变量。使用 var 声明的迭代变量会泄漏到循环外部，这种情况应该避免。</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;&#125;</span><br><span class="line"><span class="built_in">console</span>.log(i); <span class="comment">// 10</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; ++j) &#123;&#125;</span><br><span class="line"><span class="built_in">console</span>.log(j); <span class="comment">// ReferenceError: j 没有定义</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-使用-const-的常量声明"><a href="#3-使用-const-的常量声明" class="headerlink" title="3. 使用 const 的常量声明"></a>3. 使用 const 的常量声明</h4><h5 id="除了-let，ES6-同时还增加了-const-关键字。使用-const-声明的变量必须同时初始化为某个值。一经声明，在其生命周期的任何时候都不能再重新赋予新值。"><a href="#除了-let，ES6-同时还增加了-const-关键字。使用-const-声明的变量必须同时初始化为某个值。一经声明，在其生命周期的任何时候都不能再重新赋予新值。" class="headerlink" title="除了 let，ES6 同时还增加了 const 关键字。使用 const 声明的变量必须同时初始化为某个值。一经声明，在其生命周期的任何时候都不能再重新赋予新值。"></a>除了 let，ES6 同时还增加了 const 关键字。使用 const 声明的变量必须同时初始化为某个值。一经声明，在其生命周期的任何时候都不能再重新赋予新值。</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a; <span class="comment">// SyntaxError: 常量声明时没有初始化</span></span><br><span class="line"><span class="keyword">const</span> b = <span class="number">3</span>;</span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 3</span></span><br><span class="line">b = <span class="number">4</span>; <span class="comment">// TypeError: 给常量赋值</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="const-除了要遵循以上规则，其他方面与-let-声明是一样的"><a href="#const-除了要遵循以上规则，其他方面与-let-声明是一样的" class="headerlink" title="const 除了要遵循以上规则，其他方面与 let 声明是一样的"></a>const 除了要遵循以上规则，其他方面与 let 声明是一样的</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"> <span class="keyword">const</span> a = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// ReferenceError: a 没有定义</span></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"> <span class="keyword">const</span> b = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// ReferenceError: b 没有定义</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">const</span> c = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(c); <span class="comment">// ReferenceError: c 没有定义</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="keyword">const</span> d = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(d); <span class="comment">// ReferenceError: d 没有定义</span></span><br></pre></td></tr></table></figure><h5 id="const-声明只应用到顶级原语或者对象。换句话说，赋值为对象的-const-变量不能再被重新赋值为其他引用值，但对象的键则不受限制。"><a href="#const-声明只应用到顶级原语或者对象。换句话说，赋值为对象的-const-变量不能再被重新赋值为其他引用值，但对象的键则不受限制。" class="headerlink" title="const 声明只应用到顶级原语或者对象。换句话说，赋值为对象的 const 变量不能再被重新赋值为其他引用值，但对象的键则不受限制。"></a>const 声明只应用到顶级原语或者对象。换句话说，赋值为对象的 const 变量不能再被重新赋值为其他引用值，但对象的键则不受限制。</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> o1 = &#123;&#125;;</span><br><span class="line">o1 = &#123;&#125;; <span class="comment">// TypeError: 给常量赋值</span></span><br><span class="line"><span class="keyword">const</span> o2 = &#123;&#125;;</span><br><span class="line">o2.name = <span class="string">&#x27;Jake&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(o2.name); <span class="comment">// &#x27;Jake&#x27; </span></span><br></pre></td></tr></table></figure><h5 id="如果想让整个对象都不能修改，可以使用-Object-freeze-，这样再给属性赋值时虽然不会报错，但会静默失败"><a href="#如果想让整个对象都不能修改，可以使用-Object-freeze-，这样再给属性赋值时虽然不会报错，但会静默失败" class="headerlink" title="如果想让整个对象都不能修改，可以使用 Object.freeze()，这样再给属性赋值时虽然不会报错，但会静默失败"></a>如果想让整个对象都不能修改，可以使用 Object.freeze()，这样再给属性赋值时虽然不会报错，但会静默失败</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> o3 = <span class="built_in">Object</span>.freeze(&#123;&#125;);</span><br><span class="line">o3.name = <span class="string">&#x27;Jake&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(o3.name); <span class="comment">// undefined </span></span><br></pre></td></tr></table></figure><h5 id="由于-const-声明暗示变量的值是单一类型且不可修改，JavaScript-运行时编译器可以将其所有实例都替换成实际的值，而不会通过查询表进行变量查找。谷歌的-V8-引擎就执行这种优化。"><a href="#由于-const-声明暗示变量的值是单一类型且不可修改，JavaScript-运行时编译器可以将其所有实例都替换成实际的值，而不会通过查询表进行变量查找。谷歌的-V8-引擎就执行这种优化。" class="headerlink" title="由于 const 声明暗示变量的值是单一类型且不可修改，JavaScript 运行时编译器可以将其所有实例都替换成实际的值，而不会通过查询表进行变量查找。谷歌的 V8 引擎就执行这种优化。"></a>由于 const 声明暗示变量的值是单一类型且不可修改，JavaScript 运行时编译器可以将其所有实例都替换成实际的值，而不会通过查询表进行变量查找。谷歌的 V8 引擎就执行这种优化。</h5><h3 id="注意-开发实践表明，如果开发流程并不会因此而受很大影响，就应该尽可能地多使用const-声明，除非确实需要一个将来会重新赋值的变量。这样可以从根本上保证提前发现重新赋值导致的-bug。"><a href="#注意-开发实践表明，如果开发流程并不会因此而受很大影响，就应该尽可能地多使用const-声明，除非确实需要一个将来会重新赋值的变量。这样可以从根本上保证提前发现重新赋值导致的-bug。" class="headerlink" title="注意 开发实践表明，如果开发流程并不会因此而受很大影响，就应该尽可能地多使用const 声明，除非确实需要一个将来会重新赋值的变量。这样可以从根本上保证提前发现重新赋值导致的 bug。"></a>注意 开发实践表明，如果开发流程并不会因此而受很大影响，就应该尽可能地多使用const 声明，除非确实需要一个将来会重新赋值的变量。这样可以从根本上保证提前发现重新赋值导致的 bug。</h3><h3 id="4-标识符查找"><a href="#4-标识符查找" class="headerlink" title="4. 标识符查找"></a>4. 标识符查找</h3><h5 id="当在特定上下文中为读取或写入而引用一个标识符时，必须通过搜索确定这个标识符表示什么。搜索开始于作用域链前端，以给定的名称搜索对应的标识符。如果在局部上下文中找到该标识符，则搜索停止，变量确定；如果没有找到变量名，则继续沿作用域链搜索。（注意，作用域链中的对象也有一个原型链，因此搜索可能涉及每个对象的原型链。）这个过程一直持续到搜索至全局上下文的变量对象。如果仍然没有找到标识符，则说明其未声明。"><a href="#当在特定上下文中为读取或写入而引用一个标识符时，必须通过搜索确定这个标识符表示什么。搜索开始于作用域链前端，以给定的名称搜索对应的标识符。如果在局部上下文中找到该标识符，则搜索停止，变量确定；如果没有找到变量名，则继续沿作用域链搜索。（注意，作用域链中的对象也有一个原型链，因此搜索可能涉及每个对象的原型链。）这个过程一直持续到搜索至全局上下文的变量对象。如果仍然没有找到标识符，则说明其未声明。" class="headerlink" title="当在特定上下文中为读取或写入而引用一个标识符时，必须通过搜索确定这个标识符表示什么。搜索开始于作用域链前端，以给定的名称搜索对应的标识符。如果在局部上下文中找到该标识符，则搜索停止，变量确定；如果没有找到变量名，则继续沿作用域链搜索。（注意，作用域链中的对象也有一个原型链，因此搜索可能涉及每个对象的原型链。）这个过程一直持续到搜索至全局上下文的变量对象。如果仍然没有找到标识符，则说明其未声明。"></a>当在特定上下文中为读取或写入而引用一个标识符时，必须通过搜索确定这个标识符表示什么。搜索开始于作用域链前端，以给定的名称搜索对应的标识符。如果在局部上下文中找到该标识符，则搜索停止，变量确定；如果没有找到变量名，则继续沿作用域链搜索。（注意，作用域链中的对象也有一个原型链，因此搜索可能涉及每个对象的原型链。）这个过程一直持续到搜索至全局上下文的变量对象。如果仍然没有找到标识符，则说明其未声明。</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> color = <span class="string">&#x27;blue&#x27;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getColor</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> color;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(getColor()); <span class="comment">// &#x27;blue&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="在这个例子中，调用函数-getColor-时会引用变量-color。为确定-color-的值会进行两步搜索。第一步，搜索-getColor-的变量对象，查找名为-color-的标识符。结果没找到，于是继续搜索下一个变量对象（来自全局上下文），然后就找到了名为-color-的标识符。因为全局变量对象上有-color的定义，所以搜索结束。对这个搜索过程而言，引用局部变量会让搜索自动停止，而不继续搜索下一级变量对象。也就是说，如果局部上下文中有一个同名的标识符，那就不能在该上下文中引用父上下文中的同名标识符，"><a href="#在这个例子中，调用函数-getColor-时会引用变量-color。为确定-color-的值会进行两步搜索。第一步，搜索-getColor-的变量对象，查找名为-color-的标识符。结果没找到，于是继续搜索下一个变量对象（来自全局上下文），然后就找到了名为-color-的标识符。因为全局变量对象上有-color的定义，所以搜索结束。对这个搜索过程而言，引用局部变量会让搜索自动停止，而不继续搜索下一级变量对象。也就是说，如果局部上下文中有一个同名的标识符，那就不能在该上下文中引用父上下文中的同名标识符，" class="headerlink" title="在这个例子中，调用函数 getColor()时会引用变量 color。为确定 color 的值会进行两步搜索。第一步，搜索 getColor()的变量对象，查找名为 color 的标识符。结果没找到，于是继续搜索下一个变量对象（来自全局上下文），然后就找到了名为 color 的标识符。因为全局变量对象上有 color的定义，所以搜索结束。对这个搜索过程而言，引用局部变量会让搜索自动停止，而不继续搜索下一级变量对象。也就是说，如果局部上下文中有一个同名的标识符，那就不能在该上下文中引用父上下文中的同名标识符，"></a>在这个例子中，调用函数 getColor()时会引用变量 color。为确定 color 的值会进行两步搜索。第一步，搜索 getColor()的变量对象，查找名为 color 的标识符。结果没找到，于是继续搜索下一个变量对象（来自全局上下文），然后就找到了名为 color 的标识符。因为全局变量对象上有 color的定义，所以搜索结束。对这个搜索过程而言，引用局部变量会让搜索自动停止，而不继续搜索下一级变量对象。也就是说，如果局部上下文中有一个同名的标识符，那就不能在该上下文中引用父上下文中的同名标识符，</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> color = <span class="string">&#x27;blue&#x27;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getColor</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">let</span> color = <span class="string">&#x27;red&#x27;</span>;</span><br><span class="line"> <span class="keyword">return</span> color;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(getColor()); <span class="comment">// &#x27;red&#x27; </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="使用块级作用域声明并不会改变搜索流程，但可以给词法层级添加额外的层次"><a href="#使用块级作用域声明并不会改变搜索流程，但可以给词法层级添加额外的层次" class="headerlink" title="使用块级作用域声明并不会改变搜索流程，但可以给词法层级添加额外的层次"></a>使用块级作用域声明并不会改变搜索流程，但可以给词法层级添加额外的层次</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> color = <span class="string">&#x27;blue&#x27;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getColor</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">let</span> color = <span class="string">&#x27;red&#x27;</span>;</span><br><span class="line"> &#123;</span><br><span class="line"> <span class="keyword">let</span> color = <span class="string">&#x27;green&#x27;</span>;</span><br><span class="line"> <span class="keyword">return</span> color;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(getColor()); <span class="comment">// &#x27;green&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="在这个修改后的例子中，getColor-内部声明了一个名为-color-的局部变量。在调用这个函数时，变量会被声明。在执行到函数返回语句时，代码引用了变量-color。于是开始在局部上下文中搜索这个标识符，结果找到了值为’green’的变量-color。因为变量已找到，搜索随即停止，所以就使用这个局部变量。这意味着函数会返回’green’。在局部变量-color-声明之后的任何代码都无法访问全局变量color，除非使用完全限定的写法-window-color"><a href="#在这个修改后的例子中，getColor-内部声明了一个名为-color-的局部变量。在调用这个函数时，变量会被声明。在执行到函数返回语句时，代码引用了变量-color。于是开始在局部上下文中搜索这个标识符，结果找到了值为’green’的变量-color。因为变量已找到，搜索随即停止，所以就使用这个局部变量。这意味着函数会返回’green’。在局部变量-color-声明之后的任何代码都无法访问全局变量color，除非使用完全限定的写法-window-color" class="headerlink" title="在这个修改后的例子中，getColor()内部声明了一个名为 color 的局部变量。在调用这个函数时，变量会被声明。在执行到函数返回语句时，代码引用了变量 color。于是开始在局部上下文中搜索这个标识符，结果找到了值为’green’的变量 color。因为变量已找到，搜索随即停止，所以就使用这个局部变量。这意味着函数会返回’green’。在局部变量 color 声明之后的任何代码都无法访问全局变量color，除非使用完全限定的写法 window.color"></a>在这个修改后的例子中，getColor()内部声明了一个名为 color 的局部变量。在调用这个函数时，变量会被声明。在执行到函数返回语句时，代码引用了变量 color。于是开始在局部上下文中搜索这个标识符，结果找到了值为’green’的变量 color。因为变量已找到，搜索随即停止，所以就使用这个局部变量。这意味着函数会返回’green’。在局部变量 color 声明之后的任何代码都无法访问全局变量color，除非使用完全限定的写法 window.color</h5><h3 id="注意-标识符查找并非没有代价。访问局部变量比访问全局变量要快，因为不用切换作用域。不过，JavaScript-引擎在优化标识符查找上做了很多工作，将来这个差异可能就微不足道了。"><a href="#注意-标识符查找并非没有代价。访问局部变量比访问全局变量要快，因为不用切换作用域。不过，JavaScript-引擎在优化标识符查找上做了很多工作，将来这个差异可能就微不足道了。" class="headerlink" title="注意 标识符查找并非没有代价。访问局部变量比访问全局变量要快，因为不用切换作用域。不过，JavaScript 引擎在优化标识符查找上做了很多工作，将来这个差异可能就微不足道了。"></a>注意 标识符查找并非没有代价。访问局部变量比访问全局变量要快，因为不用切换作用域。不过，JavaScript 引擎在优化标识符查找上做了很多工作，将来这个差异可能就微不足道了。</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;变量、作用域&quot;&gt;&lt;a href=&quot;#变量、作用域&quot; class=&quot;headerlink&quot; title=&quot;变量、作用域&quot;&gt;&lt;/a&gt;变量、作用域&lt;/h1&gt;&lt;h5 id=&quot;相比于其他语言，JavaScript-中的变量可谓独树一帜。正如-ECMA-262-所规定的，Ja</summary>
      
    
    
    
    <category term="JavaScript红宝书" scheme="http://example.com/categories/JavaScript%E7%BA%A2%E5%AE%9D%E4%B9%A6/"/>
    
    
    <category term="作用域" scheme="http://example.com/tags/%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    
  </entry>
  
  <entry>
    <title>电商网站构图思想之其他</title>
    <link href="http://example.com/2020/10/21/%E7%94%B5%E5%95%86%E7%BD%91%E7%AB%99%E6%80%9D%E6%83%B32/"/>
    <id>http://example.com/2020/10/21/%E7%94%B5%E5%95%86%E7%BD%91%E7%AB%99%E6%80%9D%E6%83%B32/</id>
    <published>2020-10-21T05:06:43.000Z</published>
    <updated>2020-11-06T06:18:09.315Z</updated>
    
    <content type="html"><![CDATA[<h2 id="main模块制作"><a href="#main模块制作" class="headerlink" title="main模块制作"></a>main模块制作</h2><p><img src="https://s1.ax1x.com/2020/11/03/BsmHPI.png" alt="我是图片"></p><h3 id="焦点图focus"><a href="#焦点图focus" class="headerlink" title="焦点图focus"></a>焦点图focus</h3><h4 id="要知道轮播图的原理"><a href="#要知道轮播图的原理" class="headerlink" title="要知道轮播图的原理"></a>要知道轮播图的原理</h4><p><img src="https://s1.ax1x.com/2020/11/03/BsuFkd.png" alt="我是图片"><br><img src="https://s1.ax1x.com/2020/11/03/BsnHw4.png" alt="我是图片"></p><h3 id="快报模块"><a href="#快报模块" class="headerlink" title="快报模块"></a>快报模块</h3><h4 id="三个盒子-上中下-最后一个盒子做图片填充"><a href="#三个盒子-上中下-最后一个盒子做图片填充" class="headerlink" title="三个盒子  上中下 最后一个盒子做图片填充"></a>三个盒子  上中下 最后一个盒子做图片填充</h4><p><img src="https://s1.ax1x.com/2020/11/03/Bsud74.png" alt="我是图片"></p><h4 id="快报模块之上盒子篇"><a href="#快报模块之上盒子篇" class="headerlink" title="快报模块之上盒子篇"></a>快报模块之上盒子篇</h4><h5 id="上盒子分为两个盒-一个是头部-一个是身体"><a href="#上盒子分为两个盒-一个是头部-一个是身体" class="headerlink" title="上盒子分为两个盒 一个是头部 一个是身体"></a>上盒子分为两个盒 一个是头部 一个是身体</h5><h5 id="头部：左浮动-右边右浮动-记得还有伪类-after做三角"><a href="#头部：左浮动-右边右浮动-记得还有伪类-after做三角" class="headerlink" title="头部：左浮动  右边右浮动  记得还有伪类::after做三角"></a>头部：左浮动  右边右浮动  记得还有伪类::after做三角</h5><h5 id="身体：ul-gt-li-记得到时候用strong加粗"><a href="#身体：ul-gt-li-记得到时候用strong加粗" class="headerlink" title="身体：ul&gt;li 记得到时候用strong加粗"></a>身体：ul&gt;li 记得到时候用strong加粗</h5><p><img src="https://s1.ax1x.com/2020/11/03/BsK9g0.png" alt="我是图片"></p><h4 id="快报模块之中盒子篇"><a href="#快报模块之中盒子篇" class="headerlink" title="快报模块之中盒子篇"></a>快报模块之中盒子篇</h4><h5 id="形成之后ul和几个li-然后给一个宽度-盒子会自动挤到下面"><a href="#形成之后ul和几个li-然后给一个宽度-盒子会自动挤到下面" class="headerlink" title="形成之后ul和几个li  然后给一个宽度 盒子会自动挤到下面"></a>形成之后ul和几个li  然后给一个宽度 盒子会自动挤到下面</h5><p><img src="https://s1.ax1x.com/2020/11/03/BsKLxx.png" alt="我是图片"></p><h4 id="由于最低下盒子是一个图片填充"><a href="#由于最低下盒子是一个图片填充" class="headerlink" title="由于最低下盒子是一个图片填充"></a>由于最低下盒子是一个图片填充</h4><h4 id="所以只需要看自己的盒子距离底部和左边距离"><a href="#所以只需要看自己的盒子距离底部和左边距离" class="headerlink" title="所以只需要看自己的盒子距离底部和左边距离"></a>所以只需要看自己的盒子距离底部和左边距离</h4><h4 id="推荐模块制作"><a href="#推荐模块制作" class="headerlink" title="推荐模块制作"></a>推荐模块制作</h4><h5 id="第一个是一个图片填充-第二个是ul-gt-li-最后一个没有右边框"><a href="#第一个是一个图片填充-第二个是ul-gt-li-最后一个没有右边框" class="headerlink" title="第一个是一个图片填充 第二个是ul&gt;li 最后一个没有右边框"></a>第一个是一个图片填充 第二个是ul&gt;li 最后一个没有右边框</h5><p><img src="https://s1.ax1x.com/2020/11/03/BsQmX6.png" alt="我是图片"></p><h4 id="家用电器模块制作"><a href="#家用电器模块制作" class="headerlink" title="家用电器模块制作"></a>家用电器模块制作</h4><p><img src="https://s1.ax1x.com/2020/11/03/BsltPJ.png" alt="我是图片"><br><img src="https://s1.ax1x.com/2020/11/03/Bs1PJJ.png" alt="我是图片"></p><h4 id="第一个li样式红字"><a href="#第一个li样式红字" class="headerlink" title="第一个li样式红字"></a>第一个li样式红字</h4><p><img src="https://s1.ax1x.com/2020/11/03/Bs1mdO.png" alt="我是图片"></p><h4 id="tab布局样式注意"><a href="#tab布局样式注意" class="headerlink" title="tab布局样式注意"></a>tab布局样式注意</h4><p><img src="https://s1.ax1x.com/2020/11/03/Bs1Ote.png" alt="我是图片"></p><h4 id="以至于-tab-concent其实就是几个一个大盒子包含着几个小盒子"><a href="#以至于-tab-concent其实就是几个一个大盒子包含着几个小盒子" class="headerlink" title="以至于 tab-concent其实就是几个一个大盒子包含着几个小盒子"></a>以至于 tab-concent其实就是几个一个大盒子包含着几个小盒子</h4><p><img src="https://s1.ax1x.com/2020/11/03/Bs3YcR.png" alt="我是图片"></p><h2 id="注册页布局"><a href="#注册页布局" class="headerlink" title="注册页布局"></a>注册页布局</h2><h4 id="注册页面分3个部分"><a href="#注册页面分3个部分" class="headerlink" title="注册页面分3个部分"></a>注册页面分3个部分</h4><p><img src="https://s1.ax1x.com/2020/11/03/ByrfJA.png" alt="我是图片"></p><h3 id="header"><a href="#header" class="headerlink" title="header"></a>header</h3><h4 id="左浮动一个盒子-填充图片"><a href="#左浮动一个盒子-填充图片" class="headerlink" title="左浮动一个盒子  填充图片"></a>左浮动一个盒子  填充图片</h4><p><img src="https://s1.ax1x.com/2020/11/03/ByskFJ.png" alt="我是图片"></p><h3 id="registerarea布局"><a href="#registerarea布局" class="headerlink" title="registerarea布局"></a>registerarea布局</h3><h4 id="布局使用ul几个li"><a href="#布局使用ul几个li" class="headerlink" title="布局使用ul几个li"></a>布局使用ul几个li</h4><p><img src="https://s1.ax1x.com/2020/11/03/BysQTe.png" alt="我是图片"><br><img src="https://s1.ax1x.com/2020/11/03/Byyu3n.png" alt="我是图片"></p><h2 id="商品列表页"><a href="#商品列表页" class="headerlink" title="商品列表页"></a>商品列表页</h2><h3 id="1-列表页准备工作"><a href="#1-列表页准备工作" class="headerlink" title="1). 列表页准备工作"></a>1). 列表页准备工作</h3><ul><li><p>列表页面是新的页面，我们需要新建 list.html    </p></li><li><p>因为 列表页的 头部 和 底部 基本一致， 我们需要 把首页中的 头部  和 底部的  结构复制过去</p></li><li><p>头部和底部的 样式 ，列表也需要， 因此 list.html  也需要 引入   common.css  </p></li><li><p>同时 需要新的 list.css 文件   这个 样式文件，里面只写  list.html  结构里面的内容就好了</p><h3 id="2-列表页-header-和-nav-修改"><a href="#2-列表页-header-和-nav-修改" class="headerlink" title="2). 列表页 header 和  nav 修改"></a>2). 列表页 header 和  nav 修改</h3></li></ul><p><img src="https://s1.ax1x.com/2020/11/06/Bf8Roj.png" alt="我是图片"></p><ul><li>秒杀盒子 sk  定位 即可  second  kill </li><li>1 号 盒子 左侧浮动  sk_list   里面包含 ul  和  li </li><li>2 号盒子  左侧浮动   sk_con  里面 包含 ul  和  li</li></ul><h3 id="3-列表页主体盒子-sk-container"><a href="#3-列表页主体盒子-sk-container" class="headerlink" title="3). 列表页主体盒子 sk _container"></a>3). 列表页主体盒子 sk _container</h3><p>这个盒子里面包含了 所有的 列表页的所有主体内容<br><img src="https://s1.ax1x.com/2020/11/06/BfG2jK.png" alt="我是图片"></p><ul><li>1号盒子  sk _container    给宽度 1200  不要给高度 </li><li>2号盒子  sk_hd   插入图片即可  </li><li>3号盒子   sk_bd  里面包含 很多的 ul 和  li </li></ul><h3 id="4-sk-goods-布局"><a href="#4-sk-goods-布局" class="headerlink" title="4).  sk_goods  布局"></a>4).  sk_goods  布局</h3><p><img src="https://s1.ax1x.com/2020/11/06/BfGOu8.png" alt="我是图片"></p><ul><li>此li 我们命名为 sk_goods  </li><li>1号位置   有 a 包含 本图片 和下面的 标题    插入 图片即可   seckill_mod_goods_img  可以做一个 鼠标放入 图片 上滑动的效果</li><li>2号位置  标题  H5  命名为  sk_goods_title  </li><li>3号 位置 为 价格 div  命名为  sk_goods_price    </li><li>4号位置  为  div  命名为  sk_goods_progress    此处，我们 采取 代码的形式 写出 这个 导航条</li><li>5号位置  为 a  链接   命名为  sk_goods_buy   此处注意， 因为父盒子已经有左右padding   我们这里用定位合适。</li></ul><h3 id="5-分页制作-page"><a href="#5-分页制作-page" class="headerlink" title="5). 分页制作 page"></a>5). 分页制作 page</h3><p><img src="https://s1.ax1x.com/2020/11/06/BfJZE4.png" alt="我是图片"></p><ul><li>最大的盒子  我们div  命名为  page   注意里面的盒子 全部用 行内块 </li><li>1号盒子 用 span  命名为 page_num ( 页码的意思 )  里面 放 a      把a 转换为 行内块  设置样式 <ul><li>pn_prev  上一页     pn_next  下一页</li></ul></li><li>2号盒子 用 span 命名为  page_skip    ( skip 跳转 转移的意思 )    里面注意 有 input  和  button  </li></ul><h3 id="6-知识点-获得焦点元素"><a href="#6-知识点-获得焦点元素" class="headerlink" title="6). 知识点 -获得焦点元素"></a>6). 知识点 -获得焦点元素</h3><h4 id="focus-伪类-选择器用于选取获得焦点的元素-。-我们这里主要针对的是-表单元素"><a href="#focus-伪类-选择器用于选取获得焦点的元素-。-我们这里主要针对的是-表单元素" class="headerlink" title=":focus 伪类 选择器用于选取获得焦点的元素 。 我们这里主要针对的是 表单元素"></a>:focus 伪类 选择器用于选取获得焦点的元素 。 我们这里主要针对的是 表单元素</h4><h4 id="hover"><a href="#hover" class="headerlink" title=":hover"></a>:hover</h4><p>语法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="selector-class">.total</span> <span class="selector-tag">input</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">transition</span>: all .<span class="number">5s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*这个input 获得了焦点*/</span></span><br><span class="line"><span class="selector-class">.total</span> <span class="selector-tag">input</span><span class="selector-pseudo">:focus</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid skyblue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;main模块制作&quot;&gt;&lt;a href=&quot;#main模块制作&quot; class=&quot;headerlink&quot; title=&quot;main模块制作&quot;&gt;&lt;/a&gt;main模块制作&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/11/03/BsmHP</summary>
      
    
    
    
    <category term="电商网站构图思想" scheme="http://example.com/categories/%E7%94%B5%E5%95%86%E7%BD%91%E7%AB%99%E6%9E%84%E5%9B%BE%E6%80%9D%E6%83%B3/"/>
    
    
    <category term="项目" scheme="http://example.com/tags/%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>电商网站构图思想之公共样式</title>
    <link href="http://example.com/2020/10/20/%E7%94%B5%E5%95%86%E7%BD%91%E7%AB%99%E6%80%9D%E6%83%B3/"/>
    <id>http://example.com/2020/10/20/%E7%94%B5%E5%95%86%E7%BD%91%E7%AB%99%E6%80%9D%E6%83%B3/</id>
    <published>2020-10-20T05:06:43.000Z</published>
    <updated>2020-11-06T06:17:51.596Z</updated>
    
    <content type="html"><![CDATA[<h3 id="公共样式开始之前，就品优购网站思想来说-代码多的雅痞-但是只要思想在-所有都是浮云"><a href="#公共样式开始之前，就品优购网站思想来说-代码多的雅痞-但是只要思想在-所有都是浮云" class="headerlink" title="公共样式开始之前，就品优购网站思想来说  代码多的雅痞  但是只要思想在  所有都是浮云"></a>公共样式开始之前，就品优购网站思想来说  代码多的雅痞  但是只要思想在  所有都是浮云</h3><p><img src="https://s1.ax1x.com/2020/11/01/B0FJYQ.png" alt="我是图片"></p><hr><h3 id="我们先从头部说起网页的三大部件"><a href="#我们先从头部说起网页的三大部件" class="headerlink" title="我们先从头部说起网页的三大部件"></a>我们先从头部说起网页的三大部件</h3><p><img src="https://s1.ax1x.com/2020/11/01/B0F2lR.png" alt="我是图片"></p><h3 id="facicon-ico网页图标"><a href="#facicon-ico网页图标" class="headerlink" title="facicon.ico网页图标"></a>facicon.ico网页图标</h3><h4 id="这里需要注意的是rel-后面必须跟“shortcut-icon”"><a href="#这里需要注意的是rel-后面必须跟“shortcut-icon”" class="headerlink" title="这里需要注意的是rel  后面必须跟“shortcut icon”"></a>这里需要注意的是rel  后面必须跟“shortcut icon”</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;shortcut icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;favicon.ico&quot;</span>  <span class="attr">type</span>=<span class="string">&quot;image/x-icon&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="顶部最上面的快捷标签栏shortcut"><a href="#顶部最上面的快捷标签栏shortcut" class="headerlink" title="顶部最上面的快捷标签栏shortcut"></a>顶部最上面的快捷标签栏shortcut</h3><p><img src="https://s1.ax1x.com/2020/11/01/B0kw3d.png" alt="我是图片"></p><h4 id="左边两个盒子浮动"><a href="#左边两个盒子浮动" class="headerlink" title="左边两个盒子浮动"></a>左边两个盒子浮动</h4><p><img src="https://s1.ax1x.com/2020/11/01/B0EgpQ.png" alt="我是图片"></p><h4 id="右边成几个ul-gt-li-数字"><a href="#右边成几个ul-gt-li-数字" class="headerlink" title="右边成几个ul&gt;li*数字"></a>右边成几个ul&gt;li*数字</h4><h5 id="距离使用padding挤开"><a href="#距离使用padding挤开" class="headerlink" title="距离使用padding挤开"></a>距离使用padding挤开</h5><h5 id="使用nth：even偶数形成竖杠"><a href="#使用nth：even偶数形成竖杠" class="headerlink" title="使用nth：even偶数形成竖杠"></a>使用nth：even偶数形成竖杠</h5><p><img src="https://s1.ax1x.com/2020/11/01/B0Z1PO.png" alt="我是图片"><br><img src="https://s1.ax1x.com/2020/11/01/B0Z3GD.png" alt="我是图片"></p><h4 id="小三角通过字体图标"><a href="#小三角通过字体图标" class="headerlink" title="小三角通过字体图标"></a>小三角通过字体图标</h4><h5 id="现在需要倒三角的li加一个class"><a href="#现在需要倒三角的li加一个class" class="headerlink" title="现在需要倒三角的li加一个class"></a>现在需要倒三角的li加一个class</h5><h5 id="其次就是用伪类-after里面的content测试一下"><a href="#其次就是用伪类-after里面的content测试一下" class="headerlink" title="其次就是用伪类::after里面的content测试一下"></a>其次就是用伪类::after里面的content测试一下</h5><h5 id="最后在使用字体图标CSS样式修改就OK了"><a href="#最后在使用字体图标CSS样式修改就OK了" class="headerlink" title="最后在使用字体图标CSS样式修改就OK了"></a>最后在使用字体图标CSS样式修改就OK了</h5><p><img src="https://s1.ax1x.com/2020/11/01/B0n8RU.png" alt="我是图片"><br><img src="https://s1.ax1x.com/2020/11/01/B0nNL9.png" alt="我是图片"><br><img src="https://s1.ax1x.com/2020/11/01/B0u3TI.png" alt="我是图片"></p><hr><h3 id="header制作"><a href="#header制作" class="headerlink" title="header制作"></a>header制作</h3><p><img src="https://s1.ax1x.com/2020/11/01/B0K0gO.png" alt="我是图片"></p><h4 id="Logo-SEO优化"><a href="#Logo-SEO优化" class="headerlink" title="Logo SEO优化"></a>Logo SEO优化</h4><p><img src="https://s1.ax1x.com/2020/11/01/B0GbOf.png" alt="我是图片"></p><h4 id="搜索栏"><a href="#搜索栏" class="headerlink" title="搜索栏"></a>搜索栏</h4><h5 id="两个盒子-里面包含一个input-和一个button"><a href="#两个盒子-里面包含一个input-和一个button" class="headerlink" title="两个盒子 里面包含一个input 和一个button"></a>两个盒子 里面包含一个input 和一个button</h5><p><img src="https://s1.ax1x.com/2020/11/01/B0JJtH.png" alt="我是图片"></p><h4 id="购物车模块"><a href="#购物车模块" class="headerlink" title="购物车模块"></a>购物车模块</h4><h5 id="一个大盒子-首先给一个边框，然后中间放一个文字-利用中间文字的伪类-befor＆-after实现购物车图标和倒立三角"><a href="#一个大盒子-首先给一个边框，然后中间放一个文字-利用中间文字的伪类-befor＆-after实现购物车图标和倒立三角" class="headerlink" title="一个大盒子 首先给一个边框，然后中间放一个文字  利用中间文字的伪类::befor＆::after实现购物车图标和倒立三角"></a>一个大盒子 首先给一个边框，然后中间放一个文字  利用中间文字的伪类::befor＆::after实现购物车图标和倒立三角</h5><h5 id="然后上面的消息框用定位定上去"><a href="#然后上面的消息框用定位定上去" class="headerlink" title="然后上面的消息框用定位定上去"></a>然后上面的消息框用定位定上去</h5><p><img src="https://s1.ax1x.com/2020/11/01/B0NN9J.png" alt="我是图片"></p><hr><h3 id="nav导航制作"><a href="#nav导航制作" class="headerlink" title="nav导航制作"></a>nav导航制作</h3><h5 id="首先-画两个盒子-一个左浮动-一又浮动"><a href="#首先-画两个盒子-一个左浮动-一又浮动" class="headerlink" title="首先  画两个盒子 一个左浮动 一又浮动"></a>首先  画两个盒子 一个左浮动 一又浮动</h5><h5 id="其次-nav左浮动的盒子是一个无序列表-dt-dd"><a href="#其次-nav左浮动的盒子是一个无序列表-dt-dd" class="headerlink" title="其次  nav左浮动的盒子是一个无序列表 dt dd"></a>其次  nav左浮动的盒子是一个无序列表 dt dd</h5><h5 id="dd下面放个ul下的几个li-最后边用伪类-after完成"><a href="#dd下面放个ul下的几个li-最后边用伪类-after完成" class="headerlink" title="dd下面放个ul下的几个li  最后边用伪类::after完成"></a>dd下面放个ul下的几个li  最后边用伪类::after完成</h5><p><img src="https://s1.ax1x.com/2020/11/02/BDoPWF.png" alt="我是图片"><br><img src="https://s1.ax1x.com/2020/11/02/BDTUBR.png" alt="我是图片"><br><a href="https://imgchr.com/i/BDTv5V"><img src="https://s1.ax1x.com/2020/11/02/BDTv5V.png" alt="BDTv5V.png"></a></p><h4 id="navitems制作"><a href="#navitems制作" class="headerlink" title="navitems制作"></a>navitems制作</h4><h5 id="放一个盒子-靠右浮动-然后把li在浮动-padding撑开距离"><a href="#放一个盒子-靠右浮动-然后把li在浮动-padding撑开距离" class="headerlink" title="放一个盒子  靠右浮动 然后把li在浮动 padding撑开距离"></a>放一个盒子  靠右浮动 然后把li在浮动 padding撑开距离</h5><p><a href="https://imgchr.com/i/BD7WM4"><img src="https://s1.ax1x.com/2020/11/02/BD7WM4.png" alt="BD7WM4.png"></a></p><h3 id="footer制作"><a href="#footer制作" class="headerlink" title="footer制作"></a>footer制作</h3><h5 id="一个大盒子包含3个小盒子"><a href="#一个大盒子包含3个小盒子" class="headerlink" title="一个大盒子包含3个小盒子"></a>一个大盒子包含3个小盒子</h5><p><img src="https://s1.ax1x.com/2020/11/02/BDHuF0.png" alt="我是图片"></p><h4 id="footer-top盒子制作"><a href="#footer-top盒子制作" class="headerlink" title="footer_top盒子制作"></a>footer_top盒子制作</h4><h5 id="首先是一个ul包含四个li-其次就是给每个li放俩盒子"><a href="#首先是一个ul包含四个li-其次就是给每个li放俩盒子" class="headerlink" title="首先是一个ul包含四个li 其次就是给每个li放俩盒子"></a>首先是一个ul包含四个li 其次就是给每个li放俩盒子</h5><h5 id="左边是h5为图标-右边盒子h4是上面字体下面放一个p-然后左右浮动"><a href="#左边是h5为图标-右边盒子h4是上面字体下面放一个p-然后左右浮动" class="headerlink" title="左边是h5为图标 右边盒子h4是上面字体下面放一个p 然后左右浮动"></a>左边是h5为图标 右边盒子h4是上面字体下面放一个p 然后左右浮动</h5><p><img src="https://s1.ax1x.com/2020/11/02/BDbuBd.png" alt="我是图片"></p><p><img src="https://s1.ax1x.com/2020/11/02/BDb2DJ.png" alt="我是图片"></p><h4 id="footer-mid盒子制作"><a href="#footer-mid盒子制作" class="headerlink" title="footer_mid盒子制作"></a>footer_mid盒子制作</h4><h5 id="首先放一个dl-dl里有一个dd和dt"><a href="#首先放一个dl-dl里有一个dd和dt" class="headerlink" title="首先放一个dl  dl里有一个dd和dt"></a>首先放一个dl  dl里有一个dd和dt</h5><h5 id="然后整修饰玩样式之后-就开始复制粘贴5个-最后一个修成图片就行"><a href="#然后整修饰玩样式之后-就开始复制粘贴5个-最后一个修成图片就行" class="headerlink" title="然后整修饰玩样式之后  就开始复制粘贴5个 最后一个修成图片就行"></a>然后整修饰玩样式之后  就开始复制粘贴5个 最后一个修成图片就行</h5><p><img src="https://s1.ax1x.com/2020/11/02/BDqDZd.png" alt="我是图片"></p><h4 id="footer-bot盒子制作"><a href="#footer-bot盒子制作" class="headerlink" title="footer_bot盒子制作"></a>footer_bot盒子制作</h4><h5 id="放两个class-一上一下-最后都用css修饰text-aglin-center"><a href="#放两个class-一上一下-最后都用css修饰text-aglin-center" class="headerlink" title="放两个class  一上一下  最后都用css修饰text-aglin center"></a>放两个class  一上一下  最后都用css修饰text-aglin center</h5><p><img src="https://s1.ax1x.com/2020/11/02/BDLAyD.png" alt="我是图片"></p><h2 id="至此-公共样式已完结-接下来是分页样式"><a href="#至此-公共样式已完结-接下来是分页样式" class="headerlink" title="至此 公共样式已完结  接下来是分页样式"></a>至此 公共样式已完结  接下来是分页样式</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;公共样式开始之前，就品优购网站思想来说-代码多的雅痞-但是只要思想在-所有都是浮云&quot;&gt;&lt;a href=&quot;#公共样式开始之前，就品优购网站思想来说-代码多的雅痞-但是只要思想在-所有都是浮云&quot; class=&quot;headerlink&quot; title=&quot;公共样式开始之前，就</summary>
      
    
    
    
    <category term="电商网站构图思想" scheme="http://example.com/categories/%E7%94%B5%E5%95%86%E7%BD%91%E7%AB%99%E6%9E%84%E5%9B%BE%E6%80%9D%E6%83%B3/"/>
    
    
    <category term="项目" scheme="http://example.com/tags/%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>JS红宝书之语句</title>
    <link href="http://example.com/2020/10/19/%E7%BA%A2%E5%AE%9D%E4%B9%A65/"/>
    <id>http://example.com/2020/10/19/%E7%BA%A2%E5%AE%9D%E4%B9%A65/</id>
    <published>2020-10-19T05:06:43.000Z</published>
    <updated>2020-11-06T06:19:58.045Z</updated>
    
    <content type="html"><![CDATA[<h1 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h1><h4 id="ECMA-262-描述了一些语句（也称为流控制语句），而-ECMAScript-中的大部分语法都体现在语句中。语句通常使用一或多个关键字完成既定的任务。语句可以简单，也可以复杂。简单的如告诉函数退出，复杂的如列出一堆要重复执行的指令。"><a href="#ECMA-262-描述了一些语句（也称为流控制语句），而-ECMAScript-中的大部分语法都体现在语句中。语句通常使用一或多个关键字完成既定的任务。语句可以简单，也可以复杂。简单的如告诉函数退出，复杂的如列出一堆要重复执行的指令。" class="headerlink" title="ECMA-262 描述了一些语句（也称为流控制语句），而 ECMAScript 中的大部分语法都体现在语句中。语句通常使用一或多个关键字完成既定的任务。语句可以简单，也可以复杂。简单的如告诉函数退出，复杂的如列出一堆要重复执行的指令。"></a>ECMA-262 描述了一些语句（也称为流控制语句），而 ECMAScript 中的大部分语法都体现在语句中。语句通常使用一或多个关键字完成既定的任务。语句可以简单，也可以复杂。简单的如告诉函数退出，复杂的如列出一堆要重复执行的指令。</h4><h2 id="if-语句"><a href="#if-语句" class="headerlink" title="if 语句"></a>if 语句</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (任何表达式) statement1 </span><br><span class="line"><span class="keyword">else</span> statement2 </span><br></pre></td></tr></table></figure><h5 id="这里的条件（condition）可以是任何表达式，并且求值结果不一定是布尔值。"><a href="#这里的条件（condition）可以是任何表达式，并且求值结果不一定是布尔值。" class="headerlink" title="这里的条件（condition）可以是任何表达式，并且求值结果不一定是布尔值。"></a>这里的条件（condition）可以是任何表达式，并且求值结果不一定是布尔值。</h5><h5 id="ECMAScript-会自动调用-Boolean-函数将这个表达式的值转换为布尔值。如果条件求值为-true，则执行语句statement1；如果条件求值为-false，则执行语句-statement2。这里的语句可能是一行代码，也可能是一个代码块（即包含在一对花括号中的多行代码）。"><a href="#ECMAScript-会自动调用-Boolean-函数将这个表达式的值转换为布尔值。如果条件求值为-true，则执行语句statement1；如果条件求值为-false，则执行语句-statement2。这里的语句可能是一行代码，也可能是一个代码块（即包含在一对花括号中的多行代码）。" class="headerlink" title="ECMAScript 会自动调用 Boolean()函数将这个表达式的值转换为布尔值。如果条件求值为 true，则执行语句statement1；如果条件求值为 false，则执行语句 statement2。这里的语句可能是一行代码，也可能是一个代码块（即包含在一对花括号中的多行代码）。"></a>ECMAScript 会自动调用 Boolean()函数将这个表达式的值转换为布尔值。如果条件求值为 true，则执行语句statement1；如果条件求值为 false，则执行语句 statement2。这里的语句可能是一行代码，也可能是一个代码块（即包含在一对花括号中的多行代码）。</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (i &gt; <span class="number">25</span>)</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">&quot;Greater than 25.&quot;</span>); <span class="comment">// 只有一行代码的语句</span></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">&quot;Less than or equal to 25.&quot;</span>); <span class="comment">// 一个语句块</span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h5 id="连续使用多个-if-语句"><a href="#连续使用多个-if-语句" class="headerlink" title="连续使用多个 if 语句"></a>连续使用多个 if 语句</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition1) statement1 <span class="keyword">else</span> <span class="keyword">if</span> (condition2) statement2 <span class="keyword">else</span> statement3 </span><br></pre></td></tr></table></figure><h2 id="do-while-语句"><a href="#do-while-语句" class="headerlink" title="do-while 语句"></a>do-while 语句</h2><h5 id="do-while-语句是一种后测试循环语句，即循环体中的代码执行后才会对退出条件进行求值。换句话说，循环体内的代码至少执行一次。"><a href="#do-while-语句是一种后测试循环语句，即循环体中的代码执行后才会对退出条件进行求值。换句话说，循环体内的代码至少执行一次。" class="headerlink" title="do-while 语句是一种后测试循环语句，即循环体中的代码执行后才会对退出条件进行求值。换句话说，循环体内的代码至少执行一次。"></a>do-while 语句是一种后测试循环语句，即循环体中的代码执行后才会对退出条件进行求值。换句话说，循环体内的代码至少执行一次。</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.do while 循环 语法结构</span></span><br><span class="line">       <span class="keyword">do</span> &#123;</span><br><span class="line">           <span class="comment">// 循环体</span></span><br><span class="line">       &#125; <span class="keyword">while</span> (条件表达式)</span><br><span class="line">       <span class="comment">// 2.  执行思路 跟while不同的地方在于 do while 先执行一次循环体 在判断条件 如果条件表达式结果为真，则继续执行循环体，否则退出循环</span></span><br><span class="line">       <span class="comment">// 3. 代码验证</span></span><br><span class="line">       <span class="keyword">var</span> i = <span class="number">1</span>;</span><br><span class="line">       <span class="keyword">do</span> &#123;</span><br><span class="line">           <span class="built_in">console</span>.log(<span class="string">&#x27;how are you?&#x27;</span>);</span><br><span class="line">           i++;</span><br><span class="line">       &#125; <span class="keyword">while</span> (i &lt;= <span class="number">100</span>)</span><br><span class="line">       <span class="comment">// 4. 我们的do while 循环体至少执行一次</span></span><br></pre></td></tr></table></figure><h5 id="在这个例子中，只要-i-小于-10，循环就会重复执行。i-从-0-开始，每次循环递增-2。"><a href="#在这个例子中，只要-i-小于-10，循环就会重复执行。i-从-0-开始，每次循环递增-2。" class="headerlink" title="在这个例子中，只要 i 小于 10，循环就会重复执行。i 从 0 开始，每次循环递增 2。"></a>在这个例子中，只要 i 小于 10，循环就会重复执行。i 从 0 开始，每次循环递增 2。</h5><h2 id="while-语句"><a href="#while-语句" class="headerlink" title="while 语句"></a>while 语句</h2><h2 id="while-语句是一种先测试循环语句，即先检测退出条件，再执行循环体内的代码。因此，while-循环体内的代码有可能不会执行。"><a href="#while-语句是一种先测试循环语句，即先检测退出条件，再执行循环体内的代码。因此，while-循环体内的代码有可能不会执行。" class="headerlink" title="while 语句是一种先测试循环语句，即先检测退出条件，再执行循环体内的代码。因此，while 循环体内的代码有可能不会执行。"></a>while 语句是一种先测试循环语句，即先检测退出条件，再执行循环体内的代码。因此，while 循环体内的代码有可能不会执行。</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 1. while 循环语法结构  while 当...的时候</span></span><br><span class="line"><span class="comment">// while (条件表达式) &#123;</span></span><br><span class="line"><span class="comment">//     // 循环体</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// 2. 执行思路  当条件表达式结果为true 则执行循环体 否则 退出循环</span></span><br><span class="line"><span class="comment">// 3. 代码验证</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (num &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;好啊有&#x27;</span>);</span><br><span class="line">    num++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 4. 里面应该也有计数器 初始化变量</span></span><br><span class="line"><span class="comment">// 5. 里面应该也有操作表达式  完成计数器的更新 防止死循环</span></span><br></pre></td></tr></table></figure><h2 id="for-语句"><a href="#for-语句" class="headerlink" title="for 语句"></a>for 语句</h2><h5 id="for-语句也是先测试语句，只不过增加了进入循环之前的初始化代码，以及循环执行后要执行的表达式"><a href="#for-语句也是先测试语句，只不过增加了进入循环之前的初始化代码，以及循环执行后要执行的表达式" class="headerlink" title="for 语句也是先测试语句，只不过增加了进入循环之前的初始化代码，以及循环执行后要执行的表达式"></a>for 语句也是先测试语句，只不过增加了进入循环之前的初始化代码，以及循环执行后要执行的表达式</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> count = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line"> <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">##  双重for循环语句</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 双重for循环 语法结构</span></span><br><span class="line">        <span class="comment">// for (外层的初始化变量; 外层的条件表达式; 外层的操作表达式) &#123;</span></span><br><span class="line">        <span class="comment">//     for (里层的初始化变量; 里层的条件表达式; 里层的操作表达式) &#123;</span></span><br><span class="line">        <span class="comment">//         // 执行语句;</span></span><br><span class="line">        <span class="comment">//     &#125;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="comment">// 2. 我们可以把里面的循环看做是外层循环的语句</span></span><br><span class="line">        <span class="comment">// 3. 外层循环循环一次， 里面的循环执行全部</span></span><br><span class="line">        <span class="comment">// 4. 代码验证</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">3</span>; i++) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;这是外层循环第&#x27;</span> + i + <span class="string">&#x27;次&#x27;</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">1</span>; j &lt;= <span class="number">3</span>; j++) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&#x27;这是里层的循环第&#x27;</span> + j + <span class="string">&#x27;次&#x27;</span>);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 九九乘法表</span></span><br><span class="line">       <span class="comment">// 一共有9行，但是每行的个数不一样，因此需要用到双重 for 循环</span></span><br><span class="line">       <span class="comment">// 外层的 for 循环控制行数 i ，循环9次 ，可以打印 9 行  </span></span><br><span class="line">       <span class="comment">// 内层的 for 循环控制每行公式  j  </span></span><br><span class="line">       <span class="comment">// 核心算法：每一行 公式的个数正好和行数一致， j &lt;= i;</span></span><br><span class="line">       <span class="comment">// 每行打印完毕，都需要重新换一行</span></span><br><span class="line">       <span class="keyword">var</span> str = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++) &#123; <span class="comment">// 外层循环控制行数  </span></span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">1</span>; j &lt;= i; j++) &#123; <span class="comment">// 里层循环控制每一行的个数  j &lt;= i</span></span><br><span class="line">               <span class="comment">// 1 × 2 = 2</span></span><br><span class="line">               <span class="comment">// str = str + &#x27;★&#x27;;</span></span><br><span class="line">               str += j + <span class="string">&#x27;×&#x27;</span> + i + <span class="string">&#x27;=&#x27;</span> + i * j + <span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           str += <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="built_in">console</span>.log(str);</span><br></pre></td></tr></table></figure><h2 id="for-in-语句"><a href="#for-in-语句" class="headerlink" title="for-in 语句"></a>for-in 语句</h2><h5 id="for-in-语句是一种严格的迭代语句，用于枚举对象中的非符号键属性"><a href="#for-in-语句是一种严格的迭代语句，用于枚举对象中的非符号键属性" class="headerlink" title="for-in 语句是一种严格的迭代语句，用于枚举对象中的非符号键属性"></a>for-in 语句是一种严格的迭代语句，用于枚举对象中的非符号键属性</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> obj) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(k); <span class="comment">// k 变量 输出  得到的是 属性名</span></span><br><span class="line">            <span class="built_in">console</span>.log(obj[k]); <span class="comment">// obj[k] 得到是 属性值</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 我们使用 for in 里面的变量 我们喜欢写 k  或者  key</span></span><br></pre></td></tr></table></figure><h5 id="ECMAScript-中对象的属性是无序的，因此-for-in-语句不能保证返回对象属性的顺序。换句话说，所有可枚举的属性都会返回一次，但返回的顺序可能会因浏览器而异。"><a href="#ECMAScript-中对象的属性是无序的，因此-for-in-语句不能保证返回对象属性的顺序。换句话说，所有可枚举的属性都会返回一次，但返回的顺序可能会因浏览器而异。" class="headerlink" title="ECMAScript 中对象的属性是无序的，因此 for-in 语句不能保证返回对象属性的顺序。换句话说，所有可枚举的属性都会返回一次，但返回的顺序可能会因浏览器而异。"></a>ECMAScript 中对象的属性是无序的，因此 for-in 语句不能保证返回对象属性的顺序。换句话说，所有可枚举的属性都会返回一次，但返回的顺序可能会因浏览器而异。</h5><h5 id="如果-for-in-循环要迭代的变量是-null-或-undefined，则不执行循环体。"><a href="#如果-for-in-循环要迭代的变量是-null-或-undefined，则不执行循环体。" class="headerlink" title="如果 for-in 循环要迭代的变量是 null 或 undefined，则不执行循环体。"></a>如果 for-in 循环要迭代的变量是 null 或 undefined，则不执行循环体。</h5><h2 id="for-of-语句"><a href="#for-of-语句" class="headerlink" title="for-of 语句"></a>for-of 语句</h2><h5 id="for-of-语句是一种严格的迭代语句，用于遍历可迭代对象的元素"><a href="#for-of-语句是一种严格的迭代语句，用于遍历可迭代对象的元素" class="headerlink" title="for-of 语句是一种严格的迭代语句，用于遍历可迭代对象的元素"></a>for-of 语句是一种严格的迭代语句，用于遍历可迭代对象的元素</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> el <span class="keyword">of</span> [<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>]) &#123;</span><br><span class="line"> <span class="built_in">document</span>.write(el);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h5 id="我们使用-for-of-语句显示了一个包含-4-个元素的数组中的所有元素。循环会一直持续到将所有元素都迭代完。与-for-循环一样，这里控制语句中的-const-也不是必需的。但为了确保这个局部变量不被修改，推荐使用-const。"><a href="#我们使用-for-of-语句显示了一个包含-4-个元素的数组中的所有元素。循环会一直持续到将所有元素都迭代完。与-for-循环一样，这里控制语句中的-const-也不是必需的。但为了确保这个局部变量不被修改，推荐使用-const。" class="headerlink" title="我们使用 for-of 语句显示了一个包含 4 个元素的数组中的所有元素。循环会一直持续到将所有元素都迭代完。与 for 循环一样，这里控制语句中的 const 也不是必需的。但为了确保这个局部变量不被修改，推荐使用 const。"></a>我们使用 for-of 语句显示了一个包含 4 个元素的数组中的所有元素。循环会一直持续到将所有元素都迭代完。与 for 循环一样，这里控制语句中的 const 也不是必需的。但为了确保这个局部变量不被修改，推荐使用 const。</h5><h5 id="for-of-循环会按照可迭代对象的-next-方法产生值的顺序迭代元素。"><a href="#for-of-循环会按照可迭代对象的-next-方法产生值的顺序迭代元素。" class="headerlink" title="for-of 循环会按照可迭代对象的 next()方法产生值的顺序迭代元素。"></a>for-of 循环会按照可迭代对象的 next()方法产生值的顺序迭代元素。</h5><h2 id="标签语句"><a href="#标签语句" class="headerlink" title="标签语句"></a>标签语句</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">start: <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line"> <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h5 id="在这个例子中，start-是一个标签，可以在后面通过-break-或-continue-语句引用。标签语句的典型应用场景是嵌套循环。"><a href="#在这个例子中，start-是一个标签，可以在后面通过-break-或-continue-语句引用。标签语句的典型应用场景是嵌套循环。" class="headerlink" title="在这个例子中，start 是一个标签，可以在后面通过 break 或 continue 语句引用。标签语句的典型应用场景是嵌套循环。"></a>在这个例子中，start 是一个标签，可以在后面通过 break 或 continue 语句引用。标签语句的典型应用场景是嵌套循环。</h5><h2 id="break-和-continue-语句"><a href="#break-和-continue-语句" class="headerlink" title="break 和 continue 语句"></a>break 和 continue 语句</h2><h5 id="break-和-continue-语句为执行循环代码提供了更严格的控制手段。"><a href="#break-和-continue-语句为执行循环代码提供了更严格的控制手段。" class="headerlink" title="break 和 continue 语句为执行循环代码提供了更严格的控制手段。"></a>break 和 continue 语句为执行循环代码提供了更严格的控制手段。</h5><h5 id="break-语句用于立即退出循环，强制执行循环后的下一条语句。"><a href="#break-语句用于立即退出循环，强制执行循环后的下一条语句。" class="headerlink" title="break 语句用于立即退出循环，强制执行循环后的下一条语句。"></a>break 语句用于立即退出循环，强制执行循环后的下一条语句。</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// break 退出整个循环</span></span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">           <span class="keyword">if</span> (i == <span class="number">3</span>) &#123;</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="built_in">console</span>.log(<span class="string">&#x27;我正在吃第&#x27;</span> + i + <span class="string">&#x27;个包子&#x27;</span>);</span><br><span class="line">           <span class="comment">//1、2</span></span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="continue-语句也用于立即退出循环，但会再次从循环顶部开始执行。"><a href="#continue-语句也用于立即退出循环，但会再次从循环顶部开始执行。" class="headerlink" title="continue 语句也用于立即退出循环，但会再次从循环顶部开始执行。"></a>continue 语句也用于立即退出循环，但会再次从循环顶部开始执行。</h5> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// continue 关键字   退出本次（当前次的循环）  继续执行剩余次数循环</span></span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">           <span class="keyword">if</span> (i == <span class="number">3</span>) &#123;</span><br><span class="line">               <span class="keyword">continue</span>; <span class="comment">// 只要遇见 continue就退出本次循环 直接跳到 i++</span></span><br><span class="line">           &#125;</span><br><span class="line">           <span class="built_in">console</span>.log(<span class="string">&#x27;我正在吃第&#x27;</span> + i + <span class="string">&#x27;个包子&#x27;</span>);</span><br><span class="line">            <span class="comment">//1、2、4、5</span></span><br><span class="line"></span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><h2 id="with-语句"><a href="#with-语句" class="headerlink" title="with 语句"></a>with 语句</h2><h5 id="with-语句的用途是将代码作用域设置为特定的对象"><a href="#with-语句的用途是将代码作用域设置为特定的对象" class="headerlink" title="with 语句的用途是将代码作用域设置为特定的对象"></a>with 语句的用途是将代码作用域设置为特定的对象</h5> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> qs = location.search.substring(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">let</span> hostName = location.hostname;</span><br><span class="line"><span class="keyword">let</span> url = location.href;</span><br></pre></td></tr></table></figure><h5 id="上面代码中的每一行都用到了-location-对象。如果使用-with-语句，就可以少写一些代码："><a href="#上面代码中的每一行都用到了-location-对象。如果使用-with-语句，就可以少写一些代码：" class="headerlink" title="上面代码中的每一行都用到了 location 对象。如果使用 with 语句，就可以少写一些代码："></a>上面代码中的每一行都用到了 location 对象。如果使用 with 语句，就可以少写一些代码：</h5> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span>(location) &#123;</span><br><span class="line"> <span class="keyword">let</span> qs = search.substring(<span class="number">1</span>);</span><br><span class="line"> <span class="keyword">let</span> hostName = hostname;</span><br><span class="line"> <span class="keyword">let</span> url = href;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="警告-由于-with-语句影响性能且难于调试其中的代码，通常不推荐在产品代码中使用-with语句"><a href="#警告-由于-with-语句影响性能且难于调试其中的代码，通常不推荐在产品代码中使用-with语句" class="headerlink" title="警告 由于 with 语句影响性能且难于调试其中的代码，通常不推荐在产品代码中使用 with语句"></a>警告 由于 with 语句影响性能且难于调试其中的代码，通常不推荐在产品代码中使用 with语句</h3><h2 id="switch-语句"><a href="#switch-语句" class="headerlink" title="switch 语句"></a>switch 语句</h2><h5 id="switch-语句是与-if-语句紧密相关的一种流控制语句，从其他语言借鉴而来。ECMAScript中-switch语句跟-C-语言中-switch-语句的语法非常相似"><a href="#switch-语句是与-if-语句紧密相关的一种流控制语句，从其他语言借鉴而来。ECMAScript中-switch语句跟-C-语言中-switch-语句的语法非常相似" class="headerlink" title="switch 语句是与 if 语句紧密相关的一种流控制语句，从其他语言借鉴而来。ECMAScript中 switch语句跟 C 语言中 switch 语句的语法非常相似"></a>switch 语句是与 if 语句紧密相关的一种流控制语句，从其他语言借鉴而来。ECMAScript中 switch语句跟 C 语言中 switch 语句的语法非常相似</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (表达式) &#123;</span><br><span class="line">           <span class="keyword">case</span> value1:</span><br><span class="line">                执行语句<span class="number">1</span>;</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           <span class="keyword">case</span> value2:</span><br><span class="line">               执行语句<span class="number">2</span>;</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">               ...</span><br><span class="line">               <span class="keyword">default</span>:</span><br><span class="line">                   执行最后的语句;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h3 id="注意-switch-语句在比较每个条件的值时会使用全等操作符，因此不会强制转换数据类型（比如，字符串”10”不等于数值-10）。"><a href="#注意-switch-语句在比较每个条件的值时会使用全等操作符，因此不会强制转换数据类型（比如，字符串”10”不等于数值-10）。" class="headerlink" title="注意 switch 语句在比较每个条件的值时会使用全等操作符，因此不会强制转换数据类型（比如，字符串”10”不等于数值 10）。"></a>注意 switch 语句在比较每个条件的值时会使用全等操作符，因此不会强制转换数据类型（比如，字符串”10”不等于数值 10）。</h3><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h5 id="函数对任何语言来说都是核心组件，因为它们可以封装语句，然后在任何地方、任何时间执行。ECMAScript-中的函数使用-function-关键字声明，后跟一组参数，然后是函数体。"><a href="#函数对任何语言来说都是核心组件，因为它们可以封装语句，然后在任何地方、任何时间执行。ECMAScript-中的函数使用-function-关键字声明，后跟一组参数，然后是函数体。" class="headerlink" title="函数对任何语言来说都是核心组件，因为它们可以封装语句，然后在任何地方、任何时间执行。ECMAScript 中的函数使用 function 关键字声明，后跟一组参数，然后是函数体。"></a>函数对任何语言来说都是核心组件，因为它们可以封装语句，然后在任何地方、任何时间执行。ECMAScript 中的函数使用 function 关键字声明，后跟一组参数，然后是函数体。</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//声明一个函数</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">myfun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">             alert(<span class="string">&quot;我是一个函数&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">         <span class="comment">//函数的调用</span></span><br><span class="line">         myfun();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 声明一个带有参数的函数</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> sum = (num1 + num2);</span><br><span class="line">            <span class="keyword">return</span> sum;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(add(<span class="number">3</span>, <span class="number">5</span>));</span><br><span class="line">        <span class="built_in">console</span>.log(add(<span class="number">99</span>, <span class="number">1</span>));</span><br><span class="line">        <span class="built_in">console</span>.log(add(<span class="number">-15</span>, <span class="number">6</span>));</span><br></pre></td></tr></table></figure><h3 id="注意-最佳实践是函数要么返回值，要么不返回值。只在某个条件下返回值的函数会带来麻烦，尤其是调试时。"><a href="#注意-最佳实践是函数要么返回值，要么不返回值。只在某个条件下返回值的函数会带来麻烦，尤其是调试时。" class="headerlink" title="注意 最佳实践是函数要么返回值，要么不返回值。只在某个条件下返回值的函数会带来麻烦，尤其是调试时。"></a>注意 最佳实践是函数要么返回值，要么不返回值。只在某个条件下返回值的函数会带来麻烦，尤其是调试时。</h3><h4 id="利用函数冒泡排序"><a href="#利用函数冒泡排序" class="headerlink" title="利用函数冒泡排序"></a>利用函数冒泡排序</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">zeroone</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">               <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; arr.length - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">                   <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                       <span class="keyword">var</span> temp = arr[j];</span><br><span class="line">                       arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                       arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> arr;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="keyword">var</span> arr1 = zeroone([<span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">9</span>]);</span><br><span class="line">       <span class="built_in">console</span>.log(arr1);</span><br><span class="line">       <span class="keyword">var</span> arr2 = zeroone([<span class="number">11</span>, <span class="number">7</span>, <span class="number">22</span>, <span class="number">999</span>]);</span><br><span class="line">       <span class="built_in">console</span>.log(arr2);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;语句&quot;&gt;&lt;a href=&quot;#语句&quot; class=&quot;headerlink&quot; title=&quot;语句&quot;&gt;&lt;/a&gt;语句&lt;/h1&gt;&lt;h4 id=&quot;ECMA-262-描述了一些语句（也称为流控制语句），而-ECMAScript-中的大部分语法都体现在语句中。语句通常使用一或多个</summary>
      
    
    
    
    <category term="JavaScript红宝书" scheme="http://example.com/categories/JavaScript%E7%BA%A2%E5%AE%9D%E4%B9%A6/"/>
    
    
    <category term="语句" scheme="http://example.com/tags/%E8%AF%AD%E5%8F%A5/"/>
    
  </entry>
  
  <entry>
    <title>JS红宝书之操作符</title>
    <link href="http://example.com/2020/10/16/%E7%BA%A2%E5%AE%9D%E4%B9%A64/"/>
    <id>http://example.com/2020/10/16/%E7%BA%A2%E5%AE%9D%E4%B9%A64/</id>
    <published>2020-10-16T05:06:43.000Z</published>
    <updated>2020-11-06T06:19:48.731Z</updated>
    
    <content type="html"><![CDATA[<h4 id="ECMA-262-描述了一组可用于操作数据值的操作符，包括数学操作符（如加、减）、位操作符、关系操作符和相等操作符等。ECMAScript-中的操作符是独特的，因为它们可用于各种值，包括字符串、数值、布尔值，甚至还有对象。在应用给对象时，操作符通常会调用-valueOf-和-或-toString-方法来取得可以计算的值"><a href="#ECMA-262-描述了一组可用于操作数据值的操作符，包括数学操作符（如加、减）、位操作符、关系操作符和相等操作符等。ECMAScript-中的操作符是独特的，因为它们可用于各种值，包括字符串、数值、布尔值，甚至还有对象。在应用给对象时，操作符通常会调用-valueOf-和-或-toString-方法来取得可以计算的值" class="headerlink" title="ECMA-262 描述了一组可用于操作数据值的操作符，包括数学操作符（如加、减）、位操作符、关系操作符和相等操作符等。ECMAScript 中的操作符是独特的，因为它们可用于各种值，包括字符串、数值、布尔值，甚至还有对象。在应用给对象时，操作符通常会调用 valueOf()和/或 toString()方法来取得可以计算的值"></a>ECMA-262 描述了一组可用于操作数据值的操作符，包括数学操作符（如加、减）、位操作符、关系操作符和相等操作符等。ECMAScript 中的操作符是独特的，因为它们可用于各种值，包括字符串、数值、布尔值，甚至还有对象。在应用给对象时，操作符通常会调用 valueOf()和/或 toString()方法来取得可以计算的值</h4><h2 id="一元操作符"><a href="#一元操作符" class="headerlink" title="一元操作符"></a>一元操作符</h2><h4 id="只操作一个值的操作符叫一元操作符（unary-operator）。一元操作符是-ECMAScript中最简单的操作符。"><a href="#只操作一个值的操作符叫一元操作符（unary-operator）。一元操作符是-ECMAScript中最简单的操作符。" class="headerlink" title="只操作一个值的操作符叫一元操作符（unary operator）。一元操作符是 ECMAScript中最简单的操作符。"></a>只操作一个值的操作符叫一元操作符（unary operator）。一元操作符是 ECMAScript中最简单的操作符。</h4><h3 id="1-递增-递减操作符"><a href="#1-递增-递减操作符" class="headerlink" title="1. 递增/递减操作符"></a>1. 递增/递减操作符</h3><h5 id="递增和递减操作符直接照搬自-C-语言，但有两个版本：前缀版和后缀版。顾名思义，前缀版就是位于要操作的变量前头，后缀版就是位于要操作的变量后头。前缀递增操作符会给数值加-1，把两个加号（-）放到变量前头即可"><a href="#递增和递减操作符直接照搬自-C-语言，但有两个版本：前缀版和后缀版。顾名思义，前缀版就是位于要操作的变量前头，后缀版就是位于要操作的变量后头。前缀递增操作符会给数值加-1，把两个加号（-）放到变量前头即可" class="headerlink" title="递增和递减操作符直接照搬自 C 语言，但有两个版本：前缀版和后缀版。顾名思义，前缀版就是位于要操作的变量前头，后缀版就是位于要操作的变量后头。前缀递增操作符会给数值加 1，把两个加号（++）放到变量前头即可"></a>递增和递减操作符直接照搬自 C 语言，但有两个版本：前缀版和后缀版。顾名思义，前缀版就是位于要操作的变量前头，后缀版就是位于要操作的变量后头。前缀递增操作符会给数值加 1，把两个加号（++）放到变量前头即可</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">：<span class="keyword">let</span> age = <span class="number">29</span>;</span><br><span class="line">++age; </span><br></pre></td></tr></table></figure><h5 id="在这个例子中，前缀递增操作符把-age-的值变成了-30（给之前的值-29-加-1）。因此，它实际上等于如下表达式："><a href="#在这个例子中，前缀递增操作符把-age-的值变成了-30（给之前的值-29-加-1）。因此，它实际上等于如下表达式：" class="headerlink" title="在这个例子中，前缀递增操作符把 age 的值变成了 30（给之前的值 29 加 1）。因此，它实际上等于如下表达式："></a>在这个例子中，前缀递增操作符把 age 的值变成了 30（给之前的值 29 加 1）。因此，它实际上等于如下表达式：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> age = <span class="number">29</span>;</span><br><span class="line">age = age + <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h5 id="前缀递减操作符也类似，只不过是从一个数值减-1。使用前缀递减操作符，只要把两个减号（–）放到变量前头即可："><a href="#前缀递减操作符也类似，只不过是从一个数值减-1。使用前缀递减操作符，只要把两个减号（–）放到变量前头即可：" class="headerlink" title="前缀递减操作符也类似，只不过是从一个数值减 1。使用前缀递减操作符，只要把两个减号（–）放到变量前头即可："></a>前缀递减操作符也类似，只不过是从一个数值减 1。使用前缀递减操作符，只要把两个减号（–）放到变量前头即可：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> age = <span class="number">29</span>;</span><br><span class="line">--age;</span><br></pre></td></tr></table></figure><h5 id="执行操作后，变量-age-的值变成了-28（从-29-减-1）。"><a href="#执行操作后，变量-age-的值变成了-28（从-29-减-1）。" class="headerlink" title="执行操作后，变量 age 的值变成了 28（从 29 减 1）。"></a>执行操作后，变量 age 的值变成了 28（从 29 减 1）。</h5><h5 id="无论使用前缀递增还是前缀递减操作符，变量的值都会在语句被求值之前改变。（在计算机科学中，这通常被称为具有副作用。）请看下面的例子："><a href="#无论使用前缀递增还是前缀递减操作符，变量的值都会在语句被求值之前改变。（在计算机科学中，这通常被称为具有副作用。）请看下面的例子：" class="headerlink" title="无论使用前缀递增还是前缀递减操作符，变量的值都会在语句被求值之前改变。（在计算机科学中，这通常被称为具有副作用。）请看下面的例子："></a>无论使用前缀递增还是前缀递减操作符，变量的值都会在语句被求值之前改变。（在计算机科学中，这通常被称为具有副作用。）请看下面的例子：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> age = <span class="number">29</span>;</span><br><span class="line"><span class="keyword">let</span> anotherAge = --age + <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(age); <span class="comment">// 28</span></span><br><span class="line"><span class="built_in">console</span>.log(anotherAge); <span class="comment">// 30 </span></span><br></pre></td></tr></table></figure><h5 id="在这个例子中，变量-anotherAge-以-age-减-1-后的值再加-2-进行初始化。因为递减操作先发生，所以-age-的值先变成-28，然后再加-2，结果是-30。前缀递增和递减在语句中的优先级是相等的，因此会从左到右依次求值。比如："><a href="#在这个例子中，变量-anotherAge-以-age-减-1-后的值再加-2-进行初始化。因为递减操作先发生，所以-age-的值先变成-28，然后再加-2，结果是-30。前缀递增和递减在语句中的优先级是相等的，因此会从左到右依次求值。比如：" class="headerlink" title="在这个例子中，变量 anotherAge 以 age 减 1 后的值再加 2 进行初始化。因为递减操作先发生，所以 age 的值先变成 28，然后再加 2，结果是 30。前缀递增和递减在语句中的优先级是相等的，因此会从左到右依次求值。比如："></a>在这个例子中，变量 anotherAge 以 age 减 1 后的值再加 2 进行初始化。因为递减操作先发生，所以 age 的值先变成 28，然后再加 2，结果是 30。前缀递增和递减在语句中的优先级是相等的，因此会从左到右依次求值。比如：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num1 = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">let</span> num2 = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">let</span> num3 = --num1 + num2;</span><br><span class="line"><span class="keyword">let</span> num4 = num1 + num2;</span><br><span class="line"><span class="built_in">console</span>.log(num3); <span class="comment">// 21</span></span><br><span class="line"><span class="built_in">console</span>.log(num4); <span class="comment">// 21 </span></span><br></pre></td></tr></table></figure><h5 id="这里，num3-等于-21-是因为-num1-先减-1-之后才加-num2。变量-num4-也是-21，那是因为加法使用的也是递减后的值。"><a href="#这里，num3-等于-21-是因为-num1-先减-1-之后才加-num2。变量-num4-也是-21，那是因为加法使用的也是递减后的值。" class="headerlink" title="这里，num3 等于 21 是因为 num1 先减 1 之后才加 num2。变量 num4 也是 21，那是因为加法使用的也是递减后的值。"></a>这里，num3 等于 21 是因为 num1 先减 1 之后才加 num2。变量 num4 也是 21，那是因为加法使用的也是递减后的值。</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> age = <span class="number">29</span>;</span><br><span class="line">age++; </span><br></pre></td></tr></table></figure><h5 id="把递增操作符放到变量后面不会改变语句执行的结果，因为递增是唯一的操作。可是，在跟其他操作混合时，差异就会变明显，比如："><a href="#把递增操作符放到变量后面不会改变语句执行的结果，因为递增是唯一的操作。可是，在跟其他操作混合时，差异就会变明显，比如：" class="headerlink" title="把递增操作符放到变量后面不会改变语句执行的结果，因为递增是唯一的操作。可是，在跟其他操作混合时，差异就会变明显，比如："></a>把递增操作符放到变量后面不会改变语句执行的结果，因为递增是唯一的操作。可是，在跟其他操作混合时，差异就会变明显，比如：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num1 = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">let</span> num2 = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">let</span> num3 = num1-- + num2;</span><br><span class="line"><span class="keyword">let</span> num4 = num1 + num2; </span><br><span class="line"><span class="built_in">console</span>.log(num3); <span class="comment">// 22</span></span><br><span class="line"><span class="built_in">console</span>.log(num4); <span class="comment">// 21 </span></span><br></pre></td></tr></table></figure><h5 id="这个例子跟前面的那个一样，只是把前缀递减改成了后缀递减，区别很明显。在使用前缀版的例子中，num3-和-num4-的值都是-21。而在这个例子中，num3-的值是-22，num4-的值是-21。这里的不同之处在于，计算-num3-时使用的是-num1-的原始值（2），而计算-num4-时使用的是-num1-递减后的值"><a href="#这个例子跟前面的那个一样，只是把前缀递减改成了后缀递减，区别很明显。在使用前缀版的例子中，num3-和-num4-的值都是-21。而在这个例子中，num3-的值是-22，num4-的值是-21。这里的不同之处在于，计算-num3-时使用的是-num1-的原始值（2），而计算-num4-时使用的是-num1-递减后的值" class="headerlink" title="这个例子跟前面的那个一样，只是把前缀递减改成了后缀递减，区别很明显。在使用前缀版的例子中，num3 和 num4 的值都是 21。而在这个例子中，num3 的值是 22，num4 的值是 21。这里的不同之处在于，计算 num3 时使用的是 num1 的原始值（2），而计算 num4 时使用的是 num1 递减后的值"></a>这个例子跟前面的那个一样，只是把前缀递减改成了后缀递减，区别很明显。在使用前缀版的例子中，num3 和 num4 的值都是 21。而在这个例子中，num3 的值是 22，num4 的值是 21。这里的不同之处在于，计算 num3 时使用的是 num1 的原始值（2），而计算 num4 时使用的是 num1 递减后的值</h5><h4 id="这-4-个操作符可以作用于任何值，意思是不限于整数——字符串、布尔值、浮点值，甚至对象都可以。递增和递减操作符遵循如下规则。"><a href="#这-4-个操作符可以作用于任何值，意思是不限于整数——字符串、布尔值、浮点值，甚至对象都可以。递增和递减操作符遵循如下规则。" class="headerlink" title="这 4 个操作符可以作用于任何值，意思是不限于整数——字符串、布尔值、浮点值，甚至对象都可以。递增和递减操作符遵循如下规则。"></a>这 4 个操作符可以作用于任何值，意思是不限于整数——字符串、布尔值、浮点值，甚至对象都可以。递增和递减操作符遵循如下规则。</h4><ol><li>对于字符串，如果是有效的数值形式，则转换为数值再应用改变。变量类型从字符串变成数值。</li><li>对于字符串，如果不是有效的数值形式，则将变量的值设置为 NaN 。变量类型从字符串变成<br>数值。</li><li>对于布尔值，如果是 false，则转换为 0 再应用改变。变量类型从布尔值变成数值。</li><li>对于布尔值，如果是 true，则转换为 1 再应用改变。变量类型从布尔值变成数值。</li><li>对于浮点值，加 1 或减 1。</li><li>如果是对象，则调用其（第 5 章会详细介绍的）valueOf()方法取得可以操作的值。对得到的<br>值应用上述规则。如果是 NaN，则调用 toString()并再次应用其他规则。变量类型从对象变成<br>数值。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s1 = <span class="string">&quot;2&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> s2 = <span class="string">&quot;z&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">let</span> f = <span class="number">1.1</span>;</span><br><span class="line"><span class="keyword">let</span> o = &#123;</span><br><span class="line"> valueOf() &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;;</span><br><span class="line">s1++; <span class="comment">// 值变成数值 3</span></span><br><span class="line">s2++; <span class="comment">// 值变成 NaN</span></span><br><span class="line">b++; <span class="comment">// 值变成数值 1</span></span><br><span class="line">f--; <span class="comment">// 值变成 0.10000000000000009（因为浮点数不精确）</span></span><br><span class="line">o--; <span class="comment">// 值变成-2 </span></span><br></pre></td></tr></table></figure></li></ol><h3 id="2-一元加和减"><a href="#2-一元加和减" class="headerlink" title="2. 一元加和减"></a>2. 一元加和减</h3><h5 id="一元加和减操作符对大多数开发者来说并不陌生，它们在-ECMAScript-中跟在高中数学中的用途一样。一元加由一个加号（-）表示，放在变量前头，对数值没有任何影响："><a href="#一元加和减操作符对大多数开发者来说并不陌生，它们在-ECMAScript-中跟在高中数学中的用途一样。一元加由一个加号（-）表示，放在变量前头，对数值没有任何影响：" class="headerlink" title="一元加和减操作符对大多数开发者来说并不陌生，它们在 ECMAScript 中跟在高中数学中的用途一样。一元加由一个加号（+）表示，放在变量前头，对数值没有任何影响："></a>一元加和减操作符对大多数开发者来说并不陌生，它们在 ECMAScript 中跟在高中数学中的用途一样。一元加由一个加号（+）表示，放在变量前头，对数值没有任何影响：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s1 = <span class="string">&quot;01&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> s2 = <span class="string">&quot;1.1&quot;</span>; </span><br><span class="line"><span class="keyword">let</span> s3 = <span class="string">&quot;z&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">let</span> f = <span class="number">1.1</span>;</span><br><span class="line"><span class="keyword">let</span> o = &#123;</span><br><span class="line"> valueOf() &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;;</span><br><span class="line">s1 = +s1; <span class="comment">// 值变成数值 1</span></span><br><span class="line">s2 = +s2; <span class="comment">// 值变成数值 1.1</span></span><br><span class="line">s3 = +s3; <span class="comment">// 值变成 NaN</span></span><br><span class="line">b = +b; <span class="comment">// 值变成数值 0</span></span><br><span class="line">f = +f; <span class="comment">// 不变，还是 1.1</span></span><br><span class="line">o = +o; <span class="comment">// 值变成数值-1 </span></span><br></pre></td></tr></table></figure><h5 id="对数值使用一元减会将其变成相应的负值（如上面的例子所示）。在应用到非数值时，一元减会遵循与一元加同样的规则，先对它们进行转换，然后再取负值："><a href="#对数值使用一元减会将其变成相应的负值（如上面的例子所示）。在应用到非数值时，一元减会遵循与一元加同样的规则，先对它们进行转换，然后再取负值：" class="headerlink" title="对数值使用一元减会将其变成相应的负值（如上面的例子所示）。在应用到非数值时，一元减会遵循与一元加同样的规则，先对它们进行转换，然后再取负值："></a>对数值使用一元减会将其变成相应的负值（如上面的例子所示）。在应用到非数值时，一元减会遵循与一元加同样的规则，先对它们进行转换，然后再取负值：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s1 = <span class="string">&quot;01&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> s2 = <span class="string">&quot;1.1&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> s3 = <span class="string">&quot;z&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">let</span> f = <span class="number">1.1</span>;</span><br><span class="line"><span class="keyword">let</span> o = &#123;</span><br><span class="line"> valueOf() &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;;</span><br><span class="line">s1 = -s1; <span class="comment">// 值变成数值-1</span></span><br><span class="line">s2 = -s2; <span class="comment">// 值变成数值-1.1</span></span><br><span class="line">s3 = -s3; <span class="comment">// 值变成 NaN</span></span><br><span class="line">b = -b; <span class="comment">// 值变成数值 0</span></span><br><span class="line">f = -f; <span class="comment">// 变成-1.1</span></span><br><span class="line">o = -o; <span class="comment">// 值变成数值 1 </span></span><br></pre></td></tr></table></figure><h3 id="布尔操作符"><a href="#布尔操作符" class="headerlink" title="布尔操作符"></a>布尔操作符</h3><h5 id="对于编程语言来说，布尔操作符跟相等操作符几乎同样重要。如果没有能力测试两个值的关系，那么像-if-else-和循环这样的语句也没什么用了。布尔操作符一共有-3-个：逻辑非、逻辑与和逻辑或。"><a href="#对于编程语言来说，布尔操作符跟相等操作符几乎同样重要。如果没有能力测试两个值的关系，那么像-if-else-和循环这样的语句也没什么用了。布尔操作符一共有-3-个：逻辑非、逻辑与和逻辑或。" class="headerlink" title="对于编程语言来说，布尔操作符跟相等操作符几乎同样重要。如果没有能力测试两个值的关系，那么像 if-else 和循环这样的语句也没什么用了。布尔操作符一共有 3 个：逻辑非、逻辑与和逻辑或。"></a>对于编程语言来说，布尔操作符跟相等操作符几乎同样重要。如果没有能力测试两个值的关系，那么像 if-else 和循环这样的语句也没什么用了。布尔操作符一共有 3 个：逻辑非、逻辑与和逻辑或。</h5><h4 id="1-逻辑非"><a href="#1-逻辑非" class="headerlink" title="1. 逻辑非"></a>1. 逻辑非</h4><h5 id="逻辑非操作符由一个叹号（-）表示，可应用给-ECMAScript-中的任何值。这个操作符始终返回布尔值，无论应用到的是什么数据类型。逻辑非操作符首先将操作数转换为布尔值，然后再对其取反。换句话说，逻辑非操作符会遵循如下规则。"><a href="#逻辑非操作符由一个叹号（-）表示，可应用给-ECMAScript-中的任何值。这个操作符始终返回布尔值，无论应用到的是什么数据类型。逻辑非操作符首先将操作数转换为布尔值，然后再对其取反。换句话说，逻辑非操作符会遵循如下规则。" class="headerlink" title="逻辑非操作符由一个叹号（!）表示，可应用给 ECMAScript 中的任何值。这个操作符始终返回布尔值，无论应用到的是什么数据类型。逻辑非操作符首先将操作数转换为布尔值，然后再对其取反。换句话说，逻辑非操作符会遵循如下规则。"></a>逻辑非操作符由一个叹号（!）表示，可应用给 ECMAScript 中的任何值。这个操作符始终返回布尔值，无论应用到的是什么数据类型。逻辑非操作符首先将操作数转换为布尔值，然后再对其取反。换句话说，逻辑非操作符会遵循如下规则。</h5><h4 id="2-逻辑与"><a href="#2-逻辑与" class="headerlink" title="2. 逻辑与"></a>2. 逻辑与</h4><h5 id="逻辑与操作逻辑与操作符由两个和号（-amp-amp-）表示，应用到两个值，逻辑与操作符可用于任何类型的操作数，不限于布尔值。如果有操作数不是布尔值，则逻辑与并不一定会返回布尔值，逻辑与操作符是一种短路操作符，意思就是如果第一个操作数决定了结果，那么永远不会对第二个操作数求值。对逻辑与操作符来说，如果第一个操作数是-false，那么无论第二个操作数是什么值，结果也不可能等于-true。"><a href="#逻辑与操作逻辑与操作符由两个和号（-amp-amp-）表示，应用到两个值，逻辑与操作符可用于任何类型的操作数，不限于布尔值。如果有操作数不是布尔值，则逻辑与并不一定会返回布尔值，逻辑与操作符是一种短路操作符，意思就是如果第一个操作数决定了结果，那么永远不会对第二个操作数求值。对逻辑与操作符来说，如果第一个操作数是-false，那么无论第二个操作数是什么值，结果也不可能等于-true。" class="headerlink" title="逻辑与操作逻辑与操作符由两个和号（&amp;&amp;）表示，应用到两个值，逻辑与操作符可用于任何类型的操作数，不限于布尔值。如果有操作数不是布尔值，则逻辑与并不一定会返回布尔值，逻辑与操作符是一种短路操作符，意思就是如果第一个操作数决定了结果，那么永远不会对第二个操作数求值。对逻辑与操作符来说，如果第一个操作数是 false，那么无论第二个操作数是什么值，结果也不可能等于 true。"></a>逻辑与操作逻辑与操作符由两个和号（&amp;&amp;）表示，应用到两个值，逻辑与操作符可用于任何类型的操作数，不限于布尔值。如果有操作数不是布尔值，则逻辑与并不一定会返回布尔值，逻辑与操作符是一种短路操作符，意思就是如果第一个操作数决定了结果，那么永远不会对第二个操作数求值。对逻辑与操作符来说，如果第一个操作数是 false，那么无论第二个操作数是什么值，结果也不可能等于 true。</h5><h4 id="3-逻辑或"><a href="#3-逻辑或" class="headerlink" title="3. 逻辑或"></a>3. 逻辑或</h4><h5 id="逻辑或操作符由两个管道符（-）表示，与逻辑与类似，如果有一个操作数不是布尔值，那么逻辑或操作符也不一定返回布尔值。"><a href="#逻辑或操作符由两个管道符（-）表示，与逻辑与类似，如果有一个操作数不是布尔值，那么逻辑或操作符也不一定返回布尔值。" class="headerlink" title="逻辑或操作符由两个管道符（||）表示，与逻辑与类似，如果有一个操作数不是布尔值，那么逻辑或操作符也不一定返回布尔值。"></a>逻辑或操作符由两个管道符（||）表示，与逻辑与类似，如果有一个操作数不是布尔值，那么逻辑或操作符也不一定返回布尔值。</h5><h3 id="乘性操作符"><a href="#乘性操作符" class="headerlink" title="乘性操作符"></a>乘性操作符</h3><h4 id="1-乘法操作符"><a href="#1-乘法操作符" class="headerlink" title="1. 乘法操作符"></a>1. 乘法操作符</h4><h5 id="乘法操作符由一个星号（-）表示，可以用于计算两个数值的乘积。其语法类似于-C-语言，比如："><a href="#乘法操作符由一个星号（-）表示，可以用于计算两个数值的乘积。其语法类似于-C-语言，比如：" class="headerlink" title="乘法操作符由一个星号（*）表示，可以用于计算两个数值的乘积。其语法类似于 C 语言，比如："></a>乘法操作符由一个星号（*）表示，可以用于计算两个数值的乘积。其语法类似于 C 语言，比如：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result = <span class="number">34</span> * <span class="number">56</span>; </span><br></pre></td></tr></table></figure><h4 id="2-除法操作符"><a href="#2-除法操作符" class="headerlink" title="2. 除法操作符"></a>2. 除法操作符</h4><h5 id="除法操作符由一个斜杠（-）表示，用于计算第一个操作数除以第二个操作数的商，比如："><a href="#除法操作符由一个斜杠（-）表示，用于计算第一个操作数除以第二个操作数的商，比如：" class="headerlink" title="除法操作符由一个斜杠（/）表示，用于计算第一个操作数除以第二个操作数的商，比如："></a>除法操作符由一个斜杠（/）表示，用于计算第一个操作数除以第二个操作数的商，比如：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result = <span class="number">66</span> / <span class="number">11</span>; </span><br></pre></td></tr></table></figure><h4 id="取模操作符"><a href="#取模操作符" class="headerlink" title="取模操作符"></a>取模操作符</h4><h5 id="取模（余数）操作符由一个百分比符号（-）表示，比如："><a href="#取模（余数）操作符由一个百分比符号（-）表示，比如：" class="headerlink" title="取模（余数）操作符由一个百分比符号（%）表示，比如："></a>取模（余数）操作符由一个百分比符号（%）表示，比如：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result = <span class="number">26</span> % <span class="number">5</span>; <span class="comment">// 等于 1</span></span><br></pre></td></tr></table></figure><h4 id="指数操作符"><a href="#指数操作符" class="headerlink" title="指数操作符"></a>指数操作符</h4><h5 id="ECMAScript-7-新增了指数操作符，Math-pow-现在有了自己的操作符-，结果是一样的："><a href="#ECMAScript-7-新增了指数操作符，Math-pow-现在有了自己的操作符-，结果是一样的：" class="headerlink" title="ECMAScript 7 新增了指数操作符，Math.pow()现在有了自己的操作符**，结果是一样的："></a>ECMAScript 7 新增了指数操作符，Math.pow()现在有了自己的操作符**，结果是一样的：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.pow(<span class="number">3</span>, <span class="number">2</span>); <span class="comment">// 9</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">3</span> ** <span class="number">2</span>); <span class="comment">// 9</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.pow(<span class="number">16</span>, <span class="number">0.5</span>); <span class="comment">// 4</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">16</span>** <span class="number">0.5</span>); <span class="comment">// 4 </span></span><br></pre></td></tr></table></figure><h5 id="不仅如此，指数操作符也有自己的指数赋值操作符-，该操作符执行指数运算和结果的赋值操作："><a href="#不仅如此，指数操作符也有自己的指数赋值操作符-，该操作符执行指数运算和结果的赋值操作：" class="headerlink" title="不仅如此，指数操作符也有自己的指数赋值操作符**=，该操作符执行指数运算和结果的赋值操作："></a>不仅如此，指数操作符也有自己的指数赋值操作符**=，该操作符执行指数运算和结果的赋值操作：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> squared = <span class="number">3</span>;</span><br><span class="line">squared **= <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(squared); <span class="comment">// 9 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sqrt = <span class="number">16</span>;</span><br><span class="line">sqrt **= <span class="number">0.5</span>;</span><br><span class="line"><span class="built_in">console</span>.log(sqrt); <span class="comment">// 4 </span></span><br></pre></td></tr></table></figure><h4 id="加性操作符"><a href="#加性操作符" class="headerlink" title="加性操作符"></a>加性操作符</h4><h5 id="加法操作符（-）用于求两个数的和，比如："><a href="#加法操作符（-）用于求两个数的和，比如：" class="headerlink" title="加法操作符（+）用于求两个数的和，比如："></a>加法操作符（+）用于求两个数的和，比如：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result = <span class="number">1</span> + <span class="number">2</span>; </span><br></pre></td></tr></table></figure><h4 id="减法操作符"><a href="#减法操作符" class="headerlink" title="减法操作符"></a>减法操作符</h4><h5 id="减法操作符（-）也是使用很频繁的一种操作符，比如："><a href="#减法操作符（-）也是使用很频繁的一种操作符，比如：" class="headerlink" title="减法操作符（-）也是使用很频繁的一种操作符，比如："></a>减法操作符（-）也是使用很频繁的一种操作符，比如：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result = <span class="number">2</span> - <span class="number">1</span>; </span><br></pre></td></tr></table></figure><h3 id="关系操作符"><a href="#关系操作符" class="headerlink" title="关系操作符"></a>关系操作符</h3><h5 id="关系操作符执行比较两个值的操作，包括小于（-lt-）、大于（-gt-）、小于等于（-lt-）和大于等于（-gt-），用法跟数学课上学的一样。这几个操作符都返回布尔值"><a href="#关系操作符执行比较两个值的操作，包括小于（-lt-）、大于（-gt-）、小于等于（-lt-）和大于等于（-gt-），用法跟数学课上学的一样。这几个操作符都返回布尔值" class="headerlink" title="关系操作符执行比较两个值的操作，包括小于（&lt;）、大于（&gt;）、小于等于（&lt;=）和大于等于（&gt;=），用法跟数学课上学的一样。这几个操作符都返回布尔值"></a>关系操作符执行比较两个值的操作，包括小于（&lt;）、大于（&gt;）、小于等于（&lt;=）和大于等于（&gt;=），用法跟数学课上学的一样。这几个操作符都返回布尔值</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result1 = <span class="number">5</span> &gt; <span class="number">3</span>; <span class="comment">// true</span></span><br><span class="line"><span class="keyword">let</span> result2 = <span class="number">5</span> &lt; <span class="number">3</span>; <span class="comment">// false </span></span><br></pre></td></tr></table></figure><h3 id="相等操作符"><a href="#相等操作符" class="headerlink" title="相等操作符"></a>相等操作符</h3><h4 id="1-等于和不等于"><a href="#1-等于和不等于" class="headerlink" title="1. 等于和不等于"></a>1. 等于和不等于</h4><h5 id="ECMAScript-中的等于操作符用两个等于号（-）表示，如果操作数相等，则会返回-true。不等于操作符用叹号和等于号（-）表示，如果两个操作数不相等，则会返回-true。这两个操作符都会先进行类型转换（通常称为强制类型转换）再确定操作数是否相等。"><a href="#ECMAScript-中的等于操作符用两个等于号（-）表示，如果操作数相等，则会返回-true。不等于操作符用叹号和等于号（-）表示，如果两个操作数不相等，则会返回-true。这两个操作符都会先进行类型转换（通常称为强制类型转换）再确定操作数是否相等。" class="headerlink" title="ECMAScript 中的等于操作符用两个等于号（==）表示，如果操作数相等，则会返回 true。不等于操作符用叹号和等于号（!=）表示，如果两个操作数不相等，则会返回 true。这两个操作符都会先进行类型转换（通常称为强制类型转换）再确定操作数是否相等。"></a>ECMAScript 中的等于操作符用两个等于号（==）表示，如果操作数相等，则会返回 true。不等于操作符用叹号和等于号（!=）表示，如果两个操作数不相等，则会返回 true。这两个操作符都会先进行类型转换（通常称为强制类型转换）再确定操作数是否相等。</h5><h4 id="2-全等和不全等"><a href="#2-全等和不全等" class="headerlink" title="2. 全等和不全等"></a>2. 全等和不全等</h4><h5 id="全等和不全等操作符与相等和不相等操作符类似，只不过它们在比较相等时不转换操作数。全等操作符由-3-个等于号（-）表示，只有两个操作数在不转换的前提下相等才返回-true，"><a href="#全等和不全等操作符与相等和不相等操作符类似，只不过它们在比较相等时不转换操作数。全等操作符由-3-个等于号（-）表示，只有两个操作数在不转换的前提下相等才返回-true，" class="headerlink" title="全等和不全等操作符与相等和不相等操作符类似，只不过它们在比较相等时不转换操作数。全等操作符由 3 个等于号（===）表示，只有两个操作数在不转换的前提下相等才返回 true，"></a>全等和不全等操作符与相等和不相等操作符类似，只不过它们在比较相等时不转换操作数。全等操作符由 3 个等于号（===）表示，只有两个操作数在不转换的前提下相等才返回 true，</h5><h3 id="条件操作符"><a href="#条件操作符" class="headerlink" title="条件操作符"></a>条件操作符</h3><h5 id="条件操作符是-ECMAScript-中用途最为广泛的操作符之一，语法跟-Java-中一样："><a href="#条件操作符是-ECMAScript-中用途最为广泛的操作符之一，语法跟-Java-中一样：" class="headerlink" title="条件操作符是 ECMAScript 中用途最为广泛的操作符之一，语法跟 Java 中一样："></a>条件操作符是 ECMAScript 中用途最为广泛的操作符之一，语法跟 Java 中一样：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">variable = boolean_expression ? true_value : false_value;</span><br></pre></td></tr></table></figure><h5 id="上面的代码执行了条件赋值操作，即根据条件表达式-boolean-expression-的值决定将哪个值赋"><a href="#上面的代码执行了条件赋值操作，即根据条件表达式-boolean-expression-的值决定将哪个值赋" class="headerlink" title="上面的代码执行了条件赋值操作，即根据条件表达式 boolean_expression 的值决定将哪个值赋"></a>上面的代码执行了条件赋值操作，即根据条件表达式 boolean_expression 的值决定将哪个值赋</h5><h5 id="给变量-variable-。如果-boolean-expression-是-true-，则赋值-true-value-；如果"><a href="#给变量-variable-。如果-boolean-expression-是-true-，则赋值-true-value-；如果" class="headerlink" title="给变量 variable 。如果 boolean_expression 是 true ，则赋值 true_value ；如果"></a>给变量 variable 。如果 boolean_expression 是 true ，则赋值 true_value ；如果</h5><h5 id="boolean-expression-是-false，则赋值-false-value。比如："><a href="#boolean-expression-是-false，则赋值-false-value。比如：" class="headerlink" title="boolean_expression 是 false，则赋值 false_value。比如："></a>boolean_expression 是 false，则赋值 false_value。比如：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> max = (num1 &gt; num2) ? num1 : num2;</span><br></pre></td></tr></table></figure><h5 id="在这个例子中，max-将被赋予一个最大值。这个表达式的意思是，如果-num1-大于-num2（条件表达式为-true），则将-num1-赋给-max。否则，将-num2-赋给-max。"><a href="#在这个例子中，max-将被赋予一个最大值。这个表达式的意思是，如果-num1-大于-num2（条件表达式为-true），则将-num1-赋给-max。否则，将-num2-赋给-max。" class="headerlink" title="在这个例子中，max 将被赋予一个最大值。这个表达式的意思是，如果 num1 大于 num2（条件表达式为 true），则将 num1 赋给 max。否则，将 num2 赋给 max。"></a>在这个例子中，max 将被赋予一个最大值。这个表达式的意思是，如果 num1 大于 num2（条件表达式为 true），则将 num1 赋给 max。否则，将 num2 赋给 max。</h5><h3 id="赋值操作符"><a href="#赋值操作符" class="headerlink" title="赋值操作符"></a>赋值操作符</h3><h4 id="简单赋值用等于号（-）表示，将右手边的值赋给左手边的变量，如下所示："><a href="#简单赋值用等于号（-）表示，将右手边的值赋给左手边的变量，如下所示：" class="headerlink" title="简单赋值用等于号（=）表示，将右手边的值赋给左手边的变量，如下所示："></a>简单赋值用等于号（=）表示，将右手边的值赋给左手边的变量，如下所示：</h4>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">10</span>;</span><br></pre></td></tr></table></figure><h4 id="每个数学操作符以及其他一些操作符都有对应的复合赋值操作符："><a href="#每个数学操作符以及其他一些操作符都有对应的复合赋值操作符：" class="headerlink" title="每个数学操作符以及其他一些操作符都有对应的复合赋值操作符："></a>每个数学操作符以及其他一些操作符都有对应的复合赋值操作符：</h4><ol><li><p>乘后赋值（*=）</p></li><li><p>除后赋值（/=）</p></li><li><p>取模后赋值（%=）</p></li><li><p>加后赋值（+=）</p></li><li><p>减后赋值（-=）</p></li><li><p>左移后赋值（&lt;&lt;=）</p></li><li><p>右移后赋值（&gt;&gt;=）</p></li><li><p>无符号右移后赋值（&gt;&gt;&gt;=）</p><h4 id="这些操作符仅仅是简写语法，使用它们不会提升性能。"><a href="#这些操作符仅仅是简写语法，使用它们不会提升性能。" class="headerlink" title="这些操作符仅仅是简写语法，使用它们不会提升性能。"></a>这些操作符仅仅是简写语法，使用它们不会提升性能。</h4><h3 id="逗号操作符"><a href="#逗号操作符" class="headerlink" title="逗号操作符"></a>逗号操作符</h3><h4 id="逗号操作符可以用来在一条语句中执行多个操作，"><a href="#逗号操作符可以用来在一条语句中执行多个操作，" class="headerlink" title="逗号操作符可以用来在一条语句中执行多个操作，"></a>逗号操作符可以用来在一条语句中执行多个操作，</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num1 = <span class="number">1</span>, num2 = <span class="number">2</span>, num3 = <span class="number">3</span>; </span><br></pre></td></tr></table></figure><h5 id="在一条语句中同时声明多个变量是逗号操作符最常用的场景。不过，也可以使用逗号操作符来辅助赋值。在赋值时使用逗号操作符分隔值，最终会返回表达式中最后一个值"><a href="#在一条语句中同时声明多个变量是逗号操作符最常用的场景。不过，也可以使用逗号操作符来辅助赋值。在赋值时使用逗号操作符分隔值，最终会返回表达式中最后一个值" class="headerlink" title="在一条语句中同时声明多个变量是逗号操作符最常用的场景。不过，也可以使用逗号操作符来辅助赋值。在赋值时使用逗号操作符分隔值，最终会返回表达式中最后一个值"></a>在一条语句中同时声明多个变量是逗号操作符最常用的场景。不过，也可以使用逗号操作符来辅助赋值。在赋值时使用逗号操作符分隔值，最终会返回表达式中最后一个值</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = (<span class="number">5</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">0</span>); <span class="comment">// num 的值为 0 </span></span><br></pre></td></tr></table></figure><h5 id="在这个例子中，num-将被赋值为-0，因为-0-是表达式中最后一项。逗号操作符的这种使用场景并不多见，但这种行为的确存在。"><a href="#在这个例子中，num-将被赋值为-0，因为-0-是表达式中最后一项。逗号操作符的这种使用场景并不多见，但这种行为的确存在。" class="headerlink" title="在这个例子中，num 将被赋值为 0，因为 0 是表达式中最后一项。逗号操作符的这种使用场景并不多见，但这种行为的确存在。"></a>在这个例子中，num 将被赋值为 0，因为 0 是表达式中最后一项。逗号操作符的这种使用场景并不多见，但这种行为的确存在。</h5></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;ECMA-262-描述了一组可用于操作数据值的操作符，包括数学操作符（如加、减）、位操作符、关系操作符和相等操作符等。ECMAScript-中的操作符是独特的，因为它们可用于各种值，包括字符串、数值、布尔值，甚至还有对象。在应用给对象时，操作符通常会调用-valu</summary>
      
    
    
    
    <category term="JavaScript红宝书" scheme="http://example.com/categories/JavaScript%E7%BA%A2%E5%AE%9D%E4%B9%A6/"/>
    
    
    <category term="操作符" scheme="http://example.com/tags/%E6%93%8D%E4%BD%9C%E7%AC%A6/"/>
    
  </entry>
  
  <entry>
    <title>JS红宝书之数据类型</title>
    <link href="http://example.com/2020/10/15/%E7%BA%A2%E5%AE%9D%E4%B9%A63/"/>
    <id>http://example.com/2020/10/15/%E7%BA%A2%E5%AE%9D%E4%B9%A63/</id>
    <published>2020-10-15T05:06:43.000Z</published>
    <updated>2020-11-06T06:19:32.866Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h5 id="ECMAScript-有-6-种简单数据类型（也称为原始类型）：Undefined、Null、Boolean、Number、String-和-Symbol。Symbol（符号）是-ECMAScript-6-新增的。还有一种复杂数据类型叫-Object（对象）。Object-是一种无序名值对的集合。因为在-ECMAScript-中不能定义自己的数据类型，所有值都可以用上述-7-种数据类型之一来表示。只有-7-种数据类型似乎不足以表示全部数据。但-ECMAScript-的数据类型很灵活，一种数据类型可以当作多种数据类型来使用。"><a href="#ECMAScript-有-6-种简单数据类型（也称为原始类型）：Undefined、Null、Boolean、Number、String-和-Symbol。Symbol（符号）是-ECMAScript-6-新增的。还有一种复杂数据类型叫-Object（对象）。Object-是一种无序名值对的集合。因为在-ECMAScript-中不能定义自己的数据类型，所有值都可以用上述-7-种数据类型之一来表示。只有-7-种数据类型似乎不足以表示全部数据。但-ECMAScript-的数据类型很灵活，一种数据类型可以当作多种数据类型来使用。" class="headerlink" title="ECMAScript 有 6 种简单数据类型（也称为原始类型）：Undefined、Null、Boolean、Number、String 和 Symbol。Symbol（符号）是 ECMAScript 6 新增的。还有一种复杂数据类型叫 Object（对象）。Object 是一种无序名值对的集合。因为在 ECMAScript 中不能定义自己的数据类型，所有值都可以用上述 7 种数据类型之一来表示。只有 7 种数据类型似乎不足以表示全部数据。但 ECMAScript 的数据类型很灵活，一种数据类型可以当作多种数据类型来使用。"></a>ECMAScript 有 6 种简单数据类型（也称为原始类型）：Undefined、Null、Boolean、Number、String 和 Symbol。Symbol（符号）是 ECMAScript 6 新增的。还有一种复杂数据类型叫 Object（对象）。Object 是一种无序名值对的集合。因为在 ECMAScript 中不能定义自己的数据类型，所有值都可以用上述 7 种数据类型之一来表示。只有 7 种数据类型似乎不足以表示全部数据。但 ECMAScript 的数据类型很灵活，一种数据类型可以当作多种数据类型来使用。</h5><h3 id="typeof-操作符"><a href="#typeof-操作符" class="headerlink" title="typeof 操作符"></a>typeof 操作符</h3><h4 id="因为-ECMAScript-的类型系统是松散的，所以需要一种手段来确定任意变量的数据类型。typeof操作符就是为此而生的。对一个值使用-typeof-操作符会返回下列字符串之一："><a href="#因为-ECMAScript-的类型系统是松散的，所以需要一种手段来确定任意变量的数据类型。typeof操作符就是为此而生的。对一个值使用-typeof-操作符会返回下列字符串之一：" class="headerlink" title="因为 ECMAScript 的类型系统是松散的，所以需要一种手段来确定任意变量的数据类型。typeof操作符就是为此而生的。对一个值使用 typeof 操作符会返回下列字符串之一："></a>因为 ECMAScript 的类型系统是松散的，所以需要一种手段来确定任意变量的数据类型。typeof操作符就是为此而生的。对一个值使用 typeof 操作符会返回下列字符串之一：</h4><h5 id="“undefined”表示值未定义；"><a href="#“undefined”表示值未定义；" class="headerlink" title="“undefined”表示值未定义；"></a>“undefined”表示值未定义；</h5><h5 id="-“boolean”表示值为布尔值；"><a href="#-“boolean”表示值为布尔值；" class="headerlink" title=" “boolean”表示值为布尔值；"></a> “boolean”表示值为布尔值；</h5><h5 id="-“string”表示值为字符串；"><a href="#-“string”表示值为字符串；" class="headerlink" title=" “string”表示值为字符串；"></a> “string”表示值为字符串；</h5><h5 id="-“number”表示值为数值；"><a href="#-“number”表示值为数值；" class="headerlink" title=" “number”表示值为数值；"></a> “number”表示值为数值；</h5><h5 id="-“object”表示值为对象（而不是函数）或-null；"><a href="#-“object”表示值为对象（而不是函数）或-null；" class="headerlink" title=" “object”表示值为对象（而不是函数）或 null；"></a> “object”表示值为对象（而不是函数）或 null；</h5><h5 id="-“function”表示值为函数；"><a href="#-“function”表示值为函数；" class="headerlink" title=" “function”表示值为函数；"></a> “function”表示值为函数；</h5><h5 id="-“symbol”表示值为符号。"><a href="#-“symbol”表示值为符号。" class="headerlink" title=" “symbol”表示值为符号。"></a> “symbol”表示值为符号。</h5><h4 id="下面是使用-typeof-操作符的例子："><a href="#下面是使用-typeof-操作符的例子：" class="headerlink" title="下面是使用 typeof 操作符的例子："></a>下面是使用 typeof 操作符的例子：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> message = <span class="string">&quot;some string&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> message); <span class="comment">// &quot;string&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(message)); <span class="comment">// &quot;string&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="number">95</span>); <span class="comment">// &quot;number&quot; </span></span><br></pre></td></tr></table></figure><h5 id="注意，因为-typeof-是一个操作符而不是函数，所以不需要参数（但可以使用参数）。"><a href="#注意，因为-typeof-是一个操作符而不是函数，所以不需要参数（但可以使用参数）。" class="headerlink" title="注意，因为 typeof 是一个操作符而不是函数，所以不需要参数（但可以使用参数）。"></a>注意，因为 typeof 是一个操作符而不是函数，所以不需要参数（但可以使用参数）。</h5><h3 id="Undefined-类型"><a href="#Undefined-类型" class="headerlink" title="Undefined 类型"></a>Undefined 类型</h3><h5 id="Undefined-类型只有一个值，就是特殊值-undefined。当使用-var-或-let-声明了变量但没有初始化时，就相当于给变量赋予了-undefined-值"><a href="#Undefined-类型只有一个值，就是特殊值-undefined。当使用-var-或-let-声明了变量但没有初始化时，就相当于给变量赋予了-undefined-值" class="headerlink" title="Undefined 类型只有一个值，就是特殊值 undefined。当使用 var 或 let 声明了变量但没有初始化时，就相当于给变量赋予了 undefined 值"></a>Undefined 类型只有一个值，就是特殊值 undefined。当使用 var 或 let 声明了变量但没有初始化时，就相当于给变量赋予了 undefined 值</h5><h4 id="注意-即使未初始化的变量会被自动赋予-undefined-值，但我们仍然建议在声明变量的同时进行初始化。这样，当-typeof-返回”undefined”时，你就会知道那是因为给定的变量尚未声明，而不是声明了但未初始化。"><a href="#注意-即使未初始化的变量会被自动赋予-undefined-值，但我们仍然建议在声明变量的同时进行初始化。这样，当-typeof-返回”undefined”时，你就会知道那是因为给定的变量尚未声明，而不是声明了但未初始化。" class="headerlink" title="注意 即使未初始化的变量会被自动赋予 undefined 值，但我们仍然建议在声明变量的同时进行初始化。这样，当 typeof 返回”undefined”时，你就会知道那是因为给定的变量尚未声明，而不是声明了但未初始化。"></a>注意 即使未初始化的变量会被自动赋予 undefined 值，但我们仍然建议在声明变量的同时进行初始化。这样，当 typeof 返回”undefined”时，你就会知道那是因为给定的变量尚未声明，而不是声明了但未初始化。</h4><h3 id="Null-类型"><a href="#Null-类型" class="headerlink" title="Null 类型"></a>Null 类型</h3><h5 id="Null-类型同样只有一个值，即特殊值-null。逻辑上讲，null-值表示一个空对象指针，这也是给typeof-传一个-null-会返回”object”的原因"><a href="#Null-类型同样只有一个值，即特殊值-null。逻辑上讲，null-值表示一个空对象指针，这也是给typeof-传一个-null-会返回”object”的原因" class="headerlink" title="Null 类型同样只有一个值，即特殊值 null。逻辑上讲，null 值表示一个空对象指针，这也是给typeof 传一个 null 会返回”object”的原因"></a>Null 类型同样只有一个值，即特殊值 null。逻辑上讲，null 值表示一个空对象指针，这也是给typeof 传一个 null 会返回”object”的原因</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> car = <span class="literal">null</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> car); <span class="comment">// &quot;object&quot; </span></span><br></pre></td></tr></table></figure><h5 id="undefined-值是由-null-值派生而来的，因此-ECMA-262-将它们定义为表面上相等，如下面的例子所示："><a href="#undefined-值是由-null-值派生而来的，因此-ECMA-262-将它们定义为表面上相等，如下面的例子所示：" class="headerlink" title="undefined 值是由 null 值派生而来的，因此 ECMA-262 将它们定义为表面上相等，如下面的例子所示："></a>undefined 值是由 null 值派生而来的，因此 ECMA-262 将它们定义为表面上相等，如下面的例子所示：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="literal">null</span> == <span class="literal">undefined</span>); <span class="comment">// true </span></span><br></pre></td></tr></table></figure><h5 id="即使-null-和-undefined-有关系，它们的用途也是完全不一样的。"><a href="#即使-null-和-undefined-有关系，它们的用途也是完全不一样的。" class="headerlink" title="即使 null 和 undefined 有关系，它们的用途也是完全不一样的。"></a>即使 null 和 undefined 有关系，它们的用途也是完全不一样的。</h5><h3 id="Boolean-类型"><a href="#Boolean-类型" class="headerlink" title="Boolean 类型"></a>Boolean 类型</h3><h5 id="Boolean（布尔值）类型是-ECMAScript-中使用最频繁的类型之一，有两个字面值：true-和-false。这两个布尔值不同于数值，因此-true-不等于-1，false-不等于-0。下面是给变量赋布尔值的例子："><a href="#Boolean（布尔值）类型是-ECMAScript-中使用最频繁的类型之一，有两个字面值：true-和-false。这两个布尔值不同于数值，因此-true-不等于-1，false-不等于-0。下面是给变量赋布尔值的例子：" class="headerlink" title="Boolean（布尔值）类型是 ECMAScript 中使用最频繁的类型之一，有两个字面值：true 和 false。这两个布尔值不同于数值，因此 true 不等于 1，false 不等于 0。下面是给变量赋布尔值的例子："></a>Boolean（布尔值）类型是 ECMAScript 中使用最频繁的类型之一，有两个字面值：true 和 false。这两个布尔值不同于数值，因此 true 不等于 1，false 不等于 0。下面是给变量赋布尔值的例子：</h5><table><thead><tr><th align="center">数据类型</th><th align="center">转换为 true 的值</th><th align="center">转换为 false 的值</th></tr></thead><tbody><tr><td align="center">Boolean</td><td align="center">true</td><td align="center">false</td></tr><tr><td align="center">String</td><td align="center">非空字符串</td><td align="center">“”（空字符串）</td></tr><tr><td align="center">Number</td><td align="center">非零数值（包括无穷值）</td><td align="center">0、NaN（参见后面的相关内容）</td></tr><tr><td align="center">Object</td><td align="center">任意对象</td><td align="center">null</td></tr><tr><td align="center">Undefined</td><td align="center">N/A（不存在）</td><td align="center">undefined</td></tr></tbody></table><h3 id="Number-类型"><a href="#Number-类型" class="headerlink" title="Number 类型"></a>Number 类型</h3><h5 id="ECMAScript-中最有意思的数据类型或许就是-Number-了。Number-类型使用-IEEE-754-格式表示整数和浮点值（在某些语言中也叫双精度值）。不同的数值类型相应地也有不同的数值字面量格式。"><a href="#ECMAScript-中最有意思的数据类型或许就是-Number-了。Number-类型使用-IEEE-754-格式表示整数和浮点值（在某些语言中也叫双精度值）。不同的数值类型相应地也有不同的数值字面量格式。" class="headerlink" title="ECMAScript 中最有意思的数据类型或许就是 Number 了。Number 类型使用 IEEE 754 格式表示整数和浮点值（在某些语言中也叫双精度值）。不同的数值类型相应地也有不同的数值字面量格式。"></a>ECMAScript 中最有意思的数据类型或许就是 Number 了。Number 类型使用 IEEE 754 格式表示整数和浮点值（在某些语言中也叫双精度值）。不同的数值类型相应地也有不同的数值字面量格式。</h5><h5 id="最基本的数值字面量格式是十进制整数，直接写出来即可："><a href="#最基本的数值字面量格式是十进制整数，直接写出来即可：" class="headerlink" title="最基本的数值字面量格式是十进制整数，直接写出来即可："></a>最基本的数值字面量格式是十进制整数，直接写出来即可：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> intNum = <span class="number">55</span>; <span class="comment">// 整数</span></span><br></pre></td></tr></table></figure><h5 id="八进制字面量在严格模式下是无效的，会导致-JavaScript-引擎抛出语法错误。①"><a href="#八进制字面量在严格模式下是无效的，会导致-JavaScript-引擎抛出语法错误。①" class="headerlink" title="八进制字面量在严格模式下是无效的，会导致 JavaScript 引擎抛出语法错误。①"></a>八进制字面量在严格模式下是无效的，会导致 JavaScript 引擎抛出语法错误。①</h5><h4 id="1-浮点值"><a href="#1-浮点值" class="headerlink" title="1. 浮点值"></a>1. 浮点值</h4><h6 id="要定义浮点值，数值中必须包含小数点，而且小数点后面必须至少有一个数字。虽然小数点前面不是必须有整数，但推荐加上。下面是几个例子："><a href="#要定义浮点值，数值中必须包含小数点，而且小数点后面必须至少有一个数字。虽然小数点前面不是必须有整数，但推荐加上。下面是几个例子：" class="headerlink" title="要定义浮点值，数值中必须包含小数点，而且小数点后面必须至少有一个数字。虽然小数点前面不是必须有整数，但推荐加上。下面是几个例子："></a>要定义浮点值，数值中必须包含小数点，而且小数点后面必须至少有一个数字。虽然小数点前面不是必须有整数，但推荐加上。下面是几个例子：</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> floatNum1 = <span class="number">1.1</span>;</span><br><span class="line"><span class="keyword">let</span> floatNum2 = <span class="number">0.1</span>;</span><br><span class="line"><span class="keyword">let</span> floatNum3 = <span class="number">.1</span>; <span class="comment">// 有效，但不推荐</span></span><br></pre></td></tr></table></figure><h4 id="2-值的范围"><a href="#2-值的范围" class="headerlink" title="2. 值的范围"></a>2. 值的范围</h4><h6 id="由于内存的限制，ECMAScript-并不支持表示这个世界上的所有数值。ECMAScript-可以表示的最小数值保存在-Number-MIN-VALUE-中，这个值在多数浏览器中是-5e324；可以表示的最大数值保存在Number-MAX-VALUE-中，这个值在多数浏览器中是-1-797-693-134-862-315-7e-308。如果某个计算得到的数值结果超出了-JavaScript-可以表示的范围，那么这个数值会被自动转换为一个特殊的-Infinity（无穷）值。任何无法表示的负数以-Infinity（负无穷大）表示，任何无法表示的正数以-Infinity（正无穷大）表示。"><a href="#由于内存的限制，ECMAScript-并不支持表示这个世界上的所有数值。ECMAScript-可以表示的最小数值保存在-Number-MIN-VALUE-中，这个值在多数浏览器中是-5e324；可以表示的最大数值保存在Number-MAX-VALUE-中，这个值在多数浏览器中是-1-797-693-134-862-315-7e-308。如果某个计算得到的数值结果超出了-JavaScript-可以表示的范围，那么这个数值会被自动转换为一个特殊的-Infinity（无穷）值。任何无法表示的负数以-Infinity（负无穷大）表示，任何无法表示的正数以-Infinity（正无穷大）表示。" class="headerlink" title="由于内存的限制，ECMAScript 并不支持表示这个世界上的所有数值。ECMAScript 可以表示的最小数值保存在 Number.MIN_VALUE 中，这个值在多数浏览器中是 5e324；可以表示的最大数值保存在Number.MAX_VALUE 中，这个值在多数浏览器中是 1.797 693 134 862 315 7e+308。如果某个计算得到的数值结果超出了 JavaScript 可以表示的范围，那么这个数值会被自动转换为一个特殊的 Infinity（无穷）值。任何无法表示的负数以-Infinity（负无穷大）表示，任何无法表示的正数以 Infinity（正无穷大）表示。"></a>由于内存的限制，ECMAScript 并不支持表示这个世界上的所有数值。ECMAScript 可以表示的最小数值保存在 Number.MIN_VALUE 中，这个值在多数浏览器中是 5e324；可以表示的最大数值保存在Number.MAX_VALUE 中，这个值在多数浏览器中是 1.797 693 134 862 315 7e+308。如果某个计算得到的数值结果超出了 JavaScript 可以表示的范围，那么这个数值会被自动转换为一个特殊的 Infinity（无穷）值。任何无法表示的负数以-Infinity（负无穷大）表示，任何无法表示的正数以 Infinity（正无穷大）表示。</h6><h4 id="3-NaN"><a href="#3-NaN" class="headerlink" title="3. NaN"></a>3. NaN</h4><h6 id="有一个特殊的数值叫-NaN，意思是“不是数值”（Not-a-Number），用于表示本来要返回数值的操作失败了（而不是抛出错误）。比如，用-0-除任意数值在其他语言中通常都会导致错误，从而中止代码执。但在-ECMAScript-中，0、-0-或0-相除会返回-NaN："><a href="#有一个特殊的数值叫-NaN，意思是“不是数值”（Not-a-Number），用于表示本来要返回数值的操作失败了（而不是抛出错误）。比如，用-0-除任意数值在其他语言中通常都会导致错误，从而中止代码执。但在-ECMAScript-中，0、-0-或0-相除会返回-NaN：" class="headerlink" title="有一个特殊的数值叫 NaN，意思是“不是数值”（Not a Number），用于表示本来要返回数值的操作失败了（而不是抛出错误）。比如，用 0 除任意数值在其他语言中通常都会导致错误，从而中止代码执。但在 ECMAScript 中，0、+0 或0 相除会返回 NaN："></a>有一个特殊的数值叫 NaN，意思是“不是数值”（Not a Number），用于表示本来要返回数值的操作失败了（而不是抛出错误）。比如，用 0 除任意数值在其他语言中通常都会导致错误，从而中止代码执。但在 ECMAScript 中，0、+0 或0 相除会返回 NaN：</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">0</span>/<span class="number">0</span>); <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">-0</span>/+<span class="number">0</span>); <span class="comment">// NaN </span></span><br></pre></td></tr></table></figure><h6 id="NaN-有几个独特的属性。首先，任何涉及-NaN-的操作始终返回-NaN（如-NaN-10），在连续多步计算时这可能是个问题。其次，NaN-不等于包括-NaN-在内的任何值。例如，下面的比较操作会返回-false："><a href="#NaN-有几个独特的属性。首先，任何涉及-NaN-的操作始终返回-NaN（如-NaN-10），在连续多步计算时这可能是个问题。其次，NaN-不等于包括-NaN-在内的任何值。例如，下面的比较操作会返回-false：" class="headerlink" title="NaN 有几个独特的属性。首先，任何涉及 NaN 的操作始终返回 NaN（如 NaN/10），在连续多步计算时这可能是个问题。其次，NaN 不等于包括 NaN 在内的任何值。例如，下面的比较操作会返回 false："></a>NaN 有几个独特的属性。首先，任何涉及 NaN 的操作始终返回 NaN（如 NaN/10），在连续多步计算时这可能是个问题。其次，NaN 不等于包括 NaN 在内的任何值。例如，下面的比较操作会返回 false：</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="literal">NaN</span> == <span class="literal">NaN</span>); <span class="comment">// false </span></span><br></pre></td></tr></table></figure><h6 id="为此，ECMAScript-提供了-isNaN-函数。该函数接收一个参数，可以是任意数据类型，然后判断这个参数是否“不是数值”。把一个值传给-isNaN-后，该函数会尝试把它转换为数值。某些非数值的值可以直接转换成数值，如字符串”10”或布尔值。任何不能转换为数值的值都会导致这个函数返回true。举例如下："><a href="#为此，ECMAScript-提供了-isNaN-函数。该函数接收一个参数，可以是任意数据类型，然后判断这个参数是否“不是数值”。把一个值传给-isNaN-后，该函数会尝试把它转换为数值。某些非数值的值可以直接转换成数值，如字符串”10”或布尔值。任何不能转换为数值的值都会导致这个函数返回true。举例如下：" class="headerlink" title="为此，ECMAScript 提供了 isNaN()函数。该函数接收一个参数，可以是任意数据类型，然后判断这个参数是否“不是数值”。把一个值传给 isNaN()后，该函数会尝试把它转换为数值。某些非数值的值可以直接转换成数值，如字符串”10”或布尔值。任何不能转换为数值的值都会导致这个函数返回true。举例如下："></a>为此，ECMAScript 提供了 isNaN()函数。该函数接收一个参数，可以是任意数据类型，然后判断这个参数是否“不是数值”。把一个值传给 isNaN()后，该函数会尝试把它转换为数值。某些非数值的值可以直接转换成数值，如字符串”10”或布尔值。任何不能转换为数值的值都会导致这个函数返回true。举例如下：</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="literal">NaN</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="number">10</span>)); <span class="comment">// false，10 是数值</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="string">&quot;10&quot;</span>)); <span class="comment">// false，可以转换为数值 10</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="string">&quot;blue&quot;</span>)); <span class="comment">// true，不可以转换为数值</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="literal">true</span>)); <span class="comment">// false，可以转换为数值 1</span></span><br></pre></td></tr></table></figure><h4 id="4-数值转换"><a href="#4-数值转换" class="headerlink" title="4.数值转换"></a>4.数值转换</h4><h6 id="有3-个函数可以将非数值转换为数值：Number-、parseInt-和-parseFloat-。Number-是转型函数，可用于任何数据类型。后两个函数主要用于将字符串转换为数值。对于同样的参数，这-3-个函数执行的操作也不同"><a href="#有3-个函数可以将非数值转换为数值：Number-、parseInt-和-parseFloat-。Number-是转型函数，可用于任何数据类型。后两个函数主要用于将字符串转换为数值。对于同样的参数，这-3-个函数执行的操作也不同" class="headerlink" title="有3 个函数可以将非数值转换为数值：Number()、parseInt()和 parseFloat()。Number()是转型函数，可用于任何数据类型。后两个函数主要用于将字符串转换为数值。对于同样的参数，这 3 个函数执行的操作也不同"></a>有3 个函数可以将非数值转换为数值：Number()、parseInt()和 parseFloat()。Number()是转型函数，可用于任何数据类型。后两个函数主要用于将字符串转换为数值。对于同样的参数，这 3 个函数执行的操作也不同</h6><h5 id="Number-、"><a href="#Number-、" class="headerlink" title="Number()、"></a>Number()、</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num1 = <span class="built_in">Number</span>(<span class="string">&quot;Hello world!&quot;</span>); <span class="comment">// NaN</span></span><br><span class="line"><span class="keyword">let</span> num2 = <span class="built_in">Number</span>(<span class="string">&quot;&quot;</span>); <span class="comment">// 0</span></span><br><span class="line"><span class="keyword">let</span> num3 = <span class="built_in">Number</span>(<span class="string">&quot;000011&quot;</span>); <span class="comment">// 11</span></span><br><span class="line"><span class="keyword">let</span> num4 = <span class="built_in">Number</span>(<span class="literal">true</span>); <span class="comment">// 1 </span></span><br></pre></td></tr></table></figure><h5 id="parseInt"><a href="#parseInt" class="headerlink" title="parseInt()"></a>parseInt()</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num1 = <span class="built_in">parseInt</span>(<span class="string">&quot;1234blue&quot;</span>); <span class="comment">// 1234</span></span><br><span class="line"><span class="keyword">let</span> num2 = <span class="built_in">parseInt</span>(<span class="string">&quot;&quot;</span>); <span class="comment">// NaN</span></span><br><span class="line"><span class="keyword">let</span> num3 = <span class="built_in">parseInt</span>(<span class="string">&quot;0xA&quot;</span>); <span class="comment">// 10，解释为十六进制整数</span></span><br><span class="line"><span class="keyword">let</span> num4 = <span class="built_in">parseInt</span>(<span class="number">22.5</span>); <span class="comment">// 22</span></span><br><span class="line"><span class="keyword">let</span> num5 = <span class="built_in">parseInt</span>(<span class="string">&quot;70&quot;</span>); <span class="comment">// 70，解释为十进制值</span></span><br><span class="line"><span class="keyword">let</span> num6 = <span class="built_in">parseInt</span>(<span class="string">&quot;0xf&quot;</span>); <span class="comment">// 15，解释为十六进制整数</span></span><br></pre></td></tr></table></figure><h5 id="parseFloat"><a href="#parseFloat" class="headerlink" title="parseFloat()"></a>parseFloat()</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num1 = <span class="built_in">parseFloat</span>(<span class="string">&quot;1234blue&quot;</span>); <span class="comment">// 1234，按整数解析</span></span><br><span class="line"><span class="keyword">let</span> num2 = <span class="built_in">parseFloat</span>(<span class="string">&quot;0xA&quot;</span>); <span class="comment">// 0</span></span><br><span class="line"><span class="keyword">let</span> num3 = <span class="built_in">parseFloat</span>(<span class="string">&quot;22.5&quot;</span>); <span class="comment">// 22.5</span></span><br><span class="line"><span class="keyword">let</span> num4 = <span class="built_in">parseFloat</span>(<span class="string">&quot;22.34.5&quot;</span>); <span class="comment">// 22.34</span></span><br><span class="line"><span class="keyword">let</span> num5 = <span class="built_in">parseFloat</span>(<span class="string">&quot;0908.5&quot;</span>); <span class="comment">// 908.5</span></span><br><span class="line"><span class="keyword">let</span> num6 = <span class="built_in">parseFloat</span>(<span class="string">&quot;3.125e7&quot;</span>); <span class="comment">// 31250000 </span></span><br></pre></td></tr></table></figure><h3 id="String-类型"><a href="#String-类型" class="headerlink" title="String 类型"></a>String 类型</h3><h6 id="String（字符串）数据类型表示零或多个-16-位-Unicode-字符序列。字符串可以使用双引号（”）、单引号（’）或反引号（-）标示，因此下面的代码都是合法的："><a href="#String（字符串）数据类型表示零或多个-16-位-Unicode-字符序列。字符串可以使用双引号（”）、单引号（’）或反引号（-）标示，因此下面的代码都是合法的：" class="headerlink" title="String（字符串）数据类型表示零或多个 16 位 Unicode 字符序列。字符串可以使用双引号（”）、单引号（’）或反引号（`）标示，因此下面的代码都是合法的："></a>String（字符串）数据类型表示零或多个 16 位 Unicode 字符序列。字符串可以使用双引号（”）、单引号（’）或反引号（`）标示，因此下面的代码都是合法的：</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> firstName = <span class="string">&quot;John&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> lastName = <span class="string">&#x27;Jacob&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> lastName = <span class="string">`Jingleheimerschmid`</span>;</span><br></pre></td></tr></table></figure><h5 id="不过要注意的是，以某种引号作为字符串开头，必须仍然以该种引号作为字符串结尾。比如，下面的写法会导致语法错误："><a href="#不过要注意的是，以某种引号作为字符串开头，必须仍然以该种引号作为字符串结尾。比如，下面的写法会导致语法错误：" class="headerlink" title="不过要注意的是，以某种引号作为字符串开头，必须仍然以该种引号作为字符串结尾。比如，下面的写法会导致语法错误："></a>不过要注意的是，以某种引号作为字符串开头，必须仍然以该种引号作为字符串结尾。比如，下面的写法会导致语法错误：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> firstName = <span class="string">&#x27;Nicholas&quot;; // 语法错误：开头和结尾的引号必须是同一种</span></span><br></pre></td></tr></table></figure><h4 id="1-字符字面量"><a href="#1-字符字面量" class="headerlink" title="1. 字符字面量"></a>1. 字符字面量</h4><h6 id="字符串数据类型包含一些字符字面量，用于表示非打印字符或有其他用途的字符，如下表所示："><a href="#字符串数据类型包含一些字符字面量，用于表示非打印字符或有其他用途的字符，如下表所示：" class="headerlink" title="字符串数据类型包含一些字符字面量，用于表示非打印字符或有其他用途的字符，如下表所示："></a>字符串数据类型包含一些字符字面量，用于表示非打印字符或有其他用途的字符，如下表所示：</h6><table><thead><tr><th align="center">字 面 量</th><th align="center">含 义</th></tr></thead><tbody><tr><td align="center">\n</td><td align="center">换行</td></tr><tr><td align="center">\t</td><td align="center">制表</td></tr><tr><td align="center">\b</td><td align="center">退格</td></tr><tr><td align="center">\r</td><td align="center">回车</td></tr><tr><td align="center">\f</td><td align="center">换页</td></tr><tr><td align="center">\</td><td align="center">反斜杠（\）</td></tr><tr><td align="center">&#39;</td><td align="center">单引号（’），在字符串以单引号标示时使用，例如’He said, &#39;hey.&#39;‘</td></tr><tr><td align="center">&quot;</td><td align="center">双引号（”），在字符串以双引号标示时使用，例如”He said, &quot;hey.&quot;“</td></tr><tr><td align="center">`</td><td align="center">反引号（<code>），在字符串以反引号标示时使用，例如</code>He said, `hey.``</td></tr><tr><td align="center">\xnn</td><td align="center">以十六进制编码 nn 表示的字符（其中 n 是十六进制数字 0~F），例如\x41 等于”A”</td></tr><tr><td align="center">\unnnn</td><td align="center">以十六进制编码 nnnn 表示的 Unicode 字符（其中 n 是十六进制数字 0~F），例如\u03a3 等于希腊字符”Σ”</td></tr></tbody></table><h4 id="2-字符串的特点"><a href="#2-字符串的特点" class="headerlink" title="2. 字符串的特点"></a>2. 字符串的特点</h4><h5 id="CMAScript-中的字符串是不可变的（immutable），意思是一旦创建，它们的值就不能变了。要修改某个变量中的字符串值，必须先销毁原始的字符串，然后将包含新值的另一个字符串保存到该变量，如下所示："><a href="#CMAScript-中的字符串是不可变的（immutable），意思是一旦创建，它们的值就不能变了。要修改某个变量中的字符串值，必须先销毁原始的字符串，然后将包含新值的另一个字符串保存到该变量，如下所示：" class="headerlink" title="CMAScript 中的字符串是不可变的（immutable），意思是一旦创建，它们的值就不能变了。要修改某个变量中的字符串值，必须先销毁原始的字符串，然后将包含新值的另一个字符串保存到该变量，如下所示："></a>CMAScript 中的字符串是不可变的（immutable），意思是一旦创建，它们的值就不能变了。要修改某个变量中的字符串值，必须先销毁原始的字符串，然后将包含新值的另一个字符串保存到该变量，如下所示：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> lang = <span class="string">&quot;Java&quot;</span>;</span><br><span class="line">lang = lang + <span class="string">&quot;Script&quot;</span>; </span><br></pre></td></tr></table></figure><h4 id="3-转换为字符串"><a href="#3-转换为字符串" class="headerlink" title="3. 转换为字符串"></a>3. 转换为字符串</h4><h5 id="有两种方式把一个值转换为字符串。首先是使用几乎所有值都有的-toString-方法。这个方法唯一的用途就是返回当前值的字符串等价物。比如："><a href="#有两种方式把一个值转换为字符串。首先是使用几乎所有值都有的-toString-方法。这个方法唯一的用途就是返回当前值的字符串等价物。比如：" class="headerlink" title="有两种方式把一个值转换为字符串。首先是使用几乎所有值都有的 toString()方法。这个方法唯一的用途就是返回当前值的字符串等价物。比如："></a>有两种方式把一个值转换为字符串。首先是使用几乎所有值都有的 toString()方法。这个方法唯一的用途就是返回当前值的字符串等价物。比如：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> age = <span class="number">11</span>;</span><br><span class="line"><span class="keyword">let</span> ageAsString = age.toString(); <span class="comment">// 字符串&quot;11&quot;</span></span><br><span class="line"><span class="keyword">let</span> found = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">let</span> foundAsString = found.toString(); <span class="comment">// 字符串&quot;true&quot; </span></span><br></pre></td></tr></table></figure><h4 id="toString-方法"><a href="#toString-方法" class="headerlink" title="toString()方法"></a>toString()方法</h4><h5 id="可见于数值、布尔值、对象和字符串值。（没错，字符串值也有-toString-方法，该方法只是简单地返回自身的一个副本。）null-和-undefined-值没有-toString-方法。多数情况下，toString-不接收任何参数。不过，在对数值调用这个方法时，toString-可以接收一个底数参数，即以什么底数来输出数值的字符串表示。默认情况下，toString-返回数值的十进制字符串表示。而通过传入参数，可以得到数值的二进制、八进制、十六进制，或者其他任何有效基数的字符串表示，比如："><a href="#可见于数值、布尔值、对象和字符串值。（没错，字符串值也有-toString-方法，该方法只是简单地返回自身的一个副本。）null-和-undefined-值没有-toString-方法。多数情况下，toString-不接收任何参数。不过，在对数值调用这个方法时，toString-可以接收一个底数参数，即以什么底数来输出数值的字符串表示。默认情况下，toString-返回数值的十进制字符串表示。而通过传入参数，可以得到数值的二进制、八进制、十六进制，或者其他任何有效基数的字符串表示，比如：" class="headerlink" title="可见于数值、布尔值、对象和字符串值。（没错，字符串值也有 toString()方法，该方法只是简单地返回自身的一个副本。）null 和 undefined 值没有 toString()方法。多数情况下，toString()不接收任何参数。不过，在对数值调用这个方法时，toString()可以接收一个底数参数，即以什么底数来输出数值的字符串表示。默认情况下，toString()返回数值的十进制字符串表示。而通过传入参数，可以得到数值的二进制、八进制、十六进制，或者其他任何有效基数的字符串表示，比如："></a>可见于数值、布尔值、对象和字符串值。（没错，字符串值也有 toString()方法，该方法只是简单地返回自身的一个副本。）null 和 undefined 值没有 toString()方法。多数情况下，toString()不接收任何参数。不过，在对数值调用这个方法时，toString()可以接收一个底数参数，即以什么底数来输出数值的字符串表示。默认情况下，toString()返回数值的十进制字符串表示。而通过传入参数，可以得到数值的二进制、八进制、十六进制，或者其他任何有效基数的字符串表示，比如：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num.toString()); <span class="comment">// &quot;10&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(num.toString(<span class="number">2</span>)); <span class="comment">// &quot;1010&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(num.toString(<span class="number">8</span>)); <span class="comment">// &quot;12&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(num.toString(<span class="number">10</span>)); <span class="comment">// &quot;10&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(num.toString(<span class="number">16</span>)); <span class="comment">// &quot;a&quot; </span></span><br></pre></td></tr></table></figure><h4 id="4-模板字面量"><a href="#4-模板字面量" class="headerlink" title="4. 模板字面量"></a>4. 模板字面量</h4><h4 id="ECMAScript-6-新增了使用模板字面量定义字符串的能力。与使用单引号或双引号不同，模板字面量保留换行字符，可以跨行定义字符串："><a href="#ECMAScript-6-新增了使用模板字面量定义字符串的能力。与使用单引号或双引号不同，模板字面量保留换行字符，可以跨行定义字符串：" class="headerlink" title="ECMAScript 6 新增了使用模板字面量定义字符串的能力。与使用单引号或双引号不同，模板字面量保留换行字符，可以跨行定义字符串："></a>ECMAScript 6 新增了使用模板字面量定义字符串的能力。与使用单引号或双引号不同，模板字面量保留换行字符，可以跨行定义字符串：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myMultiLineString = <span class="string">&#x27;first line\nsecond line&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> myMultiLineTemplateLiteral = <span class="string">`first line</span></span><br><span class="line"><span class="string">second line`</span>;</span><br><span class="line"><span class="built_in">console</span>.log(myMultiLineString);</span><br><span class="line"><span class="comment">// first line</span></span><br><span class="line"><span class="comment">// second line&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(myMultiLineTemplateLiteral);</span><br><span class="line"><span class="comment">// first line </span></span><br><span class="line"><span class="comment">// second line</span></span><br><span class="line"><span class="built_in">console</span>.log(myMultiLineString === myMultiLinetemplateLiteral); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="顾名思义，模板字面量在定义模板时特别有用，比如下面这个-HTML-模板："><a href="#顾名思义，模板字面量在定义模板时特别有用，比如下面这个-HTML-模板：" class="headerlink" title="顾名思义，模板字面量在定义模板时特别有用，比如下面这个 HTML 模板："></a>顾名思义，模板字面量在定义模板时特别有用，比如下面这个 HTML 模板：</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">let pageHTML = `</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">span</span>&gt;</span>Jake<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>`; </span><br></pre></td></tr></table></figure><h4 id="5-字符串插值"><a href="#5-字符串插值" class="headerlink" title="5. 字符串插值"></a>5. 字符串插值</h4><h5 id="模板字面量最常用的一个特性是支持字符串插值，也就是可以在一个连续定义中插入一个或多个值。技术上讲，模板字面量不是字符串，而是一种特殊的-JavaScript-句法表达式，只不过求值后得到的是字符串。模板字面量在定义时立即求值并转换为字符串实例，任何插入的变量也会从它们最接近的作用域中取值。"><a href="#模板字面量最常用的一个特性是支持字符串插值，也就是可以在一个连续定义中插入一个或多个值。技术上讲，模板字面量不是字符串，而是一种特殊的-JavaScript-句法表达式，只不过求值后得到的是字符串。模板字面量在定义时立即求值并转换为字符串实例，任何插入的变量也会从它们最接近的作用域中取值。" class="headerlink" title="模板字面量最常用的一个特性是支持字符串插值，也就是可以在一个连续定义中插入一个或多个值。技术上讲，模板字面量不是字符串，而是一种特殊的 JavaScript 句法表达式，只不过求值后得到的是字符串。模板字面量在定义时立即求值并转换为字符串实例，任何插入的变量也会从它们最接近的作用域中取值。"></a>模板字面量最常用的一个特性是支持字符串插值，也就是可以在一个连续定义中插入一个或多个值。技术上讲，模板字面量不是字符串，而是一种特殊的 JavaScript 句法表达式，只不过求值后得到的是字符串。模板字面量在定义时立即求值并转换为字符串实例，任何插入的变量也会从它们最接近的作用域中取值。</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> value = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">let</span> exponent = <span class="string">&#x27;second&#x27;</span>;</span><br><span class="line"><span class="comment">// 以前，字符串插值是这样实现的：</span></span><br><span class="line"><span class="keyword">let</span> interpolatedString =</span><br><span class="line"> value + <span class="string">&#x27; to the &#x27;</span> + exponent + <span class="string">&#x27; power is &#x27;</span> + (value * value);</span><br><span class="line"><span class="comment">// 现在，可以用模板字面量这样实现：</span></span><br><span class="line"><span class="keyword">let</span> interpolatedTemplateLiteral =</span><br><span class="line"> <span class="string">`<span class="subst">$&#123; value &#125;</span> to the <span class="subst">$&#123; exponent &#125;</span> power is <span class="subst">$&#123; value * value &#125;</span>`</span>;</span><br><span class="line"><span class="built_in">console</span>.log(interpolatedString); <span class="comment">// 5 to the second power is 25</span></span><br><span class="line"><span class="built_in">console</span>.log(interpolatedTemplateLiteral); <span class="comment">// 5 to the second power is 25 </span></span><br></pre></td></tr></table></figure><h5 id="所有插入的值都会使用-toString-强制转型为字符串，而且任何-JavaScript-表达式都可以用于插值。嵌套的模板字符串无须转义："><a href="#所有插入的值都会使用-toString-强制转型为字符串，而且任何-JavaScript-表达式都可以用于插值。嵌套的模板字符串无须转义：" class="headerlink" title="所有插入的值都会使用 toString()强制转型为字符串，而且任何 JavaScript 表达式都可以用于插值。嵌套的模板字符串无须转义："></a>所有插入的值都会使用 toString()强制转型为字符串，而且任何 JavaScript 表达式都可以用于插值。嵌套的模板字符串无须转义：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">`Hello, <span class="subst">$&#123; <span class="string">`World`</span> &#125;</span>!`</span>); <span class="comment">// Hello, World!</span></span><br></pre></td></tr></table></figure><h5 id="将表达式转换为字符串时会调用-toString-："><a href="#将表达式转换为字符串时会调用-toString-：" class="headerlink" title="将表达式转换为字符串时会调用 toString()："></a>将表达式转换为字符串时会调用 toString()：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> foo = &#123; <span class="attr">toString</span>: <span class="function">() =&gt;</span> <span class="string">&#x27;World&#x27;</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`Hello, <span class="subst">$&#123; foo &#125;</span>!`</span>); <span class="comment">// Hello, World!</span></span><br></pre></td></tr></table></figure><h5 id="在插值表达式中可以调用函数和方法："><a href="#在插值表达式中可以调用函数和方法：" class="headerlink" title="在插值表达式中可以调用函数和方法："></a>在插值表达式中可以调用函数和方法：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">capitalize</span>(<span class="params">word</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123; word[<span class="number">0</span>].toUpperCase() &#125;</span><span class="subst">$&#123; word.slice(<span class="number">1</span>) &#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123; capitalize(<span class="string">&#x27;hello&#x27;</span>) &#125;</span>, <span class="subst">$&#123; capitalize(<span class="string">&#x27;world&#x27;</span>) &#125;</span>!`</span>); <span class="comment">// Hello, World!</span></span><br></pre></td></tr></table></figure><h5 id="此外，模板也可以插入自己之前的值："><a href="#此外，模板也可以插入自己之前的值：" class="headerlink" title="此外，模板也可以插入自己之前的值："></a>此外，模板也可以插入自己之前的值：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> value = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">append</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> value = <span class="string">`<span class="subst">$&#123;value&#125;</span>abc`</span></span><br><span class="line"> <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;</span><br><span class="line">append(); <span class="comment">// abc</span></span><br><span class="line">append(); <span class="comment">// abcabc</span></span><br><span class="line">append(); <span class="comment">// abcabcabc</span></span><br></pre></td></tr></table></figure><h4 id="6-模板字面量标签函数"><a href="#6-模板字面量标签函数" class="headerlink" title="6. 模板字面量标签函数"></a>6. 模板字面量标签函数</h4><h5 id="模板字面量也支持定义标签函数（tag-function），而通过标签函数可以自定义插值行为。标签函数会接收被插值记号分隔后的模板和对每个表达式求值的结果。"><a href="#模板字面量也支持定义标签函数（tag-function），而通过标签函数可以自定义插值行为。标签函数会接收被插值记号分隔后的模板和对每个表达式求值的结果。" class="headerlink" title="模板字面量也支持定义标签函数（tag function），而通过标签函数可以自定义插值行为。标签函数会接收被插值记号分隔后的模板和对每个表达式求值的结果。"></a>模板字面量也支持定义标签函数（tag function），而通过标签函数可以自定义插值行为。标签函数会接收被插值记号分隔后的模板和对每个表达式求值的结果。</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">simpleTag</span>(<span class="params">strings, aValExpression, bValExpression, sumExpression</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(strings);</span><br><span class="line">    <span class="built_in">console</span>.log(aValExpression);</span><br><span class="line">    <span class="built_in">console</span>.log(bValExpression);</span><br><span class="line">    <span class="built_in">console</span>.log(sumExpression);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;foobar&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> untaggedResult = <span class="string">`<span class="subst">$&#123; a &#125;</span> + <span class="subst">$&#123; b &#125;</span> = <span class="subst">$&#123; a + b &#125;</span>`</span>;</span><br><span class="line"><span class="keyword">let</span> taggedResult = simpleTag <span class="string">`<span class="subst">$&#123; a &#125;</span> + <span class="subst">$&#123; b &#125;</span> = <span class="subst">$&#123; a + b &#125;</span>`</span>;</span><br><span class="line"><span class="comment">// [&quot;&quot;, &quot; + &quot;, &quot; = &quot;, &quot;&quot;]</span></span><br><span class="line"><span class="comment">// 6</span></span><br><span class="line"><span class="comment">// 9</span></span><br><span class="line"><span class="comment">// 15</span></span><br><span class="line"><span class="built_in">console</span>.log(untaggedResult); <span class="comment">// &quot;6 + 9 = 15&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(taggedResult); <span class="comment">// &quot;foobar&quot; </span></span><br></pre></td></tr></table></figure><h5 id="因为表达式参数的数量是可变的，所以通常应该使用剩余操作符（rest-operator）将它们收集到一个数组中："><a href="#因为表达式参数的数量是可变的，所以通常应该使用剩余操作符（rest-operator）将它们收集到一个数组中：" class="headerlink" title="因为表达式参数的数量是可变的，所以通常应该使用剩余操作符（rest operator）将它们收集到一个数组中："></a>因为表达式参数的数量是可变的，所以通常应该使用剩余操作符（rest operator）将它们收集到一个数组中：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">9</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">simpleTag</span>(<span class="params">strings, ...expressions</span>) </span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(strings);</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">const</span> expression <span class="keyword">of</span> expressions) &#123;</span><br><span class="line"> <span class="built_in">console</span>.log(expression);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> <span class="string">&#x27;foobar&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> taggedResult = simpleTag<span class="string">`<span class="subst">$&#123; a &#125;</span> + <span class="subst">$&#123; b &#125;</span> = <span class="subst">$&#123; a + b &#125;</span>`</span>;</span><br><span class="line"><span class="comment">// [&quot;&quot;, &quot; + &quot;, &quot; = &quot;, &quot;&quot;]</span></span><br><span class="line"><span class="comment">// 6</span></span><br><span class="line"><span class="comment">// 9</span></span><br><span class="line"><span class="comment">// 15</span></span><br><span class="line"><span class="built_in">console</span>.log(taggedResult); <span class="comment">// &quot;foobar&quot;</span></span><br></pre></td></tr></table></figure><h5 id="对于有-n-个插值的模板字面量，传给标签函数的表达式参数的个数始终是-n，而传给标签函数的第一个参数所包含的字符串个数则始终是-n-1。因此，如果你想把这些字符串和对表达式求值的结果拼接起来作为默认返回的字符串，可以这样做："><a href="#对于有-n-个插值的模板字面量，传给标签函数的表达式参数的个数始终是-n，而传给标签函数的第一个参数所包含的字符串个数则始终是-n-1。因此，如果你想把这些字符串和对表达式求值的结果拼接起来作为默认返回的字符串，可以这样做：" class="headerlink" title="对于有 n 个插值的模板字面量，传给标签函数的表达式参数的个数始终是 n，而传给标签函数的第一个参数所包含的字符串个数则始终是 n+1。因此，如果你想把这些字符串和对表达式求值的结果拼接起来作为默认返回的字符串，可以这样做："></a>对于有 n 个插值的模板字面量，传给标签函数的表达式参数的个数始终是 n，而传给标签函数的第一个参数所包含的字符串个数则始终是 n+1。因此，如果你想把这些字符串和对表达式求值的结果拼接起来作为默认返回的字符串，可以这样做：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">9</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">zipTag</span>(<span class="params">strings, ...expressions</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> strings[<span class="number">0</span>] +</span><br><span class="line"> expressions.map(<span class="function">(<span class="params">e, i</span>) =&gt;</span> <span class="string">`<span class="subst">$&#123;e&#125;</span><span class="subst">$&#123;strings[i + <span class="number">1</span>]&#125;</span>`</span>)</span><br><span class="line"> .join(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> untaggedResult = <span class="string">`<span class="subst">$&#123; a &#125;</span> + <span class="subst">$&#123; b &#125;</span> = <span class="subst">$&#123; a + b &#125;</span>`</span>;</span><br><span class="line"><span class="keyword">let</span> taggedResult = zipTag<span class="string">`<span class="subst">$&#123; a &#125;</span> + <span class="subst">$&#123; b &#125;</span> = <span class="subst">$&#123; a + b &#125;</span>`</span>;</span><br><span class="line"><span class="built_in">console</span>.log(untaggedResult); <span class="comment">// &quot;6 + 9 = 15&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(taggedResult); <span class="comment">// &quot;6 + 9 = 15&quot; </span></span><br></pre></td></tr></table></figure><h4 id="7-原始字符串"><a href="#7-原始字符串" class="headerlink" title="7. 原始字符串"></a>7. 原始字符串</h4><h5 id="使用模板字面量也可以直接获取原始的模板字面量内容（如换行符或-Unicode-字符），而不是被转换后的字符表示。为此，可以使用默认的-String-raw-标签函数："><a href="#使用模板字面量也可以直接获取原始的模板字面量内容（如换行符或-Unicode-字符），而不是被转换后的字符表示。为此，可以使用默认的-String-raw-标签函数：" class="headerlink" title="使用模板字面量也可以直接获取原始的模板字面量内容（如换行符或 Unicode 字符），而不是被转换后的字符表示。为此，可以使用默认的 String.raw 标签函数："></a>使用模板字面量也可以直接获取原始的模板字面量内容（如换行符或 Unicode 字符），而不是被转换后的字符表示。为此，可以使用默认的 String.raw 标签函数：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Unicode 示例</span></span><br><span class="line"><span class="comment">// \u00A9 是版权符号</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`\u00A9`</span>); <span class="comment">// ©</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>.raw<span class="string">`\u00A9`</span>); <span class="comment">// \u00A9</span></span><br><span class="line"><span class="comment">// 换行符示例</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`first line\nsecond line`</span>);</span><br><span class="line"><span class="comment">// first line</span></span><br><span class="line"><span class="comment">// second line</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>.raw<span class="string">`first line\nsecond line`</span>); <span class="comment">// &quot;first line\nsecond line&quot; </span></span><br></pre></td></tr></table></figure><h3 id="Symbol-类型"><a href="#Symbol-类型" class="headerlink" title="Symbol 类型"></a>Symbol 类型</h3><h5 id="Symbol（符号）是-ECMAScript-6-新增的数据类型。符号是原始值，且符号实例是唯一、不可变的。符号的用途是确保对象属性使用唯一标识符，不会发生属性冲突的危险。"><a href="#Symbol（符号）是-ECMAScript-6-新增的数据类型。符号是原始值，且符号实例是唯一、不可变的。符号的用途是确保对象属性使用唯一标识符，不会发生属性冲突的危险。" class="headerlink" title="Symbol（符号）是 ECMAScript 6 新增的数据类型。符号是原始值，且符号实例是唯一、不可变的。符号的用途是确保对象属性使用唯一标识符，不会发生属性冲突的危险。"></a>Symbol（符号）是 ECMAScript 6 新增的数据类型。符号是原始值，且符号实例是唯一、不可变的。符号的用途是确保对象属性使用唯一标识符，不会发生属性冲突的危险。</h5><h5 id="尽管听起来跟私有属性有点类似，但符号并不是为了提供私有属性的行为才增加的（尤其是因为Object-API-提供了方法，可以更方便地发现符号属性）。相反，符号就是用来创建唯一记号，进而用作非字符串形式的对象属性。"><a href="#尽管听起来跟私有属性有点类似，但符号并不是为了提供私有属性的行为才增加的（尤其是因为Object-API-提供了方法，可以更方便地发现符号属性）。相反，符号就是用来创建唯一记号，进而用作非字符串形式的对象属性。" class="headerlink" title="尽管听起来跟私有属性有点类似，但符号并不是为了提供私有属性的行为才增加的（尤其是因为Object API 提供了方法，可以更方便地发现符号属性）。相反，符号就是用来创建唯一记号，进而用作非字符串形式的对象属性。"></a>尽管听起来跟私有属性有点类似，但符号并不是为了提供私有属性的行为才增加的（尤其是因为Object API 提供了方法，可以更方便地发现符号属性）。相反，符号就是用来创建唯一记号，进而用作非字符串形式的对象属性。</h5><h4 id="1-符号的基本用法"><a href="#1-符号的基本用法" class="headerlink" title="1. 符号的基本用法"></a>1. 符号的基本用法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sym = <span class="built_in">Symbol</span>();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> sym); <span class="comment">// symbol </span></span><br></pre></td></tr></table></figure><h5 id="调用-Symbol-函数时，也可以传入一个字符串参数作为对符号的描述（description），将来可以通过这个字符串来调试代码。但是，这个字符串参数与符号定义或标识完全无关："><a href="#调用-Symbol-函数时，也可以传入一个字符串参数作为对符号的描述（description），将来可以通过这个字符串来调试代码。但是，这个字符串参数与符号定义或标识完全无关：" class="headerlink" title="调用 Symbol()函数时，也可以传入一个字符串参数作为对符号的描述（description），将来可以通过这个字符串来调试代码。但是，这个字符串参数与符号定义或标识完全无关："></a>调用 Symbol()函数时，也可以传入一个字符串参数作为对符号的描述（description），将来可以通过这个字符串来调试代码。但是，这个字符串参数与符号定义或标识完全无关：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> genericSymbol = <span class="built_in">Symbol</span>();</span><br><span class="line"><span class="keyword">let</span> otherGenericSymbol = <span class="built_in">Symbol</span>();</span><br><span class="line"><span class="keyword">let</span> fooSymbol = <span class="built_in">Symbol</span>(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> otherFooSymbol = <span class="built_in">Symbol</span>(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(genericSymbol == otherGenericSymbol); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(fooSymbol == otherFooSymbol); <span class="comment">// false </span></span><br></pre></td></tr></table></figure><h5 id="符号没有字面量语法，这也是它们发挥作用的关键。按照规范，你只要创建-Symbol-实例并将其用作对象的新属性，就可以保证它不会覆盖已有的对象属性，无论是符号属性还是字符串属性。"><a href="#符号没有字面量语法，这也是它们发挥作用的关键。按照规范，你只要创建-Symbol-实例并将其用作对象的新属性，就可以保证它不会覆盖已有的对象属性，无论是符号属性还是字符串属性。" class="headerlink" title="符号没有字面量语法，这也是它们发挥作用的关键。按照规范，你只要创建 Symbol()实例并将其用作对象的新属性，就可以保证它不会覆盖已有的对象属性，无论是符号属性还是字符串属性。"></a>符号没有字面量语法，这也是它们发挥作用的关键。按照规范，你只要创建 Symbol()实例并将其用作对象的新属性，就可以保证它不会覆盖已有的对象属性，无论是符号属性还是字符串属性。</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> genericSymbol = <span class="built_in">Symbol</span>();</span><br><span class="line"><span class="built_in">console</span>.log(genericSymbol); <span class="comment">// Symbol()</span></span><br><span class="line"><span class="keyword">let</span> fooSymbol = <span class="built_in">Symbol</span>(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(fooSymbol); <span class="comment">// Symbol(foo);</span></span><br></pre></td></tr></table></figure><h5 id="最重要的是，Symbol-函数不能与-new-关键字一起作为构造函数使用。这样做是为了避免创建符号包装对象，像使用-Boolean、String-或-Number-那样，它们都支持构造函数且可用于初始化包含原始值的包装对象："><a href="#最重要的是，Symbol-函数不能与-new-关键字一起作为构造函数使用。这样做是为了避免创建符号包装对象，像使用-Boolean、String-或-Number-那样，它们都支持构造函数且可用于初始化包含原始值的包装对象：" class="headerlink" title="最重要的是，Symbol()函数不能与 new 关键字一起作为构造函数使用。这样做是为了避免创建符号包装对象，像使用 Boolean、String 或 Number 那样，它们都支持构造函数且可用于初始化包含原始值的包装对象："></a>最重要的是，Symbol()函数不能与 new 关键字一起作为构造函数使用。这样做是为了避免创建符号包装对象，像使用 Boolean、String 或 Number 那样，它们都支持构造函数且可用于初始化包含原始值的包装对象：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> myBoolean = <span class="keyword">new</span> <span class="built_in">Boolean</span>();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> myBoolean); <span class="comment">// &quot;object&quot;</span></span><br><span class="line"><span class="keyword">let</span> myString = <span class="keyword">new</span> <span class="built_in">String</span>();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> myString); <span class="comment">// &quot;object&quot;</span></span><br><span class="line"><span class="keyword">let</span> myNumber = <span class="keyword">new</span> <span class="built_in">Number</span>();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> myNumber); <span class="comment">// &quot;object&quot;</span></span><br><span class="line"><span class="keyword">let</span> mySymbol = <span class="keyword">new</span> <span class="built_in">Symbol</span>(); <span class="comment">// TypeError: Symbol is not a constructor </span></span><br></pre></td></tr></table></figure><h5 id="如果你确实想使用符号包装对象，可以借用-Object-函数："><a href="#如果你确实想使用符号包装对象，可以借用-Object-函数：" class="headerlink" title="如果你确实想使用符号包装对象，可以借用 Object()函数："></a>如果你确实想使用符号包装对象，可以借用 Object()函数：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mySymbol = <span class="built_in">Symbol</span>();</span><br><span class="line"><span class="keyword">let</span> myWrappedSymbol = <span class="built_in">Object</span>(mySymbol);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> myWrappedSymbol); <span class="comment">// &quot;object&quot; </span></span><br></pre></td></tr></table></figure><h4 id="2-使用全局符号注册表"><a href="#2-使用全局符号注册表" class="headerlink" title="2. 使用全局符号注册表"></a>2. 使用全局符号注册表</h4><h5 id="如果运行时的不同部分需要共享和重用符号实例，那么可以用一个字符串作为键，在全局符号注册表中创建并重用符号。"><a href="#如果运行时的不同部分需要共享和重用符号实例，那么可以用一个字符串作为键，在全局符号注册表中创建并重用符号。" class="headerlink" title="如果运行时的不同部分需要共享和重用符号实例，那么可以用一个字符串作为键，在全局符号注册表中创建并重用符号。"></a>如果运行时的不同部分需要共享和重用符号实例，那么可以用一个字符串作为键，在全局符号注册表中创建并重用符号。</h5><h5 id="为此，需要使用-Symbol-for-方法："><a href="#为此，需要使用-Symbol-for-方法：" class="headerlink" title="为此，需要使用 Symbol.for()方法："></a>为此，需要使用 Symbol.for()方法：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fooGlobalSymbol = <span class="built_in">Symbol</span>.for(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> fooGlobalSymbol); <span class="comment">// symbol </span></span><br></pre></td></tr></table></figure><h5 id="Symbol-for-对每个字符串键都执行幂等操作。第一次使用某个字符串调用时，它会检查全局运行时注册表，发现不存在对应的符号，于是就会生成一个新符号实例并添加到注册表中。后续使用相同字符串的调用同样会检查注册表，发现存在与该字符串对应的符号，然后就会返回该符号实例。"><a href="#Symbol-for-对每个字符串键都执行幂等操作。第一次使用某个字符串调用时，它会检查全局运行时注册表，发现不存在对应的符号，于是就会生成一个新符号实例并添加到注册表中。后续使用相同字符串的调用同样会检查注册表，发现存在与该字符串对应的符号，然后就会返回该符号实例。" class="headerlink" title="Symbol.for()对每个字符串键都执行幂等操作。第一次使用某个字符串调用时，它会检查全局运行时注册表，发现不存在对应的符号，于是就会生成一个新符号实例并添加到注册表中。后续使用相同字符串的调用同样会检查注册表，发现存在与该字符串对应的符号，然后就会返回该符号实例。"></a>Symbol.for()对每个字符串键都执行幂等操作。第一次使用某个字符串调用时，它会检查全局运行时注册表，发现不存在对应的符号，于是就会生成一个新符号实例并添加到注册表中。后续使用相同字符串的调用同样会检查注册表，发现存在与该字符串对应的符号，然后就会返回该符号实例。</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fooGlobalSymbol = <span class="built_in">Symbol</span>.for(<span class="string">&#x27;foo&#x27;</span>); <span class="comment">// 创建新符号</span></span><br><span class="line"><span class="keyword">let</span> otherFooGlobalSymbol = <span class="built_in">Symbol</span>.for(<span class="string">&#x27;foo&#x27;</span>); <span class="comment">// 重用已有符号</span></span><br><span class="line"><span class="built_in">console</span>.log(fooGlobalSymbol === otherFooGlobalSymbol); <span class="comment">// true </span></span><br></pre></td></tr></table></figure><h5 id="即使采用相同的符号描述，在全局注册表中定义的符号跟使用-Symbol-定义的符号也并不等同："><a href="#即使采用相同的符号描述，在全局注册表中定义的符号跟使用-Symbol-定义的符号也并不等同：" class="headerlink" title="即使采用相同的符号描述，在全局注册表中定义的符号跟使用 Symbol()定义的符号也并不等同："></a>即使采用相同的符号描述，在全局注册表中定义的符号跟使用 Symbol()定义的符号也并不等同：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> localSymbol = <span class="built_in">Symbol</span>(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> globalSymbol = <span class="built_in">Symbol</span>.for(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(localSymbol === globalSymbol); <span class="comment">// false </span></span><br></pre></td></tr></table></figure><h5 id="全局注册表中的符号必须使用字符串键来创建，因此作为参数传给-Symbol-for-的任何值都会被转换为字符串。此外，注册表中使用的键同时也会被用作符号描述。"><a href="#全局注册表中的符号必须使用字符串键来创建，因此作为参数传给-Symbol-for-的任何值都会被转换为字符串。此外，注册表中使用的键同时也会被用作符号描述。" class="headerlink" title="全局注册表中的符号必须使用字符串键来创建，因此作为参数传给 Symbol.for()的任何值都会被转换为字符串。此外，注册表中使用的键同时也会被用作符号描述。"></a>全局注册表中的符号必须使用字符串键来创建，因此作为参数传给 Symbol.for()的任何值都会被转换为字符串。此外，注册表中使用的键同时也会被用作符号描述。</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> emptyGlobalSymbol = <span class="built_in">Symbol</span>.for();</span><br><span class="line"><span class="built_in">console</span>.log(emptyGlobalSymbol); <span class="comment">// Symbol(undefined) </span></span><br></pre></td></tr></table></figure><h5 id="还可以使用-Symbol-keyFor-来查询全局注册表，这个方法接收符号，返回该全局符号对应的字符串键。如果查询的不是全局符号，则返回-undefined。"><a href="#还可以使用-Symbol-keyFor-来查询全局注册表，这个方法接收符号，返回该全局符号对应的字符串键。如果查询的不是全局符号，则返回-undefined。" class="headerlink" title="还可以使用 Symbol.keyFor()来查询全局注册表，这个方法接收符号，返回该全局符号对应的字符串键。如果查询的不是全局符号，则返回 undefined。"></a>还可以使用 Symbol.keyFor()来查询全局注册表，这个方法接收符号，返回该全局符号对应的字符串键。如果查询的不是全局符号，则返回 undefined。</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建全局符号</span></span><br><span class="line"><span class="keyword">let</span> s = <span class="built_in">Symbol</span>.for(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Symbol</span>.keyFor(s)); <span class="comment">// foo</span></span><br><span class="line"><span class="comment">// 创建普通符号</span></span><br><span class="line"><span class="keyword">let</span> s2 = <span class="built_in">Symbol</span>(<span class="string">&#x27;bar&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Symbol</span>.keyFor(s2)); <span class="comment">// undefined </span></span><br></pre></td></tr></table></figure><h5 id="如果传给-Symbol-keyFor-的不是符号，则该方法抛出-TypeError："><a href="#如果传给-Symbol-keyFor-的不是符号，则该方法抛出-TypeError：" class="headerlink" title="如果传给 Symbol.keyFor()的不是符号，则该方法抛出 TypeError："></a>如果传给 Symbol.keyFor()的不是符号，则该方法抛出 TypeError：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Symbol</span>.keyFor(<span class="number">123</span>); <span class="comment">// TypeError: 123 is not a symbol</span></span><br></pre></td></tr></table></figure><h4 id="3-使用符号作为属性"><a href="#3-使用符号作为属性" class="headerlink" title="3. 使用符号作为属性"></a>3. 使用符号作为属性</h4><h5 id="凡是可以使用字符串或数值作为属性的地方，都可以使用符号。这就包括了对象字面量属性和Object-defineProperty-Object-defineProperties-定义的属性。对象字面量只能在计算属性语法中使用符号作为属性。"><a href="#凡是可以使用字符串或数值作为属性的地方，都可以使用符号。这就包括了对象字面量属性和Object-defineProperty-Object-defineProperties-定义的属性。对象字面量只能在计算属性语法中使用符号作为属性。" class="headerlink" title="凡是可以使用字符串或数值作为属性的地方，都可以使用符号。这就包括了对象字面量属性和Object.defineProperty()/Object.defineProperties()定义的属性。对象字面量只能在计算属性语法中使用符号作为属性。"></a>凡是可以使用字符串或数值作为属性的地方，都可以使用符号。这就包括了对象字面量属性和Object.defineProperty()/Object.defineProperties()定义的属性。对象字面量只能在计算属性语法中使用符号作为属性。</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> s1 = <span class="built_in">Symbol</span>(<span class="string">&#x27;foo&#x27;</span>),</span><br><span class="line"> s2 = <span class="built_in">Symbol</span>(<span class="string">&#x27;bar&#x27;</span>),</span><br><span class="line"> s3 = <span class="built_in">Symbol</span>(<span class="string">&#x27;baz&#x27;</span>),</span><br><span class="line"> s4 = <span class="built_in">Symbol</span>(<span class="string">&#x27;qux&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> o = &#123;</span><br><span class="line"> [s1]: <span class="string">&#x27;foo val&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 这样也可以：o[s1] = &#x27;foo val&#x27;;</span></span><br><span class="line"><span class="built_in">console</span>.log(o);</span><br><span class="line"><span class="comment">// &#123;Symbol(foo): foo val&#125;</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(o, s2, &#123;<span class="attr">value</span>: <span class="string">&#x27;bar val&#x27;</span>&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(o);</span><br><span class="line"><span class="comment">// &#123;Symbol(foo): foo val, Symbol(bar): bar val&#125;</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperties(o, &#123;</span><br><span class="line"> [s3]: &#123;<span class="attr">value</span>: <span class="string">&#x27;baz val&#x27;</span>&#125;,</span><br><span class="line"> [s4]: &#123;<span class="attr">value</span>: <span class="string">&#x27;qux val&#x27;</span>&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(o);</span><br><span class="line"><span class="comment">// &#123;Symbol(foo): foo val, Symbol(bar): bar val,</span></span><br><span class="line"><span class="comment">// Symbol(baz): baz val, Symbol(qux): qux val&#125;</span></span><br></pre></td></tr></table></figure><h5 id="类似于-Object-getOwnPropertyNames-返回对象实例的常规属性数组，Object-getOwnPropertySymbols-返回对象实例的符号属性数组。这两个方法的返回值彼此互斥。Object-getOwnPropertyDescriptors-会返回同时包含常规和符号属性描述符的对象。Reflect-ownKeys-会返回两种类型的键："><a href="#类似于-Object-getOwnPropertyNames-返回对象实例的常规属性数组，Object-getOwnPropertySymbols-返回对象实例的符号属性数组。这两个方法的返回值彼此互斥。Object-getOwnPropertyDescriptors-会返回同时包含常规和符号属性描述符的对象。Reflect-ownKeys-会返回两种类型的键：" class="headerlink" title="类似于 Object.getOwnPropertyNames()返回对象实例的常规属性数组，Object.getOwnPropertySymbols()返回对象实例的符号属性数组。这两个方法的返回值彼此互斥。Object.getOwnPropertyDescriptors()会返回同时包含常规和符号属性描述符的对象。Reflect.ownKeys()会返回两种类型的键："></a>类似于 Object.getOwnPropertyNames()返回对象实例的常规属性数组，Object.getOwnPropertySymbols()返回对象实例的符号属性数组。这两个方法的返回值彼此互斥。Object.getOwnPropertyDescriptors()会返回同时包含常规和符号属性描述符的对象。Reflect.ownKeys()会返回两种类型的键：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> s1 = <span class="built_in">Symbol</span>(<span class="string">&#x27;foo&#x27;</span>),</span><br><span class="line"> s2 = <span class="built_in">Symbol</span>(<span class="string">&#x27;bar&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> o = &#123;</span><br><span class="line"> [s1]: <span class="string">&#x27;foo val&#x27;</span>,</span><br><span class="line"> [s2]: <span class="string">&#x27;bar val&#x27;</span>,</span><br><span class="line"> baz: <span class="string">&#x27;baz val&#x27;</span>,</span><br><span class="line"> qux: <span class="string">&#x27;qux val&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertySymbols(o));</span><br><span class="line"><span class="comment">// [Symbol(foo), Symbol(bar)]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertyNames(o));</span><br><span class="line"><span class="comment">// [&quot;baz&quot;, &quot;qux&quot;]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertyDescriptors(o));</span><br><span class="line"><span class="comment">// &#123;baz: &#123;...&#125;, qux: &#123;...&#125;, Symbol(foo): &#123;...&#125;, Symbol(bar): &#123;...&#125;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Reflect</span>.ownKeys(o));</span><br><span class="line"><span class="comment">// [&quot;baz&quot;, &quot;qux&quot;, Symbol(foo), Symbol(bar)] </span></span><br></pre></td></tr></table></figure><h5 id="因为符号属性是对内存中符号的一个引用，所以直接创建并用作属性的符号不会丢失。但是，如果没有显式地保存对这些属性的引用，那么必须遍历对象的所有符号属性才能找到相应的属性键："><a href="#因为符号属性是对内存中符号的一个引用，所以直接创建并用作属性的符号不会丢失。但是，如果没有显式地保存对这些属性的引用，那么必须遍历对象的所有符号属性才能找到相应的属性键：" class="headerlink" title="因为符号属性是对内存中符号的一个引用，所以直接创建并用作属性的符号不会丢失。但是，如果没有显式地保存对这些属性的引用，那么必须遍历对象的所有符号属性才能找到相应的属性键："></a>因为符号属性是对内存中符号的一个引用，所以直接创建并用作属性的符号不会丢失。但是，如果没有显式地保存对这些属性的引用，那么必须遍历对象的所有符号属性才能找到相应的属性键：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> o = &#123;</span><br><span class="line"> [<span class="built_in">Symbol</span>(<span class="string">&#x27;foo&#x27;</span>)]: <span class="string">&#x27;foo val&#x27;</span>,</span><br><span class="line"> [<span class="built_in">Symbol</span>(<span class="string">&#x27;bar&#x27;</span>)]: <span class="string">&#x27;bar val&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(o);</span><br><span class="line"><span class="comment">// &#123;Symbol(foo): &quot;foo val&quot;, Symbol(bar): &quot;bar val&quot;&#125;</span></span><br><span class="line"><span class="keyword">let</span> barSymbol = <span class="built_in">Object</span>.getOwnPropertySymbols(o)</span><br><span class="line"> .find(<span class="function">(<span class="params">symbol</span>) =&gt;</span> symbol.toString().match(<span class="regexp">/bar/</span>));</span><br><span class="line"><span class="built_in">console</span>.log(barSymbol);</span><br><span class="line"><span class="comment">// Symbol(bar) </span></span><br></pre></td></tr></table></figure><h4 id="4-常用内置符号"><a href="#4-常用内置符号" class="headerlink" title="4. 常用内置符号"></a>4. 常用内置符号</h4><h5 id="ECMAScript-6-也引入了一批常用内置符号（well-known-symbol），用于暴露语言内部行为，开发者可以直接访问、重写或模拟这些行为。这些内置符号都以-Symbol-工厂函数字符串属性的形式存在。"><a href="#ECMAScript-6-也引入了一批常用内置符号（well-known-symbol），用于暴露语言内部行为，开发者可以直接访问、重写或模拟这些行为。这些内置符号都以-Symbol-工厂函数字符串属性的形式存在。" class="headerlink" title="ECMAScript 6 也引入了一批常用内置符号（well-known symbol），用于暴露语言内部行为，开发者可以直接访问、重写或模拟这些行为。这些内置符号都以 Symbol 工厂函数字符串属性的形式存在。"></a>ECMAScript 6 也引入了一批常用内置符号（well-known symbol），用于暴露语言内部行为，开发者可以直接访问、重写或模拟这些行为。这些内置符号都以 Symbol 工厂函数字符串属性的形式存在。</h5><h5 id="这些内置符号最重要的用途之一是重新定义它们，从而改变原生结构的行为。比如，我们知道for-of-循环会在相关对象上使用-Symbol-iterator-属性，那么就可以通过在自定义对象上重新定义Symbol-iterator-的值，来改变-for-of-在迭代该对象时的行为。这些内置符号也没有什么特别之处，它们就是全局函数-Symbol-的普通字符串属性，指向一个符号的实例。所有内置符号属性都是不可写、不可枚举、不可配置的。"><a href="#这些内置符号最重要的用途之一是重新定义它们，从而改变原生结构的行为。比如，我们知道for-of-循环会在相关对象上使用-Symbol-iterator-属性，那么就可以通过在自定义对象上重新定义Symbol-iterator-的值，来改变-for-of-在迭代该对象时的行为。这些内置符号也没有什么特别之处，它们就是全局函数-Symbol-的普通字符串属性，指向一个符号的实例。所有内置符号属性都是不可写、不可枚举、不可配置的。" class="headerlink" title="这些内置符号最重要的用途之一是重新定义它们，从而改变原生结构的行为。比如，我们知道for-of 循环会在相关对象上使用 Symbol.iterator 属性，那么就可以通过在自定义对象上重新定义Symbol.iterator 的值，来改变 for-of 在迭代该对象时的行为。这些内置符号也没有什么特别之处，它们就是全局函数 Symbol 的普通字符串属性，指向一个符号的实例。所有内置符号属性都是不可写、不可枚举、不可配置的。"></a>这些内置符号最重要的用途之一是重新定义它们，从而改变原生结构的行为。比如，我们知道for-of 循环会在相关对象上使用 Symbol.iterator 属性，那么就可以通过在自定义对象上重新定义Symbol.iterator 的值，来改变 for-of 在迭代该对象时的行为。这些内置符号也没有什么特别之处，它们就是全局函数 Symbol 的普通字符串属性，指向一个符号的实例。所有内置符号属性都是不可写、不可枚举、不可配置的。</h5><h4 id="5-Symbol-asyncIterator"><a href="#5-Symbol-asyncIterator" class="headerlink" title="5. Symbol.asyncIterator"></a>5. Symbol.asyncIterator</h4><h5 id="根据-ECMAScript-规范，这个符号作为一个属性表示“一个方法，该方法返回对象默认的-AsyncIterator。由-for-await-of-语句使用”。换句话说，这个符号表示实现异步迭代器-API-的函数。"><a href="#根据-ECMAScript-规范，这个符号作为一个属性表示“一个方法，该方法返回对象默认的-AsyncIterator。由-for-await-of-语句使用”。换句话说，这个符号表示实现异步迭代器-API-的函数。" class="headerlink" title="根据 ECMAScript 规范，这个符号作为一个属性表示“一个方法，该方法返回对象默认的 AsyncIterator。由 for-await-of 语句使用”。换句话说，这个符号表示实现异步迭代器 API 的函数。"></a>根据 ECMAScript 规范，这个符号作为一个属性表示“一个方法，该方法返回对象默认的 AsyncIterator。由 for-await-of 语句使用”。换句话说，这个符号表示实现异步迭代器 API 的函数。</h5><h5 id="for-await-of-循环会利用这个函数执行异步迭代操作。循环时，它们会调用以-Symbol-asyncIterator为键的函数，并期望这个函数会返回一个实现迭代器-API-的对象。很多时候，返回的对象是实现该-API的-AsyncGenerator："><a href="#for-await-of-循环会利用这个函数执行异步迭代操作。循环时，它们会调用以-Symbol-asyncIterator为键的函数，并期望这个函数会返回一个实现迭代器-API-的对象。很多时候，返回的对象是实现该-API的-AsyncGenerator：" class="headerlink" title="for-await-of 循环会利用这个函数执行异步迭代操作。循环时，它们会调用以 Symbol.asyncIterator为键的函数，并期望这个函数会返回一个实现迭代器 API 的对象。很多时候，返回的对象是实现该 API的 AsyncGenerator："></a>for-await-of 循环会利用这个函数执行异步迭代操作。循环时，它们会调用以 Symbol.asyncIterator为键的函数，并期望这个函数会返回一个实现迭代器 API 的对象。很多时候，返回的对象是实现该 API的 AsyncGenerator：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line"> <span class="keyword">async</span> *[<span class="built_in">Symbol</span>.asyncIterator]() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> f = <span class="keyword">new</span> Foo();</span><br><span class="line"><span class="built_in">console</span>.log(f[<span class="built_in">Symbol</span>.asyncIterator]());</span><br><span class="line"><span class="comment">// AsyncGenerator &#123;&lt;suspended&gt;&#125; </span></span><br></pre></td></tr></table></figure><h5 id="技术上，这个由-Symbol-asyncIterator-函数生成的对象应该通过其-next-方法陆续返回Promise-实例。可以通过显式地调用-next-方法返回，也可以隐式地通过异步生成器函数返回："><a href="#技术上，这个由-Symbol-asyncIterator-函数生成的对象应该通过其-next-方法陆续返回Promise-实例。可以通过显式地调用-next-方法返回，也可以隐式地通过异步生成器函数返回：" class="headerlink" title="技术上，这个由 Symbol.asyncIterator 函数生成的对象应该通过其 next()方法陆续返回Promise 实例。可以通过显式地调用 next()方法返回，也可以隐式地通过异步生成器函数返回："></a>技术上，这个由 Symbol.asyncIterator 函数生成的对象应该通过其 next()方法陆续返回Promise 实例。可以通过显式地调用 next()方法返回，也可以隐式地通过异步生成器函数返回：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Emitter</span> </span>&#123;</span><br><span class="line"> <span class="keyword">constructor</span>(max) &#123;</span><br><span class="line"> <span class="built_in">this</span>.max = max;</span><br><span class="line"> <span class="built_in">this</span>.asyncIdx = <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">async</span> *[<span class="built_in">Symbol</span>.asyncIterator]() &#123;</span><br><span class="line"> <span class="keyword">while</span>(<span class="built_in">this</span>.asyncIdx &lt; <span class="built_in">this</span>.max) &#123;</span><br><span class="line"> <span class="keyword">yield</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> resolve(<span class="built_in">this</span>.asyncIdx++));</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">asyncCount</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">let</span> emitter = <span class="keyword">new</span> Emitter(<span class="number">5</span>);</span><br><span class="line"> <span class="keyword">for</span> <span class="keyword">await</span>(<span class="keyword">const</span> x <span class="keyword">of</span> emitter) &#123;</span><br><span class="line"> <span class="built_in">console</span>.log(x);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">asyncCount();</span><br><span class="line"><span class="comment">// 0</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="comment">// 4</span></span><br></pre></td></tr></table></figure><h4 id="注意-Symbol-asyncIterator-是-ES2018-规范定义的，因此只有版本非常新的浏览器支持它。"><a href="#注意-Symbol-asyncIterator-是-ES2018-规范定义的，因此只有版本非常新的浏览器支持它。" class="headerlink" title="注意 Symbol.asyncIterator 是 ES2018 规范定义的，因此只有版本非常新的浏览器支持它。"></a>注意 Symbol.asyncIterator 是 ES2018 规范定义的，因此只有版本非常新的浏览器支持它。</h4><h4 id="6-Symbol-hasInstance"><a href="#6-Symbol-hasInstance" class="headerlink" title="6. Symbol.hasInstance"></a>6. Symbol.hasInstance</h4><h5 id="根据-ECMAScript-规范，这个符号作为一个属性表示“一个方法，该方法决定一个构造器对象是否认可一个对象是它的实例。由-instanceof-操作符使用”。instanceof-操作符可以用来确定一个对象实例的原型链上是否有原型。instanceof-的典型使用场景如下："><a href="#根据-ECMAScript-规范，这个符号作为一个属性表示“一个方法，该方法决定一个构造器对象是否认可一个对象是它的实例。由-instanceof-操作符使用”。instanceof-操作符可以用来确定一个对象实例的原型链上是否有原型。instanceof-的典型使用场景如下：" class="headerlink" title="根据 ECMAScript 规范，这个符号作为一个属性表示“一个方法，该方法决定一个构造器对象是否认可一个对象是它的实例。由 instanceof 操作符使用”。instanceof 操作符可以用来确定一个对象实例的原型链上是否有原型。instanceof 的典型使用场景如下："></a>根据 ECMAScript 规范，这个符号作为一个属性表示“一个方法，该方法决定一个构造器对象是否认可一个对象是它的实例。由 instanceof 操作符使用”。instanceof 操作符可以用来确定一个对象实例的原型链上是否有原型。instanceof 的典型使用场景如下：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">let</span> f = <span class="keyword">new</span> Foo();</span><br><span class="line"><span class="built_in">console</span>.log(f <span class="keyword">instanceof</span> Foo); <span class="comment">// true</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bar</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> Bar();</span><br><span class="line"><span class="built_in">console</span>.log(b <span class="keyword">instanceof</span> Bar); <span class="comment">// true </span></span><br></pre></td></tr></table></figure><h5 id="在-ES6-中，instanceof-操作符会使用-Symbol-hasInstance-函数来确定关系。以-Symbol-hasInstance-为键的函数会执行同样的操作，只是操作数对调了一下："><a href="#在-ES6-中，instanceof-操作符会使用-Symbol-hasInstance-函数来确定关系。以-Symbol-hasInstance-为键的函数会执行同样的操作，只是操作数对调了一下：" class="headerlink" title="在 ES6 中，instanceof 操作符会使用 Symbol.hasInstance 函数来确定关系。以 Symbol.hasInstance 为键的函数会执行同样的操作，只是操作数对调了一下："></a>在 ES6 中，instanceof 操作符会使用 Symbol.hasInstance 函数来确定关系。以 Symbol.hasInstance 为键的函数会执行同样的操作，只是操作数对调了一下：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">let</span> f = <span class="keyword">new</span> Foo();</span><br><span class="line"><span class="built_in">console</span>.log(Foo[<span class="built_in">Symbol</span>.hasInstance](f)); <span class="comment">// true</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bar</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> Bar();</span><br><span class="line"><span class="built_in">console</span>.log(Bar[<span class="built_in">Symbol</span>.hasInstance](b)); <span class="comment">// true </span></span><br></pre></td></tr></table></figure><h5 id="这个属性定义在-Function-的原型上，因此默认在所有函数和类上都可以调用。由于-instanceof操作符会在原型链上寻找这个属性定义，就跟在原型链上寻找其他属性一样，因此可以在继承的类上通过静态方法重新定义这个函数："><a href="#这个属性定义在-Function-的原型上，因此默认在所有函数和类上都可以调用。由于-instanceof操作符会在原型链上寻找这个属性定义，就跟在原型链上寻找其他属性一样，因此可以在继承的类上通过静态方法重新定义这个函数：" class="headerlink" title="这个属性定义在 Function 的原型上，因此默认在所有函数和类上都可以调用。由于 instanceof操作符会在原型链上寻找这个属性定义，就跟在原型链上寻找其他属性一样，因此可以在继承的类上通过静态方法重新定义这个函数："></a>这个属性定义在 Function 的原型上，因此默认在所有函数和类上都可以调用。由于 instanceof操作符会在原型链上寻找这个属性定义，就跟在原型链上寻找其他属性一样，因此可以在继承的类上通过静态方法重新定义这个函数：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bar</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Baz</span> <span class="keyword">extends</span> <span class="title">Bar</span> </span>&#123;</span><br><span class="line"> <span class="keyword">static</span> [<span class="built_in">Symbol</span>.hasInstance]() &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> Baz();</span><br><span class="line"><span class="built_in">console</span>.log(Bar[<span class="built_in">Symbol</span>.hasInstance](b)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(b <span class="keyword">instanceof</span> Bar); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(Baz[<span class="built_in">Symbol</span>.hasInstance](b)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(b <span class="keyword">instanceof</span> Baz); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h4 id="7-Symbol-isConcatSpreadable"><a href="#7-Symbol-isConcatSpreadable" class="headerlink" title="7. Symbol.isConcatSpreadable"></a>7. Symbol.isConcatSpreadable</h4><h5 id="根据-ECMAScript-规范，这个符号作为一个属性表示“一个布尔值，如果是-true，则意味着对象应该用-Array-prototype-concat-打平其数组元素”。ES6-中的-Array-prototype-concat-方法会根据接收到的对象类型选择如何将一个类数组对象拼接成数组实例。覆盖-Symbol-isConcatSpreadable-的值可以修改这个行为。"><a href="#根据-ECMAScript-规范，这个符号作为一个属性表示“一个布尔值，如果是-true，则意味着对象应该用-Array-prototype-concat-打平其数组元素”。ES6-中的-Array-prototype-concat-方法会根据接收到的对象类型选择如何将一个类数组对象拼接成数组实例。覆盖-Symbol-isConcatSpreadable-的值可以修改这个行为。" class="headerlink" title="根据 ECMAScript 规范，这个符号作为一个属性表示“一个布尔值，如果是 true，则意味着对象应该用 Array.prototype.concat()打平其数组元素”。ES6 中的 Array.prototype.concat()方法会根据接收到的对象类型选择如何将一个类数组对象拼接成数组实例。覆盖 Symbol.isConcatSpreadable 的值可以修改这个行为。"></a>根据 ECMAScript 规范，这个符号作为一个属性表示“一个布尔值，如果是 true，则意味着对象应该用 Array.prototype.concat()打平其数组元素”。ES6 中的 Array.prototype.concat()方法会根据接收到的对象类型选择如何将一个类数组对象拼接成数组实例。覆盖 Symbol.isConcatSpreadable 的值可以修改这个行为。</h5><h5 id="数组对象默认情况下会被打平到已有的数组，false-或假值会导致整个对象被追加到数组末尾。类数组对象默认情况下会被追加到数组末尾，true-或真值会导致这个类数组对象被打平到数组实例。其他不是类数组对象的对象在-Symbol-isConcatSpreadable-被设置为-true-的情况下将被忽略。"><a href="#数组对象默认情况下会被打平到已有的数组，false-或假值会导致整个对象被追加到数组末尾。类数组对象默认情况下会被追加到数组末尾，true-或真值会导致这个类数组对象被打平到数组实例。其他不是类数组对象的对象在-Symbol-isConcatSpreadable-被设置为-true-的情况下将被忽略。" class="headerlink" title="数组对象默认情况下会被打平到已有的数组，false 或假值会导致整个对象被追加到数组末尾。类数组对象默认情况下会被追加到数组末尾，true 或真值会导致这个类数组对象被打平到数组实例。其他不是类数组对象的对象在 Symbol.isConcatSpreadable 被设置为 true 的情况下将被忽略。"></a>数组对象默认情况下会被打平到已有的数组，false 或假值会导致整个对象被追加到数组末尾。类数组对象默认情况下会被追加到数组末尾，true 或真值会导致这个类数组对象被打平到数组实例。其他不是类数组对象的对象在 Symbol.isConcatSpreadable 被设置为 true 的情况下将被忽略。</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> initial = [<span class="string">&#x27;foo&#x27;</span>];</span><br><span class="line"><span class="keyword">let</span> array = [<span class="string">&#x27;bar&#x27;</span>];</span><br><span class="line"><span class="built_in">console</span>.log(array[<span class="built_in">Symbol</span>.isConcatSpreadable]); <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(initial.concat(array)); <span class="comment">// [&#x27;foo&#x27;, &#x27;bar&#x27;]</span></span><br><span class="line">array[<span class="built_in">Symbol</span>.isConcatSpreadable] = <span class="literal">false</span>;</span><br><span class="line"><span class="built_in">console</span>.log(initial.concat(array)); <span class="comment">// [&#x27;foo&#x27;, Array(1)] </span></span><br><span class="line"><span class="keyword">let</span> arrayLikeObject = &#123; <span class="attr">length</span>: <span class="number">1</span>, <span class="number">0</span>: <span class="string">&#x27;baz&#x27;</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(arrayLikeObject[<span class="built_in">Symbol</span>.isConcatSpreadable]); <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(initial.concat(arrayLikeObject)); <span class="comment">// [&#x27;foo&#x27;, &#123;...&#125;]</span></span><br><span class="line">arrayLikeObject[<span class="built_in">Symbol</span>.isConcatSpreadable] = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">console</span>.log(initial.concat(arrayLikeObject)); <span class="comment">// [&#x27;foo&#x27;, &#x27;baz&#x27;]</span></span><br><span class="line"><span class="keyword">let</span> otherObject = <span class="keyword">new</span> <span class="built_in">Set</span>().add(<span class="string">&#x27;qux&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(otherObject[<span class="built_in">Symbol</span>.isConcatSpreadable]); <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(initial.concat(otherObject)); <span class="comment">// [&#x27;foo&#x27;, Set(1)]</span></span><br><span class="line">otherObject[<span class="built_in">Symbol</span>.isConcatSpreadable] = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">console</span>.log(initial.concat(otherObject)); <span class="comment">// [&#x27;foo&#x27;] </span></span><br></pre></td></tr></table></figure><h4 id="8-Symbol-iterator"><a href="#8-Symbol-iterator" class="headerlink" title="8. Symbol.iterator"></a>8. Symbol.iterator</h4><h5 id="根据-ECMAScript-规范，这个符号作为一个属性表示“一个方法，该方法返回对象默认的迭代器。由-for-of-语句使用”。换句话说，这个符号表示实现迭代器-API-的函数。"><a href="#根据-ECMAScript-规范，这个符号作为一个属性表示“一个方法，该方法返回对象默认的迭代器。由-for-of-语句使用”。换句话说，这个符号表示实现迭代器-API-的函数。" class="headerlink" title="根据 ECMAScript 规范，这个符号作为一个属性表示“一个方法，该方法返回对象默认的迭代器。由 for-of 语句使用”。换句话说，这个符号表示实现迭代器 API 的函数。"></a>根据 ECMAScript 规范，这个符号作为一个属性表示“一个方法，该方法返回对象默认的迭代器。由 for-of 语句使用”。换句话说，这个符号表示实现迭代器 API 的函数。</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line"> *[<span class="built_in">Symbol</span>.iterator]() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> f = <span class="keyword">new</span> Foo();</span><br><span class="line"><span class="built_in">console</span>.log(f[<span class="built_in">Symbol</span>.iterator]());</span><br><span class="line"><span class="comment">// Generator &#123;&lt;suspended&gt;&#125; </span></span><br></pre></td></tr></table></figure><h5 id="技术上，这个由-Symbol-iterator-函数生成的对象应该通过其-next-方法陆续返回值。可以通过显式地调用-next-方法返回，也可以隐式地通过生成器函数返回："><a href="#技术上，这个由-Symbol-iterator-函数生成的对象应该通过其-next-方法陆续返回值。可以通过显式地调用-next-方法返回，也可以隐式地通过生成器函数返回：" class="headerlink" title="技术上，这个由 Symbol.iterator 函数生成的对象应该通过其 next()方法陆续返回值。可以通过显式地调用 next()方法返回，也可以隐式地通过生成器函数返回："></a>技术上，这个由 Symbol.iterator 函数生成的对象应该通过其 next()方法陆续返回值。可以通过显式地调用 next()方法返回，也可以隐式地通过生成器函数返回：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Emitter</span> </span>&#123;</span><br><span class="line"> <span class="keyword">constructor</span>(max) &#123;</span><br><span class="line"> <span class="built_in">this</span>.max = max;</span><br><span class="line"> <span class="built_in">this</span>.idx = <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> *[<span class="built_in">Symbol</span>.iterator]() &#123;</span><br><span class="line"> <span class="keyword">while</span>(<span class="built_in">this</span>.idx &lt; <span class="built_in">this</span>.max) &#123;</span><br><span class="line"> <span class="keyword">yield</span> <span class="built_in">this</span>.idx++;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">count</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">let</span> emitter = <span class="keyword">new</span> Emitter(<span class="number">5</span>);</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">const</span> x <span class="keyword">of</span> emitter) &#123;</span><br><span class="line"> <span class="built_in">console</span>.log(x);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">count();</span><br><span class="line"><span class="comment">// 0 </span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="comment">// 4</span></span><br></pre></td></tr></table></figure><h4 id="9-Symbol-match"><a href="#9-Symbol-match" class="headerlink" title="9. Symbol.match"></a>9. Symbol.match</h4><h5 id="根据-ECMAScript-规范，这个符号作为一个属性表示“一个正则表达式方法，该方法用正则表达式去匹配字符串。由-String-prototype-match-方法使用”。String-prototype-match-方法会使用以-Symbol-match-为键的函数来对正则表达式求值。正则表达式的原型上默认有这个函数的定义，因此所有正则表达式实例默认是这个-String-方法的有效参数"><a href="#根据-ECMAScript-规范，这个符号作为一个属性表示“一个正则表达式方法，该方法用正则表达式去匹配字符串。由-String-prototype-match-方法使用”。String-prototype-match-方法会使用以-Symbol-match-为键的函数来对正则表达式求值。正则表达式的原型上默认有这个函数的定义，因此所有正则表达式实例默认是这个-String-方法的有效参数" class="headerlink" title="根据 ECMAScript 规范，这个符号作为一个属性表示“一个正则表达式方法，该方法用正则表达式去匹配字符串。由 String.prototype.match()方法使用”。String.prototype.match()方法会使用以 Symbol.match 为键的函数来对正则表达式求值。正则表达式的原型上默认有这个函数的定义，因此所有正则表达式实例默认是这个 String 方法的有效参数"></a>根据 ECMAScript 规范，这个符号作为一个属性表示“一个正则表达式方法，该方法用正则表达式去匹配字符串。由 String.prototype.match()方法使用”。String.prototype.match()方法会使用以 Symbol.match 为键的函数来对正则表达式求值。正则表达式的原型上默认有这个函数的定义，因此所有正则表达式实例默认是这个 String 方法的有效参数</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.prototype[<span class="built_in">Symbol</span>.match]);</span><br><span class="line"><span class="comment">// ƒ [Symbol.match]() &#123; [native code] &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;foobar&#x27;</span>.match(<span class="regexp">/bar/</span>));</span><br><span class="line"><span class="comment">// [&quot;bar&quot;, index: 3, input: &quot;foobar&quot;, groups: undefined]</span></span><br><span class="line">~~~ </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### 10. Symbol.replace</span><br><span class="line">##### 根据 ECMAScript 规范，这个符号作为一个属性表示“一个正则表达式方法，该方法替换一个字符串中匹配的子串。由 String.prototype.replace()方法使用”。String.prototype.replace()方法会使用以 Symbol.replace 为键的函数来对正则表达式求值。正则表达式的原型上默认有这个函数的定义，因此所有正则表达式实例默认是这个 String 方法的有效参数：</span><br><span class="line">~~~JavaScript</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.prototype[<span class="built_in">Symbol</span>.replace]);</span><br><span class="line"><span class="comment">// ƒ [Symbol.replace]() &#123; [native code] &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;foobarbaz&#x27;</span>.replace(<span class="regexp">/bar/</span>, <span class="string">&#x27;qux&#x27;</span>));</span><br><span class="line"><span class="comment">// &#x27;fooquxbaz&#x27; </span></span><br></pre></td></tr></table></figure><h4 id="11-Symbol-search"><a href="#11-Symbol-search" class="headerlink" title="11. Symbol.search"></a>11. Symbol.search</h4><h5 id="根据-ECMAScript-规范，这个符号作为一个属性表示“一个正则表达式方法，该方法返回字符串中匹配正则表达式的索引。由-String-prototype-search-方法使用”。String-prototype-search-方法会使用以-Symbol-search-为键的函数来对正则表达式求值。正则表达式的原型上默认有这个函数的定义，因此所有正则表达式实例默认是这个-String-方法的有效参数："><a href="#根据-ECMAScript-规范，这个符号作为一个属性表示“一个正则表达式方法，该方法返回字符串中匹配正则表达式的索引。由-String-prototype-search-方法使用”。String-prototype-search-方法会使用以-Symbol-search-为键的函数来对正则表达式求值。正则表达式的原型上默认有这个函数的定义，因此所有正则表达式实例默认是这个-String-方法的有效参数：" class="headerlink" title="根据 ECMAScript 规范，这个符号作为一个属性表示“一个正则表达式方法，该方法返回字符串中匹配正则表达式的索引。由 String.prototype.search()方法使用”。String.prototype.search()方法会使用以 Symbol.search 为键的函数来对正则表达式求值。正则表达式的原型上默认有这个函数的定义，因此所有正则表达式实例默认是这个 String 方法的有效参数："></a>根据 ECMAScript 规范，这个符号作为一个属性表示“一个正则表达式方法，该方法返回字符串中匹配正则表达式的索引。由 String.prototype.search()方法使用”。String.prototype.search()方法会使用以 Symbol.search 为键的函数来对正则表达式求值。正则表达式的原型上默认有这个函数的定义，因此所有正则表达式实例默认是这个 String 方法的有效参数：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.prototype[<span class="built_in">Symbol</span>.search]);</span><br><span class="line"><span class="comment">// ƒ [Symbol.search]() &#123; [native code] &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;foobar&#x27;</span>.search(<span class="regexp">/bar/</span>));</span><br><span class="line"><span class="comment">// 3 </span></span><br></pre></td></tr></table></figure><h4 id="12-Symbol-species"><a href="#12-Symbol-species" class="headerlink" title="12. Symbol.species"></a>12. Symbol.species</h4><h5 id="根据-ECMAScript-规范，这个符号作为一个属性表示“一个函数值，该函数作为创建派生对象的构造函数”。这个属性在内置类型中最常用，用于对内置类型实例方法的返回值暴露实例化派生对象的方法。用-Symbol-species-定义静态的获取器（getter）方法，可以覆盖新创建实例的原型定义："><a href="#根据-ECMAScript-规范，这个符号作为一个属性表示“一个函数值，该函数作为创建派生对象的构造函数”。这个属性在内置类型中最常用，用于对内置类型实例方法的返回值暴露实例化派生对象的方法。用-Symbol-species-定义静态的获取器（getter）方法，可以覆盖新创建实例的原型定义：" class="headerlink" title="根据 ECMAScript 规范，这个符号作为一个属性表示“一个函数值，该函数作为创建派生对象的构造函数”。这个属性在内置类型中最常用，用于对内置类型实例方法的返回值暴露实例化派生对象的方法。用 Symbol.species 定义静态的获取器（getter）方法，可以覆盖新创建实例的原型定义："></a>根据 ECMAScript 规范，这个符号作为一个属性表示“一个函数值，该函数作为创建派生对象的构造函数”。这个属性在内置类型中最常用，用于对内置类型实例方法的返回值暴露实例化派生对象的方法。用 Symbol.species 定义静态的获取器（getter）方法，可以覆盖新创建实例的原型定义：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bar</span> <span class="keyword">extends</span> <span class="title">Array</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Baz</span> <span class="keyword">extends</span> <span class="title">Array</span> </span>&#123;</span><br><span class="line"> <span class="keyword">static</span> get [<span class="built_in">Symbol</span>.species]() &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="built_in">Array</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> bar = <span class="keyword">new</span> Bar();</span><br><span class="line"><span class="built_in">console</span>.log(bar <span class="keyword">instanceof</span> <span class="built_in">Array</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(bar <span class="keyword">instanceof</span> Bar); <span class="comment">// true</span></span><br><span class="line">bar = bar.concat(<span class="string">&#x27;bar&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(bar <span class="keyword">instanceof</span> <span class="built_in">Array</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(bar <span class="keyword">instanceof</span> Bar); <span class="comment">// true</span></span><br><span class="line"><span class="keyword">let</span> baz = <span class="keyword">new</span> Baz();</span><br><span class="line"><span class="built_in">console</span>.log(baz <span class="keyword">instanceof</span> <span class="built_in">Array</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(baz <span class="keyword">instanceof</span> Baz); <span class="comment">// true</span></span><br><span class="line">baz = baz.concat(<span class="string">&#x27;baz&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(baz <span class="keyword">instanceof</span> <span class="built_in">Array</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(baz <span class="keyword">instanceof</span> Baz); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h4 id="13-Symbol-split"><a href="#13-Symbol-split" class="headerlink" title="13. Symbol.split"></a>13. Symbol.split</h4><h5 id="根据-ECMAScript-规范，这个符号作为一个属性表示“一个正则表达式方法，该方法在匹配正则表达式的索引位置拆分字符串。由-String-prototype-split-方法使用”。String-prototype-split-方法会使用以-Symbol-split-为键的函数来对正则表达式求值。正则表达式的原型上默认有这个函数的定义，因此所有正则表达式实例默认是这个-String-方法的有效参数："><a href="#根据-ECMAScript-规范，这个符号作为一个属性表示“一个正则表达式方法，该方法在匹配正则表达式的索引位置拆分字符串。由-String-prototype-split-方法使用”。String-prototype-split-方法会使用以-Symbol-split-为键的函数来对正则表达式求值。正则表达式的原型上默认有这个函数的定义，因此所有正则表达式实例默认是这个-String-方法的有效参数：" class="headerlink" title="根据 ECMAScript 规范，这个符号作为一个属性表示“一个正则表达式方法，该方法在匹配正则表达式的索引位置拆分字符串。由 String.prototype.split()方法使用”。String.prototype.split()方法会使用以 Symbol.split 为键的函数来对正则表达式求值。正则表达式的原型上默认有这个函数的定义，因此所有正则表达式实例默认是这个 String 方法的有效参数："></a>根据 ECMAScript 规范，这个符号作为一个属性表示“一个正则表达式方法，该方法在匹配正则表达式的索引位置拆分字符串。由 String.prototype.split()方法使用”。String.prototype.split()方法会使用以 Symbol.split 为键的函数来对正则表达式求值。正则表达式的原型上默认有这个函数的定义，因此所有正则表达式实例默认是这个 String 方法的有效参数：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.prototype[<span class="built_in">Symbol</span>.split]);</span><br><span class="line"><span class="comment">// ƒ [Symbol.split]() &#123; [native code] &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;foobarbaz&#x27;</span>.split(<span class="regexp">/bar/</span>));</span><br><span class="line"><span class="comment">// [&#x27;foo&#x27;, &#x27;baz&#x27;] </span></span><br></pre></td></tr></table></figure><h4 id="14-Symbol-toPrimitive"><a href="#14-Symbol-toPrimitive" class="headerlink" title="14. Symbol.toPrimitive"></a>14. Symbol.toPrimitive</h4><h5 id="根据-ECMAScript-规范，这个符号作为一个属性表示“一个方法，该方法将对象转换为相应的原始值。由-ToPrimitive-抽象操作使用”。很多内置操作都会尝试强制将对象转换为原始值，包括字符串、数值和未指定的原始类型。对于一个自定义对象实例，通过在这个实例的-Symbol-toPrimitive-属性上定义一个函数可以改变默认行为。根据提供给这个函数的参数（string、number-或-default），可以控制返回的原始值："><a href="#根据-ECMAScript-规范，这个符号作为一个属性表示“一个方法，该方法将对象转换为相应的原始值。由-ToPrimitive-抽象操作使用”。很多内置操作都会尝试强制将对象转换为原始值，包括字符串、数值和未指定的原始类型。对于一个自定义对象实例，通过在这个实例的-Symbol-toPrimitive-属性上定义一个函数可以改变默认行为。根据提供给这个函数的参数（string、number-或-default），可以控制返回的原始值：" class="headerlink" title="根据 ECMAScript 规范，这个符号作为一个属性表示“一个方法，该方法将对象转换为相应的原始值。由 ToPrimitive 抽象操作使用”。很多内置操作都会尝试强制将对象转换为原始值，包括字符串、数值和未指定的原始类型。对于一个自定义对象实例，通过在这个实例的 Symbol.toPrimitive 属性上定义一个函数可以改变默认行为。根据提供给这个函数的参数（string、number 或 default），可以控制返回的原始值："></a>根据 ECMAScript 规范，这个符号作为一个属性表示“一个方法，该方法将对象转换为相应的原始值。由 ToPrimitive 抽象操作使用”。很多内置操作都会尝试强制将对象转换为原始值，包括字符串、数值和未指定的原始类型。对于一个自定义对象实例，通过在这个实例的 Symbol.toPrimitive 属性上定义一个函数可以改变默认行为。根据提供给这个函数的参数（string、number 或 default），可以控制返回的原始值：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">let</span> foo = <span class="keyword">new</span> Foo();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">3</span> + foo); <span class="comment">// &quot;3[object Object]&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">3</span> - foo); <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>(foo)); <span class="comment">// &quot;[object Object]&quot;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bar</span> </span>&#123;</span><br><span class="line"> <span class="keyword">constructor</span>() &#123;</span><br><span class="line"> <span class="built_in">this</span>[<span class="built_in">Symbol</span>.toPrimitive] = <span class="function"><span class="keyword">function</span>(<span class="params">hint</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">switch</span> (hint) &#123;</span><br><span class="line"> <span class="keyword">case</span> <span class="string">&#x27;number&#x27;</span>:</span><br><span class="line"> <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line"> <span class="keyword">case</span> <span class="string">&#x27;string&#x27;</span>:</span><br><span class="line"> <span class="keyword">return</span> <span class="string">&#x27;string bar&#x27;</span>;</span><br><span class="line"> <span class="keyword">case</span> <span class="string">&#x27;default&#x27;</span>:</span><br><span class="line"> <span class="keyword">default</span>:</span><br><span class="line"> <span class="keyword">return</span> <span class="string">&#x27;default bar&#x27;</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> bar = <span class="keyword">new</span> Bar();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">3</span> + bar); <span class="comment">// &quot;3default bar&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">3</span> - bar); <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>(bar)); <span class="comment">// &quot;string bar&quot; </span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="15-Symbol-toStringTag"><a href="#15-Symbol-toStringTag" class="headerlink" title="15. Symbol.toStringTag"></a>15. Symbol.toStringTag</h4><h5 id="根据-ECMAScript-规范，这个符号作为一个属性表示“一个字符串，该字符串用于创建对象的默认字符串描述。由内置方法-Object-prototype-toString-使用”。通过-toString-方法获取对象标识时，会检索由-Symbol-toStringTag-指定的实例标识符，默认为”Object”。内置类型已经指定了这个值，但自定义类实例还需要明确定义："><a href="#根据-ECMAScript-规范，这个符号作为一个属性表示“一个字符串，该字符串用于创建对象的默认字符串描述。由内置方法-Object-prototype-toString-使用”。通过-toString-方法获取对象标识时，会检索由-Symbol-toStringTag-指定的实例标识符，默认为”Object”。内置类型已经指定了这个值，但自定义类实例还需要明确定义：" class="headerlink" title="根据 ECMAScript 规范，这个符号作为一个属性表示“一个字符串，该字符串用于创建对象的默认字符串描述。由内置方法 Object.prototype.toString()使用”。通过 toString()方法获取对象标识时，会检索由 Symbol.toStringTag 指定的实例标识符，默认为”Object”。内置类型已经指定了这个值，但自定义类实例还需要明确定义："></a>根据 ECMAScript 规范，这个符号作为一个属性表示“一个字符串，该字符串用于创建对象的默认字符串描述。由内置方法 Object.prototype.toString()使用”。通过 toString()方法获取对象标识时，会检索由 Symbol.toStringTag 指定的实例标识符，默认为”Object”。内置类型已经指定了这个值，但自定义类实例还需要明确定义：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line"><span class="built_in">console</span>.log(s); <span class="comment">// Set(0) &#123;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(s.toString()); <span class="comment">// [object Set]</span></span><br><span class="line"><span class="built_in">console</span>.log(s[<span class="built_in">Symbol</span>.toStringTag]); <span class="comment">// Set</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">let</span> foo = <span class="keyword">new</span> Foo();</span><br><span class="line"><span class="built_in">console</span>.log(foo); <span class="comment">// Foo &#123;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(foo.toString()); <span class="comment">// [object Object]</span></span><br><span class="line"><span class="built_in">console</span>.log(foo[<span class="built_in">Symbol</span>.toStringTag]); <span class="comment">// undefined</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bar</span> </span>&#123;</span><br><span class="line"> <span class="keyword">constructor</span>() &#123;</span><br><span class="line"> <span class="built_in">this</span>[<span class="built_in">Symbol</span>.toStringTag] = <span class="string">&#x27;Bar&#x27;</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> bar = <span class="keyword">new</span> Bar();</span><br><span class="line"><span class="built_in">console</span>.log(bar); <span class="comment">// Bar &#123;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(bar.toString()); <span class="comment">// [object Bar]</span></span><br><span class="line"><span class="built_in">console</span>.log(bar[<span class="built_in">Symbol</span>.toStringTag]); <span class="comment">// Bar </span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="16-Symbol-unscopables"><a href="#16-Symbol-unscopables" class="headerlink" title="16. Symbol.unscopables"></a>16. Symbol.unscopables</h4><h5 id="根据-ECMAScript-规范，这个符号作为一个属性表示“一个对象，该对象所有的以及继承的属性，都会从关联对象的-with-环境绑定中排除”。设置这个符号并让其映射对应属性的键值为-true，就可以阻止该属性出现在-with-环境绑定中，如下例所示："><a href="#根据-ECMAScript-规范，这个符号作为一个属性表示“一个对象，该对象所有的以及继承的属性，都会从关联对象的-with-环境绑定中排除”。设置这个符号并让其映射对应属性的键值为-true，就可以阻止该属性出现在-with-环境绑定中，如下例所示：" class="headerlink" title="根据 ECMAScript 规范，这个符号作为一个属性表示“一个对象，该对象所有的以及继承的属性，都会从关联对象的 with 环境绑定中排除”。设置这个符号并让其映射对应属性的键值为 true，就可以阻止该属性出现在 with 环境绑定中，如下例所示："></a>根据 ECMAScript 规范，这个符号作为一个属性表示“一个对象，该对象所有的以及继承的属性，都会从关联对象的 with 环境绑定中排除”。设置这个符号并让其映射对应属性的键值为 true，就可以阻止该属性出现在 with 环境绑定中，如下例所示：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> o = &#123; <span class="attr">foo</span>: <span class="string">&#x27;bar&#x27;</span> &#125;;</span><br><span class="line"><span class="keyword">with</span> (o) &#123;</span><br><span class="line"> <span class="built_in">console</span>.log(foo); <span class="comment">// bar</span></span><br><span class="line">&#125;</span><br><span class="line">o[<span class="built_in">Symbol</span>.unscopables] = &#123;</span><br><span class="line"> foo: <span class="literal">true</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">with</span> (o) &#123;</span><br><span class="line"> <span class="built_in">console</span>.log(foo); <span class="comment">// ReferenceError</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Object-类型"><a href="#Object-类型" class="headerlink" title="Object 类型"></a>Object 类型</h3><h5 id="ECMAScript-中的对象其实就是一组数据和功能的集合。对象通过-new-操作符后跟对象类型的名称来创建。开发者可以通过创建-Object-类型的实例来创建自己的对象，然后再给对象添加属性和方法："><a href="#ECMAScript-中的对象其实就是一组数据和功能的集合。对象通过-new-操作符后跟对象类型的名称来创建。开发者可以通过创建-Object-类型的实例来创建自己的对象，然后再给对象添加属性和方法：" class="headerlink" title="ECMAScript 中的对象其实就是一组数据和功能的集合。对象通过 new 操作符后跟对象类型的名称来创建。开发者可以通过创建 Object 类型的实例来创建自己的对象，然后再给对象添加属性和方法："></a>ECMAScript 中的对象其实就是一组数据和功能的集合。对象通过 new 操作符后跟对象类型的名称来创建。开发者可以通过创建 Object 类型的实例来创建自己的对象，然后再给对象添加属性和方法：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>(); </span><br></pre></td></tr></table></figure><h5 id="这个语法类似-Java，但-ECMAScript-只要求在给构造函数提供参数时使用括号。如果没有参数，如上面的例子所示，那么完全可以省略括号（不推荐）："><a href="#这个语法类似-Java，但-ECMAScript-只要求在给构造函数提供参数时使用括号。如果没有参数，如上面的例子所示，那么完全可以省略括号（不推荐）：" class="headerlink" title="这个语法类似 Java，但 ECMAScript 只要求在给构造函数提供参数时使用括号。如果没有参数，如上面的例子所示，那么完全可以省略括号（不推荐）："></a>这个语法类似 Java，但 ECMAScript 只要求在给构造函数提供参数时使用括号。如果没有参数，如上面的例子所示，那么完全可以省略括号（不推荐）：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>; <span class="comment">// 合法，但不推荐</span></span><br></pre></td></tr></table></figure><h4 id="每个-Object-实例都有如下属性和方法。"><a href="#每个-Object-实例都有如下属性和方法。" class="headerlink" title="每个 Object 实例都有如下属性和方法。"></a>每个 Object 实例都有如下属性和方法。</h4><h5 id="1-constructor：用于创建当前对象的函数。在前面的例子中，这个属性的值就是-Object-函数。"><a href="#1-constructor：用于创建当前对象的函数。在前面的例子中，这个属性的值就是-Object-函数。" class="headerlink" title="1.constructor：用于创建当前对象的函数。在前面的例子中，这个属性的值就是 Object()函数。"></a>1.constructor：用于创建当前对象的函数。在前面的例子中，这个属性的值就是 Object()函数。</h5><h5 id="2-hasOwnProperty-propertyName-：用于判断当前对象实例（不是原型）上是否存在给定的属性。要检查的属性名必须是字符串（如-o-hasOwnProperty-“name”-）或符号。"><a href="#2-hasOwnProperty-propertyName-：用于判断当前对象实例（不是原型）上是否存在给定的属性。要检查的属性名必须是字符串（如-o-hasOwnProperty-“name”-）或符号。" class="headerlink" title="2. hasOwnProperty(propertyName)：用于判断当前对象实例（不是原型）上是否存在给定的属性。要检查的属性名必须是字符串（如 o.hasOwnProperty(“name”)）或符号。"></a>2. hasOwnProperty(propertyName)：用于判断当前对象实例（不是原型）上是否存在给定的属性。要检查的属性名必须是字符串（如 o.hasOwnProperty(“name”)）或符号。</h5><h5 id="3-isPrototypeOf-object-：用于判断当前对象是否为另一个对象的原型。（第-8-章将详细介绍原型。）"><a href="#3-isPrototypeOf-object-：用于判断当前对象是否为另一个对象的原型。（第-8-章将详细介绍原型。）" class="headerlink" title="3. isPrototypeOf(object)：用于判断当前对象是否为另一个对象的原型。（第 8 章将详细介绍原型。）"></a>3. isPrototypeOf(object)：用于判断当前对象是否为另一个对象的原型。（第 8 章将详细介绍原型。）</h5><h5 id="4-propertyIsEnumerable-propertyName-：用于判断给定的属性是否可以使用（本章稍后讨论的）for-in-语句枚举。与-hasOwnProperty-一样，属性名必须是字符串。"><a href="#4-propertyIsEnumerable-propertyName-：用于判断给定的属性是否可以使用（本章稍后讨论的）for-in-语句枚举。与-hasOwnProperty-一样，属性名必须是字符串。" class="headerlink" title="4. propertyIsEnumerable(propertyName)：用于判断给定的属性是否可以使用（本章稍后讨论的）for-in 语句枚举。与 hasOwnProperty()一样，属性名必须是字符串。"></a>4. propertyIsEnumerable(propertyName)：用于判断给定的属性是否可以使用（本章稍后讨论的）for-in 语句枚举。与 hasOwnProperty()一样，属性名必须是字符串。</h5><h5 id="5-toLocaleString-：返回对象的字符串表示，该字符串反映对象所在的本地化执行环境。"><a href="#5-toLocaleString-：返回对象的字符串表示，该字符串反映对象所在的本地化执行环境。" class="headerlink" title="5. toLocaleString()：返回对象的字符串表示，该字符串反映对象所在的本地化执行环境。"></a>5. toLocaleString()：返回对象的字符串表示，该字符串反映对象所在的本地化执行环境。</h5><h5 id="6-toString-：返回对象的字符串表示。"><a href="#6-toString-：返回对象的字符串表示。" class="headerlink" title="6. toString()：返回对象的字符串表示。"></a>6. toString()：返回对象的字符串表示。</h5><h5 id="7-valueOf-：返回对象对应的字符串、数值或布尔值表示。通常与-toString-的返回值相同。因为在-ECMAScript-中-Object-是所有对象的基类，所以任何对象都有这些属性和方法。第-8-章将介绍对象间的继承机制。"><a href="#7-valueOf-：返回对象对应的字符串、数值或布尔值表示。通常与-toString-的返回值相同。因为在-ECMAScript-中-Object-是所有对象的基类，所以任何对象都有这些属性和方法。第-8-章将介绍对象间的继承机制。" class="headerlink" title="7. valueOf()：返回对象对应的字符串、数值或布尔值表示。通常与 toString()的返回值相同。因为在 ECMAScript 中 Object 是所有对象的基类，所以任何对象都有这些属性和方法。第 8 章将介绍对象间的继承机制。"></a>7. valueOf()：返回对象对应的字符串、数值或布尔值表示。通常与 toString()的返回值相同。因为在 ECMAScript 中 Object 是所有对象的基类，所以任何对象都有这些属性和方法。第 8 章将介绍对象间的继承机制。</h5><h4 id="注意-严格来讲，ECMA-262-中对象的行为不一定适合-JavaScript-中的其他对象。比如浏览器环境中的-BOM-和-DOM-对象，都是由宿主环境定义和提供的宿主对象。而宿主对象不受-ECMA-262-约束，所以它们可能会也可能不会继承-Object。"><a href="#注意-严格来讲，ECMA-262-中对象的行为不一定适合-JavaScript-中的其他对象。比如浏览器环境中的-BOM-和-DOM-对象，都是由宿主环境定义和提供的宿主对象。而宿主对象不受-ECMA-262-约束，所以它们可能会也可能不会继承-Object。" class="headerlink" title="注意 严格来讲，ECMA-262 中对象的行为不一定适合 JavaScript 中的其他对象。比如浏览器环境中的 BOM 和 DOM 对象，都是由宿主环境定义和提供的宿主对象。而宿主对象不受 ECMA-262 约束，所以它们可能会也可能不会继承 Object。"></a>注意 严格来讲，ECMA-262 中对象的行为不一定适合 JavaScript 中的其他对象。比如浏览器环境中的 BOM 和 DOM 对象，都是由宿主环境定义和提供的宿主对象。而宿主对象不受 ECMA-262 约束，所以它们可能会也可能不会继承 Object。</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;数据类型&quot;&gt;&lt;a href=&quot;#数据类型&quot; class=&quot;headerlink&quot; title=&quot;数据类型&quot;&gt;&lt;/a&gt;数据类型&lt;/h2&gt;&lt;h5 id=&quot;ECMAScript-有-6-种简单数据类型（也称为原始类型）：Undefined、Null、Boolean、Nu</summary>
      
    
    
    
    <category term="JavaScript红宝书" scheme="http://example.com/categories/JavaScript%E7%BA%A2%E5%AE%9D%E4%B9%A6/"/>
    
    
    <category term="数据类型" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>JS红宝书之变量</title>
    <link href="http://example.com/2020/10/14/%E7%BA%A2%E5%AE%9D%E4%B9%A62/"/>
    <id>http://example.com/2020/10/14/%E7%BA%A2%E5%AE%9D%E4%B9%A62/</id>
    <published>2020-10-14T05:06:43.000Z</published>
    <updated>2020-11-06T06:19:21.410Z</updated>
    
    <content type="html"><![CDATA[<h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><h3 id="ECMAScript-变量是松散类型的，意思是变量可以用于保存任何类型的数据。每个变量只不过是一个用于保存任意值的命名占位符。有-3-个关键字可以声明变量：var、const-和-let。其中，var-在"><a href="#ECMAScript-变量是松散类型的，意思是变量可以用于保存任何类型的数据。每个变量只不过是一个用于保存任意值的命名占位符。有-3-个关键字可以声明变量：var、const-和-let。其中，var-在" class="headerlink" title="ECMAScript 变量是松散类型的，意思是变量可以用于保存任何类型的数据。每个变量只不过是一个用于保存任意值的命名占位符。有 3 个关键字可以声明变量：var、const 和 let。其中，var 在"></a>ECMAScript 变量是松散类型的，意思是变量可以用于保存任何类型的数据。每个变量只不过是一个用于保存任意值的命名占位符。有 3 个关键字可以声明变量：var、const 和 let。其中，var 在</h3><h3 id="ECMAScript-的所有版本中都可以使用，而-const-和-let-只能在-ECMAScript-6-及更晚的版本中使用。"><a href="#ECMAScript-的所有版本中都可以使用，而-const-和-let-只能在-ECMAScript-6-及更晚的版本中使用。" class="headerlink" title="ECMAScript 的所有版本中都可以使用，而 const 和 let 只能在 ECMAScript 6 及更晚的版本中使用。"></a>ECMAScript 的所有版本中都可以使用，而 const 和 let 只能在 ECMAScript 6 及更晚的版本中使用。</h3><hr><h2 id="var-关键字"><a href="#var-关键字" class="headerlink" title="var 关键字"></a>var 关键字</h2><h4 id="要定义变量，可以使用-var-操作符（注意-var-是一个关键字），后跟变量名（即标识符，如前所述）："><a href="#要定义变量，可以使用-var-操作符（注意-var-是一个关键字），后跟变量名（即标识符，如前所述）：" class="headerlink" title="要定义变量，可以使用 var 操作符（注意 var 是一个关键字），后跟变量名（即标识符，如前所述）："></a>要定义变量，可以使用 var 操作符（注意 var 是一个关键字），后跟变量名（即标识符，如前所述）：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> message; </span><br></pre></td></tr></table></figure><h3 id="var-声明作用域"><a href="#var-声明作用域" class="headerlink" title="var 声明作用域"></a>var 声明作用域</h3><h4 id="关键的问题在于，使用-var-操作符定义的变量会成为包含它的函数的局部变量。比如，使用-var在一个函数内部定义一个变量，就意味着该变量将在函数退出时被销毁："><a href="#关键的问题在于，使用-var-操作符定义的变量会成为包含它的函数的局部变量。比如，使用-var在一个函数内部定义一个变量，就意味着该变量将在函数退出时被销毁：" class="headerlink" title="关键的问题在于，使用 var 操作符定义的变量会成为包含它的函数的局部变量。比如，使用 var在一个函数内部定义一个变量，就意味着该变量将在函数退出时被销毁："></a>关键的问题在于，使用 var 操作符定义的变量会成为包含它的函数的局部变量。比如，使用 var在一个函数内部定义一个变量，就意味着该变量将在函数退出时被销毁：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> message = <span class="string">&quot;hi&quot;</span>; <span class="comment">// 局部变量</span></span><br><span class="line">&#125;</span><br><span class="line">test();</span><br><span class="line"><span class="built_in">console</span>.log(message); <span class="comment">// 出错！</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> message = <span class="string">&quot;hi&quot;</span>; <span class="comment">// 全局变量</span></span><br><span class="line">&#125;</span><br><span class="line">test();</span><br><span class="line"><span class="built_in">console</span>.log(message); <span class="comment">// &quot;hi&quot; </span></span><br></pre></td></tr></table></figure><h3 id="var-声明提升"><a href="#var-声明提升" class="headerlink" title="var 声明提升"></a>var 声明提升</h3><h4 id="使用-var-时，下面的代码不会报错。这是因为使用这个关键字声明的变量会自动提升到函数作用域顶部："><a href="#使用-var-时，下面的代码不会报错。这是因为使用这个关键字声明的变量会自动提升到函数作用域顶部：" class="headerlink" title="使用 var 时，下面的代码不会报错。这是因为使用这个关键字声明的变量会自动提升到函数作用域顶部："></a>使用 var 时，下面的代码不会报错。这是因为使用这个关键字声明的变量会自动提升到函数作用域顶部：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(age);</span><br><span class="line"> <span class="keyword">var</span> age = <span class="number">26</span>;</span><br><span class="line">&#125;</span><br><span class="line">foo(); <span class="comment">// undefined </span></span><br></pre></td></tr></table></figure><h4 id="之所以不会报错，是因为-ECMAScript-运行时把它看成等价于如下代码："><a href="#之所以不会报错，是因为-ECMAScript-运行时把它看成等价于如下代码：" class="headerlink" title="之所以不会报错，是因为 ECMAScript 运行时把它看成等价于如下代码："></a>之所以不会报错，是因为 ECMAScript 运行时把它看成等价于如下代码：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> age;</span><br><span class="line"> <span class="built_in">console</span>.log(age);</span><br><span class="line"> age = <span class="number">26</span>;</span><br><span class="line">&#125;</span><br><span class="line">foo(); <span class="comment">// undefined </span></span><br></pre></td></tr></table></figure><h4 id="这就是所谓的“提升”（hoist），也就是把所有变量声明都拉到函数作用域的顶部。此外，反复多次使用-var-声明同一个变量也没有问题："><a href="#这就是所谓的“提升”（hoist），也就是把所有变量声明都拉到函数作用域的顶部。此外，反复多次使用-var-声明同一个变量也没有问题：" class="headerlink" title="这就是所谓的“提升”（hoist），也就是把所有变量声明都拉到函数作用域的顶部。此外，反复多次使用 var 声明同一个变量也没有问题："></a>这就是所谓的“提升”（hoist），也就是把所有变量声明都拉到函数作用域的顶部。此外，反复多次使用 var 声明同一个变量也没有问题：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> age = <span class="number">16</span>;</span><br><span class="line"> <span class="keyword">var</span> age = <span class="number">26</span>;</span><br><span class="line"> <span class="keyword">var</span> age = <span class="number">36</span>;</span><br><span class="line"> <span class="built_in">console</span>.log(age);</span><br><span class="line">&#125;</span><br><span class="line">foo(); <span class="comment">// 36</span></span><br></pre></td></tr></table></figure><h2 id="let-声明"><a href="#let-声明" class="headerlink" title="let 声明"></a>let 声明</h2><h4 id="let-跟-var-的作用差不多，但有着非常重要的区别。最明显的区别是，let-声明的范围是块作用域，而-var-声明的范围是函数作用域。"><a href="#let-跟-var-的作用差不多，但有着非常重要的区别。最明显的区别是，let-声明的范围是块作用域，而-var-声明的范围是函数作用域。" class="headerlink" title="let 跟 var 的作用差不多，但有着非常重要的区别。最明显的区别是，let 声明的范围是块作用域，而 var 声明的范围是函数作用域。"></a>let 跟 var 的作用差不多，但有着非常重要的区别。最明显的区别是，let 声明的范围是块作用域，而 var 声明的范围是函数作用域。</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"> <span class="keyword">var</span> name = <span class="string">&#x27;Matt&#x27;</span>;</span><br><span class="line"> <span class="built_in">console</span>.log(name); <span class="comment">// Matt</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(name); <span class="comment">// Matt </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"> <span class="keyword">let</span> age = <span class="number">26</span>;</span><br><span class="line"> <span class="built_in">console</span>.log(age); <span class="comment">// 26</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(age); <span class="comment">// ReferenceError: age 没有定义</span></span><br></pre></td></tr></table></figure><h3 id="var-和-let区别"><a href="#var-和-let区别" class="headerlink" title="var 和 let区别"></a>var 和 let区别</h3><h4 id="暂时性死区"><a href="#暂时性死区" class="headerlink" title="暂时性死区"></a>暂时性死区</h4><h5 id="let-与-var-的另一个重要的区别，就是-let-声明的变量不会在作用域中被提升。"><a href="#let-与-var-的另一个重要的区别，就是-let-声明的变量不会在作用域中被提升。" class="headerlink" title="let 与 var 的另一个重要的区别，就是 let 声明的变量不会在作用域中被提升。"></a>let 与 var 的另一个重要的区别，就是 let 声明的变量不会在作用域中被提升。</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// name 会被提升</span></span><br><span class="line"><span class="built_in">console</span>.log(name); <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;Matt&#x27;</span>;</span><br><span class="line"><span class="comment">// age 不会被提升</span></span><br><span class="line"><span class="built_in">console</span>.log(age); <span class="comment">// ReferenceError：age 没有定义</span></span><br><span class="line"><span class="keyword">let</span> age = <span class="number">26</span>; </span><br></pre></td></tr></table></figure><h4 id="全局声明"><a href="#全局声明" class="headerlink" title="全局声明"></a>全局声明</h4><h5 id="与-var-关键字不同，使用-let-在全局作用域中声明的变量不会成为-window-对象的属性（var-声明的变量则会）。"><a href="#与-var-关键字不同，使用-let-在全局作用域中声明的变量不会成为-window-对象的属性（var-声明的变量则会）。" class="headerlink" title="与 var 关键字不同，使用 let 在全局作用域中声明的变量不会成为 window 对象的属性（var 声明的变量则会）。"></a>与 var 关键字不同，使用 let 在全局作用域中声明的变量不会成为 window 对象的属性（var 声明的变量则会）。</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;Matt&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.name); <span class="comment">// &#x27;Matt&#x27;</span></span><br><span class="line"><span class="keyword">let</span> age = <span class="number">26</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.age); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><h4 id="条件声明"><a href="#条件声明" class="headerlink" title="条件声明"></a>条件声明</h4><h5 id="在使用-var-声明变量时，由于声明会被提升，JavaScript-引擎会自动将多余的声明在作用域顶部合并为一个声明。因为-let-的作用域是块，所以不可能检查前面是否已经使用-let-声明过同名变量，同时也就不可能在没有声明的情况下声明它。"><a href="#在使用-var-声明变量时，由于声明会被提升，JavaScript-引擎会自动将多余的声明在作用域顶部合并为一个声明。因为-let-的作用域是块，所以不可能检查前面是否已经使用-let-声明过同名变量，同时也就不可能在没有声明的情况下声明它。" class="headerlink" title="在使用 var 声明变量时，由于声明会被提升，JavaScript 引擎会自动将多余的声明在作用域顶部合并为一个声明。因为 let 的作用域是块，所以不可能检查前面是否已经使用 let 声明过同名变量，同时也就不可能在没有声明的情况下声明它。"></a>在使用 var 声明变量时，由于声明会被提升，JavaScript 引擎会自动将多余的声明在作用域顶部合并为一个声明。因为 let 的作用域是块，所以不可能检查前面是否已经使用 let 声明过同名变量，同时也就不可能在没有声明的情况下声明它。</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"> <span class="keyword">var</span> name = <span class="string">&#x27;Nicholas&#x27;</span>;</span><br><span class="line"> <span class="keyword">let</span> age = <span class="number">26</span>;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"> <span class="comment">// 假设脚本不确定页面中是否已经声明了同名变量</span></span><br><span class="line"> <span class="comment">// 那它可以假设还没有声明过</span></span><br><span class="line"> <span class="keyword">var</span> name = <span class="string">&#x27;Matt&#x27;</span>;</span><br><span class="line"> <span class="comment">// 这里没问题，因为可以被作为一个提升声明来处理</span></span><br><span class="line"> <span class="comment">// 不需要检查之前是否声明过同名变量</span></span><br><span class="line"> <span class="keyword">let</span> age = <span class="number">36</span>;</span><br><span class="line"> <span class="comment">// 如果 age 之前声明过，这里会报错</span></span><br><span class="line">&lt;/script&gt; </span><br></pre></td></tr></table></figure><h4 id="for-循环中的-let-声明"><a href="#for-循环中的-let-声明" class="headerlink" title="for 循环中的 let 声明"></a>for 循环中的 let 声明</h4><h5 id="在-let-出现之前，for-循环定义的迭代变量会渗透到循环体外部："><a href="#在-let-出现之前，for-循环定义的迭代变量会渗透到循环体外部：" class="headerlink" title="在 let 出现之前，for 循环定义的迭代变量会渗透到循环体外部："></a>在 let 出现之前，for 循环定义的迭代变量会渗透到循环体外部：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i) &#123;</span><br><span class="line"> <span class="comment">// 循环逻辑</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(i); <span class="comment">// 5 </span></span><br></pre></td></tr></table></figure><h5 id="改成使用-let-之后，这个问题就消失了，因为迭代变量的作用域仅限于-for-循环块内部："><a href="#改成使用-let-之后，这个问题就消失了，因为迭代变量的作用域仅限于-for-循环块内部：" class="headerlink" title="改成使用 let 之后，这个问题就消失了，因为迭代变量的作用域仅限于 for 循环块内部："></a>改成使用 let 之后，这个问题就消失了，因为迭代变量的作用域仅限于 for 循环块内部：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i) &#123;</span><br><span class="line"> <span class="comment">// 循环逻辑</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(i); <span class="comment">// ReferenceError: i 没有定义</span></span><br></pre></td></tr></table></figure><h5 id="在使用-var-的时候，最常见的问题就是对迭代变量的奇特声明和修改："><a href="#在使用-var-的时候，最常见的问题就是对迭代变量的奇特声明和修改：" class="headerlink" title="在使用 var 的时候，最常见的问题就是对迭代变量的奇特声明和修改："></a>在使用 var 的时候，最常见的问题就是对迭代变量的奇特声明和修改：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i) &#123;</span><br><span class="line"> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(i), <span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 你可能以为会输出 0、1、2、3、4</span></span><br><span class="line"><span class="comment">// 实际上会输出 5、5、5、5、5 </span></span><br></pre></td></tr></table></figure><h5 id="之所以会这样，是因为在退出循环时，迭代变量保存的是导致循环退出的值：5。在之后执行超时逻辑时，所有的-i-都是同一个变量，因而输出的都是同一个最终值。而在使用-let-声明迭代变量时，JavaScript-引擎在后台会为每个迭代循环声明一个新的迭代变量。每个-setTimeout-引用的都是不同的变量实例，所以-console-log-输出的是我们期望的值，也就是循环执行过程中每个迭代变量的值。"><a href="#之所以会这样，是因为在退出循环时，迭代变量保存的是导致循环退出的值：5。在之后执行超时逻辑时，所有的-i-都是同一个变量，因而输出的都是同一个最终值。而在使用-let-声明迭代变量时，JavaScript-引擎在后台会为每个迭代循环声明一个新的迭代变量。每个-setTimeout-引用的都是不同的变量实例，所以-console-log-输出的是我们期望的值，也就是循环执行过程中每个迭代变量的值。" class="headerlink" title="之所以会这样，是因为在退出循环时，迭代变量保存的是导致循环退出的值：5。在之后执行超时逻辑时，所有的 i 都是同一个变量，因而输出的都是同一个最终值。而在使用 let 声明迭代变量时，JavaScript 引擎在后台会为每个迭代循环声明一个新的迭代变量。每个 setTimeout 引用的都是不同的变量实例，所以 console.log 输出的是我们期望的值，也就是循环执行过程中每个迭代变量的值。"></a>之所以会这样，是因为在退出循环时，迭代变量保存的是导致循环退出的值：5。在之后执行超时逻辑时，所有的 i 都是同一个变量，因而输出的都是同一个最终值。而在使用 let 声明迭代变量时，JavaScript 引擎在后台会为每个迭代循环声明一个新的迭代变量。每个 setTimeout 引用的都是不同的变量实例，所以 console.log 输出的是我们期望的值，也就是循环执行过程中每个迭代变量的值。</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i) &#123;</span><br><span class="line"> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(i), <span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 会输出 0、1、2、3、4</span></span><br></pre></td></tr></table></figure><h5 id="这种每次迭代声明一个独立变量实例的行为适用于所有风格的-for-循环，包括-for-in-和-for-of循环。"><a href="#这种每次迭代声明一个独立变量实例的行为适用于所有风格的-for-循环，包括-for-in-和-for-of循环。" class="headerlink" title="这种每次迭代声明一个独立变量实例的行为适用于所有风格的 for 循环，包括 for-in 和 for-of循环。"></a>这种每次迭代声明一个独立变量实例的行为适用于所有风格的 for 循环，包括 for-in 和 for-of循环。</h5><hr><h2 id="const-声明"><a href="#const-声明" class="headerlink" title="const 声明"></a>const 声明</h2><h4 id="const-的行为与-let-基本相同，唯一一个重要的区别是用它声明变量时必须同时初始化变量，且尝试修改-const-声明的变量会导致运行时错误。"><a href="#const-的行为与-let-基本相同，唯一一个重要的区别是用它声明变量时必须同时初始化变量，且尝试修改-const-声明的变量会导致运行时错误。" class="headerlink" title="const 的行为与 let 基本相同，唯一一个重要的区别是用它声明变量时必须同时初始化变量，且尝试修改 const 声明的变量会导致运行时错误。"></a>const 的行为与 let 基本相同，唯一一个重要的区别是用它声明变量时必须同时初始化变量，且尝试修改 const 声明的变量会导致运行时错误。</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> age = <span class="number">26</span>;</span><br><span class="line">age = <span class="number">36</span>; <span class="comment">// TypeError: 给常量赋值</span></span><br><span class="line"><span class="comment">// const 也不允许重复声明</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;Matt&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;Nicholas&#x27;</span>; <span class="comment">// SyntaxError</span></span><br><span class="line"><span class="comment">// const 声明的作用域也是块</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;Matt&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"> <span class="keyword">const</span> name = <span class="string">&#x27;Nicholas&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(name); <span class="comment">// Matt</span></span><br></pre></td></tr></table></figure><h4 id="const-声明的限制只适用于它指向的变量的引用。换句话说，如果-const-变量引用的是一个对象，那么修改这个对象内部的属性并不违反-const-的限制。"><a href="#const-声明的限制只适用于它指向的变量的引用。换句话说，如果-const-变量引用的是一个对象，那么修改这个对象内部的属性并不违反-const-的限制。" class="headerlink" title="const 声明的限制只适用于它指向的变量的引用。换句话说，如果 const 变量引用的是一个对象，那么修改这个对象内部的属性并不违反 const 的限制。"></a>const 声明的限制只适用于它指向的变量的引用。换句话说，如果 const 变量引用的是一个对象，那么修改这个对象内部的属性并不违反 const 的限制。</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;&#125;;</span><br><span class="line">person.name = <span class="string">&#x27;Matt&#x27;</span>; <span class="comment">// ok </span></span><br></pre></td></tr></table></figure><h4 id="JavaScript-引擎会为-for-循环中的-let-声明分别创建独立的变量实例，虽然-const-变量跟-let-变量很相似，但是不能用-const-来声明迭代变量（因为迭代变量会自增）："><a href="#JavaScript-引擎会为-for-循环中的-let-声明分别创建独立的变量实例，虽然-const-变量跟-let-变量很相似，但是不能用-const-来声明迭代变量（因为迭代变量会自增）：" class="headerlink" title="JavaScript 引擎会为 for 循环中的 let 声明分别创建独立的变量实例，虽然 const 变量跟 let 变量很相似，但是不能用 const 来声明迭代变量（因为迭代变量会自增）："></a>JavaScript 引擎会为 for 循环中的 let 声明分别创建独立的变量实例，虽然 const 变量跟 let 变量很相似，但是不能用 const 来声明迭代变量（因为迭代变量会自增）：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;&#125; <span class="comment">// TypeError：给常量赋值</span></span><br></pre></td></tr></table></figure><h4 id="不过，如果你只想用-const-声明一个不会被修改的-for-循环变量，那也是可以的。也就是说，每次迭代只是创建一个新变量。这对-for-of-和-for-in-循环特别有意义"><a href="#不过，如果你只想用-const-声明一个不会被修改的-for-循环变量，那也是可以的。也就是说，每次迭代只是创建一个新变量。这对-for-of-和-for-in-循环特别有意义" class="headerlink" title="不过，如果你只想用 const 声明一个不会被修改的 for 循环变量，那也是可以的。也就是说，每次迭代只是创建一个新变量。这对 for-of 和 for-in 循环特别有意义"></a>不过，如果你只想用 const 声明一个不会被修改的 for 循环变量，那也是可以的。也就是说，每次迭代只是创建一个新变量。这对 for-of 和 for-in 循环特别有意义</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> j = <span class="number">7</span>; i &lt; <span class="number">5</span>; ++i) &#123;</span><br><span class="line"> <span class="built_in">console</span>.log(j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 7, 7, 7, 7, 7</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>&#125;) &#123;</span><br><span class="line"> <span class="built_in">console</span>.log(key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// a, b</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> value <span class="keyword">of</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]) &#123;</span><br><span class="line"> <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1, 2, 3, 4, 5 </span></span><br></pre></td></tr></table></figure><h2 id="声明风格及最佳实践"><a href="#声明风格及最佳实践" class="headerlink" title="声明风格及最佳实践"></a>声明风格及最佳实践</h2><h3 id="1-不使用-var"><a href="#1-不使用-var" class="headerlink" title="1.不使用 var"></a>1.不使用 var</h3><h4 id="有了-let-和-const，大多数开发者会发现自己不再需要-var-了。限制自己只使用-let-和-const有助于提升代码质量，因为变量有了明确的作用域、声明位置，以及不变的值。"><a href="#有了-let-和-const，大多数开发者会发现自己不再需要-var-了。限制自己只使用-let-和-const有助于提升代码质量，因为变量有了明确的作用域、声明位置，以及不变的值。" class="headerlink" title="有了 let 和 const，大多数开发者会发现自己不再需要 var 了。限制自己只使用 let 和 const有助于提升代码质量，因为变量有了明确的作用域、声明位置，以及不变的值。"></a>有了 let 和 const，大多数开发者会发现自己不再需要 var 了。限制自己只使用 let 和 const有助于提升代码质量，因为变量有了明确的作用域、声明位置，以及不变的值。</h4><h3 id="2-const-优先，let-次之"><a href="#2-const-优先，let-次之" class="headerlink" title="2.const 优先，let 次之"></a>2.const 优先，let 次之</h3><h4 id="使用-const-声明可以让浏览器运行时强制保持变量不变，也可以让静态代码分析工具提前发现不合法的赋值操作。因此，很多开发者认为应该优先使用-const-来声明变量，只在提前知道未来会有修改时，再使用-let。这样可以让开发者更有信心地推断某些变量的值永远不会变，同时也能迅速发现因意外赋值导致的非预期行为。"><a href="#使用-const-声明可以让浏览器运行时强制保持变量不变，也可以让静态代码分析工具提前发现不合法的赋值操作。因此，很多开发者认为应该优先使用-const-来声明变量，只在提前知道未来会有修改时，再使用-let。这样可以让开发者更有信心地推断某些变量的值永远不会变，同时也能迅速发现因意外赋值导致的非预期行为。" class="headerlink" title="使用 const 声明可以让浏览器运行时强制保持变量不变，也可以让静态代码分析工具提前发现不合法的赋值操作。因此，很多开发者认为应该优先使用 const 来声明变量，只在提前知道未来会有修改时，再使用 let。这样可以让开发者更有信心地推断某些变量的值永远不会变，同时也能迅速发现因意外赋值导致的非预期行为。"></a>使用 const 声明可以让浏览器运行时强制保持变量不变，也可以让静态代码分析工具提前发现不合法的赋值操作。因此，很多开发者认为应该优先使用 const 来声明变量，只在提前知道未来会有修改时，再使用 let。这样可以让开发者更有信心地推断某些变量的值永远不会变，同时也能迅速发现因意外赋值导致的非预期行为。</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;变量&quot;&gt;&lt;a href=&quot;#变量&quot; class=&quot;headerlink&quot; title=&quot;变量&quot;&gt;&lt;/a&gt;变量&lt;/h1&gt;&lt;h3 id=&quot;ECMAScript-变量是松散类型的，意思是变量可以用于保存任何类型的数据。每个变量只不过是一个用于保存任意值的命名占位符。有-</summary>
      
    
    
    
    <category term="JavaScript红宝书" scheme="http://example.com/categories/JavaScript%E7%BA%A2%E5%AE%9D%E4%B9%A6/"/>
    
    
    <category term="变量" scheme="http://example.com/tags/%E5%8F%98%E9%87%8F/"/>
    
  </entry>
  
  <entry>
    <title>JS红宝书之简介</title>
    <link href="http://example.com/2020/10/13/%E7%BA%A2%E5%AE%9D%E4%B9%A61/"/>
    <id>http://example.com/2020/10/13/%E7%BA%A2%E5%AE%9D%E4%B9%A61/</id>
    <published>2020-10-13T05:06:43.000Z</published>
    <updated>2020-11-06T13:10:29.135Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><h2 id="虽然-JavaScript和-ECMAScript-基本上是同义词，但-JavaScript远远不限于-ECMA-262-所定义的那样。没错，完整的-JavaScript"><a href="#虽然-JavaScript和-ECMAScript-基本上是同义词，但-JavaScript远远不限于-ECMA-262-所定义的那样。没错，完整的-JavaScript" class="headerlink" title="虽然 JavaScript和 ECMAScript 基本上是同义词，但 JavaScript远远不限于 ECMA-262 所定义的那样。没错，完整的 JavaScript"></a>虽然 JavaScript和 ECMAScript 基本上是同义词，但 JavaScript远远不限于 ECMA-262 所定义的那样。没错，完整的 JavaScript</h2><h5 id="1-核心（ECMAScript）"><a href="#1-核心（ECMAScript）" class="headerlink" title="1. 核心（ECMAScript）"></a>1. 核心（ECMAScript）</h5><h5 id="2-文档对象模型（DOM）"><a href="#2-文档对象模型（DOM）" class="headerlink" title="2. 文档对象模型（DOM）"></a>2. 文档对象模型（DOM）</h5><h5 id="3-浏览器对象模型（BOM）"><a href="#3-浏览器对象模型（BOM）" class="headerlink" title="3. 浏览器对象模型（BOM）"></a>3. 浏览器对象模型（BOM）</h5><hr><h2 id="ECMAScript"><a href="#ECMAScript" class="headerlink" title="ECMAScript"></a>ECMAScript</h2><h4 id="ECMAScript，即-ECMA-262-定义的语言，并不局限于-Web-浏览器。"><a href="#ECMAScript，即-ECMA-262-定义的语言，并不局限于-Web-浏览器。" class="headerlink" title="ECMAScript，即 ECMA-262 定义的语言，并不局限于 Web 浏览器。"></a>ECMAScript，即 ECMA-262 定义的语言，并不局限于 Web 浏览器。</h4><h4 id="ECMA-262-将这门语言作为一个基准来定义，以便在它之上再构建更稳健的脚本语言。"><a href="#ECMA-262-将这门语言作为一个基准来定义，以便在它之上再构建更稳健的脚本语言。" class="headerlink" title="ECMA-262 将这门语言作为一个基准来定义，以便在它之上再构建更稳健的脚本语言。"></a>ECMA-262 将这门语言作为一个基准来定义，以便在它之上再构建更稳健的脚本语言。</h4><h4 id="Web-浏览器只是-ECMAScript-实现可能存在的一种宿主环境（host-environment）。宿主环境提供"><a href="#Web-浏览器只是-ECMAScript-实现可能存在的一种宿主环境（host-environment）。宿主环境提供" class="headerlink" title="Web 浏览器只是 ECMAScript 实现可能存在的一种宿主环境（host environment）。宿主环境提供"></a>Web 浏览器只是 ECMAScript 实现可能存在的一种宿主环境（host environment）。宿主环境提供</h4><h4 id="ECMAScript-的基准实现和与环境自身交互必需的扩展。"><a href="#ECMAScript-的基准实现和与环境自身交互必需的扩展。" class="headerlink" title="ECMAScript 的基准实现和与环境自身交互必需的扩展。"></a>ECMAScript 的基准实现和与环境自身交互必需的扩展。</h4><hr><h2 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h2><h4 id="文档对象模型（DOM，Document-Object-Model）是一个应用编程接口（API），用于在-HTML-中使"><a href="#文档对象模型（DOM，Document-Object-Model）是一个应用编程接口（API），用于在-HTML-中使" class="headerlink" title="文档对象模型（DOM，Document Object Model）是一个应用编程接口（API），用于在 HTML 中使"></a>文档对象模型（DOM，Document Object Model）是一个应用编程接口（API），用于在 HTML 中使</h4><h4 id="用扩展的-XML。DOM-将整个页面抽象为一组分层节点。"><a href="#用扩展的-XML。DOM-将整个页面抽象为一组分层节点。" class="headerlink" title="用扩展的 XML。DOM 将整个页面抽象为一组分层节点。"></a>用扩展的 XML。DOM 将整个页面抽象为一组分层节点。</h4><hr><h2 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h2><h4 id="浏览器对象模型（BOM）-API，用于支持访问和操作浏览器的窗口。"><a href="#浏览器对象模型（BOM）-API，用于支持访问和操作浏览器的窗口。" class="headerlink" title="浏览器对象模型（BOM） API，用于支持访问和操作浏览器的窗口。"></a>浏览器对象模型（BOM） API，用于支持访问和操作浏览器的窗口。</h4><h4 id="使用-BOM，开发者可以操控浏览器显示页面之外的部分。而-BOM-真正独一无二的地方，当然也是"><a href="#使用-BOM，开发者可以操控浏览器显示页面之外的部分。而-BOM-真正独一无二的地方，当然也是" class="headerlink" title="使用 BOM，开发者可以操控浏览器显示页面之外的部分。而 BOM 真正独一无二的地方，当然也是"></a>使用 BOM，开发者可以操控浏览器显示页面之外的部分。而 BOM 真正独一无二的地方，当然也是</h4><h4 id="问题最多的地方，就是它是唯一一个没有相关标准的-JavaScript-实现。"><a href="#问题最多的地方，就是它是唯一一个没有相关标准的-JavaScript-实现。" class="headerlink" title="问题最多的地方，就是它是唯一一个没有相关标准的 JavaScript 实现。"></a>问题最多的地方，就是它是唯一一个没有相关标准的 JavaScript 实现。</h4><hr><h1 id="HTML-中的-JavaScript"><a href="#HTML-中的-JavaScript" class="headerlink" title="HTML 中的 JavaScript"></a>HTML 中的 JavaScript</h1><h2 id="script元素"><a href="#script元素" class="headerlink" title="script元素"></a>script元素</h2><h4 id="将JavaScript-插入-HTML-的主要方法是使用script元素。这个元素是由网景公司创造出来，并最早在-Netscape-Navigator-2-中实现的。后来，这个元素被正式加入到-HTML-规范。script元素有下列-8-个属性。"><a href="#将JavaScript-插入-HTML-的主要方法是使用script元素。这个元素是由网景公司创造出来，并最早在-Netscape-Navigator-2-中实现的。后来，这个元素被正式加入到-HTML-规范。script元素有下列-8-个属性。" class="headerlink" title="将JavaScript 插入 HTML 的主要方法是使用script元素。这个元素是由网景公司创造出来，并最早在 Netscape Navigator 2 中实现的。后来，这个元素被正式加入到 HTML 规范。script元素有下列 8 个属性。"></a>将JavaScript 插入 HTML 的主要方法是使用script元素。这个元素是由网景公司创造出来，并最早在 Netscape Navigator 2 中实现的。后来，这个元素被正式加入到 HTML 规范。script元素有下列 8 个属性。</h4><h5 id="1-async：可选。表示应该立即开始下载脚本，但不能阻止其他页面动作，比如下载资源或等待其他脚本加载。只对外部脚本文件有效。"><a href="#1-async：可选。表示应该立即开始下载脚本，但不能阻止其他页面动作，比如下载资源或等待其他脚本加载。只对外部脚本文件有效。" class="headerlink" title="1. async：可选。表示应该立即开始下载脚本，但不能阻止其他页面动作，比如下载资源或等待其他脚本加载。只对外部脚本文件有效。"></a>1. async：可选。表示应该立即开始下载脚本，但不能阻止其他页面动作，比如下载资源或等待其他脚本加载。只对外部脚本文件有效。</h5><h5 id="2-charset：可选。使用-src-属性指定的代码字符集。这个属性很少使用，因为大多数浏览器不在乎它的值。"><a href="#2-charset：可选。使用-src-属性指定的代码字符集。这个属性很少使用，因为大多数浏览器不在乎它的值。" class="headerlink" title="2. charset：可选。使用 src 属性指定的代码字符集。这个属性很少使用，因为大多数浏览器不在乎它的值。"></a>2. charset：可选。使用 src 属性指定的代码字符集。这个属性很少使用，因为大多数浏览器不在乎它的值。</h5><h5 id="3-crossorigin：可选。配置相关请求的CORS（跨源资源共享）设置。默认不使用CORS。crossorigin-”anonymous”配置文件请求不必设置凭据标志。crossorigin-”use-credentials”设置凭据标志，意味着出站请求会包含凭据。"><a href="#3-crossorigin：可选。配置相关请求的CORS（跨源资源共享）设置。默认不使用CORS。crossorigin-”anonymous”配置文件请求不必设置凭据标志。crossorigin-”use-credentials”设置凭据标志，意味着出站请求会包含凭据。" class="headerlink" title="3. crossorigin：可选。配置相关请求的CORS（跨源资源共享）设置。默认不使用CORS。crossorigin=”anonymous”配置文件请求不必设置凭据标志。crossorigin=”use-credentials”设置凭据标志，意味着出站请求会包含凭据。"></a>3. crossorigin：可选。配置相关请求的CORS（跨源资源共享）设置。默认不使用CORS。crossorigin=”anonymous”配置文件请求不必设置凭据标志。crossorigin=”use-credentials”设置凭据标志，意味着出站请求会包含凭据。</h5><h5 id="4-defer：可选。表示脚本可以延迟到文档完全被解析和显示之后再执行。只对外部脚本文件有效。在-IE7-及更早的版本中，对行内脚本也可以指定这个属性。"><a href="#4-defer：可选。表示脚本可以延迟到文档完全被解析和显示之后再执行。只对外部脚本文件有效。在-IE7-及更早的版本中，对行内脚本也可以指定这个属性。" class="headerlink" title="4. defer：可选。表示脚本可以延迟到文档完全被解析和显示之后再执行。只对外部脚本文件有效。在 IE7 及更早的版本中，对行内脚本也可以指定这个属性。"></a>4. defer：可选。表示脚本可以延迟到文档完全被解析和显示之后再执行。只对外部脚本文件有效。在 IE7 及更早的版本中，对行内脚本也可以指定这个属性。</h5><h5 id="5-integrity：可选。允许比对接收到的资源和指定的加密签名以验证子资源完整性（SRI，Subresource-Integrity）。如果接收到的资源的签名与这个属性指定的签名不匹配，则页面会报错，脚本不会执行。这个属性可以用于确保内容分发网络（CDN，Content-Delivery-Network）不会提供恶意内容。"><a href="#5-integrity：可选。允许比对接收到的资源和指定的加密签名以验证子资源完整性（SRI，Subresource-Integrity）。如果接收到的资源的签名与这个属性指定的签名不匹配，则页面会报错，脚本不会执行。这个属性可以用于确保内容分发网络（CDN，Content-Delivery-Network）不会提供恶意内容。" class="headerlink" title="5. integrity：可选。允许比对接收到的资源和指定的加密签名以验证子资源完整性（SRI，Subresource Integrity）。如果接收到的资源的签名与这个属性指定的签名不匹配，则页面会报错，脚本不会执行。这个属性可以用于确保内容分发网络（CDN，Content Delivery Network）不会提供恶意内容。"></a>5. integrity：可选。允许比对接收到的资源和指定的加密签名以验证子资源完整性（SRI，Subresource Integrity）。如果接收到的资源的签名与这个属性指定的签名不匹配，则页面会报错，脚本不会执行。这个属性可以用于确保内容分发网络（CDN，Content Delivery Network）不会提供恶意内容。</h5><h5 id="6-language：废弃。最初用于表示代码块中的脚本语言（如”JavaScript”、”JavaScript-1-2”或”VBScript”）。大多数浏览器都会忽略这个属性，不应该再使用它。"><a href="#6-language：废弃。最初用于表示代码块中的脚本语言（如”JavaScript”、”JavaScript-1-2”或”VBScript”）。大多数浏览器都会忽略这个属性，不应该再使用它。" class="headerlink" title="6. language：废弃。最初用于表示代码块中的脚本语言（如”JavaScript”、”JavaScript 1.2”或”VBScript”）。大多数浏览器都会忽略这个属性，不应该再使用它。"></a>6. language：废弃。最初用于表示代码块中的脚本语言（如”JavaScript”、”JavaScript 1.2”或”VBScript”）。大多数浏览器都会忽略这个属性，不应该再使用它。</h5><h5 id="7-src：可选。表示包含要执行的代码的外部文件。"><a href="#7-src：可选。表示包含要执行的代码的外部文件。" class="headerlink" title="7. src：可选。表示包含要执行的代码的外部文件。"></a>7. src：可选。表示包含要执行的代码的外部文件。</h5><h5 id="8-type：可选。代替-language，表示代码块中脚本语言的内容类型（也称-MIME-类型）。按照惯例，这个值始终都是”text-javascript”，尽管”text-javascript”和”text-ecmascript”都已经废弃了。JavaScript-文件的-MIME-类型通常是”application-x-javascript”，不过给type-属性这个值有可能导致脚本被忽略。在非-IE-的浏览器中有效的其他值还有”application-javascript”和”application-ecmascript”。如果这个值是-module，则代码会被当成-ES6-模块，而且只有这时候代码中才能出现-import-和-export-关键字。使用script的方式有两种：通过它直接在网页中嵌入-JavaScript-代码，以及通过它在网页中包含外部-JavaScript-文件。"><a href="#8-type：可选。代替-language，表示代码块中脚本语言的内容类型（也称-MIME-类型）。按照惯例，这个值始终都是”text-javascript”，尽管”text-javascript”和”text-ecmascript”都已经废弃了。JavaScript-文件的-MIME-类型通常是”application-x-javascript”，不过给type-属性这个值有可能导致脚本被忽略。在非-IE-的浏览器中有效的其他值还有”application-javascript”和”application-ecmascript”。如果这个值是-module，则代码会被当成-ES6-模块，而且只有这时候代码中才能出现-import-和-export-关键字。使用script的方式有两种：通过它直接在网页中嵌入-JavaScript-代码，以及通过它在网页中包含外部-JavaScript-文件。" class="headerlink" title="8. type：可选。代替 language，表示代码块中脚本语言的内容类型（也称 MIME 类型）。按照惯例，这个值始终都是”text/javascript”，尽管”text/javascript”和”text/ecmascript”都已经废弃了。JavaScript 文件的 MIME 类型通常是”application/x-javascript”，不过给type 属性这个值有可能导致脚本被忽略。在非 IE 的浏览器中有效的其他值还有”application/javascript”和”application/ecmascript”。如果这个值是 module，则代码会被当成 ES6 模块，而且只有这时候代码中才能出现 import 和 export 关键字。使用script的方式有两种：通过它直接在网页中嵌入 JavaScript 代码，以及通过它在网页中包含外部 JavaScript 文件。"></a>8. type：可选。代替 language，表示代码块中脚本语言的内容类型（也称 MIME 类型）。按照惯例，这个值始终都是”text/javascript”，尽管”text/javascript”和”text/ecmascript”都已经废弃了。JavaScript 文件的 MIME 类型通常是”application/x-javascript”，不过给type 属性这个值有可能导致脚本被忽略。在非 IE 的浏览器中有效的其他值还有”application/javascript”和”application/ecmascript”。如果这个值是 module，则代码会被当成 ES6 模块，而且只有这时候代码中才能出现 import 和 export 关键字。使用script的方式有两种：通过它直接在网页中嵌入 JavaScript 代码，以及通过它在网页中包含外部 JavaScript 文件。</h5><hr><h1 id="语言基础"><a href="#语言基础" class="headerlink" title="语言基础"></a>语言基础</h1><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><h5 id="ECMAScript-的语法很大程度上借鉴了-C-语言和其他类-C-语言，如-Java-和-Perl。熟悉这些语言的开发者，应该很容易理解-ECMAScript-宽松的语法"><a href="#ECMAScript-的语法很大程度上借鉴了-C-语言和其他类-C-语言，如-Java-和-Perl。熟悉这些语言的开发者，应该很容易理解-ECMAScript-宽松的语法" class="headerlink" title="ECMAScript 的语法很大程度上借鉴了 C 语言和其他类 C 语言，如 Java 和 Perl。熟悉这些语言的开发者，应该很容易理解 ECMAScript 宽松的语法"></a>ECMAScript 的语法很大程度上借鉴了 C 语言和其他类 C 语言，如 Java 和 Perl。熟悉这些语言的开发者，应该很容易理解 ECMAScript 宽松的语法</h5><h3 id="区分大小写"><a href="#区分大小写" class="headerlink" title="区分大小写"></a>区分大小写</h3><h5 id="首先要知道的是，ECMAScript-中一切都区分大小写。无论是变量、函数名还是操作符，都区分大小写。换句话说，变量-test-和变量-Test-是两个不同的变量。类似地，typeof-不能作为函数名，因为它是一个关键字（后面会介绍）。但-Typeof-是一个完全有效的函数名。"><a href="#首先要知道的是，ECMAScript-中一切都区分大小写。无论是变量、函数名还是操作符，都区分大小写。换句话说，变量-test-和变量-Test-是两个不同的变量。类似地，typeof-不能作为函数名，因为它是一个关键字（后面会介绍）。但-Typeof-是一个完全有效的函数名。" class="headerlink" title="首先要知道的是，ECMAScript 中一切都区分大小写。无论是变量、函数名还是操作符，都区分大小写。换句话说，变量 test 和变量 Test 是两个不同的变量。类似地，typeof 不能作为函数名，因为它是一个关键字（后面会介绍）。但 Typeof 是一个完全有效的函数名。"></a>首先要知道的是，ECMAScript 中一切都区分大小写。无论是变量、函数名还是操作符，都区分大小写。换句话说，变量 test 和变量 Test 是两个不同的变量。类似地，typeof 不能作为函数名，因为它是一个关键字（后面会介绍）。但 Typeof 是一个完全有效的函数名。</h5><h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><h5 id="第一个字符必须是一个字母、下划线（-）或美元符号（-）；"><a href="#第一个字符必须是一个字母、下划线（-）或美元符号（-）；" class="headerlink" title="第一个字符必须是一个字母、下划线（_）或美元符号（$）；"></a>第一个字符必须是一个字母、下划线（_）或美元符号（$）；</h5><h5 id="剩下的其他字符可以是字母、下划线、美元符号或数字。"><a href="#剩下的其他字符可以是字母、下划线、美元符号或数字。" class="headerlink" title="剩下的其他字符可以是字母、下划线、美元符号或数字。"></a>剩下的其他字符可以是字母、下划线、美元符号或数字。</h5><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><h5 id="ECMAScript-采用-C-语言风格的注释，包括单行注释和块注释。单行注释以两个斜杠字符开头，如：-单行注释"><a href="#ECMAScript-采用-C-语言风格的注释，包括单行注释和块注释。单行注释以两个斜杠字符开头，如：-单行注释" class="headerlink" title="ECMAScript 采用 C 语言风格的注释，包括单行注释和块注释。单行注释以两个斜杠字符开头，如：// 单行注释"></a>ECMAScript 采用 C 语言风格的注释，包括单行注释和块注释。单行注释以两个斜杠字符开头，如：// 单行注释</h5><h5 id="块注释以一个斜杠和一个星号（-）开头，以它们的反向组合（-）结尾，如：-这是多行注释"><a href="#块注释以一个斜杠和一个星号（-）开头，以它们的反向组合（-）结尾，如：-这是多行注释" class="headerlink" title="块注释以一个斜杠和一个星号（/）开头，以它们的反向组合（/）结尾，如：/* 这是多行注释 */"></a>块注释以一个斜杠和一个星号（/<em>）开头，以它们的反向组合（</em>/）结尾，如：/* 这是多行注释 */</h5><h3 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h3><h5 id="ECMAScript-5-增加了严格模式（strict-mode）的概念。严格模式是一种不同的-JavaScript-解析和执行模型，ECMAScript-3-的一些不规范写法在这种模式下会被处理，对于不安全的活动将抛出错误。"><a href="#ECMAScript-5-增加了严格模式（strict-mode）的概念。严格模式是一种不同的-JavaScript-解析和执行模型，ECMAScript-3-的一些不规范写法在这种模式下会被处理，对于不安全的活动将抛出错误。" class="headerlink" title="ECMAScript 5 增加了严格模式（strict mode）的概念。严格模式是一种不同的 JavaScript 解析和执行模型，ECMAScript 3 的一些不规范写法在这种模式下会被处理，对于不安全的活动将抛出错误。"></a>ECMAScript 5 增加了严格模式（strict mode）的概念。严格模式是一种不同的 JavaScript 解析和执行模型，ECMAScript 3 的一些不规范写法在这种模式下会被处理，对于不安全的活动将抛出错误。</h5><h5 id="严格模式会影响-JavaScript-执行的很多方面，因此本书在用到它时会明确指出来。所有现代浏览器都支持严格模式。"><a href="#严格模式会影响-JavaScript-执行的很多方面，因此本书在用到它时会明确指出来。所有现代浏览器都支持严格模式。" class="headerlink" title="严格模式会影响 JavaScript 执行的很多方面，因此本书在用到它时会明确指出来。所有现代浏览器都支持严格模式。"></a>严格模式会影响 JavaScript 执行的很多方面，因此本书在用到它时会明确指出来。所有现代浏览器都支持严格模式。</h5><h3 id="noscript元素"><a href="#noscript元素" class="headerlink" title="noscript元素"></a>noscript元素</h3><h5 id="针对早期浏览器不支持-JavaScript-的问题，需要一个页面优雅降级的处理方案。最终，noscript元素出现，被用于给不支持-JavaScript-的浏览器提供替代内容。虽然如今的浏览器已经-100-支持JavaScript，但对于禁用-JavaScript-的浏览器来说，这个元素仍然有它的用处。"><a href="#针对早期浏览器不支持-JavaScript-的问题，需要一个页面优雅降级的处理方案。最终，noscript元素出现，被用于给不支持-JavaScript-的浏览器提供替代内容。虽然如今的浏览器已经-100-支持JavaScript，但对于禁用-JavaScript-的浏览器来说，这个元素仍然有它的用处。" class="headerlink" title="针对早期浏览器不支持 JavaScript 的问题，需要一个页面优雅降级的处理方案。最终，noscript元素出现，被用于给不支持 JavaScript 的浏览器提供替代内容。虽然如今的浏览器已经 100%支持JavaScript，但对于禁用 JavaScript 的浏览器来说，这个元素仍然有它的用处。"></a>针对早期浏览器不支持 JavaScript 的问题，需要一个页面优雅降级的处理方案。最终，noscript元素出现，被用于给不支持 JavaScript 的浏览器提供替代内容。虽然如今的浏览器已经 100%支持JavaScript，但对于禁用 JavaScript 的浏览器来说，这个元素仍然有它的用处。</h5><h5 id="noscript元素可以包含任何可以出现在body中的-HTML-元素，script除外。在下列两种情况下，浏览器将显示包含在noscript中的内容："><a href="#noscript元素可以包含任何可以出现在body中的-HTML-元素，script除外。在下列两种情况下，浏览器将显示包含在noscript中的内容：" class="headerlink" title="noscript元素可以包含任何可以出现在body中的 HTML 元素，script除外。在下列两种情况下，浏览器将显示包含在noscript中的内容："></a>noscript元素可以包含任何可以出现在body中的 HTML 元素，script除外。在下列两种情况下，浏览器将显示包含在noscript中的内容：</h5><h6 id="-浏览器不支持脚本；"><a href="#-浏览器不支持脚本；" class="headerlink" title=" 浏览器不支持脚本；"></a> 浏览器不支持脚本；</h6><h6 id="-浏览器对脚本的支持被关闭。"><a href="#-浏览器对脚本的支持被关闭。" class="headerlink" title=" 浏览器对脚本的支持被关闭。"></a> 浏览器对脚本的支持被关闭。</h6><h5 id="任何一个条件被满足，包含在noscript中的内容就会被渲染。否则，浏览器不会渲染noscript中的内容。"><a href="#任何一个条件被满足，包含在noscript中的内容就会被渲染。否则，浏览器不会渲染noscript中的内容。" class="headerlink" title="任何一个条件被满足，包含在noscript中的内容就会被渲染。否则，浏览器不会渲染noscript中的内容。"></a>任何一个条件被满足，包含在noscript中的内容就会被渲染。否则，浏览器不会渲染noscript中的内容。</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">title</span>&gt;</span>Example HTML Page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">defer</span>=<span class="string">&quot;defer&quot;</span> <span class="attr">src</span>=<span class="string">&quot;example1.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">defer</span>=<span class="string">&quot;defer&quot;</span> <span class="attr">src</span>=<span class="string">&quot;example2.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">noscript</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">p</span>&gt;</span>This page requires a JavaScript-enabled browser.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="这个例子是在脚本不可用时让浏览器显示一段话。如果浏览器支持脚本，则用户永远不会看到它。"><a href="#这个例子是在脚本不可用时让浏览器显示一段话。如果浏览器支持脚本，则用户永远不会看到它。" class="headerlink" title="这个例子是在脚本不可用时让浏览器显示一段话。如果浏览器支持脚本，则用户永远不会看到它。"></a>这个例子是在脚本不可用时让浏览器显示一段话。如果浏览器支持脚本，则用户永远不会看到它。</h5>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JavaScript&quot;&gt;&lt;a href=&quot;#JavaScript&quot; class=&quot;headerlink&quot; title=&quot;JavaScript&quot;&gt;&lt;/a&gt;JavaScript&lt;/h1&gt;&lt;h2 id=&quot;虽然-JavaScript和-ECMAScript-基本上是同义词</summary>
      
    
    
    
    <category term="JavaScript红宝书" scheme="http://example.com/categories/JavaScript%E7%BA%A2%E5%AE%9D%E4%B9%A6/"/>
    
    
    <category term="JavaScript简介" scheme="http://example.com/tags/JavaScript%E7%AE%80%E4%BB%8B/"/>
    
  </entry>
  
  <entry>
    <title>移动端web开发之项目的属性</title>
    <link href="http://example.com/2020/03/20/%E7%A7%BB%E5%8A%A8web3/"/>
    <id>http://example.com/2020/03/20/%E7%A7%BB%E5%8A%A8web3/</id>
    <published>2020-03-20T05:06:43.000Z</published>
    <updated>2020-10-07T16:41:48.321Z</updated>
    
    <content type="html"><![CDATA[<h1 id="order"><a href="#order" class="headerlink" title="order"></a>order</h1><h2 id="order定义项目排序"><a href="#order定义项目排序" class="headerlink" title="order定义项目排序"></a>order定义项目排序</h2><h2 id="数值越小，排列越靠前，默认为0"><a href="#数值越小，排列越靠前，默认为0" class="headerlink" title="数值越小，排列越靠前，默认为0"></a>数值越小，排列越靠前，默认为0</h2><p><img src="https://s1.ax1x.com/2020/10/08/0wpXAU.png"></p><hr><h1 id="flex-grow"><a href="#flex-grow" class="headerlink" title="flex-grow"></a>flex-grow</h1><h2 id="定义项目放大比例，默认都为0，如果剩余空间大，也不放大"><a href="#定义项目放大比例，默认都为0，如果剩余空间大，也不放大" class="headerlink" title="定义项目放大比例，默认都为0，如果剩余空间大，也不放大"></a>定义项目放大比例，默认都为0，如果剩余空间大，也不放大</h2><h2 id="数值越小，排列越靠前，默认为0-1"><a href="#数值越小，排列越靠前，默认为0-1" class="headerlink" title="数值越小，排列越靠前，默认为0"></a>数值越小，排列越靠前，默认为0</h2><p><img src="https://s1.ax1x.com/2020/10/08/0w9ngA.png"><br><img src="https://s1.ax1x.com/2020/10/08/0w9Mut.png"><br><img src="https://s1.ax1x.com/2020/10/08/0w93E8.png"></p><hr><h1 id="flex-shrink"><a href="#flex-shrink" class="headerlink" title="flex-shrink"></a>flex-shrink</h1><h2 id="定义项目的缩小比例，默认为1，如果空间不足，该项目会缩小。"><a href="#定义项目的缩小比例，默认为1，如果空间不足，该项目会缩小。" class="headerlink" title="定义项目的缩小比例，默认为1，如果空间不足，该项目会缩小。"></a>定义项目的缩小比例，默认为1，如果空间不足，该项目会缩小。</h2><p><img src="https://s1.ax1x.com/2020/10/08/0w9wD0.png"></p><hr><h1 id="flex-basis"><a href="#flex-basis" class="headerlink" title="flex-basis"></a>flex-basis</h1><h2 id="定义项目的在分配多余空间之前，项目沾主轴空间，浏览器根据这个属性计算是否有多余空间"><a href="#定义项目的在分配多余空间之前，项目沾主轴空间，浏览器根据这个属性计算是否有多余空间" class="headerlink" title="定义项目的在分配多余空间之前，项目沾主轴空间，浏览器根据这个属性计算是否有多余空间"></a>定义项目的在分配多余空间之前，项目沾主轴空间，浏览器根据这个属性计算是否有多余空间</h2><p><img src="https://s1.ax1x.com/2020/10/08/0wC6df.png"></p><hr><h1 id="align-self"><a href="#align-self" class="headerlink" title="align-self"></a>align-self</h1><h2 id="定义项目单个项目与其他不一样的对齐方式，可覆盖align-item属性"><a href="#定义项目单个项目与其他不一样的对齐方式，可覆盖align-item属性" class="headerlink" title="定义项目单个项目与其他不一样的对齐方式，可覆盖align-item属性"></a>定义项目单个项目与其他不一样的对齐方式，可覆盖align-item属性</h2><p><img src="https://s1.ax1x.com/2020/10/08/0wCILq.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;order&quot;&gt;&lt;a href=&quot;#order&quot; class=&quot;headerlink&quot; title=&quot;order&quot;&gt;&lt;/a&gt;order&lt;/h1&gt;&lt;h2 id=&quot;order定义项目排序&quot;&gt;&lt;a href=&quot;#order定义项目排序&quot; class=&quot;headerlink</summary>
      
    
    
    
    <category term="移动端web" scheme="http://example.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AFweb/"/>
    
    
  </entry>
  
  <entry>
    <title>移动端web开发之Flex</title>
    <link href="http://example.com/2020/03/19/%E7%A7%BB%E5%8A%A8web2/"/>
    <id>http://example.com/2020/03/19/%E7%A7%BB%E5%8A%A8web2/</id>
    <published>2020-03-19T05:06:43.000Z</published>
    <updated>2020-10-07T16:02:28.366Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是Flex布局"><a href="#什么是Flex布局" class="headerlink" title="什么是Flex布局"></a>什么是Flex布局</h1><h2 id="Flex是Flexible-Box的缩写，意为“灵活的盒子”或者“弹性的盒子”，所以flex布局也叫弹性布局"><a href="#Flex是Flexible-Box的缩写，意为“灵活的盒子”或者“弹性的盒子”，所以flex布局也叫弹性布局" class="headerlink" title="Flex是Flexible Box的缩写，意为“灵活的盒子”或者“弹性的盒子”，所以flex布局也叫弹性布局"></a>Flex是Flexible Box的缩写，意为“灵活的盒子”或者“弹性的盒子”，所以flex布局也叫弹性布局</h2><hr><h2 id="什么是flex容器"><a href="#什么是flex容器" class="headerlink" title="什么是flex容器"></a>什么是flex容器</h2><h3 id="采用flex布局的元素，称之为flex容器"><a href="#采用flex布局的元素，称之为flex容器" class="headerlink" title="采用flex布局的元素，称之为flex容器"></a>采用flex布局的元素，称之为flex容器</h3><h3 id="box-dispaly：flex-inline-flex"><a href="#box-dispaly：flex-inline-flex" class="headerlink" title=".box{dispaly：flex|inline-flex}"></a>.box{dispaly：flex|inline-flex}</h3><hr><h1 id="容器的属性"><a href="#容器的属性" class="headerlink" title="容器的属性"></a>容器的属性</h1><h2 id="display-决定使用flex布局"><a href="#display-决定使用flex布局" class="headerlink" title="display 决定使用flex布局"></a>display 决定使用flex布局</h2><h3 id="display：flex-与inline-flex"><a href="#display：flex-与inline-flex" class="headerlink" title="display：flex|与inline-flex"></a>display：flex|与inline-flex</h3><p><img src="https://s1.ax1x.com/2020/10/06/0U5NUU.png"></p><h3 id="设置成flex这个父容器是有固定宽度的"><a href="#设置成flex这个父容器是有固定宽度的" class="headerlink" title="设置成flex这个父容器是有固定宽度的"></a>设置成flex这个父容器是有固定宽度的</h3><h3 id="设置成inline-flex呢-是里面内容撑开的"><a href="#设置成inline-flex呢-是里面内容撑开的" class="headerlink" title="设置成inline-flex呢  是里面内容撑开的"></a>设置成inline-flex呢  是里面内容撑开的</h3><p><img src="https://s1.ax1x.com/2020/10/06/0U5cVK.png"></p><hr><h2 id="flex-direction属性"><a href="#flex-direction属性" class="headerlink" title="flex-direction属性"></a>flex-direction属性</h2><h2 id="flex-direction-row-默认值-row-reverse-倒着排序-column上下正序-column-reseverse上下倒叙"><a href="#flex-direction-row-默认值-row-reverse-倒着排序-column上下正序-column-reseverse上下倒叙" class="headerlink" title="flex-direction:row 默认值|row-reverse 倒着排序|column上下正序|column-reseverse上下倒叙;"></a>flex-direction:row 默认值|row-reverse 倒着排序|column上下正序|column-reseverse上下倒叙;</h2><p><img src="https://s1.ax1x.com/2020/10/06/0UIOw6.png"><br><img src="https://s1.ax1x.com/2020/10/06/0UonpQ.png"><br><img src="https://s1.ax1x.com/2020/10/06/0Uo37V.png"></p><hr><h2 id="flex-wrap属性"><a href="#flex-wrap属性" class="headerlink" title="flex-wrap属性"></a>flex-wrap属性</h2><h2 id="flex-wrap：nowrap-默认值-wrap-换行在第一行上方-wrap-reverse-换行-在第一行下方"><a href="#flex-wrap：nowrap-默认值-wrap-换行在第一行上方-wrap-reverse-换行-在第一行下方" class="headerlink" title="flex-wrap：nowrap 默认值|wrap 换行在第一行上方|wrap-reverse 换行 在第一行下方"></a>flex-wrap：nowrap 默认值|wrap 换行在第一行上方|wrap-reverse 换行 在第一行下方</h2><p><img src="https://s1.ax1x.com/2020/10/07/0UTQ8e.png"></p><hr><h2 id="justify-content属性"><a href="#justify-content属性" class="headerlink" title="justify-content属性"></a>justify-content属性</h2><h2 id="justify-content属性定义了项目在主轴上的对其方式"><a href="#justify-content属性定义了项目在主轴上的对其方式" class="headerlink" title="justify-content属性定义了项目在主轴上的对其方式"></a>justify-content属性定义了项目在主轴上的对其方式</h2><h2 id="justify-content属性值分别是flex-start左对齐-felx-end右对齐-center居中-space-between两端对齐项目之间间隔相等-space-around每个项目两侧间隔相等。"><a href="#justify-content属性值分别是flex-start左对齐-felx-end右对齐-center居中-space-between两端对齐项目之间间隔相等-space-around每个项目两侧间隔相等。" class="headerlink" title="justify-content属性值分别是flex-start左对齐|felx-end右对齐|center居中|space-between两端对齐项目之间间隔相等|space-around每个项目两侧间隔相等。"></a>justify-content属性值分别是flex-start左对齐|felx-end右对齐|center居中|space-between两端对齐项目之间间隔相等|space-around每个项目两侧间隔相等。</h2><p><img src="https://s1.ax1x.com/2020/10/07/0dxQFH.png"></p><hr><h2 id="align-items属性"><a href="#align-items属性" class="headerlink" title="align-items属性"></a>align-items属性</h2><h2 id="align-items属性定义项目在交叉轴上如何对齐"><a href="#align-items属性定义项目在交叉轴上如何对齐" class="headerlink" title="align-items属性定义项目在交叉轴上如何对齐"></a>align-items属性定义项目在交叉轴上如何对齐</h2><h2 id="align-items属性flex-start交叉轴起点对齐-felx-end交叉轴终点对齐-center交叉轴中点对齐-baseline项目的文字基线对齐-stretch每个字将沾满容器高度"><a href="#align-items属性flex-start交叉轴起点对齐-felx-end交叉轴终点对齐-center交叉轴中点对齐-baseline项目的文字基线对齐-stretch每个字将沾满容器高度" class="headerlink" title="align-items属性flex-start交叉轴起点对齐|felx-end交叉轴终点对齐|center交叉轴中点对齐|baseline项目的文字基线对齐|stretch每个字将沾满容器高度"></a>align-items属性flex-start交叉轴起点对齐|felx-end交叉轴终点对齐|center交叉轴中点对齐|baseline项目的文字基线对齐|stretch每个字将沾满容器高度</h2><p><img src="https://s1.ax1x.com/2020/10/07/0dzt3R.png"><br><img src="https://s1.ax1x.com/2020/10/07/0dzwDK.png"><br><img src="https://s1.ax1x.com/2020/10/07/0dzDED.png"><br><img src="https://s1.ax1x.com/2020/10/07/0dzrUe.png"><br><img src="https://s1.ax1x.com/2020/10/07/0dzc8A.png"></p><hr><h2 id="align-content属性"><a href="#align-content属性" class="headerlink" title="align-content属性"></a>align-content属性</h2><h2 id="align-items属性定义多根轴线的对齐方式"><a href="#align-items属性定义多根轴线的对齐方式" class="headerlink" title="align-items属性定义多根轴线的对齐方式"></a>align-items属性定义多根轴线的对齐方式</h2><h2 id="align-items属性flex-start交叉轴起点对齐-felx-end交叉轴终点对齐-center交叉轴中点对齐-space-between上下平均分布-space-around每根轴线两端距离相等-stretch每个字将沾满容器高度"><a href="#align-items属性flex-start交叉轴起点对齐-felx-end交叉轴终点对齐-center交叉轴中点对齐-space-between上下平均分布-space-around每根轴线两端距离相等-stretch每个字将沾满容器高度" class="headerlink" title="align-items属性flex-start交叉轴起点对齐|felx-end交叉轴终点对齐|center交叉轴中点对齐|space-between上下平均分布|space-around每根轴线两端距离相等|stretch每个字将沾满容器高度"></a>align-items属性flex-start交叉轴起点对齐|felx-end交叉轴终点对齐|center交叉轴中点对齐|space-between上下平均分布|space-around每根轴线两端距离相等|stretch每个字将沾满容器高度</h2><p><img src="https://s1.ax1x.com/2020/10/07/0wSuPH.png"><br><img src="https://s1.ax1x.com/2020/10/07/0wS1Mt.png"><br><img src="https://s1.ax1x.com/2020/10/07/0wSaGj.png"><br><img src="https://s1.ax1x.com/2020/10/07/0wSrLV.png"><br><img src="https://s1.ax1x.com/2020/10/07/0wSWW9.png"><br><img src="https://s1.ax1x.com/2020/10/08/0wSLJH.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;什么是Flex布局&quot;&gt;&lt;a href=&quot;#什么是Flex布局&quot; class=&quot;headerlink&quot; title=&quot;什么是Flex布局&quot;&gt;&lt;/a&gt;什么是Flex布局&lt;/h1&gt;&lt;h2 id=&quot;Flex是Flexible-Box的缩写，意为“灵活的盒子”或者“弹性的盒</summary>
      
    
    
    
    <category term="移动端web" scheme="http://example.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AFweb/"/>
    
    
  </entry>
  
  <entry>
    <title>移动端web开发之基础</title>
    <link href="http://example.com/2020/03/18/%E7%A7%BB%E5%8A%A8web1/"/>
    <id>http://example.com/2020/03/18/%E7%A7%BB%E5%8A%A8web1/</id>
    <published>2020-03-18T05:06:43.000Z</published>
    <updated>2020-10-05T15:25:32.847Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是移动端？"><a href="#什么是移动端？" class="headerlink" title="什么是移动端？"></a>什么是移动端？</h1><h3 id="手机-平板电脑"><a href="#手机-平板电脑" class="headerlink" title="手机   平板电脑"></a>手机   平板电脑</h3><h2 id=""><a href="#" class="headerlink" title=""></a><img src="https://iknow-pic.cdn.bcebos.com/0ff41bd5ad6eddc44bf32e9a37dbb6fd526633be?x-bce-process=image/resize,m_lfit,w_600,h_800,limit_1"></h2><h1 id="移动端web要点"><a href="#移动端web要点" class="headerlink" title="移动端web要点"></a>移动端web要点</h1><h2 id="1-移动端事件"><a href="#1-移动端事件" class="headerlink" title="1.移动端事件"></a>1.移动端事件</h2><h2 id="2-移动端调试"><a href="#2-移动端调试" class="headerlink" title="2.移动端调试"></a>2.移动端调试</h2><h2 id="3-终端检测"><a href="#3-终端检测" class="headerlink" title="3.终端检测"></a>3.终端检测</h2><h2 id="4-移动端常见问题"><a href="#4-移动端常见问题" class="headerlink" title="4.移动端常见问题"></a>4.移动端常见问题</h2><h2 id="5-移动性能优化"><a href="#5-移动性能优化" class="headerlink" title="5.移动性能优化"></a>5.移动性能优化</h2><hr><h1 id="CSS像素"><a href="#CSS像素" class="headerlink" title="CSS像素"></a>CSS像素</h1><h2 id="CSS像素-1"><a href="#CSS像素-1" class="headerlink" title="CSS像素"></a>CSS像素</h2><h2 id="逻辑像素-logical-pixel"><a href="#逻辑像素-logical-pixel" class="headerlink" title="逻辑像素(logical pixel)"></a>逻辑像素(logical pixel)</h2><h2 id="设备独立像素-dpi-device-independent-pixel"><a href="#设备独立像素-dpi-device-independent-pixel" class="headerlink" title="设备独立像素(dpi:device independent pixel)"></a>设备独立像素(dpi:device independent pixel)</h2><hr><h1 id="视口-viewport"><a href="#视口-viewport" class="headerlink" title="视口-viewport"></a>视口-viewport</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meat</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="缩放比"><a href="#缩放比" class="headerlink" title="缩放比"></a>缩放比</h2><h3 id="1不需要缩放-宽和设备的宽相等不需要缩放"><a href="#1不需要缩放-宽和设备的宽相等不需要缩放" class="headerlink" title="=1不需要缩放  宽和设备的宽相等不需要缩放"></a>=1不需要缩放  宽和设备的宽相等不需要缩放</h3><h3 id="0-5倍缩放时-物理像素会变大-保证总数不变"><a href="#0-5倍缩放时-物理像素会变大-保证总数不变" class="headerlink" title="0.5倍缩放时  物理像素会变大 保证总数不变"></a>0.5倍缩放时  物理像素会变大 保证总数不变</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meat</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;initial-scale=1&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="兼容各个浏览器"><a href="#兼容各个浏览器" class="headerlink" title="兼容各个浏览器"></a>兼容各个浏览器</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meat</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width,initial-scale=1&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="user-scalable-用户是否可以缩放-yes是可以-no是不可以"><a href="#user-scalable-用户是否可以缩放-yes是可以-no是不可以" class="headerlink" title="user-scalable 用户是否可以缩放 yes是可以  no是不可以"></a>user-scalable 用户是否可以缩放 yes是可以  no是不可以</h3><h3 id="user-scalable-no-maximum-scale-1-minimum-scale-1"><a href="#user-scalable-no-maximum-scale-1-minimum-scale-1" class="headerlink" title="user-scalable=no === maximum-scale=1,minimum-scale=1"></a>user-scalable=no === maximum-scale=1,minimum-scale=1</h3><h3 id="兼容各个浏览器-1"><a href="#兼容各个浏览器-1" class="headerlink" title="兼容各个浏览器"></a>兼容各个浏览器</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meat</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width,initial-scale=1,user-scalable=no,maximum-scale=1,minimum-scale=1&quot;</span> &gt;</span></span><br></pre></td></tr></table></figure><h2 id="如何获取用户视口？"><a href="#如何获取用户视口？" class="headerlink" title="如何获取用户视口？"></a>如何获取用户视口？</h2><h2 id="-1"><a href="#-1" class="headerlink" title=""></a><img src="https://s1.ax1x.com/2020/10/05/0tdIPg.png"></h2><h1 id="box-sizing"><a href="#box-sizing" class="headerlink" title="box-sizing"></a>box-sizing</h1><h2 id="PC端会考虑兼容性-移动端不会考虑兼容性"><a href="#PC端会考虑兼容性-移动端不会考虑兼容性" class="headerlink" title="PC端会考虑兼容性  移动端不会考虑兼容性"></a>PC端会考虑兼容性  移动端不会考虑兼容性</h2><h2 id="box-sizing-content-box-内容的宽高表示不变-向外扩张"><a href="#box-sizing-content-box-内容的宽高表示不变-向外扩张" class="headerlink" title="box-sizing:content-box 内容的宽高表示不变 (向外扩张)"></a>box-sizing:content-box 内容的宽高表示不变 (向外扩张)</h2><h2 id="box-sizing-border-box-内容的宽高开始从内容border开始计算，简而言之是把border包括在里面了-向内压缩"><a href="#box-sizing-border-box-内容的宽高开始从内容border开始计算，简而言之是把border包括在里面了-向内压缩" class="headerlink" title="box-sizing:border-box 内容的宽高开始从内容border开始计算，简而言之是把border包括在里面了(向内压缩)"></a>box-sizing:border-box 内容的宽高开始从内容border开始计算，简而言之是把border包括在里面了(向内压缩)</h2><p><img src="https://s1.ax1x.com/2020/10/05/0twwyn.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;什么是移动端？&quot;&gt;&lt;a href=&quot;#什么是移动端？&quot; class=&quot;headerlink&quot; title=&quot;什么是移动端？&quot;&gt;&lt;/a&gt;什么是移动端？&lt;/h1&gt;&lt;h3 id=&quot;手机-平板电脑&quot;&gt;&lt;a href=&quot;#手机-平板电脑&quot; class=&quot;headerlink</summary>
      
    
    
    
    <category term="移动端web" scheme="http://example.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AFweb/"/>
    
    
  </entry>
  
  <entry>
    <title>前端面试题系列1</title>
    <link href="http://example.com/2018/08/04/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E7%B3%BB%E5%88%97/"/>
    <id>http://example.com/2018/08/04/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E7%B3%BB%E5%88%97/</id>
    <published>2018-08-04T14:06:43.000Z</published>
    <updated>2019-08-04T15:09:39.693Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-如何理解移动端上的点击穿透？"><a href="#1-如何理解移动端上的点击穿透？" class="headerlink" title="1. 如何理解移动端上的点击穿透？"></a>1. 如何理解移动端上的点击穿透？</h3><h4 id="点击穿透现象有3种："><a href="#点击穿透现象有3种：" class="headerlink" title="点击穿透现象有3种："></a>点击穿透现象有3种：</h4><ol><li>点击蒙层（mask）上的关闭按钮，蒙层消失后发现触发了按钮下面元素的click事件；</li><li>（跨页面）如果按钮下面恰好是一个有href属性的a标签，那么页面就会发生跳转；</li><li>（跨页面）这次没有mask了，直接点击页内按钮跳转至新页，然后发现新页面中对应位置元素的click事件被触发了</li></ol><p>解决方案：</p><ol><li><p>只用touch<br>最简单的解决方案，完美解决点击穿透问题<br>把页面内所有click全部换成touch事件（ touchstart 、’touchend’、’tap’）；</p></li><li><p>只用click<br>下下策，因为会带来300ms延迟，页面内任何一个自定义交互都将增加300毫秒延迟；</p></li><li><p>tap后延迟350ms再隐藏mask<br>改动最小，缺点是隐藏mask变慢了，350ms还是能感觉到慢的；</p></li><li><p>pointer-events<br>比较麻烦且有缺陷， 不建议使用mask隐藏后，给按钮下面元素添上 pointer-events: none; 样式，让click穿过去，350ms后去掉这个样式，恢复响应缺陷是mask消失后的的350ms内，用户可以看到按钮下面的元素点着没反应，如果用户手速很快的话一定会发现。</p></li></ol><h3 id="2-尝试实现-双向绑定"><a href="#2-尝试实现-双向绑定" class="headerlink" title="2. 尝试实现 双向绑定"></a>2. 尝试实现 双向绑定</h3><p>HTML 部分：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;txt&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;show-txt&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>JS 部分：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">&#x27;txt&#x27;</span>, &#123;</span><br><span class="line">  get: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> obj</span><br><span class="line">  &#125;,</span><br><span class="line">  set: <span class="function"><span class="keyword">function</span> (<span class="params">newValue</span>) </span>&#123;</span><br><span class="line">     <span class="built_in">document</span>.getElementById(<span class="string">&#x27;txt&#x27;</span>).value = newValue</span><br><span class="line">     <span class="built_in">document</span>.getElementById(<span class="string">&#x27;show-txt&#x27;</span>).innerHTML = newValue</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">&#x27;keyup&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  obj.txt = e.target.value</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="3-简述-AJAX-执行流程"><a href="#3-简述-AJAX-执行流程" class="headerlink" title="3.简述 AJAX 执行流程"></a>3.简述 AJAX 执行流程</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr =<span class="literal">null</span>; <span class="comment">// 创建对象 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">window</span>.XMLHttpRequest)&#123;</span><br><span class="line">  xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  xhr = <span class="keyword">new</span> ActiveXObject(<span class="string">&quot;Microsoft.XMLHTTP&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">xhr.open(<span class="string">&quot;method&quot;</span>, <span class="string">&quot;url&quot;</span>, <span class="string">&quot;async&quot;</span>); <span class="comment">// 初始化请求 </span></span><br><span class="line">xhr.setRequestHeader(<span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>); <span class="comment">// 设置http头信息 </span></span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;; <span class="comment">// 指定回调函数 </span></span><br><span class="line">xhr.send();<span class="comment">//发送请求</span></span><br></pre></td></tr></table></figure><h3 id="4-写出下列代码运行结果"><a href="#4-写出下列代码运行结果" class="headerlink" title="4.写出下列代码运行结果"></a>4.写出下列代码运行结果</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="number">1</span> &amp;&amp; <span class="number">2</span>)</span><br></pre></td></tr></table></figure><h3 id="5-写出下列代码运行结果"><a href="#5-写出下列代码运行结果" class="headerlink" title="5.写出下列代码运行结果"></a>5.写出下列代码运行结果</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>].map(<span class="built_in">parseInt</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-如何理解移动端上的点击穿透？&quot;&gt;&lt;a href=&quot;#1-如何理解移动端上的点击穿透？&quot; class=&quot;headerlink&quot; title=&quot;1. 如何理解移动端上的点击穿透？&quot;&gt;&lt;/a&gt;1. 如何理解移动端上的点击穿透？&lt;/h3&gt;&lt;h4 id=&quot;点击穿透现象有</summary>
      
    
    
    
    <category term="面试题" scheme="http://example.com/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>AJAX   JSON类型、跨域</title>
    <link href="http://example.com/2018/07/09/AJAX%20JSON%E7%B1%BB%E5%9E%8B%E3%80%81%E8%B7%A8%E5%9F%9F/"/>
    <id>http://example.com/2018/07/09/AJAX%20JSON%E7%B1%BB%E5%9E%8B%E3%80%81%E8%B7%A8%E5%9F%9F/</id>
    <published>2018-07-09T07:06:43.000Z</published>
    <updated>2019-07-17T08:30:28.104Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-1-JSON-格式数据类型"><a href="#1-1-JSON-格式数据类型" class="headerlink" title="1.1 JSON 格式数据类型"></a><strong>1.1 JSON 格式数据类型</strong></h3><h4 id="a：纯文本"><a href="#a：纯文本" class="headerlink" title="a：纯文本"></a>a：纯文本</h4><h4 id="b：文本网页（默认）"><a href="#b：文本网页（默认）" class="headerlink" title="b：文本网页（默认）"></a>b：文本网页（默认）</h4><h4 id="c：xml（旧行业标准）"><a href="#c：xml（旧行业标准）" class="headerlink" title="c：xml（旧行业标准）"></a>c：xml（旧行业标准）</h4><h4 id="d：javascript"><a href="#d：javascript" class="headerlink" title="d：javascript"></a>d：javascript</h4><h4 id="e：json（新行业标准）"><a href="#e：json（新行业标准）" class="headerlink" title="e：json（新行业标准）"></a>e：json（新行业标准）</h4><h4 id="json（工业标准：所有后台交互都是用json）：-ajax发送数据-格式-；json字符串数据格式，用于描述数据，简洁；（轻量级数据格式）"><a href="#json（工业标准：所有后台交互都是用json）：-ajax发送数据-格式-；json字符串数据格式，用于描述数据，简洁；（轻量级数据格式）" class="headerlink" title="json（工业标准：所有后台交互都是用json）：**ajax发送数据[格式]**；json字符串数据格式，用于描述数据，简洁；（轻量级数据格式）"></a><strong>json</strong>（工业标准：所有后台交互都是用json）：**ajax发送数据[格式]**；json字符串数据格式，用于描述数据，简洁；（轻量级数据格式）</h4><h4 id="xml重量级"><a href="#xml重量级" class="headerlink" title="xml重量级"></a><strong>xml重量级</strong></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?xml version=&quot;1.0&quot;encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">books</span>&gt;</span><span class="tag">&lt;<span class="name">book</span>&gt;</span><span class="tag">&lt;<span class="name">id</span>&gt;</span>101<span class="tag">&lt;/<span class="name">id</span>&gt;</span><span class="tag">&lt;/<span class="name">book</span>&gt;</span><span class="tag">&lt;/<span class="name">books</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h4 id="json轻量级-“name”-”tom”"><a href="#json轻量级-“name”-”tom”" class="headerlink" title="json轻量级 {“name”:”tom”}"></a><strong>json轻量级 {“name”:”tom”}</strong></h4><h4 id="概念：易于阅读和编写，行业内支持很普遍；"><a href="#概念：易于阅读和编写，行业内支持很普遍；" class="headerlink" title="概念：易于阅读和编写，行业内支持很普遍；"></a><strong>概念：易于阅读和编写，行业内支持很普遍；</strong></h4><h4 id="语法：基于js语言，但是目前被各种语言支持；"><a href="#语法：基于js语言，但是目前被各种语言支持；" class="headerlink" title="语法：基于js语言，但是目前被各种语言支持；"></a><strong>语法：基于js语言，但是目前被各种语言支持；</strong></h4><h4 id="成为一种“异构系统交互数据的标准格式”（可以跨平台使用）；"><a href="#成为一种“异构系统交互数据的标准格式”（可以跨平台使用）；" class="headerlink" title="成为一种“异构系统交互数据的标准格式”（可以跨平台使用）；"></a><strong>成为一种“异构系统交互数据的标准格式”（可以跨平台使用）；</strong></h4><p><strong>php&lt;– json –&gt;java</strong><br><strong>java&lt;– json –&gt;网银</strong></p><hr><h4 id="1-2-json-字符串-语法要求"><a href="#1-2-json-字符串-语法要求" class="headerlink" title="1.2 json{字符串}语法要求"></a><strong>1.2 json{字符串}语法要求</strong></h4><h5 id="1：一个json字符串有且只有一个根，可以是-；也可以是-对象"><a href="#1：一个json字符串有且只有一个根，可以是-；也可以是-对象" class="headerlink" title="1：一个json字符串有且只有一个根，可以是 ；也可以是{ }(对象)"></a><strong>1：一个json字符串有且只有一个根，可以是<a href="%E6%95%B0%E7%BB%84"> </a>；也可以是{ }(对象)</strong></h5><h5 id="2：json可以表示number，bool，null，字符串；字符串必须用双引号"><a href="#2：json可以表示number，bool，null，字符串；字符串必须用双引号" class="headerlink" title="2：json可以表示number，bool，null，字符串；字符串必须用双引号"></a><strong>2：json可以表示number，bool，null，字符串；字符串必须用双引号</strong></h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;“name”:”tom”,”age”:10,”set”:true&#125;</span><br></pre></td></tr></table></figure><h5 id="3：数组中可以包含多个值，使用逗号分隔，-10-20-304-1"><a href="#3：数组中可以包含多个值，使用逗号分隔，-10-20-304-1" class="headerlink" title="3：数组中可以包含多个值，使用逗号分隔，[10,20,304,1]"></a><strong>3：数组中可以包含多个值，使用逗号分隔，[10,20,304,1]</strong></h5><h5 id="4：对象中可以包含多个键值对，使用逗号分隔，键和值之间用冒号分隔，键必须是双引号"><a href="#4：对象中可以包含多个键值对，使用逗号分隔，键和值之间用冒号分隔，键必须是双引号" class="headerlink" title="4：对象中可以包含多个键值对，使用逗号分隔，键和值之间用冒号分隔，键必须是双引号"></a><strong>4：对象中可以包含多个键值对，使用逗号分隔，键和值之间用冒号分隔，键必须是双引号</strong></h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;“name”:”tom”,”age”:10&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="1-3-服务器端php中如何将数据转json字符串"><a href="#1-3-服务器端php中如何将数据转json字符串" class="headerlink" title="1.3 服务器端php中如何将数据转json字符串"></a><strong>1.3 服务器端php中如何将数据转json字符串</strong></h4><h4 id="php-array–-gt-json-string"><a href="#php-array–-gt-json-string" class="headerlink" title="php {array–&gt;json string}"></a><strong>php {array–&gt;json string}</strong></h4><h4 id="php函数：json-encode-索引数组、关联数组都能转换"><a href="#php函数：json-encode-索引数组、关联数组都能转换" class="headerlink" title="php函数：json_encode( );      索引数组、关联数组都能转换"></a><strong>php函数：json_encode( );      索引数组、关联数组都能转换</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$str =json_encode($arr);</span><br><span class="line">  echo $str;    由于发送json格式字符串，需要指定输出格式</span><br><span class="line"> header(“content-type:application/json;charset=utf<span class="number">-8</span>”);    </span><br></pre></td></tr></table></figure><p><img src="http://imagehosting.biz/images/2018/04/13/_20180413205218.jpg" alt="我是图片"></p><hr><h4 id="1-4-客户端将json字符串解析js对象"><a href="#1-4-客户端将json字符串解析js对象" class="headerlink" title="1.4 客户端将json字符串解析js对象"></a><strong>1.4 客户端将json字符串解析js对象</strong></h4><p><strong>html(json string–&gt;js object)</strong><br><strong>客户端浏览器 JSON.parse();</strong><br><strong>var result = JSON.parse(str);</strong><br><strong>result 已经是js对象[ ] / { }</strong></p><h4 id="简洁解决方式"><a href="#简洁解决方式" class="headerlink" title="简洁解决方式"></a><strong>简洁解决方式</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$.get();   自动json.parse( );</span><br><span class="line">$getJSON();        自动json.parse( );</span><br></pre></td></tr></table></figure><p><img src="http://imagehosting.biz/images/2018/04/13/_20180413205231.jpg" alt="我是图片"></p><p><strong>a：从数据库中一次性抓取全部表转二维数组</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ json = mysqli_fetch_all($result,MYSQLI_ASSOC)</span><br></pre></td></tr></table></figure><p><strong>b：jquery 循环函数   html += <code>;   </code> 来做循环</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.echo(data,function(i,obj)&#123; &#125;)</span><br></pre></td></tr></table></figure><p><img src="http://imagehosting.biz/images/2018/04/13/_20180413205237.jpg" alt="我是图片"><br><img src="http://imagehosting.biz/images/2018/04/13/_20180413205247.jpg" alt="我是图片"></p><h3 id="html-html代码段-可以在中间直接写代码段"><a href="#html-html代码段-可以在中间直接写代码段" class="headerlink" title="html +=html代码段;可以在中间直接写代码段"></a><strong>html +=<code>html代码段</code>;可以在中间直接写代码段</strong></h3><h4 id="2、跨域-CRoss-DominRquqest"><a href="#2、跨域-CRoss-DominRquqest" class="headerlink" title="2、跨域 CRoss DominRquqest"></a><strong>2、跨域 CRoss DominRquqest</strong></h4><h4 id="从一个域名下的某个资源访问另一个域名下的某个资源。"><a href="#从一个域名下的某个资源访问另一个域名下的某个资源。" class="headerlink" title="从一个域名下的某个资源访问另一个域名下的某个资源。"></a>从一个域名下的某个资源访问另一个域名下的某个资源。</h4><h4 id="示例：http-tmooc-cn-1-html"><a href="#示例：http-tmooc-cn-1-html" class="headerlink" title="示例：http://tmooc.cn/1.html"></a>示例：<a href="http://tmooc.cn/1.html">http://tmooc.cn/1.html</a></h4><h4 id="a-img-script-css-ajax-想访问百度的2-php"><a href="#a-img-script-css-ajax-想访问百度的2-php" class="headerlink" title="a img script css ajax 想访问百度的2.php"></a>a img script css ajax 想访问百度的2.php</h4><h4 id="访问：http-www-baidu-com-2-php"><a href="#访问：http-www-baidu-com-2-php" class="headerlink" title="访问：http://www.baidu.com/2.php"></a>访问：<a href="http://www.baidu.com/2.php">http://www.baidu.com/2.php</a></h4><h4 id="2-1跨域的种类-4种"><a href="#2-1跨域的种类-4种" class="headerlink" title="2.1跨域的种类 4种"></a><strong>2.1跨域的种类 4种</strong></h4><h4 id="1：两个域名不同"><a href="#1：两个域名不同" class="headerlink" title="1：两个域名不同"></a>1：两个域名不同</h4><h4 id="2：协议名不同-https-http"><a href="#2：协议名不同-https-http" class="headerlink" title="2：协议名不同     https  http"></a>2：协议名不同     https  http</h4><h4 id="3：主机名-ip不同"><a href="#3：主机名-ip不同" class="headerlink" title="3：主机名/ip不同"></a>3：主机名/ip不同</h4><h4 id="4：端口号不同"><a href="#4：端口号不同" class="headerlink" title="4：端口号不同"></a>4：端口号不同</h4><p><strong>报错提示：</strong><br><img src="http://imagehosting.biz/images/2018/04/13/_20180413210739.jpg" alt="我是图片"></p><h3 id="2-2浏览器允许跨域请求情形"><a href="#2-2浏览器允许跨域请求情形" class="headerlink" title="2.2浏览器允许跨域请求情形"></a><strong>2.2浏览器允许跨域请求情形</strong></h3><pre><code>**img/link/script/iframe ……**</code></pre><h3 id="2-3浏览器禁止跨域请求情形"><a href="#2-3浏览器禁止跨域请求情形" class="headerlink" title="2.3浏览器禁止跨域请求情形"></a><strong>2.3浏览器禁止跨域请求情形</strong></h3><p><strong>浏览器默认禁止XHR跨域请求，跨域访问可能导致外来的数据，对当前页面造成安全风险。</strong><br><strong>$.get(“<a href="http://www.baidu.com/1.php%E2%80%9D">www.baidu.com/1.php”</a>,);    从百度拿来的ajax数据可能对当前页面造成安全风险</strong></p><h3 id="2-4解决方案JSONP"><a href="#2-4解决方案JSONP" class="headerlink" title="2.4解决方案JSONP{ }"></a><strong>2.4解决方案JSONP{ }</strong></h3><h3 id="JSON-与-JSONP区别："><a href="#JSON-与-JSONP区别：" class="headerlink" title="JSON 与 JSONP区别："></a><strong>JSON 与 JSONP区别：</strong></h3><p><strong>JSON：是一种字符串数据格式，用于描述批量数据。</strong><br><strong>JSONP：JSON withPadding 填充式JSON：是一种使用JSON数据的方法，用于解决浏览器XHR跨域请求的限制。</strong></p><h3 id="JSONP解决思路："><a href="#JSONP解决思路：" class="headerlink" title="JSONP解决思路："></a><strong>JSONP解决思路：</strong></h3><h6 id="1：发起异步请求，不使用（XHR），使用一个动态创建的script标签，来替换XHR"><a href="#1：发起异步请求，不使用（XHR），使用一个动态创建的script标签，来替换XHR" class="headerlink" title="1：发起异步请求，不使用（XHR），使用一个动态创建的script标签，来替换XHR"></a><strong>1：发起异步请求，不使用（XHR），使用一个动态创建的script标签，来替换XHR</strong></h6><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=”跨域地址/.php”&gt;&lt;/script&gt; </span><br></pre></td></tr></table></figure><h6 id="2：要求服务器必须返回一段js片段"><a href="#2：要求服务器必须返回一段js片段" class="headerlink" title="2：要求服务器必须返回一段js片段"></a><strong>2：要求服务器必须返回一段js片段</strong></h6><p>   <strong>doResponse({“name”:”tom”,”age”:20});</strong></p><h6 id="3：客户端特意提供一个函数"><a href="#3：客户端特意提供一个函数" class="headerlink" title="3：客户端特意提供一个函数"></a><strong>3：客户端特意提供一个函数</strong></h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">function <span class="title">doResponse</span><span class="params">(data)</span></span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-1-JSON-格式数据类型&quot;&gt;&lt;a href=&quot;#1-1-JSON-格式数据类型&quot; class=&quot;headerlink&quot; title=&quot;1.1 JSON 格式数据类型&quot;&gt;&lt;/a&gt;&lt;strong&gt;1.1 JSON 格式数据类型&lt;/strong&gt;&lt;/h3&gt;&lt;h4 </summary>
      
    
    
    
    <category term="AJAX" scheme="http://example.com/categories/AJAX/"/>
    
    
  </entry>
  
</feed>
